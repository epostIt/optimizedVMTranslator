
// *********************************************************
// ASM File: vm_translator.asm
// *********************************************************


// *********************************************************
// BOOTSTRAP CODE:
// *********************************************************

@ 256                                        // ROM[00000]
D = A                                        // ROM[00001]
@ SP                                         // ROM[00002]
M = D                                        // ROM[00003]

// -------------------------------------
// CALL: Sys.init(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[00004]
D = A                                        // ROM[00005]
@ R13                                        // ROM[00006]
M = D                                        // ROM[00007]
// ---------------------------
// Push RA
@ ..BOOT..:0                                 // ROM[00008]
D = A                                        // ROM[00009]
// ---------------------------
// push D
@ SP                                         // ROM[00010]
AM = M+1                                     // ROM[00011]
A = A-1                                      // ROM[00012]
M = D                                        // ROM[00013]
// ---------------------------
// call
@ ..BOOT..:1                                 // ROM[00014]
D = A                                        // ROM[00015]
@ R15                                        // ROM[00016]
M = D                                        // ROM[00017]
@ :call                                      // ROM[00018]
0; JMP                                       // ROM[00019]
( ..BOOT..:1)
// ---------------------------
// goto functionName
@ Sys.init                                   // ROM[00020]
0; JMP                                       // ROM[00021]
// ---------------------------
// ( RA )
( ..BOOT..:0) 

// *********************************************************
// Translation of: ./Map.vm
// *********************************************************


// =========================================================
// FUNCTION: Map.new(2 locals)
// =========================================================

( Map.new )
// ---------------------------
// clear local segment
D = 0                                        // ROM[00022]
// ---------------------------
// push D
@ SP                                         // ROM[00023]
AM = M+1                                     // ROM[00024]
A = A-1                                      // ROM[00025]
M = D                                        // ROM[00026]
// ---------------------------
// push D
@ SP                                         // ROM[00027]
AM = M+1                                     // ROM[00028]
A = A-1                                      // ROM[00029]
M = D                                        // ROM[00030]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[00031]
D = A                                        // ROM[00032]
// ---------------------------
// push D
@ SP                                         // ROM[00033]
AM = M+1                                     // ROM[00034]
A = A-1                                      // ROM[00035]
M = D                                        // ROM[00036]

// -------------------------------------
// CALL: Memory.alloc(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[00037]
D = A                                        // ROM[00038]
@ R13                                        // ROM[00039]
M = D                                        // ROM[00040]
// ---------------------------
// Push RA
@ Map.new:0                                  // ROM[00041]
D = A                                        // ROM[00042]
// ---------------------------
// push D
@ SP                                         // ROM[00043]
AM = M+1                                     // ROM[00044]
A = A-1                                      // ROM[00045]
M = D                                        // ROM[00046]
// ---------------------------
// call
@ Map.new:1                                  // ROM[00047]
D = A                                        // ROM[00048]
@ R15                                        // ROM[00049]
M = D                                        // ROM[00050]
@ :call                                      // ROM[00051]
0; JMP                                       // ROM[00052]
( Map.new:1)
// ---------------------------
// goto functionName
@ Memory.alloc                               // ROM[00053]
0; JMP                                       // ROM[00054]
// ---------------------------
// ( RA )
( Map.new:0) 

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00055]
AM = M-1                                     // ROM[00056]
D = M                                        // ROM[00057]
// ---------------------------
@ 3                                          // ROM[00058]
M = D                                        // ROM[00059]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00060]
D = A                                        // ROM[00061]
@ R13                                        // ROM[00062]
M = D                                        // ROM[00063]
// ---------------------------
// call
@ Map.new:2                                  // ROM[00064]
D = A                                        // ROM[00065]
@ R15                                        // ROM[00066]
M = D                                        // ROM[00067]
@ :push_argument                             // ROM[00068]
0; JMP                                       // ROM[00069]
( Map.new:2)

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00070]
AM = M-1                                     // ROM[00071]
D = M                                        // ROM[00072]
// ---------------------------
// static[index] = D
@ Map.0                                      // ROM[00073]
M = D                                        // ROM[00074]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00075]
D = A                                        // ROM[00076]
@ R13                                        // ROM[00077]
M = D                                        // ROM[00078]
// ---------------------------
// call
@ Map.new:3                                  // ROM[00079]
D = A                                        // ROM[00080]
@ R15                                        // ROM[00081]
M = D                                        // ROM[00082]
@ :push_argument                             // ROM[00083]
0; JMP                                       // ROM[00084]
( Map.new:3)

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00085]
AM = M-1                                     // ROM[00086]
D = M                                        // ROM[00087]
// ---------------------------
// static[index] = D
@ Map.1                                      // ROM[00088]
M = D                                        // ROM[00089]

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[00090]
D = A                                        // ROM[00091]
@ R13                                        // ROM[00092]
M = D                                        // ROM[00093]
// ---------------------------
// call
@ Map.new:4                                  // ROM[00094]
D = A                                        // ROM[00095]
@ R15                                        // ROM[00096]
M = D                                        // ROM[00097]
@ :push_argument                             // ROM[00098]
0; JMP                                       // ROM[00099]
( Map.new:4)

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00100]
AM = M-1                                     // ROM[00101]
D = M                                        // ROM[00102]
// ---------------------------
// static[index] = D
@ Map.2                                      // ROM[00103]
M = D                                        // ROM[00104]

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[00105]
D = A                                        // ROM[00106]
@ R13                                        // ROM[00107]
M = D                                        // ROM[00108]
// ---------------------------
// call
@ Map.new:5                                  // ROM[00109]
D = A                                        // ROM[00110]
@ R15                                        // ROM[00111]
M = D                                        // ROM[00112]
@ :push_argument                             // ROM[00113]
0; JMP                                       // ROM[00114]
( Map.new:5)

// -------------------------------------
// POP: <static, 3>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00115]
AM = M-1                                     // ROM[00116]
D = M                                        // ROM[00117]
// ---------------------------
// static[index] = D
@ Map.3                                      // ROM[00118]
M = D                                        // ROM[00119]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[00120]
D = A                                        // ROM[00121]
// ---------------------------
// push D
@ SP                                         // ROM[00122]
AM = M+1                                     // ROM[00123]
A = A-1                                      // ROM[00124]
M = D                                        // ROM[00125]

// -------------------------------------
// POP: <static, 4>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00126]
AM = M-1                                     // ROM[00127]
D = M                                        // ROM[00128]
// ---------------------------
// static[index] = D
@ Map.4                                      // ROM[00129]
M = D                                        // ROM[00130]

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.0                                      // ROM[00131]
D = M                                        // ROM[00132]
// ---------------------------
// push D
@ SP                                         // ROM[00133]
AM = M+1                                     // ROM[00134]
A = A-1                                      // ROM[00135]
M = D                                        // ROM[00136]

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.1                                      // ROM[00137]
D = M                                        // ROM[00138]
// ---------------------------
// push D
@ SP                                         // ROM[00139]
AM = M+1                                     // ROM[00140]
A = A-1                                      // ROM[00141]
M = D                                        // ROM[00142]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[00143]
D = A                                        // ROM[00144]
@ R13                                        // ROM[00145]
M = D                                        // ROM[00146]
// ---------------------------
// Push RA
@ Map.new:6                                  // ROM[00147]
D = A                                        // ROM[00148]
// ---------------------------
// push D
@ SP                                         // ROM[00149]
AM = M+1                                     // ROM[00150]
A = A-1                                      // ROM[00151]
M = D                                        // ROM[00152]
// ---------------------------
// call
@ Map.new:7                                  // ROM[00153]
D = A                                        // ROM[00154]
@ R15                                        // ROM[00155]
M = D                                        // ROM[00156]
@ :call                                      // ROM[00157]
0; JMP                                       // ROM[00158]
( Map.new:7)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[00159]
0; JMP                                       // ROM[00160]
// ---------------------------
// ( RA )
( Map.new:6) 

// -------------------------------------
// CALL: Memory.alloc(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[00161]
D = A                                        // ROM[00162]
@ R13                                        // ROM[00163]
M = D                                        // ROM[00164]
// ---------------------------
// Push RA
@ Map.new:8                                  // ROM[00165]
D = A                                        // ROM[00166]
// ---------------------------
// push D
@ SP                                         // ROM[00167]
AM = M+1                                     // ROM[00168]
A = A-1                                      // ROM[00169]
M = D                                        // ROM[00170]
// ---------------------------
// call
@ Map.new:9                                  // ROM[00171]
D = A                                        // ROM[00172]
@ R15                                        // ROM[00173]
M = D                                        // ROM[00174]
@ :call                                      // ROM[00175]
0; JMP                                       // ROM[00176]
( Map.new:9)
// ---------------------------
// goto functionName
@ Memory.alloc                               // ROM[00177]
0; JMP                                       // ROM[00178]
// ---------------------------
// ( RA )
( Map.new:8) 

// -------------------------------------
// POP: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00179]
D = A                                        // ROM[00180]
@ R13                                        // ROM[00181]
M = D                                        // ROM[00182]
// ---------------------------
// call
@ Map.new:10                                 // ROM[00183]
D = A                                        // ROM[00184]
@ R15                                        // ROM[00185]
M = D                                        // ROM[00186]
@ :pop_this                                  // ROM[00187]
0; JMP                                       // ROM[00188]
( Map.new:10)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[00189]
D = A                                        // ROM[00190]
// ---------------------------
// push D
@ SP                                         // ROM[00191]
AM = M+1                                     // ROM[00192]
A = A-1                                      // ROM[00193]
M = D                                        // ROM[00194]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00195]
D = A                                        // ROM[00196]
@ R13                                        // ROM[00197]
M = D                                        // ROM[00198]
// ---------------------------
// call
@ Map.new:11                                 // ROM[00199]
D = A                                        // ROM[00200]
@ R15                                        // ROM[00201]
M = D                                        // ROM[00202]
@ :pop_local                                 // ROM[00203]
0; JMP                                       // ROM[00204]
( Map.new:11)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Map.new$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00205]
D = A                                        // ROM[00206]
@ R13                                        // ROM[00207]
M = D                                        // ROM[00208]
// ---------------------------
// call
@ Map.new:12                                 // ROM[00209]
D = A                                        // ROM[00210]
@ R15                                        // ROM[00211]
M = D                                        // ROM[00212]
@ :push_local                                // ROM[00213]
0; JMP                                       // ROM[00214]
( Map.new:12)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.0                                      // ROM[00215]
D = M                                        // ROM[00216]
// ---------------------------
// push D
@ SP                                         // ROM[00217]
AM = M+1                                     // ROM[00218]
A = A-1                                      // ROM[00219]
M = D                                        // ROM[00220]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Map.new:13                                 // ROM[00221]
D = A                                        // ROM[00222]
@ R15                                        // ROM[00223]
M = D                                        // ROM[00224]
@ :lt                                        // ROM[00225]
0; JMP                                       // ROM[00226]
( Map.new:13)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[00227]
A = M-1                                      // ROM[00228]
M = !M                                       // ROM[00229]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00230]
AM = M-1                                     // ROM[00231]
D = M                                        // ROM[00232]
// ---------------------------
@ Map.new$WHILE_END0                         // ROM[00233]
D; JNE                                       // ROM[00234]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[00235]
D = A                                        // ROM[00236]
// ---------------------------
// push D
@ SP                                         // ROM[00237]
AM = M+1                                     // ROM[00238]
A = A-1                                      // ROM[00239]
M = D                                        // ROM[00240]

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00241]
D = A                                        // ROM[00242]
@ R13                                        // ROM[00243]
M = D                                        // ROM[00244]
// ---------------------------
// call
@ Map.new:14                                 // ROM[00245]
D = A                                        // ROM[00246]
@ R15                                        // ROM[00247]
M = D                                        // ROM[00248]
@ :pop_local                                 // ROM[00249]
0; JMP                                       // ROM[00250]
( Map.new:14)

// -------------------------------------
// LABEL: WHILE_EXP1
// -------------------------------------
( Map.new$WHILE_EXP1 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00251]
D = A                                        // ROM[00252]
@ R13                                        // ROM[00253]
M = D                                        // ROM[00254]
// ---------------------------
// call
@ Map.new:15                                 // ROM[00255]
D = A                                        // ROM[00256]
@ R15                                        // ROM[00257]
M = D                                        // ROM[00258]
@ :push_local                                // ROM[00259]
0; JMP                                       // ROM[00260]
( Map.new:15)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.1                                      // ROM[00261]
D = M                                        // ROM[00262]
// ---------------------------
// push D
@ SP                                         // ROM[00263]
AM = M+1                                     // ROM[00264]
A = A-1                                      // ROM[00265]
M = D                                        // ROM[00266]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Map.new:16                                 // ROM[00267]
D = A                                        // ROM[00268]
@ R15                                        // ROM[00269]
M = D                                        // ROM[00270]
@ :lt                                        // ROM[00271]
0; JMP                                       // ROM[00272]
( Map.new:16)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[00273]
A = M-1                                      // ROM[00274]
M = !M                                       // ROM[00275]

// -------------------------------------
// IF-GOTO: WHILE_END1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00276]
AM = M-1                                     // ROM[00277]
D = M                                        // ROM[00278]
// ---------------------------
@ Map.new$WHILE_END1                         // ROM[00279]
D; JNE                                       // ROM[00280]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00281]
D = A                                        // ROM[00282]
@ R13                                        // ROM[00283]
M = D                                        // ROM[00284]
// ---------------------------
// call
@ Map.new:17                                 // ROM[00285]
D = A                                        // ROM[00286]
@ R15                                        // ROM[00287]
M = D                                        // ROM[00288]
@ :push_local                                // ROM[00289]
0; JMP                                       // ROM[00290]
( Map.new:17)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.1                                      // ROM[00291]
D = M                                        // ROM[00292]
// ---------------------------
// push D
@ SP                                         // ROM[00293]
AM = M+1                                     // ROM[00294]
A = A-1                                      // ROM[00295]
M = D                                        // ROM[00296]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[00297]
D = A                                        // ROM[00298]
@ R13                                        // ROM[00299]
M = D                                        // ROM[00300]
// ---------------------------
// Push RA
@ Map.new:18                                 // ROM[00301]
D = A                                        // ROM[00302]
// ---------------------------
// push D
@ SP                                         // ROM[00303]
AM = M+1                                     // ROM[00304]
A = A-1                                      // ROM[00305]
M = D                                        // ROM[00306]
// ---------------------------
// call
@ Map.new:19                                 // ROM[00307]
D = A                                        // ROM[00308]
@ R15                                        // ROM[00309]
M = D                                        // ROM[00310]
@ :call                                      // ROM[00311]
0; JMP                                       // ROM[00312]
( Map.new:19)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[00313]
0; JMP                                       // ROM[00314]
// ---------------------------
// ( RA )
( Map.new:18) 

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00315]
D = A                                        // ROM[00316]
@ R13                                        // ROM[00317]
M = D                                        // ROM[00318]
// ---------------------------
// call
@ Map.new:20                                 // ROM[00319]
D = A                                        // ROM[00320]
@ R15                                        // ROM[00321]
M = D                                        // ROM[00322]
@ :push_local                                // ROM[00323]
0; JMP                                       // ROM[00324]
( Map.new:20)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.new:21                                 // ROM[00325]
D = A                                        // ROM[00326]
@ R15                                        // ROM[00327]
M = D                                        // ROM[00328]
@ :add                                       // ROM[00329]
0; JMP                                       // ROM[00330]
( Map.new:21)

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00331]
D = A                                        // ROM[00332]
@ R13                                        // ROM[00333]
M = D                                        // ROM[00334]
// ---------------------------
// call
@ Map.new:22                                 // ROM[00335]
D = A                                        // ROM[00336]
@ R15                                        // ROM[00337]
M = D                                        // ROM[00338]
@ :push_this                                 // ROM[00339]
0; JMP                                       // ROM[00340]
( Map.new:22)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.new:23                                 // ROM[00341]
D = A                                        // ROM[00342]
@ R15                                        // ROM[00343]
M = D                                        // ROM[00344]
@ :add                                       // ROM[00345]
0; JMP                                       // ROM[00346]
( Map.new:23)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00347]
D = A                                        // ROM[00348]
@ R13                                        // ROM[00349]
M = D                                        // ROM[00350]
// ---------------------------
// call
@ Map.new:24                                 // ROM[00351]
D = A                                        // ROM[00352]
@ R15                                        // ROM[00353]
M = D                                        // ROM[00354]
@ :push_local                                // ROM[00355]
0; JMP                                       // ROM[00356]
( Map.new:24)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00357]
D = A                                        // ROM[00358]
@ R13                                        // ROM[00359]
M = D                                        // ROM[00360]
// ---------------------------
// call
@ Map.new:25                                 // ROM[00361]
D = A                                        // ROM[00362]
@ R15                                        // ROM[00363]
M = D                                        // ROM[00364]
@ :push_local                                // ROM[00365]
0; JMP                                       // ROM[00366]
( Map.new:25)

// -------------------------------------
// CALL: Cell.new(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[00367]
D = A                                        // ROM[00368]
@ R13                                        // ROM[00369]
M = D                                        // ROM[00370]
// ---------------------------
// Push RA
@ Map.new:26                                 // ROM[00371]
D = A                                        // ROM[00372]
// ---------------------------
// push D
@ SP                                         // ROM[00373]
AM = M+1                                     // ROM[00374]
A = A-1                                      // ROM[00375]
M = D                                        // ROM[00376]
// ---------------------------
// call
@ Map.new:27                                 // ROM[00377]
D = A                                        // ROM[00378]
@ R15                                        // ROM[00379]
M = D                                        // ROM[00380]
@ :call                                      // ROM[00381]
0; JMP                                       // ROM[00382]
( Map.new:27)
// ---------------------------
// goto functionName
@ Cell.new                                   // ROM[00383]
0; JMP                                       // ROM[00384]
// ---------------------------
// ( RA )
( Map.new:26) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00385]
AM = M-1                                     // ROM[00386]
D = M                                        // ROM[00387]
// ---------------------------
@ 5                                          // ROM[00388]
M = D                                        // ROM[00389]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00390]
AM = M-1                                     // ROM[00391]
D = M                                        // ROM[00392]
// ---------------------------
@ 4                                          // ROM[00393]
M = D                                        // ROM[00394]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[00395]
D = M                                        // ROM[00396]
// ---------------------------
// push D
@ SP                                         // ROM[00397]
AM = M+1                                     // ROM[00398]
A = A-1                                      // ROM[00399]
M = D                                        // ROM[00400]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00401]
D = A                                        // ROM[00402]
@ R13                                        // ROM[00403]
M = D                                        // ROM[00404]
// ---------------------------
// call
@ Map.new:28                                 // ROM[00405]
D = A                                        // ROM[00406]
@ R15                                        // ROM[00407]
M = D                                        // ROM[00408]
@ :pop_that                                  // ROM[00409]
0; JMP                                       // ROM[00410]
( Map.new:28)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00411]
D = A                                        // ROM[00412]
@ R13                                        // ROM[00413]
M = D                                        // ROM[00414]
// ---------------------------
// call
@ Map.new:29                                 // ROM[00415]
D = A                                        // ROM[00416]
@ R15                                        // ROM[00417]
M = D                                        // ROM[00418]
@ :push_local                                // ROM[00419]
0; JMP                                       // ROM[00420]
( Map.new:29)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[00421]
D = A                                        // ROM[00422]
// ---------------------------
// push D
@ SP                                         // ROM[00423]
AM = M+1                                     // ROM[00424]
A = A-1                                      // ROM[00425]
M = D                                        // ROM[00426]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.new:30                                 // ROM[00427]
D = A                                        // ROM[00428]
@ R15                                        // ROM[00429]
M = D                                        // ROM[00430]
@ :add                                       // ROM[00431]
0; JMP                                       // ROM[00432]
( Map.new:30)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00433]
D = A                                        // ROM[00434]
@ R13                                        // ROM[00435]
M = D                                        // ROM[00436]
// ---------------------------
// call
@ Map.new:31                                 // ROM[00437]
D = A                                        // ROM[00438]
@ R15                                        // ROM[00439]
M = D                                        // ROM[00440]
@ :pop_local                                 // ROM[00441]
0; JMP                                       // ROM[00442]
( Map.new:31)

// -------------------------------------
// GOTO: WHILE_EXP1
// -------------------------------------
@ Map.new$WHILE_EXP1                         // ROM[00443]
0; JMP                                       // ROM[00444]

// -------------------------------------
// LABEL: WHILE_END1
// -------------------------------------
( Map.new$WHILE_END1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00445]
D = A                                        // ROM[00446]
@ R13                                        // ROM[00447]
M = D                                        // ROM[00448]
// ---------------------------
// call
@ Map.new:32                                 // ROM[00449]
D = A                                        // ROM[00450]
@ R15                                        // ROM[00451]
M = D                                        // ROM[00452]
@ :push_local                                // ROM[00453]
0; JMP                                       // ROM[00454]
( Map.new:32)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[00455]
D = A                                        // ROM[00456]
// ---------------------------
// push D
@ SP                                         // ROM[00457]
AM = M+1                                     // ROM[00458]
A = A-1                                      // ROM[00459]
M = D                                        // ROM[00460]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.new:33                                 // ROM[00461]
D = A                                        // ROM[00462]
@ R15                                        // ROM[00463]
M = D                                        // ROM[00464]
@ :add                                       // ROM[00465]
0; JMP                                       // ROM[00466]
( Map.new:33)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00467]
D = A                                        // ROM[00468]
@ R13                                        // ROM[00469]
M = D                                        // ROM[00470]
// ---------------------------
// call
@ Map.new:34                                 // ROM[00471]
D = A                                        // ROM[00472]
@ R15                                        // ROM[00473]
M = D                                        // ROM[00474]
@ :pop_local                                 // ROM[00475]
0; JMP                                       // ROM[00476]
( Map.new:34)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Map.new$WHILE_EXP0                         // ROM[00477]
0; JMP                                       // ROM[00478]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Map.new$WHILE_END0 )

// -------------------------------------
// PUSH: <pointer, 0>
// -------------------------------------
@ 3                                          // ROM[00479]
D = M                                        // ROM[00480]
// ---------------------------
// push D
@ SP                                         // ROM[00481]
AM = M+1                                     // ROM[00482]
A = A-1                                      // ROM[00483]
M = D                                        // ROM[00484]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Map.new:35                                 // ROM[00485]
D = A                                        // ROM[00486]
@ R15                                        // ROM[00487]
M = D                                        // ROM[00488]
@ :return                                    // ROM[00489]
0; JMP                                       // ROM[00490]
( Map.new:35)

// =========================================================
// FUNCTION: Map.dispose(3 locals)
// =========================================================

( Map.dispose )
// ---------------------------
// clear local segment
D = 0                                        // ROM[00491]
// ---------------------------
// push D
@ SP                                         // ROM[00492]
AM = M+1                                     // ROM[00493]
A = A-1                                      // ROM[00494]
M = D                                        // ROM[00495]
// ---------------------------
// push D
@ SP                                         // ROM[00496]
AM = M+1                                     // ROM[00497]
A = A-1                                      // ROM[00498]
M = D                                        // ROM[00499]
// ---------------------------
// push D
@ SP                                         // ROM[00500]
AM = M+1                                     // ROM[00501]
A = A-1                                      // ROM[00502]
M = D                                        // ROM[00503]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00504]
D = A                                        // ROM[00505]
@ R13                                        // ROM[00506]
M = D                                        // ROM[00507]
// ---------------------------
// call
@ Map.dispose:36                             // ROM[00508]
D = A                                        // ROM[00509]
@ R15                                        // ROM[00510]
M = D                                        // ROM[00511]
@ :push_argument                             // ROM[00512]
0; JMP                                       // ROM[00513]
( Map.dispose:36)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00514]
AM = M-1                                     // ROM[00515]
D = M                                        // ROM[00516]
// ---------------------------
@ 3                                          // ROM[00517]
M = D                                        // ROM[00518]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[00519]
D = A                                        // ROM[00520]
// ---------------------------
// push D
@ SP                                         // ROM[00521]
AM = M+1                                     // ROM[00522]
A = A-1                                      // ROM[00523]
M = D                                        // ROM[00524]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00525]
D = A                                        // ROM[00526]
@ R13                                        // ROM[00527]
M = D                                        // ROM[00528]
// ---------------------------
// call
@ Map.dispose:37                             // ROM[00529]
D = A                                        // ROM[00530]
@ R15                                        // ROM[00531]
M = D                                        // ROM[00532]
@ :pop_local                                 // ROM[00533]
0; JMP                                       // ROM[00534]
( Map.dispose:37)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Map.dispose$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00535]
D = A                                        // ROM[00536]
@ R13                                        // ROM[00537]
M = D                                        // ROM[00538]
// ---------------------------
// call
@ Map.dispose:38                             // ROM[00539]
D = A                                        // ROM[00540]
@ R15                                        // ROM[00541]
M = D                                        // ROM[00542]
@ :push_local                                // ROM[00543]
0; JMP                                       // ROM[00544]
( Map.dispose:38)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.0                                      // ROM[00545]
D = M                                        // ROM[00546]
// ---------------------------
// push D
@ SP                                         // ROM[00547]
AM = M+1                                     // ROM[00548]
A = A-1                                      // ROM[00549]
M = D                                        // ROM[00550]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Map.dispose:39                             // ROM[00551]
D = A                                        // ROM[00552]
@ R15                                        // ROM[00553]
M = D                                        // ROM[00554]
@ :lt                                        // ROM[00555]
0; JMP                                       // ROM[00556]
( Map.dispose:39)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[00557]
A = M-1                                      // ROM[00558]
M = !M                                       // ROM[00559]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00560]
AM = M-1                                     // ROM[00561]
D = M                                        // ROM[00562]
// ---------------------------
@ Map.dispose$WHILE_END0                     // ROM[00563]
D; JNE                                       // ROM[00564]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[00565]
D = A                                        // ROM[00566]
// ---------------------------
// push D
@ SP                                         // ROM[00567]
AM = M+1                                     // ROM[00568]
A = A-1                                      // ROM[00569]
M = D                                        // ROM[00570]

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00571]
D = A                                        // ROM[00572]
@ R13                                        // ROM[00573]
M = D                                        // ROM[00574]
// ---------------------------
// call
@ Map.dispose:40                             // ROM[00575]
D = A                                        // ROM[00576]
@ R15                                        // ROM[00577]
M = D                                        // ROM[00578]
@ :pop_local                                 // ROM[00579]
0; JMP                                       // ROM[00580]
( Map.dispose:40)

// -------------------------------------
// LABEL: WHILE_EXP1
// -------------------------------------
( Map.dispose$WHILE_EXP1 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00581]
D = A                                        // ROM[00582]
@ R13                                        // ROM[00583]
M = D                                        // ROM[00584]
// ---------------------------
// call
@ Map.dispose:41                             // ROM[00585]
D = A                                        // ROM[00586]
@ R15                                        // ROM[00587]
M = D                                        // ROM[00588]
@ :push_local                                // ROM[00589]
0; JMP                                       // ROM[00590]
( Map.dispose:41)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.1                                      // ROM[00591]
D = M                                        // ROM[00592]
// ---------------------------
// push D
@ SP                                         // ROM[00593]
AM = M+1                                     // ROM[00594]
A = A-1                                      // ROM[00595]
M = D                                        // ROM[00596]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Map.dispose:42                             // ROM[00597]
D = A                                        // ROM[00598]
@ R15                                        // ROM[00599]
M = D                                        // ROM[00600]
@ :lt                                        // ROM[00601]
0; JMP                                       // ROM[00602]
( Map.dispose:42)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[00603]
A = M-1                                      // ROM[00604]
M = !M                                       // ROM[00605]

// -------------------------------------
// IF-GOTO: WHILE_END1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00606]
AM = M-1                                     // ROM[00607]
D = M                                        // ROM[00608]
// ---------------------------
@ Map.dispose$WHILE_END1                     // ROM[00609]
D; JNE                                       // ROM[00610]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00611]
D = A                                        // ROM[00612]
@ R13                                        // ROM[00613]
M = D                                        // ROM[00614]
// ---------------------------
// call
@ Map.dispose:43                             // ROM[00615]
D = A                                        // ROM[00616]
@ R15                                        // ROM[00617]
M = D                                        // ROM[00618]
@ :push_local                                // ROM[00619]
0; JMP                                       // ROM[00620]
( Map.dispose:43)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00621]
D = A                                        // ROM[00622]
@ R13                                        // ROM[00623]
M = D                                        // ROM[00624]
// ---------------------------
// call
@ Map.dispose:44                             // ROM[00625]
D = A                                        // ROM[00626]
@ R15                                        // ROM[00627]
M = D                                        // ROM[00628]
@ :push_local                                // ROM[00629]
0; JMP                                       // ROM[00630]
( Map.dispose:44)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.1                                      // ROM[00631]
D = M                                        // ROM[00632]
// ---------------------------
// push D
@ SP                                         // ROM[00633]
AM = M+1                                     // ROM[00634]
A = A-1                                      // ROM[00635]
M = D                                        // ROM[00636]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[00637]
D = A                                        // ROM[00638]
@ R13                                        // ROM[00639]
M = D                                        // ROM[00640]
// ---------------------------
// Push RA
@ Map.dispose:45                             // ROM[00641]
D = A                                        // ROM[00642]
// ---------------------------
// push D
@ SP                                         // ROM[00643]
AM = M+1                                     // ROM[00644]
A = A-1                                      // ROM[00645]
M = D                                        // ROM[00646]
// ---------------------------
// call
@ Map.dispose:46                             // ROM[00647]
D = A                                        // ROM[00648]
@ R15                                        // ROM[00649]
M = D                                        // ROM[00650]
@ :call                                      // ROM[00651]
0; JMP                                       // ROM[00652]
( Map.dispose:46)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[00653]
0; JMP                                       // ROM[00654]
// ---------------------------
// ( RA )
( Map.dispose:45) 

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.dispose:47                             // ROM[00655]
D = A                                        // ROM[00656]
@ R15                                        // ROM[00657]
M = D                                        // ROM[00658]
@ :add                                       // ROM[00659]
0; JMP                                       // ROM[00660]
( Map.dispose:47)

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00661]
D = A                                        // ROM[00662]
@ R13                                        // ROM[00663]
M = D                                        // ROM[00664]
// ---------------------------
// call
@ Map.dispose:48                             // ROM[00665]
D = A                                        // ROM[00666]
@ R15                                        // ROM[00667]
M = D                                        // ROM[00668]
@ :push_this                                 // ROM[00669]
0; JMP                                       // ROM[00670]
( Map.dispose:48)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.dispose:49                             // ROM[00671]
D = A                                        // ROM[00672]
@ R15                                        // ROM[00673]
M = D                                        // ROM[00674]
@ :add                                       // ROM[00675]
0; JMP                                       // ROM[00676]
( Map.dispose:49)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00677]
AM = M-1                                     // ROM[00678]
D = M                                        // ROM[00679]
// ---------------------------
@ 4                                          // ROM[00680]
M = D                                        // ROM[00681]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00682]
D = A                                        // ROM[00683]
@ R13                                        // ROM[00684]
M = D                                        // ROM[00685]
// ---------------------------
// call
@ Map.dispose:50                             // ROM[00686]
D = A                                        // ROM[00687]
@ R15                                        // ROM[00688]
M = D                                        // ROM[00689]
@ :push_that                                 // ROM[00690]
0; JMP                                       // ROM[00691]
( Map.dispose:50)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[00692]
D = A                                        // ROM[00693]
@ R13                                        // ROM[00694]
M = D                                        // ROM[00695]
// ---------------------------
// call
@ Map.dispose:51                             // ROM[00696]
D = A                                        // ROM[00697]
@ R15                                        // ROM[00698]
M = D                                        // ROM[00699]
@ :pop_local                                 // ROM[00700]
0; JMP                                       // ROM[00701]
( Map.dispose:51)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[00702]
D = A                                        // ROM[00703]
@ R13                                        // ROM[00704]
M = D                                        // ROM[00705]
// ---------------------------
// call
@ Map.dispose:52                             // ROM[00706]
D = A                                        // ROM[00707]
@ R15                                        // ROM[00708]
M = D                                        // ROM[00709]
@ :push_local                                // ROM[00710]
0; JMP                                       // ROM[00711]
( Map.dispose:52)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[00712]
D = A                                        // ROM[00713]
// ---------------------------
// push D
@ SP                                         // ROM[00714]
AM = M+1                                     // ROM[00715]
A = A-1                                      // ROM[00716]
M = D                                        // ROM[00717]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Map.dispose:53                             // ROM[00718]
D = A                                        // ROM[00719]
@ R15                                        // ROM[00720]
M = D                                        // ROM[00721]
@ :eq                                        // ROM[00722]
0; JMP                                       // ROM[00723]
( Map.dispose:53)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[00724]
A = M-1                                      // ROM[00725]
M = !M                                       // ROM[00726]

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00727]
AM = M-1                                     // ROM[00728]
D = M                                        // ROM[00729]
// ---------------------------
@ Map.dispose$IF_TRUE0                       // ROM[00730]
D; JNE                                       // ROM[00731]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Map.dispose$IF_FALSE0                      // ROM[00732]
0; JMP                                       // ROM[00733]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Map.dispose$IF_TRUE0 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[00734]
D = A                                        // ROM[00735]
@ R13                                        // ROM[00736]
M = D                                        // ROM[00737]
// ---------------------------
// call
@ Map.dispose:54                             // ROM[00738]
D = A                                        // ROM[00739]
@ R15                                        // ROM[00740]
M = D                                        // ROM[00741]
@ :push_local                                // ROM[00742]
0; JMP                                       // ROM[00743]
( Map.dispose:54)

// -------------------------------------
// CALL: Cell.dispose(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[00744]
D = A                                        // ROM[00745]
@ R13                                        // ROM[00746]
M = D                                        // ROM[00747]
// ---------------------------
// Push RA
@ Map.dispose:55                             // ROM[00748]
D = A                                        // ROM[00749]
// ---------------------------
// push D
@ SP                                         // ROM[00750]
AM = M+1                                     // ROM[00751]
A = A-1                                      // ROM[00752]
M = D                                        // ROM[00753]
// ---------------------------
// call
@ Map.dispose:56                             // ROM[00754]
D = A                                        // ROM[00755]
@ R15                                        // ROM[00756]
M = D                                        // ROM[00757]
@ :call                                      // ROM[00758]
0; JMP                                       // ROM[00759]
( Map.dispose:56)
// ---------------------------
// goto functionName
@ Cell.dispose                               // ROM[00760]
0; JMP                                       // ROM[00761]
// ---------------------------
// ( RA )
( Map.dispose:55) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00762]
AM = M-1                                     // ROM[00763]
D = M                                        // ROM[00764]
// ---------------------------
@ 5                                          // ROM[00765]
M = D                                        // ROM[00766]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Map.dispose$IF_FALSE0 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00767]
D = A                                        // ROM[00768]
@ R13                                        // ROM[00769]
M = D                                        // ROM[00770]
// ---------------------------
// call
@ Map.dispose:57                             // ROM[00771]
D = A                                        // ROM[00772]
@ R15                                        // ROM[00773]
M = D                                        // ROM[00774]
@ :push_local                                // ROM[00775]
0; JMP                                       // ROM[00776]
( Map.dispose:57)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[00777]
D = A                                        // ROM[00778]
// ---------------------------
// push D
@ SP                                         // ROM[00779]
AM = M+1                                     // ROM[00780]
A = A-1                                      // ROM[00781]
M = D                                        // ROM[00782]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.dispose:58                             // ROM[00783]
D = A                                        // ROM[00784]
@ R15                                        // ROM[00785]
M = D                                        // ROM[00786]
@ :add                                       // ROM[00787]
0; JMP                                       // ROM[00788]
( Map.dispose:58)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00789]
D = A                                        // ROM[00790]
@ R13                                        // ROM[00791]
M = D                                        // ROM[00792]
// ---------------------------
// call
@ Map.dispose:59                             // ROM[00793]
D = A                                        // ROM[00794]
@ R15                                        // ROM[00795]
M = D                                        // ROM[00796]
@ :pop_local                                 // ROM[00797]
0; JMP                                       // ROM[00798]
( Map.dispose:59)

// -------------------------------------
// GOTO: WHILE_EXP1
// -------------------------------------
@ Map.dispose$WHILE_EXP1                     // ROM[00799]
0; JMP                                       // ROM[00800]

// -------------------------------------
// LABEL: WHILE_END1
// -------------------------------------
( Map.dispose$WHILE_END1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00801]
D = A                                        // ROM[00802]
@ R13                                        // ROM[00803]
M = D                                        // ROM[00804]
// ---------------------------
// call
@ Map.dispose:60                             // ROM[00805]
D = A                                        // ROM[00806]
@ R15                                        // ROM[00807]
M = D                                        // ROM[00808]
@ :push_local                                // ROM[00809]
0; JMP                                       // ROM[00810]
( Map.dispose:60)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[00811]
D = A                                        // ROM[00812]
// ---------------------------
// push D
@ SP                                         // ROM[00813]
AM = M+1                                     // ROM[00814]
A = A-1                                      // ROM[00815]
M = D                                        // ROM[00816]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.dispose:61                             // ROM[00817]
D = A                                        // ROM[00818]
@ R15                                        // ROM[00819]
M = D                                        // ROM[00820]
@ :add                                       // ROM[00821]
0; JMP                                       // ROM[00822]
( Map.dispose:61)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00823]
D = A                                        // ROM[00824]
@ R13                                        // ROM[00825]
M = D                                        // ROM[00826]
// ---------------------------
// call
@ Map.dispose:62                             // ROM[00827]
D = A                                        // ROM[00828]
@ R15                                        // ROM[00829]
M = D                                        // ROM[00830]
@ :pop_local                                 // ROM[00831]
0; JMP                                       // ROM[00832]
( Map.dispose:62)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Map.dispose$WHILE_EXP0                     // ROM[00833]
0; JMP                                       // ROM[00834]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Map.dispose$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[00835]
D = A                                        // ROM[00836]
// ---------------------------
// push D
@ SP                                         // ROM[00837]
AM = M+1                                     // ROM[00838]
A = A-1                                      // ROM[00839]
M = D                                        // ROM[00840]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Map.dispose:63                             // ROM[00841]
D = A                                        // ROM[00842]
@ R15                                        // ROM[00843]
M = D                                        // ROM[00844]
@ :return                                    // ROM[00845]
0; JMP                                       // ROM[00846]
( Map.dispose:63)

// =========================================================
// FUNCTION: Map.draw(3 locals)
// =========================================================

( Map.draw )
// ---------------------------
// clear local segment
D = 0                                        // ROM[00847]
// ---------------------------
// push D
@ SP                                         // ROM[00848]
AM = M+1                                     // ROM[00849]
A = A-1                                      // ROM[00850]
M = D                                        // ROM[00851]
// ---------------------------
// push D
@ SP                                         // ROM[00852]
AM = M+1                                     // ROM[00853]
A = A-1                                      // ROM[00854]
M = D                                        // ROM[00855]
// ---------------------------
// push D
@ SP                                         // ROM[00856]
AM = M+1                                     // ROM[00857]
A = A-1                                      // ROM[00858]
M = D                                        // ROM[00859]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00860]
D = A                                        // ROM[00861]
@ R13                                        // ROM[00862]
M = D                                        // ROM[00863]
// ---------------------------
// call
@ Map.draw:64                                // ROM[00864]
D = A                                        // ROM[00865]
@ R15                                        // ROM[00866]
M = D                                        // ROM[00867]
@ :push_argument                             // ROM[00868]
0; JMP                                       // ROM[00869]
( Map.draw:64)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00870]
AM = M-1                                     // ROM[00871]
D = M                                        // ROM[00872]
// ---------------------------
@ 3                                          // ROM[00873]
M = D                                        // ROM[00874]

// -------------------------------------
// CALL: Screen.clearScreen(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[00875]
D = A                                        // ROM[00876]
@ R13                                        // ROM[00877]
M = D                                        // ROM[00878]
// ---------------------------
// Push RA
@ Map.draw:65                                // ROM[00879]
D = A                                        // ROM[00880]
// ---------------------------
// push D
@ SP                                         // ROM[00881]
AM = M+1                                     // ROM[00882]
A = A-1                                      // ROM[00883]
M = D                                        // ROM[00884]
// ---------------------------
// call
@ Map.draw:66                                // ROM[00885]
D = A                                        // ROM[00886]
@ R15                                        // ROM[00887]
M = D                                        // ROM[00888]
@ :call                                      // ROM[00889]
0; JMP                                       // ROM[00890]
( Map.draw:66)
// ---------------------------
// goto functionName
@ Screen.clearScreen                         // ROM[00891]
0; JMP                                       // ROM[00892]
// ---------------------------
// ( RA )
( Map.draw:65) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00893]
AM = M-1                                     // ROM[00894]
D = M                                        // ROM[00895]
// ---------------------------
@ 5                                          // ROM[00896]
M = D                                        // ROM[00897]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[00898]
D = A                                        // ROM[00899]
// ---------------------------
// push D
@ SP                                         // ROM[00900]
AM = M+1                                     // ROM[00901]
A = A-1                                      // ROM[00902]
M = D                                        // ROM[00903]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00904]
D = A                                        // ROM[00905]
@ R13                                        // ROM[00906]
M = D                                        // ROM[00907]
// ---------------------------
// call
@ Map.draw:67                                // ROM[00908]
D = A                                        // ROM[00909]
@ R15                                        // ROM[00910]
M = D                                        // ROM[00911]
@ :pop_local                                 // ROM[00912]
0; JMP                                       // ROM[00913]
( Map.draw:67)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Map.draw$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00914]
D = A                                        // ROM[00915]
@ R13                                        // ROM[00916]
M = D                                        // ROM[00917]
// ---------------------------
// call
@ Map.draw:68                                // ROM[00918]
D = A                                        // ROM[00919]
@ R15                                        // ROM[00920]
M = D                                        // ROM[00921]
@ :push_local                                // ROM[00922]
0; JMP                                       // ROM[00923]
( Map.draw:68)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.0                                      // ROM[00924]
D = M                                        // ROM[00925]
// ---------------------------
// push D
@ SP                                         // ROM[00926]
AM = M+1                                     // ROM[00927]
A = A-1                                      // ROM[00928]
M = D                                        // ROM[00929]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Map.draw:69                                // ROM[00930]
D = A                                        // ROM[00931]
@ R15                                        // ROM[00932]
M = D                                        // ROM[00933]
@ :lt                                        // ROM[00934]
0; JMP                                       // ROM[00935]
( Map.draw:69)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[00936]
A = M-1                                      // ROM[00937]
M = !M                                       // ROM[00938]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00939]
AM = M-1                                     // ROM[00940]
D = M                                        // ROM[00941]
// ---------------------------
@ Map.draw$WHILE_END0                        // ROM[00942]
D; JNE                                       // ROM[00943]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[00944]
D = A                                        // ROM[00945]
// ---------------------------
// push D
@ SP                                         // ROM[00946]
AM = M+1                                     // ROM[00947]
A = A-1                                      // ROM[00948]
M = D                                        // ROM[00949]

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00950]
D = A                                        // ROM[00951]
@ R13                                        // ROM[00952]
M = D                                        // ROM[00953]
// ---------------------------
// call
@ Map.draw:70                                // ROM[00954]
D = A                                        // ROM[00955]
@ R15                                        // ROM[00956]
M = D                                        // ROM[00957]
@ :pop_local                                 // ROM[00958]
0; JMP                                       // ROM[00959]
( Map.draw:70)

// -------------------------------------
// LABEL: WHILE_EXP1
// -------------------------------------
( Map.draw$WHILE_EXP1 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[00960]
D = A                                        // ROM[00961]
@ R13                                        // ROM[00962]
M = D                                        // ROM[00963]
// ---------------------------
// call
@ Map.draw:71                                // ROM[00964]
D = A                                        // ROM[00965]
@ R15                                        // ROM[00966]
M = D                                        // ROM[00967]
@ :push_local                                // ROM[00968]
0; JMP                                       // ROM[00969]
( Map.draw:71)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.1                                      // ROM[00970]
D = M                                        // ROM[00971]
// ---------------------------
// push D
@ SP                                         // ROM[00972]
AM = M+1                                     // ROM[00973]
A = A-1                                      // ROM[00974]
M = D                                        // ROM[00975]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Map.draw:72                                // ROM[00976]
D = A                                        // ROM[00977]
@ R15                                        // ROM[00978]
M = D                                        // ROM[00979]
@ :lt                                        // ROM[00980]
0; JMP                                       // ROM[00981]
( Map.draw:72)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[00982]
A = M-1                                      // ROM[00983]
M = !M                                       // ROM[00984]

// -------------------------------------
// IF-GOTO: WHILE_END1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[00985]
AM = M-1                                     // ROM[00986]
D = M                                        // ROM[00987]
// ---------------------------
@ Map.draw$WHILE_END1                        // ROM[00988]
D; JNE                                       // ROM[00989]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[00990]
D = A                                        // ROM[00991]
@ R13                                        // ROM[00992]
M = D                                        // ROM[00993]
// ---------------------------
// call
@ Map.draw:73                                // ROM[00994]
D = A                                        // ROM[00995]
@ R15                                        // ROM[00996]
M = D                                        // ROM[00997]
@ :push_local                                // ROM[00998]
0; JMP                                       // ROM[00999]
( Map.draw:73)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.1                                      // ROM[01000]
D = M                                        // ROM[01001]
// ---------------------------
// push D
@ SP                                         // ROM[01002]
AM = M+1                                     // ROM[01003]
A = A-1                                      // ROM[01004]
M = D                                        // ROM[01005]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[01006]
D = A                                        // ROM[01007]
@ R13                                        // ROM[01008]
M = D                                        // ROM[01009]
// ---------------------------
// Push RA
@ Map.draw:74                                // ROM[01010]
D = A                                        // ROM[01011]
// ---------------------------
// push D
@ SP                                         // ROM[01012]
AM = M+1                                     // ROM[01013]
A = A-1                                      // ROM[01014]
M = D                                        // ROM[01015]
// ---------------------------
// call
@ Map.draw:75                                // ROM[01016]
D = A                                        // ROM[01017]
@ R15                                        // ROM[01018]
M = D                                        // ROM[01019]
@ :call                                      // ROM[01020]
0; JMP                                       // ROM[01021]
( Map.draw:75)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[01022]
0; JMP                                       // ROM[01023]
// ---------------------------
// ( RA )
( Map.draw:74) 

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01024]
D = A                                        // ROM[01025]
@ R13                                        // ROM[01026]
M = D                                        // ROM[01027]
// ---------------------------
// call
@ Map.draw:76                                // ROM[01028]
D = A                                        // ROM[01029]
@ R15                                        // ROM[01030]
M = D                                        // ROM[01031]
@ :push_local                                // ROM[01032]
0; JMP                                       // ROM[01033]
( Map.draw:76)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.draw:77                                // ROM[01034]
D = A                                        // ROM[01035]
@ R15                                        // ROM[01036]
M = D                                        // ROM[01037]
@ :add                                       // ROM[01038]
0; JMP                                       // ROM[01039]
( Map.draw:77)

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01040]
D = A                                        // ROM[01041]
@ R13                                        // ROM[01042]
M = D                                        // ROM[01043]
// ---------------------------
// call
@ Map.draw:78                                // ROM[01044]
D = A                                        // ROM[01045]
@ R15                                        // ROM[01046]
M = D                                        // ROM[01047]
@ :push_this                                 // ROM[01048]
0; JMP                                       // ROM[01049]
( Map.draw:78)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.draw:79                                // ROM[01050]
D = A                                        // ROM[01051]
@ R15                                        // ROM[01052]
M = D                                        // ROM[01053]
@ :add                                       // ROM[01054]
0; JMP                                       // ROM[01055]
( Map.draw:79)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01056]
AM = M-1                                     // ROM[01057]
D = M                                        // ROM[01058]
// ---------------------------
@ 4                                          // ROM[01059]
M = D                                        // ROM[01060]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01061]
D = A                                        // ROM[01062]
@ R13                                        // ROM[01063]
M = D                                        // ROM[01064]
// ---------------------------
// call
@ Map.draw:80                                // ROM[01065]
D = A                                        // ROM[01066]
@ R15                                        // ROM[01067]
M = D                                        // ROM[01068]
@ :push_that                                 // ROM[01069]
0; JMP                                       // ROM[01070]
( Map.draw:80)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[01071]
D = A                                        // ROM[01072]
@ R13                                        // ROM[01073]
M = D                                        // ROM[01074]
// ---------------------------
// call
@ Map.draw:81                                // ROM[01075]
D = A                                        // ROM[01076]
@ R15                                        // ROM[01077]
M = D                                        // ROM[01078]
@ :pop_local                                 // ROM[01079]
0; JMP                                       // ROM[01080]
( Map.draw:81)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[01081]
D = A                                        // ROM[01082]
@ R13                                        // ROM[01083]
M = D                                        // ROM[01084]
// ---------------------------
// call
@ Map.draw:82                                // ROM[01085]
D = A                                        // ROM[01086]
@ R15                                        // ROM[01087]
M = D                                        // ROM[01088]
@ :push_local                                // ROM[01089]
0; JMP                                       // ROM[01090]
( Map.draw:82)

// -------------------------------------
// PUSH: <static, 2>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.2                                      // ROM[01091]
D = M                                        // ROM[01092]
// ---------------------------
// push D
@ SP                                         // ROM[01093]
AM = M+1                                     // ROM[01094]
A = A-1                                      // ROM[01095]
M = D                                        // ROM[01096]

// -------------------------------------
// PUSH: <static, 3>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.3                                      // ROM[01097]
D = M                                        // ROM[01098]
// ---------------------------
// push D
@ SP                                         // ROM[01099]
AM = M+1                                     // ROM[01100]
A = A-1                                      // ROM[01101]
M = D                                        // ROM[01102]

// -------------------------------------
// PUSH: <static, 4>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Map.4                                      // ROM[01103]
D = M                                        // ROM[01104]
// ---------------------------
// push D
@ SP                                         // ROM[01105]
AM = M+1                                     // ROM[01106]
A = A-1                                      // ROM[01107]
M = D                                        // ROM[01108]

// -------------------------------------
// CALL: Cell.draw(4 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 4                                          // ROM[01109]
D = A                                        // ROM[01110]
@ R13                                        // ROM[01111]
M = D                                        // ROM[01112]
// ---------------------------
// Push RA
@ Map.draw:83                                // ROM[01113]
D = A                                        // ROM[01114]
// ---------------------------
// push D
@ SP                                         // ROM[01115]
AM = M+1                                     // ROM[01116]
A = A-1                                      // ROM[01117]
M = D                                        // ROM[01118]
// ---------------------------
// call
@ Map.draw:84                                // ROM[01119]
D = A                                        // ROM[01120]
@ R15                                        // ROM[01121]
M = D                                        // ROM[01122]
@ :call                                      // ROM[01123]
0; JMP                                       // ROM[01124]
( Map.draw:84)
// ---------------------------
// goto functionName
@ Cell.draw                                  // ROM[01125]
0; JMP                                       // ROM[01126]
// ---------------------------
// ( RA )
( Map.draw:83) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01127]
AM = M-1                                     // ROM[01128]
D = M                                        // ROM[01129]
// ---------------------------
@ 5                                          // ROM[01130]
M = D                                        // ROM[01131]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[01132]
D = A                                        // ROM[01133]
// ---------------------------
// push D
@ SP                                         // ROM[01134]
AM = M+1                                     // ROM[01135]
A = A-1                                      // ROM[01136]
M = D                                        // ROM[01137]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01138]
D = A                                        // ROM[01139]
@ R13                                        // ROM[01140]
M = D                                        // ROM[01141]
// ---------------------------
// call
@ Map.draw:85                                // ROM[01142]
D = A                                        // ROM[01143]
@ R15                                        // ROM[01144]
M = D                                        // ROM[01145]
@ :push_local                                // ROM[01146]
0; JMP                                       // ROM[01147]
( Map.draw:85)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[01148]
D = A                                        // ROM[01149]
@ R13                                        // ROM[01150]
M = D                                        // ROM[01151]
// ---------------------------
// Push RA
@ Map.draw:86                                // ROM[01152]
D = A                                        // ROM[01153]
// ---------------------------
// push D
@ SP                                         // ROM[01154]
AM = M+1                                     // ROM[01155]
A = A-1                                      // ROM[01156]
M = D                                        // ROM[01157]
// ---------------------------
// call
@ Map.draw:87                                // ROM[01158]
D = A                                        // ROM[01159]
@ R15                                        // ROM[01160]
M = D                                        // ROM[01161]
@ :call                                      // ROM[01162]
0; JMP                                       // ROM[01163]
( Map.draw:87)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[01164]
0; JMP                                       // ROM[01165]
// ---------------------------
// ( RA )
( Map.draw:86) 

// -------------------------------------
// PUSH: <constant, 57>
// -------------------------------------
@ 57                                         // ROM[01166]
D = A                                        // ROM[01167]
// ---------------------------
// push D
@ SP                                         // ROM[01168]
AM = M+1                                     // ROM[01169]
A = A-1                                      // ROM[01170]
M = D                                        // ROM[01171]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01172]
D = A                                        // ROM[01173]
@ R13                                        // ROM[01174]
M = D                                        // ROM[01175]
// ---------------------------
// call
@ Map.draw:88                                // ROM[01176]
D = A                                        // ROM[01177]
@ R15                                        // ROM[01178]
M = D                                        // ROM[01179]
@ :push_local                                // ROM[01180]
0; JMP                                       // ROM[01181]
( Map.draw:88)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.draw:89                                // ROM[01182]
D = A                                        // ROM[01183]
@ R15                                        // ROM[01184]
M = D                                        // ROM[01185]
@ :add                                       // ROM[01186]
0; JMP                                       // ROM[01187]
( Map.draw:89)

// -------------------------------------
// CALL: Output.moveCursor(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[01188]
D = A                                        // ROM[01189]
@ R13                                        // ROM[01190]
M = D                                        // ROM[01191]
// ---------------------------
// Push RA
@ Map.draw:90                                // ROM[01192]
D = A                                        // ROM[01193]
// ---------------------------
// push D
@ SP                                         // ROM[01194]
AM = M+1                                     // ROM[01195]
A = A-1                                      // ROM[01196]
M = D                                        // ROM[01197]
// ---------------------------
// call
@ Map.draw:91                                // ROM[01198]
D = A                                        // ROM[01199]
@ R15                                        // ROM[01200]
M = D                                        // ROM[01201]
@ :call                                      // ROM[01202]
0; JMP                                       // ROM[01203]
( Map.draw:91)
// ---------------------------
// goto functionName
@ Output.moveCursor                          // ROM[01204]
0; JMP                                       // ROM[01205]
// ---------------------------
// ( RA )
( Map.draw:90) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01206]
AM = M-1                                     // ROM[01207]
D = M                                        // ROM[01208]
// ---------------------------
@ 5                                          // ROM[01209]
M = D                                        // ROM[01210]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[01211]
D = A                                        // ROM[01212]
// ---------------------------
// push D
@ SP                                         // ROM[01213]
AM = M+1                                     // ROM[01214]
A = A-1                                      // ROM[01215]
M = D                                        // ROM[01216]

// -------------------------------------
// CALL: String.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[01217]
D = A                                        // ROM[01218]
@ R13                                        // ROM[01219]
M = D                                        // ROM[01220]
// ---------------------------
// Push RA
@ Map.draw:92                                // ROM[01221]
D = A                                        // ROM[01222]
// ---------------------------
// push D
@ SP                                         // ROM[01223]
AM = M+1                                     // ROM[01224]
A = A-1                                      // ROM[01225]
M = D                                        // ROM[01226]
// ---------------------------
// call
@ Map.draw:93                                // ROM[01227]
D = A                                        // ROM[01228]
@ R15                                        // ROM[01229]
M = D                                        // ROM[01230]
@ :call                                      // ROM[01231]
0; JMP                                       // ROM[01232]
( Map.draw:93)
// ---------------------------
// goto functionName
@ String.new                                 // ROM[01233]
0; JMP                                       // ROM[01234]
// ---------------------------
// ( RA )
( Map.draw:92) 

// -------------------------------------
// PUSH: <constant, 36>
// -------------------------------------
@ 36                                         // ROM[01235]
D = A                                        // ROM[01236]
// ---------------------------
// push D
@ SP                                         // ROM[01237]
AM = M+1                                     // ROM[01238]
A = A-1                                      // ROM[01239]
M = D                                        // ROM[01240]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[01241]
D = A                                        // ROM[01242]
@ R13                                        // ROM[01243]
M = D                                        // ROM[01244]
// ---------------------------
// Push RA
@ Map.draw:94                                // ROM[01245]
D = A                                        // ROM[01246]
// ---------------------------
// push D
@ SP                                         // ROM[01247]
AM = M+1                                     // ROM[01248]
A = A-1                                      // ROM[01249]
M = D                                        // ROM[01250]
// ---------------------------
// call
@ Map.draw:95                                // ROM[01251]
D = A                                        // ROM[01252]
@ R15                                        // ROM[01253]
M = D                                        // ROM[01254]
@ :call                                      // ROM[01255]
0; JMP                                       // ROM[01256]
( Map.draw:95)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[01257]
0; JMP                                       // ROM[01258]
// ---------------------------
// ( RA )
( Map.draw:94) 

// -------------------------------------
// CALL: Output.printString(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[01259]
D = A                                        // ROM[01260]
@ R13                                        // ROM[01261]
M = D                                        // ROM[01262]
// ---------------------------
// Push RA
@ Map.draw:96                                // ROM[01263]
D = A                                        // ROM[01264]
// ---------------------------
// push D
@ SP                                         // ROM[01265]
AM = M+1                                     // ROM[01266]
A = A-1                                      // ROM[01267]
M = D                                        // ROM[01268]
// ---------------------------
// call
@ Map.draw:97                                // ROM[01269]
D = A                                        // ROM[01270]
@ R15                                        // ROM[01271]
M = D                                        // ROM[01272]
@ :call                                      // ROM[01273]
0; JMP                                       // ROM[01274]
( Map.draw:97)
// ---------------------------
// goto functionName
@ Output.printString                         // ROM[01275]
0; JMP                                       // ROM[01276]
// ---------------------------
// ( RA )
( Map.draw:96) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01277]
AM = M-1                                     // ROM[01278]
D = M                                        // ROM[01279]
// ---------------------------
@ 5                                          // ROM[01280]
M = D                                        // ROM[01281]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01282]
D = A                                        // ROM[01283]
@ R13                                        // ROM[01284]
M = D                                        // ROM[01285]
// ---------------------------
// call
@ Map.draw:98                                // ROM[01286]
D = A                                        // ROM[01287]
@ R15                                        // ROM[01288]
M = D                                        // ROM[01289]
@ :push_local                                // ROM[01290]
0; JMP                                       // ROM[01291]
( Map.draw:98)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[01292]
D = A                                        // ROM[01293]
// ---------------------------
// push D
@ SP                                         // ROM[01294]
AM = M+1                                     // ROM[01295]
A = A-1                                      // ROM[01296]
M = D                                        // ROM[01297]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.draw:99                                // ROM[01298]
D = A                                        // ROM[01299]
@ R15                                        // ROM[01300]
M = D                                        // ROM[01301]
@ :add                                       // ROM[01302]
0; JMP                                       // ROM[01303]
( Map.draw:99)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01304]
D = A                                        // ROM[01305]
@ R13                                        // ROM[01306]
M = D                                        // ROM[01307]
// ---------------------------
// call
@ Map.draw:100                               // ROM[01308]
D = A                                        // ROM[01309]
@ R15                                        // ROM[01310]
M = D                                        // ROM[01311]
@ :pop_local                                 // ROM[01312]
0; JMP                                       // ROM[01313]
( Map.draw:100)

// -------------------------------------
// GOTO: WHILE_EXP1
// -------------------------------------
@ Map.draw$WHILE_EXP1                        // ROM[01314]
0; JMP                                       // ROM[01315]

// -------------------------------------
// LABEL: WHILE_END1
// -------------------------------------
( Map.draw$WHILE_END1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01316]
D = A                                        // ROM[01317]
@ R13                                        // ROM[01318]
M = D                                        // ROM[01319]
// ---------------------------
// call
@ Map.draw:101                               // ROM[01320]
D = A                                        // ROM[01321]
@ R15                                        // ROM[01322]
M = D                                        // ROM[01323]
@ :push_local                                // ROM[01324]
0; JMP                                       // ROM[01325]
( Map.draw:101)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[01326]
D = A                                        // ROM[01327]
// ---------------------------
// push D
@ SP                                         // ROM[01328]
AM = M+1                                     // ROM[01329]
A = A-1                                      // ROM[01330]
M = D                                        // ROM[01331]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Map.draw:102                               // ROM[01332]
D = A                                        // ROM[01333]
@ R15                                        // ROM[01334]
M = D                                        // ROM[01335]
@ :add                                       // ROM[01336]
0; JMP                                       // ROM[01337]
( Map.draw:102)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01338]
D = A                                        // ROM[01339]
@ R13                                        // ROM[01340]
M = D                                        // ROM[01341]
// ---------------------------
// call
@ Map.draw:103                               // ROM[01342]
D = A                                        // ROM[01343]
@ R15                                        // ROM[01344]
M = D                                        // ROM[01345]
@ :pop_local                                 // ROM[01346]
0; JMP                                       // ROM[01347]
( Map.draw:103)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Map.draw$WHILE_EXP0                        // ROM[01348]
0; JMP                                       // ROM[01349]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Map.draw$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[01350]
D = A                                        // ROM[01351]
// ---------------------------
// push D
@ SP                                         // ROM[01352]
AM = M+1                                     // ROM[01353]
A = A-1                                      // ROM[01354]
M = D                                        // ROM[01355]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Map.draw:104                               // ROM[01356]
D = A                                        // ROM[01357]
@ R15                                        // ROM[01358]
M = D                                        // ROM[01359]
@ :return                                    // ROM[01360]
0; JMP                                       // ROM[01361]
( Map.draw:104)

// *********************************************************
// Translation of: ./String.vm
// *********************************************************


// =========================================================
// FUNCTION: String.new(0 locals)
// =========================================================

( String.new )
// ---------------------------
// clear local segment
D = 0                                        // ROM[01362]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[01363]
D = A                                        // ROM[01364]
// ---------------------------
// push D
@ SP                                         // ROM[01365]
AM = M+1                                     // ROM[01366]
A = A-1                                      // ROM[01367]
M = D                                        // ROM[01368]

// -------------------------------------
// CALL: Memory.alloc(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[01369]
D = A                                        // ROM[01370]
@ R13                                        // ROM[01371]
M = D                                        // ROM[01372]
// ---------------------------
// Push RA
@ String.new:0                               // ROM[01373]
D = A                                        // ROM[01374]
// ---------------------------
// push D
@ SP                                         // ROM[01375]
AM = M+1                                     // ROM[01376]
A = A-1                                      // ROM[01377]
M = D                                        // ROM[01378]
// ---------------------------
// call
@ String.new:1                               // ROM[01379]
D = A                                        // ROM[01380]
@ R15                                        // ROM[01381]
M = D                                        // ROM[01382]
@ :call                                      // ROM[01383]
0; JMP                                       // ROM[01384]
( String.new:1)
// ---------------------------
// goto functionName
@ Memory.alloc                               // ROM[01385]
0; JMP                                       // ROM[01386]
// ---------------------------
// ( RA )
( String.new:0) 

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01387]
AM = M-1                                     // ROM[01388]
D = M                                        // ROM[01389]
// ---------------------------
@ 3                                          // ROM[01390]
M = D                                        // ROM[01391]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01392]
D = A                                        // ROM[01393]
@ R13                                        // ROM[01394]
M = D                                        // ROM[01395]
// ---------------------------
// call
@ String.new:2                               // ROM[01396]
D = A                                        // ROM[01397]
@ R15                                        // ROM[01398]
M = D                                        // ROM[01399]
@ :push_argument                             // ROM[01400]
0; JMP                                       // ROM[01401]
( String.new:2)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[01402]
D = A                                        // ROM[01403]
// ---------------------------
// push D
@ SP                                         // ROM[01404]
AM = M+1                                     // ROM[01405]
A = A-1                                      // ROM[01406]
M = D                                        // ROM[01407]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ String.new:3                               // ROM[01408]
D = A                                        // ROM[01409]
@ R15                                        // ROM[01410]
M = D                                        // ROM[01411]
@ :lt                                        // ROM[01412]
0; JMP                                       // ROM[01413]
( String.new:3)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01414]
AM = M-1                                     // ROM[01415]
D = M                                        // ROM[01416]
// ---------------------------
@ String.new$IF_TRUE0                        // ROM[01417]
D; JNE                                       // ROM[01418]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ String.new$IF_FALSE0                       // ROM[01419]
0; JMP                                       // ROM[01420]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( String.new$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 14>
// -------------------------------------
@ 14                                         // ROM[01421]
D = A                                        // ROM[01422]
// ---------------------------
// push D
@ SP                                         // ROM[01423]
AM = M+1                                     // ROM[01424]
A = A-1                                      // ROM[01425]
M = D                                        // ROM[01426]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[01427]
D = A                                        // ROM[01428]
@ R13                                        // ROM[01429]
M = D                                        // ROM[01430]
// ---------------------------
// Push RA
@ String.new:4                               // ROM[01431]
D = A                                        // ROM[01432]
// ---------------------------
// push D
@ SP                                         // ROM[01433]
AM = M+1                                     // ROM[01434]
A = A-1                                      // ROM[01435]
M = D                                        // ROM[01436]
// ---------------------------
// call
@ String.new:5                               // ROM[01437]
D = A                                        // ROM[01438]
@ R15                                        // ROM[01439]
M = D                                        // ROM[01440]
@ :call                                      // ROM[01441]
0; JMP                                       // ROM[01442]
( String.new:5)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[01443]
0; JMP                                       // ROM[01444]
// ---------------------------
// ( RA )
( String.new:4) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01445]
AM = M-1                                     // ROM[01446]
D = M                                        // ROM[01447]
// ---------------------------
@ 5                                          // ROM[01448]
M = D                                        // ROM[01449]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( String.new$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01450]
D = A                                        // ROM[01451]
@ R13                                        // ROM[01452]
M = D                                        // ROM[01453]
// ---------------------------
// call
@ String.new:6                               // ROM[01454]
D = A                                        // ROM[01455]
@ R15                                        // ROM[01456]
M = D                                        // ROM[01457]
@ :push_argument                             // ROM[01458]
0; JMP                                       // ROM[01459]
( String.new:6)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[01460]
D = A                                        // ROM[01461]
// ---------------------------
// push D
@ SP                                         // ROM[01462]
AM = M+1                                     // ROM[01463]
A = A-1                                      // ROM[01464]
M = D                                        // ROM[01465]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ String.new:7                               // ROM[01466]
D = A                                        // ROM[01467]
@ R15                                        // ROM[01468]
M = D                                        // ROM[01469]
@ :gt                                        // ROM[01470]
0; JMP                                       // ROM[01471]
( String.new:7)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01472]
AM = M-1                                     // ROM[01473]
D = M                                        // ROM[01474]
// ---------------------------
@ String.new$IF_TRUE1                        // ROM[01475]
D; JNE                                       // ROM[01476]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ String.new$IF_FALSE1                       // ROM[01477]
0; JMP                                       // ROM[01478]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( String.new$IF_TRUE1 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01479]
D = A                                        // ROM[01480]
@ R13                                        // ROM[01481]
M = D                                        // ROM[01482]
// ---------------------------
// call
@ String.new:8                               // ROM[01483]
D = A                                        // ROM[01484]
@ R15                                        // ROM[01485]
M = D                                        // ROM[01486]
@ :push_argument                             // ROM[01487]
0; JMP                                       // ROM[01488]
( String.new:8)

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[01489]
D = A                                        // ROM[01490]
@ R13                                        // ROM[01491]
M = D                                        // ROM[01492]
// ---------------------------
// Push RA
@ String.new:9                               // ROM[01493]
D = A                                        // ROM[01494]
// ---------------------------
// push D
@ SP                                         // ROM[01495]
AM = M+1                                     // ROM[01496]
A = A-1                                      // ROM[01497]
M = D                                        // ROM[01498]
// ---------------------------
// call
@ String.new:10                              // ROM[01499]
D = A                                        // ROM[01500]
@ R15                                        // ROM[01501]
M = D                                        // ROM[01502]
@ :call                                      // ROM[01503]
0; JMP                                       // ROM[01504]
( String.new:10)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[01505]
0; JMP                                       // ROM[01506]
// ---------------------------
// ( RA )
( String.new:9) 

// -------------------------------------
// POP: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01507]
D = A                                        // ROM[01508]
@ R13                                        // ROM[01509]
M = D                                        // ROM[01510]
// ---------------------------
// call
@ String.new:11                              // ROM[01511]
D = A                                        // ROM[01512]
@ R15                                        // ROM[01513]
M = D                                        // ROM[01514]
@ :pop_this                                  // ROM[01515]
0; JMP                                       // ROM[01516]
( String.new:11)

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( String.new$IF_FALSE1 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01517]
D = A                                        // ROM[01518]
@ R13                                        // ROM[01519]
M = D                                        // ROM[01520]
// ---------------------------
// call
@ String.new:12                              // ROM[01521]
D = A                                        // ROM[01522]
@ R15                                        // ROM[01523]
M = D                                        // ROM[01524]
@ :push_argument                             // ROM[01525]
0; JMP                                       // ROM[01526]
( String.new:12)

// -------------------------------------
// POP: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01527]
D = A                                        // ROM[01528]
@ R13                                        // ROM[01529]
M = D                                        // ROM[01530]
// ---------------------------
// call
@ String.new:13                              // ROM[01531]
D = A                                        // ROM[01532]
@ R15                                        // ROM[01533]
M = D                                        // ROM[01534]
@ :pop_this                                  // ROM[01535]
0; JMP                                       // ROM[01536]
( String.new:13)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[01537]
D = A                                        // ROM[01538]
// ---------------------------
// push D
@ SP                                         // ROM[01539]
AM = M+1                                     // ROM[01540]
A = A-1                                      // ROM[01541]
M = D                                        // ROM[01542]

// -------------------------------------
// POP: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[01543]
D = A                                        // ROM[01544]
@ R13                                        // ROM[01545]
M = D                                        // ROM[01546]
// ---------------------------
// call
@ String.new:14                              // ROM[01547]
D = A                                        // ROM[01548]
@ R15                                        // ROM[01549]
M = D                                        // ROM[01550]
@ :pop_this                                  // ROM[01551]
0; JMP                                       // ROM[01552]
( String.new:14)

// -------------------------------------
// PUSH: <pointer, 0>
// -------------------------------------
@ 3                                          // ROM[01553]
D = M                                        // ROM[01554]
// ---------------------------
// push D
@ SP                                         // ROM[01555]
AM = M+1                                     // ROM[01556]
A = A-1                                      // ROM[01557]
M = D                                        // ROM[01558]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.new:15                              // ROM[01559]
D = A                                        // ROM[01560]
@ R15                                        // ROM[01561]
M = D                                        // ROM[01562]
@ :return                                    // ROM[01563]
0; JMP                                       // ROM[01564]
( String.new:15)

// =========================================================
// FUNCTION: String.dispose(0 locals)
// =========================================================

( String.dispose )
// ---------------------------
// clear local segment
D = 0                                        // ROM[01565]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01566]
D = A                                        // ROM[01567]
@ R13                                        // ROM[01568]
M = D                                        // ROM[01569]
// ---------------------------
// call
@ String.dispose:16                          // ROM[01570]
D = A                                        // ROM[01571]
@ R15                                        // ROM[01572]
M = D                                        // ROM[01573]
@ :push_argument                             // ROM[01574]
0; JMP                                       // ROM[01575]
( String.dispose:16)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01576]
AM = M-1                                     // ROM[01577]
D = M                                        // ROM[01578]
// ---------------------------
@ 3                                          // ROM[01579]
M = D                                        // ROM[01580]

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01581]
D = A                                        // ROM[01582]
@ R13                                        // ROM[01583]
M = D                                        // ROM[01584]
// ---------------------------
// call
@ String.dispose:17                          // ROM[01585]
D = A                                        // ROM[01586]
@ R15                                        // ROM[01587]
M = D                                        // ROM[01588]
@ :push_this                                 // ROM[01589]
0; JMP                                       // ROM[01590]
( String.dispose:17)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[01591]
D = A                                        // ROM[01592]
// ---------------------------
// push D
@ SP                                         // ROM[01593]
AM = M+1                                     // ROM[01594]
A = A-1                                      // ROM[01595]
M = D                                        // ROM[01596]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ String.dispose:18                          // ROM[01597]
D = A                                        // ROM[01598]
@ R15                                        // ROM[01599]
M = D                                        // ROM[01600]
@ :gt                                        // ROM[01601]
0; JMP                                       // ROM[01602]
( String.dispose:18)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01603]
AM = M-1                                     // ROM[01604]
D = M                                        // ROM[01605]
// ---------------------------
@ String.dispose$IF_TRUE0                    // ROM[01606]
D; JNE                                       // ROM[01607]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ String.dispose$IF_FALSE0                   // ROM[01608]
0; JMP                                       // ROM[01609]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( String.dispose$IF_TRUE0 )

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01610]
D = A                                        // ROM[01611]
@ R13                                        // ROM[01612]
M = D                                        // ROM[01613]
// ---------------------------
// call
@ String.dispose:19                          // ROM[01614]
D = A                                        // ROM[01615]
@ R15                                        // ROM[01616]
M = D                                        // ROM[01617]
@ :push_this                                 // ROM[01618]
0; JMP                                       // ROM[01619]
( String.dispose:19)

// -------------------------------------
// CALL: Array.dispose(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[01620]
D = A                                        // ROM[01621]
@ R13                                        // ROM[01622]
M = D                                        // ROM[01623]
// ---------------------------
// Push RA
@ String.dispose:20                          // ROM[01624]
D = A                                        // ROM[01625]
// ---------------------------
// push D
@ SP                                         // ROM[01626]
AM = M+1                                     // ROM[01627]
A = A-1                                      // ROM[01628]
M = D                                        // ROM[01629]
// ---------------------------
// call
@ String.dispose:21                          // ROM[01630]
D = A                                        // ROM[01631]
@ R15                                        // ROM[01632]
M = D                                        // ROM[01633]
@ :call                                      // ROM[01634]
0; JMP                                       // ROM[01635]
( String.dispose:21)
// ---------------------------
// goto functionName
@ Array.dispose                              // ROM[01636]
0; JMP                                       // ROM[01637]
// ---------------------------
// ( RA )
( String.dispose:20) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01638]
AM = M-1                                     // ROM[01639]
D = M                                        // ROM[01640]
// ---------------------------
@ 5                                          // ROM[01641]
M = D                                        // ROM[01642]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( String.dispose$IF_FALSE0 )

// -------------------------------------
// PUSH: <pointer, 0>
// -------------------------------------
@ 3                                          // ROM[01643]
D = M                                        // ROM[01644]
// ---------------------------
// push D
@ SP                                         // ROM[01645]
AM = M+1                                     // ROM[01646]
A = A-1                                      // ROM[01647]
M = D                                        // ROM[01648]

// -------------------------------------
// CALL: Memory.deAlloc(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[01649]
D = A                                        // ROM[01650]
@ R13                                        // ROM[01651]
M = D                                        // ROM[01652]
// ---------------------------
// Push RA
@ String.dispose:22                          // ROM[01653]
D = A                                        // ROM[01654]
// ---------------------------
// push D
@ SP                                         // ROM[01655]
AM = M+1                                     // ROM[01656]
A = A-1                                      // ROM[01657]
M = D                                        // ROM[01658]
// ---------------------------
// call
@ String.dispose:23                          // ROM[01659]
D = A                                        // ROM[01660]
@ R15                                        // ROM[01661]
M = D                                        // ROM[01662]
@ :call                                      // ROM[01663]
0; JMP                                       // ROM[01664]
( String.dispose:23)
// ---------------------------
// goto functionName
@ Memory.deAlloc                             // ROM[01665]
0; JMP                                       // ROM[01666]
// ---------------------------
// ( RA )
( String.dispose:22) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01667]
AM = M-1                                     // ROM[01668]
D = M                                        // ROM[01669]
// ---------------------------
@ 5                                          // ROM[01670]
M = D                                        // ROM[01671]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[01672]
D = A                                        // ROM[01673]
// ---------------------------
// push D
@ SP                                         // ROM[01674]
AM = M+1                                     // ROM[01675]
A = A-1                                      // ROM[01676]
M = D                                        // ROM[01677]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.dispose:24                          // ROM[01678]
D = A                                        // ROM[01679]
@ R15                                        // ROM[01680]
M = D                                        // ROM[01681]
@ :return                                    // ROM[01682]
0; JMP                                       // ROM[01683]
( String.dispose:24)

// =========================================================
// FUNCTION: String.length(0 locals)
// =========================================================

( String.length )
// ---------------------------
// clear local segment
D = 0                                        // ROM[01684]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01685]
D = A                                        // ROM[01686]
@ R13                                        // ROM[01687]
M = D                                        // ROM[01688]
// ---------------------------
// call
@ String.length:25                           // ROM[01689]
D = A                                        // ROM[01690]
@ R15                                        // ROM[01691]
M = D                                        // ROM[01692]
@ :push_argument                             // ROM[01693]
0; JMP                                       // ROM[01694]
( String.length:25)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01695]
AM = M-1                                     // ROM[01696]
D = M                                        // ROM[01697]
// ---------------------------
@ 3                                          // ROM[01698]
M = D                                        // ROM[01699]

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[01700]
D = A                                        // ROM[01701]
@ R13                                        // ROM[01702]
M = D                                        // ROM[01703]
// ---------------------------
// call
@ String.length:26                           // ROM[01704]
D = A                                        // ROM[01705]
@ R15                                        // ROM[01706]
M = D                                        // ROM[01707]
@ :push_this                                 // ROM[01708]
0; JMP                                       // ROM[01709]
( String.length:26)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.length:27                           // ROM[01710]
D = A                                        // ROM[01711]
@ R15                                        // ROM[01712]
M = D                                        // ROM[01713]
@ :return                                    // ROM[01714]
0; JMP                                       // ROM[01715]
( String.length:27)

// =========================================================
// FUNCTION: String.charAt(0 locals)
// =========================================================

( String.charAt )
// ---------------------------
// clear local segment
D = 0                                        // ROM[01716]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01717]
D = A                                        // ROM[01718]
@ R13                                        // ROM[01719]
M = D                                        // ROM[01720]
// ---------------------------
// call
@ String.charAt:28                           // ROM[01721]
D = A                                        // ROM[01722]
@ R15                                        // ROM[01723]
M = D                                        // ROM[01724]
@ :push_argument                             // ROM[01725]
0; JMP                                       // ROM[01726]
( String.charAt:28)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01727]
AM = M-1                                     // ROM[01728]
D = M                                        // ROM[01729]
// ---------------------------
@ 3                                          // ROM[01730]
M = D                                        // ROM[01731]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01732]
D = A                                        // ROM[01733]
@ R13                                        // ROM[01734]
M = D                                        // ROM[01735]
// ---------------------------
// call
@ String.charAt:29                           // ROM[01736]
D = A                                        // ROM[01737]
@ R15                                        // ROM[01738]
M = D                                        // ROM[01739]
@ :push_argument                             // ROM[01740]
0; JMP                                       // ROM[01741]
( String.charAt:29)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[01742]
D = A                                        // ROM[01743]
// ---------------------------
// push D
@ SP                                         // ROM[01744]
AM = M+1                                     // ROM[01745]
A = A-1                                      // ROM[01746]
M = D                                        // ROM[01747]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ String.charAt:30                           // ROM[01748]
D = A                                        // ROM[01749]
@ R15                                        // ROM[01750]
M = D                                        // ROM[01751]
@ :lt                                        // ROM[01752]
0; JMP                                       // ROM[01753]
( String.charAt:30)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01754]
D = A                                        // ROM[01755]
@ R13                                        // ROM[01756]
M = D                                        // ROM[01757]
// ---------------------------
// call
@ String.charAt:31                           // ROM[01758]
D = A                                        // ROM[01759]
@ R15                                        // ROM[01760]
M = D                                        // ROM[01761]
@ :push_argument                             // ROM[01762]
0; JMP                                       // ROM[01763]
( String.charAt:31)

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[01764]
D = A                                        // ROM[01765]
@ R13                                        // ROM[01766]
M = D                                        // ROM[01767]
// ---------------------------
// call
@ String.charAt:32                           // ROM[01768]
D = A                                        // ROM[01769]
@ R15                                        // ROM[01770]
M = D                                        // ROM[01771]
@ :push_this                                 // ROM[01772]
0; JMP                                       // ROM[01773]
( String.charAt:32)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ String.charAt:33                           // ROM[01774]
D = A                                        // ROM[01775]
@ R15                                        // ROM[01776]
M = D                                        // ROM[01777]
@ :gt                                        // ROM[01778]
0; JMP                                       // ROM[01779]
( String.charAt:33)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ String.charAt:34                           // ROM[01780]
D = A                                        // ROM[01781]
@ R15                                        // ROM[01782]
M = D                                        // ROM[01783]
@ :or                                        // ROM[01784]
0; JMP                                       // ROM[01785]
( String.charAt:34)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01786]
D = A                                        // ROM[01787]
@ R13                                        // ROM[01788]
M = D                                        // ROM[01789]
// ---------------------------
// call
@ String.charAt:35                           // ROM[01790]
D = A                                        // ROM[01791]
@ R15                                        // ROM[01792]
M = D                                        // ROM[01793]
@ :push_argument                             // ROM[01794]
0; JMP                                       // ROM[01795]
( String.charAt:35)

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[01796]
D = A                                        // ROM[01797]
@ R13                                        // ROM[01798]
M = D                                        // ROM[01799]
// ---------------------------
// call
@ String.charAt:36                           // ROM[01800]
D = A                                        // ROM[01801]
@ R15                                        // ROM[01802]
M = D                                        // ROM[01803]
@ :push_this                                 // ROM[01804]
0; JMP                                       // ROM[01805]
( String.charAt:36)

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ String.charAt:37                           // ROM[01806]
D = A                                        // ROM[01807]
@ R15                                        // ROM[01808]
M = D                                        // ROM[01809]
@ :eq                                        // ROM[01810]
0; JMP                                       // ROM[01811]
( String.charAt:37)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ String.charAt:38                           // ROM[01812]
D = A                                        // ROM[01813]
@ R15                                        // ROM[01814]
M = D                                        // ROM[01815]
@ :or                                        // ROM[01816]
0; JMP                                       // ROM[01817]
( String.charAt:38)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01818]
AM = M-1                                     // ROM[01819]
D = M                                        // ROM[01820]
// ---------------------------
@ String.charAt$IF_TRUE0                     // ROM[01821]
D; JNE                                       // ROM[01822]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ String.charAt$IF_FALSE0                    // ROM[01823]
0; JMP                                       // ROM[01824]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( String.charAt$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[01825]
D = A                                        // ROM[01826]
// ---------------------------
// push D
@ SP                                         // ROM[01827]
AM = M+1                                     // ROM[01828]
A = A-1                                      // ROM[01829]
M = D                                        // ROM[01830]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[01831]
D = A                                        // ROM[01832]
@ R13                                        // ROM[01833]
M = D                                        // ROM[01834]
// ---------------------------
// Push RA
@ String.charAt:39                           // ROM[01835]
D = A                                        // ROM[01836]
// ---------------------------
// push D
@ SP                                         // ROM[01837]
AM = M+1                                     // ROM[01838]
A = A-1                                      // ROM[01839]
M = D                                        // ROM[01840]
// ---------------------------
// call
@ String.charAt:40                           // ROM[01841]
D = A                                        // ROM[01842]
@ R15                                        // ROM[01843]
M = D                                        // ROM[01844]
@ :call                                      // ROM[01845]
0; JMP                                       // ROM[01846]
( String.charAt:40)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[01847]
0; JMP                                       // ROM[01848]
// ---------------------------
// ( RA )
( String.charAt:39) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01849]
AM = M-1                                     // ROM[01850]
D = M                                        // ROM[01851]
// ---------------------------
@ 5                                          // ROM[01852]
M = D                                        // ROM[01853]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( String.charAt$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01854]
D = A                                        // ROM[01855]
@ R13                                        // ROM[01856]
M = D                                        // ROM[01857]
// ---------------------------
// call
@ String.charAt:41                           // ROM[01858]
D = A                                        // ROM[01859]
@ R15                                        // ROM[01860]
M = D                                        // ROM[01861]
@ :push_argument                             // ROM[01862]
0; JMP                                       // ROM[01863]
( String.charAt:41)

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01864]
D = A                                        // ROM[01865]
@ R13                                        // ROM[01866]
M = D                                        // ROM[01867]
// ---------------------------
// call
@ String.charAt:42                           // ROM[01868]
D = A                                        // ROM[01869]
@ R15                                        // ROM[01870]
M = D                                        // ROM[01871]
@ :push_this                                 // ROM[01872]
0; JMP                                       // ROM[01873]
( String.charAt:42)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.charAt:43                           // ROM[01874]
D = A                                        // ROM[01875]
@ R15                                        // ROM[01876]
M = D                                        // ROM[01877]
@ :add                                       // ROM[01878]
0; JMP                                       // ROM[01879]
( String.charAt:43)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01880]
AM = M-1                                     // ROM[01881]
D = M                                        // ROM[01882]
// ---------------------------
@ 4                                          // ROM[01883]
M = D                                        // ROM[01884]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01885]
D = A                                        // ROM[01886]
@ R13                                        // ROM[01887]
M = D                                        // ROM[01888]
// ---------------------------
// call
@ String.charAt:44                           // ROM[01889]
D = A                                        // ROM[01890]
@ R15                                        // ROM[01891]
M = D                                        // ROM[01892]
@ :push_that                                 // ROM[01893]
0; JMP                                       // ROM[01894]
( String.charAt:44)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.charAt:45                           // ROM[01895]
D = A                                        // ROM[01896]
@ R15                                        // ROM[01897]
M = D                                        // ROM[01898]
@ :return                                    // ROM[01899]
0; JMP                                       // ROM[01900]
( String.charAt:45)

// =========================================================
// FUNCTION: String.setCharAt(0 locals)
// =========================================================

( String.setCharAt )
// ---------------------------
// clear local segment
D = 0                                        // ROM[01901]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[01902]
D = A                                        // ROM[01903]
@ R13                                        // ROM[01904]
M = D                                        // ROM[01905]
// ---------------------------
// call
@ String.setCharAt:46                        // ROM[01906]
D = A                                        // ROM[01907]
@ R15                                        // ROM[01908]
M = D                                        // ROM[01909]
@ :push_argument                             // ROM[01910]
0; JMP                                       // ROM[01911]
( String.setCharAt:46)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[01912]
AM = M-1                                     // ROM[01913]
D = M                                        // ROM[01914]
// ---------------------------
@ 3                                          // ROM[01915]
M = D                                        // ROM[01916]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01917]
D = A                                        // ROM[01918]
@ R13                                        // ROM[01919]
M = D                                        // ROM[01920]
// ---------------------------
// call
@ String.setCharAt:47                        // ROM[01921]
D = A                                        // ROM[01922]
@ R15                                        // ROM[01923]
M = D                                        // ROM[01924]
@ :push_argument                             // ROM[01925]
0; JMP                                       // ROM[01926]
( String.setCharAt:47)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[01927]
D = A                                        // ROM[01928]
// ---------------------------
// push D
@ SP                                         // ROM[01929]
AM = M+1                                     // ROM[01930]
A = A-1                                      // ROM[01931]
M = D                                        // ROM[01932]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ String.setCharAt:48                        // ROM[01933]
D = A                                        // ROM[01934]
@ R15                                        // ROM[01935]
M = D                                        // ROM[01936]
@ :lt                                        // ROM[01937]
0; JMP                                       // ROM[01938]
( String.setCharAt:48)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01939]
D = A                                        // ROM[01940]
@ R13                                        // ROM[01941]
M = D                                        // ROM[01942]
// ---------------------------
// call
@ String.setCharAt:49                        // ROM[01943]
D = A                                        // ROM[01944]
@ R15                                        // ROM[01945]
M = D                                        // ROM[01946]
@ :push_argument                             // ROM[01947]
0; JMP                                       // ROM[01948]
( String.setCharAt:49)

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[01949]
D = A                                        // ROM[01950]
@ R13                                        // ROM[01951]
M = D                                        // ROM[01952]
// ---------------------------
// call
@ String.setCharAt:50                        // ROM[01953]
D = A                                        // ROM[01954]
@ R15                                        // ROM[01955]
M = D                                        // ROM[01956]
@ :push_this                                 // ROM[01957]
0; JMP                                       // ROM[01958]
( String.setCharAt:50)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ String.setCharAt:51                        // ROM[01959]
D = A                                        // ROM[01960]
@ R15                                        // ROM[01961]
M = D                                        // ROM[01962]
@ :gt                                        // ROM[01963]
0; JMP                                       // ROM[01964]
( String.setCharAt:51)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ String.setCharAt:52                        // ROM[01965]
D = A                                        // ROM[01966]
@ R15                                        // ROM[01967]
M = D                                        // ROM[01968]
@ :or                                        // ROM[01969]
0; JMP                                       // ROM[01970]
( String.setCharAt:52)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[01971]
D = A                                        // ROM[01972]
@ R13                                        // ROM[01973]
M = D                                        // ROM[01974]
// ---------------------------
// call
@ String.setCharAt:53                        // ROM[01975]
D = A                                        // ROM[01976]
@ R15                                        // ROM[01977]
M = D                                        // ROM[01978]
@ :push_argument                             // ROM[01979]
0; JMP                                       // ROM[01980]
( String.setCharAt:53)

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[01981]
D = A                                        // ROM[01982]
@ R13                                        // ROM[01983]
M = D                                        // ROM[01984]
// ---------------------------
// call
@ String.setCharAt:54                        // ROM[01985]
D = A                                        // ROM[01986]
@ R15                                        // ROM[01987]
M = D                                        // ROM[01988]
@ :push_this                                 // ROM[01989]
0; JMP                                       // ROM[01990]
( String.setCharAt:54)

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ String.setCharAt:55                        // ROM[01991]
D = A                                        // ROM[01992]
@ R15                                        // ROM[01993]
M = D                                        // ROM[01994]
@ :eq                                        // ROM[01995]
0; JMP                                       // ROM[01996]
( String.setCharAt:55)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ String.setCharAt:56                        // ROM[01997]
D = A                                        // ROM[01998]
@ R15                                        // ROM[01999]
M = D                                        // ROM[02000]
@ :or                                        // ROM[02001]
0; JMP                                       // ROM[02002]
( String.setCharAt:56)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02003]
AM = M-1                                     // ROM[02004]
D = M                                        // ROM[02005]
// ---------------------------
@ String.setCharAt$IF_TRUE0                  // ROM[02006]
D; JNE                                       // ROM[02007]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ String.setCharAt$IF_FALSE0                 // ROM[02008]
0; JMP                                       // ROM[02009]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( String.setCharAt$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[02010]
D = A                                        // ROM[02011]
// ---------------------------
// push D
@ SP                                         // ROM[02012]
AM = M+1                                     // ROM[02013]
A = A-1                                      // ROM[02014]
M = D                                        // ROM[02015]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[02016]
D = A                                        // ROM[02017]
@ R13                                        // ROM[02018]
M = D                                        // ROM[02019]
// ---------------------------
// Push RA
@ String.setCharAt:57                        // ROM[02020]
D = A                                        // ROM[02021]
// ---------------------------
// push D
@ SP                                         // ROM[02022]
AM = M+1                                     // ROM[02023]
A = A-1                                      // ROM[02024]
M = D                                        // ROM[02025]
// ---------------------------
// call
@ String.setCharAt:58                        // ROM[02026]
D = A                                        // ROM[02027]
@ R15                                        // ROM[02028]
M = D                                        // ROM[02029]
@ :call                                      // ROM[02030]
0; JMP                                       // ROM[02031]
( String.setCharAt:58)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[02032]
0; JMP                                       // ROM[02033]
// ---------------------------
// ( RA )
( String.setCharAt:57) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02034]
AM = M-1                                     // ROM[02035]
D = M                                        // ROM[02036]
// ---------------------------
@ 5                                          // ROM[02037]
M = D                                        // ROM[02038]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( String.setCharAt$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02039]
D = A                                        // ROM[02040]
@ R13                                        // ROM[02041]
M = D                                        // ROM[02042]
// ---------------------------
// call
@ String.setCharAt:59                        // ROM[02043]
D = A                                        // ROM[02044]
@ R15                                        // ROM[02045]
M = D                                        // ROM[02046]
@ :push_argument                             // ROM[02047]
0; JMP                                       // ROM[02048]
( String.setCharAt:59)

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02049]
D = A                                        // ROM[02050]
@ R13                                        // ROM[02051]
M = D                                        // ROM[02052]
// ---------------------------
// call
@ String.setCharAt:60                        // ROM[02053]
D = A                                        // ROM[02054]
@ R15                                        // ROM[02055]
M = D                                        // ROM[02056]
@ :push_this                                 // ROM[02057]
0; JMP                                       // ROM[02058]
( String.setCharAt:60)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setCharAt:61                        // ROM[02059]
D = A                                        // ROM[02060]
@ R15                                        // ROM[02061]
M = D                                        // ROM[02062]
@ :add                                       // ROM[02063]
0; JMP                                       // ROM[02064]
( String.setCharAt:61)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02065]
D = A                                        // ROM[02066]
@ R13                                        // ROM[02067]
M = D                                        // ROM[02068]
// ---------------------------
// call
@ String.setCharAt:62                        // ROM[02069]
D = A                                        // ROM[02070]
@ R15                                        // ROM[02071]
M = D                                        // ROM[02072]
@ :push_argument                             // ROM[02073]
0; JMP                                       // ROM[02074]
( String.setCharAt:62)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02075]
AM = M-1                                     // ROM[02076]
D = M                                        // ROM[02077]
// ---------------------------
@ 5                                          // ROM[02078]
M = D                                        // ROM[02079]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02080]
AM = M-1                                     // ROM[02081]
D = M                                        // ROM[02082]
// ---------------------------
@ 4                                          // ROM[02083]
M = D                                        // ROM[02084]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[02085]
D = M                                        // ROM[02086]
// ---------------------------
// push D
@ SP                                         // ROM[02087]
AM = M+1                                     // ROM[02088]
A = A-1                                      // ROM[02089]
M = D                                        // ROM[02090]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02091]
D = A                                        // ROM[02092]
@ R13                                        // ROM[02093]
M = D                                        // ROM[02094]
// ---------------------------
// call
@ String.setCharAt:63                        // ROM[02095]
D = A                                        // ROM[02096]
@ R15                                        // ROM[02097]
M = D                                        // ROM[02098]
@ :pop_that                                  // ROM[02099]
0; JMP                                       // ROM[02100]
( String.setCharAt:63)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02101]
D = A                                        // ROM[02102]
// ---------------------------
// push D
@ SP                                         // ROM[02103]
AM = M+1                                     // ROM[02104]
A = A-1                                      // ROM[02105]
M = D                                        // ROM[02106]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.setCharAt:64                        // ROM[02107]
D = A                                        // ROM[02108]
@ R15                                        // ROM[02109]
M = D                                        // ROM[02110]
@ :return                                    // ROM[02111]
0; JMP                                       // ROM[02112]
( String.setCharAt:64)

// =========================================================
// FUNCTION: String.appendChar(0 locals)
// =========================================================

( String.appendChar )
// ---------------------------
// clear local segment
D = 0                                        // ROM[02113]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02114]
D = A                                        // ROM[02115]
@ R13                                        // ROM[02116]
M = D                                        // ROM[02117]
// ---------------------------
// call
@ String.appendChar:65                       // ROM[02118]
D = A                                        // ROM[02119]
@ R15                                        // ROM[02120]
M = D                                        // ROM[02121]
@ :push_argument                             // ROM[02122]
0; JMP                                       // ROM[02123]
( String.appendChar:65)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02124]
AM = M-1                                     // ROM[02125]
D = M                                        // ROM[02126]
// ---------------------------
@ 3                                          // ROM[02127]
M = D                                        // ROM[02128]

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02129]
D = A                                        // ROM[02130]
@ R13                                        // ROM[02131]
M = D                                        // ROM[02132]
// ---------------------------
// call
@ String.appendChar:66                       // ROM[02133]
D = A                                        // ROM[02134]
@ R15                                        // ROM[02135]
M = D                                        // ROM[02136]
@ :push_this                                 // ROM[02137]
0; JMP                                       // ROM[02138]
( String.appendChar:66)

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02139]
D = A                                        // ROM[02140]
@ R13                                        // ROM[02141]
M = D                                        // ROM[02142]
// ---------------------------
// call
@ String.appendChar:67                       // ROM[02143]
D = A                                        // ROM[02144]
@ R15                                        // ROM[02145]
M = D                                        // ROM[02146]
@ :push_this                                 // ROM[02147]
0; JMP                                       // ROM[02148]
( String.appendChar:67)

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ String.appendChar:68                       // ROM[02149]
D = A                                        // ROM[02150]
@ R15                                        // ROM[02151]
M = D                                        // ROM[02152]
@ :eq                                        // ROM[02153]
0; JMP                                       // ROM[02154]
( String.appendChar:68)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02155]
AM = M-1                                     // ROM[02156]
D = M                                        // ROM[02157]
// ---------------------------
@ String.appendChar$IF_TRUE0                 // ROM[02158]
D; JNE                                       // ROM[02159]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ String.appendChar$IF_FALSE0                // ROM[02160]
0; JMP                                       // ROM[02161]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( String.appendChar$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 17>
// -------------------------------------
@ 17                                         // ROM[02162]
D = A                                        // ROM[02163]
// ---------------------------
// push D
@ SP                                         // ROM[02164]
AM = M+1                                     // ROM[02165]
A = A-1                                      // ROM[02166]
M = D                                        // ROM[02167]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[02168]
D = A                                        // ROM[02169]
@ R13                                        // ROM[02170]
M = D                                        // ROM[02171]
// ---------------------------
// Push RA
@ String.appendChar:69                       // ROM[02172]
D = A                                        // ROM[02173]
// ---------------------------
// push D
@ SP                                         // ROM[02174]
AM = M+1                                     // ROM[02175]
A = A-1                                      // ROM[02176]
M = D                                        // ROM[02177]
// ---------------------------
// call
@ String.appendChar:70                       // ROM[02178]
D = A                                        // ROM[02179]
@ R15                                        // ROM[02180]
M = D                                        // ROM[02181]
@ :call                                      // ROM[02182]
0; JMP                                       // ROM[02183]
( String.appendChar:70)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[02184]
0; JMP                                       // ROM[02185]
// ---------------------------
// ( RA )
( String.appendChar:69) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02186]
AM = M-1                                     // ROM[02187]
D = M                                        // ROM[02188]
// ---------------------------
@ 5                                          // ROM[02189]
M = D                                        // ROM[02190]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( String.appendChar$IF_FALSE0 )

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02191]
D = A                                        // ROM[02192]
@ R13                                        // ROM[02193]
M = D                                        // ROM[02194]
// ---------------------------
// call
@ String.appendChar:71                       // ROM[02195]
D = A                                        // ROM[02196]
@ R15                                        // ROM[02197]
M = D                                        // ROM[02198]
@ :push_this                                 // ROM[02199]
0; JMP                                       // ROM[02200]
( String.appendChar:71)

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02201]
D = A                                        // ROM[02202]
@ R13                                        // ROM[02203]
M = D                                        // ROM[02204]
// ---------------------------
// call
@ String.appendChar:72                       // ROM[02205]
D = A                                        // ROM[02206]
@ R15                                        // ROM[02207]
M = D                                        // ROM[02208]
@ :push_this                                 // ROM[02209]
0; JMP                                       // ROM[02210]
( String.appendChar:72)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.appendChar:73                       // ROM[02211]
D = A                                        // ROM[02212]
@ R15                                        // ROM[02213]
M = D                                        // ROM[02214]
@ :add                                       // ROM[02215]
0; JMP                                       // ROM[02216]
( String.appendChar:73)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02217]
D = A                                        // ROM[02218]
@ R13                                        // ROM[02219]
M = D                                        // ROM[02220]
// ---------------------------
// call
@ String.appendChar:74                       // ROM[02221]
D = A                                        // ROM[02222]
@ R15                                        // ROM[02223]
M = D                                        // ROM[02224]
@ :push_argument                             // ROM[02225]
0; JMP                                       // ROM[02226]
( String.appendChar:74)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02227]
AM = M-1                                     // ROM[02228]
D = M                                        // ROM[02229]
// ---------------------------
@ 5                                          // ROM[02230]
M = D                                        // ROM[02231]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02232]
AM = M-1                                     // ROM[02233]
D = M                                        // ROM[02234]
// ---------------------------
@ 4                                          // ROM[02235]
M = D                                        // ROM[02236]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[02237]
D = M                                        // ROM[02238]
// ---------------------------
// push D
@ SP                                         // ROM[02239]
AM = M+1                                     // ROM[02240]
A = A-1                                      // ROM[02241]
M = D                                        // ROM[02242]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02243]
D = A                                        // ROM[02244]
@ R13                                        // ROM[02245]
M = D                                        // ROM[02246]
// ---------------------------
// call
@ String.appendChar:75                       // ROM[02247]
D = A                                        // ROM[02248]
@ R15                                        // ROM[02249]
M = D                                        // ROM[02250]
@ :pop_that                                  // ROM[02251]
0; JMP                                       // ROM[02252]
( String.appendChar:75)

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02253]
D = A                                        // ROM[02254]
@ R13                                        // ROM[02255]
M = D                                        // ROM[02256]
// ---------------------------
// call
@ String.appendChar:76                       // ROM[02257]
D = A                                        // ROM[02258]
@ R15                                        // ROM[02259]
M = D                                        // ROM[02260]
@ :push_this                                 // ROM[02261]
0; JMP                                       // ROM[02262]
( String.appendChar:76)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[02263]
D = A                                        // ROM[02264]
// ---------------------------
// push D
@ SP                                         // ROM[02265]
AM = M+1                                     // ROM[02266]
A = A-1                                      // ROM[02267]
M = D                                        // ROM[02268]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.appendChar:77                       // ROM[02269]
D = A                                        // ROM[02270]
@ R15                                        // ROM[02271]
M = D                                        // ROM[02272]
@ :add                                       // ROM[02273]
0; JMP                                       // ROM[02274]
( String.appendChar:77)

// -------------------------------------
// POP: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02275]
D = A                                        // ROM[02276]
@ R13                                        // ROM[02277]
M = D                                        // ROM[02278]
// ---------------------------
// call
@ String.appendChar:78                       // ROM[02279]
D = A                                        // ROM[02280]
@ R15                                        // ROM[02281]
M = D                                        // ROM[02282]
@ :pop_this                                  // ROM[02283]
0; JMP                                       // ROM[02284]
( String.appendChar:78)

// -------------------------------------
// PUSH: <pointer, 0>
// -------------------------------------
@ 3                                          // ROM[02285]
D = M                                        // ROM[02286]
// ---------------------------
// push D
@ SP                                         // ROM[02287]
AM = M+1                                     // ROM[02288]
A = A-1                                      // ROM[02289]
M = D                                        // ROM[02290]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.appendChar:79                       // ROM[02291]
D = A                                        // ROM[02292]
@ R15                                        // ROM[02293]
M = D                                        // ROM[02294]
@ :return                                    // ROM[02295]
0; JMP                                       // ROM[02296]
( String.appendChar:79)

// =========================================================
// FUNCTION: String.eraseLastChar(0 locals)
// =========================================================

( String.eraseLastChar )
// ---------------------------
// clear local segment
D = 0                                        // ROM[02297]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02298]
D = A                                        // ROM[02299]
@ R13                                        // ROM[02300]
M = D                                        // ROM[02301]
// ---------------------------
// call
@ String.eraseLastChar:80                    // ROM[02302]
D = A                                        // ROM[02303]
@ R15                                        // ROM[02304]
M = D                                        // ROM[02305]
@ :push_argument                             // ROM[02306]
0; JMP                                       // ROM[02307]
( String.eraseLastChar:80)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02308]
AM = M-1                                     // ROM[02309]
D = M                                        // ROM[02310]
// ---------------------------
@ 3                                          // ROM[02311]
M = D                                        // ROM[02312]

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02313]
D = A                                        // ROM[02314]
@ R13                                        // ROM[02315]
M = D                                        // ROM[02316]
// ---------------------------
// call
@ String.eraseLastChar:81                    // ROM[02317]
D = A                                        // ROM[02318]
@ R15                                        // ROM[02319]
M = D                                        // ROM[02320]
@ :push_this                                 // ROM[02321]
0; JMP                                       // ROM[02322]
( String.eraseLastChar:81)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02323]
D = A                                        // ROM[02324]
// ---------------------------
// push D
@ SP                                         // ROM[02325]
AM = M+1                                     // ROM[02326]
A = A-1                                      // ROM[02327]
M = D                                        // ROM[02328]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ String.eraseLastChar:82                    // ROM[02329]
D = A                                        // ROM[02330]
@ R15                                        // ROM[02331]
M = D                                        // ROM[02332]
@ :eq                                        // ROM[02333]
0; JMP                                       // ROM[02334]
( String.eraseLastChar:82)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02335]
AM = M-1                                     // ROM[02336]
D = M                                        // ROM[02337]
// ---------------------------
@ String.eraseLastChar$IF_TRUE0              // ROM[02338]
D; JNE                                       // ROM[02339]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ String.eraseLastChar$IF_FALSE0             // ROM[02340]
0; JMP                                       // ROM[02341]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( String.eraseLastChar$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[02342]
D = A                                        // ROM[02343]
// ---------------------------
// push D
@ SP                                         // ROM[02344]
AM = M+1                                     // ROM[02345]
A = A-1                                      // ROM[02346]
M = D                                        // ROM[02347]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[02348]
D = A                                        // ROM[02349]
@ R13                                        // ROM[02350]
M = D                                        // ROM[02351]
// ---------------------------
// Push RA
@ String.eraseLastChar:83                    // ROM[02352]
D = A                                        // ROM[02353]
// ---------------------------
// push D
@ SP                                         // ROM[02354]
AM = M+1                                     // ROM[02355]
A = A-1                                      // ROM[02356]
M = D                                        // ROM[02357]
// ---------------------------
// call
@ String.eraseLastChar:84                    // ROM[02358]
D = A                                        // ROM[02359]
@ R15                                        // ROM[02360]
M = D                                        // ROM[02361]
@ :call                                      // ROM[02362]
0; JMP                                       // ROM[02363]
( String.eraseLastChar:84)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[02364]
0; JMP                                       // ROM[02365]
// ---------------------------
// ( RA )
( String.eraseLastChar:83) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02366]
AM = M-1                                     // ROM[02367]
D = M                                        // ROM[02368]
// ---------------------------
@ 5                                          // ROM[02369]
M = D                                        // ROM[02370]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( String.eraseLastChar$IF_FALSE0 )

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02371]
D = A                                        // ROM[02372]
@ R13                                        // ROM[02373]
M = D                                        // ROM[02374]
// ---------------------------
// call
@ String.eraseLastChar:85                    // ROM[02375]
D = A                                        // ROM[02376]
@ R15                                        // ROM[02377]
M = D                                        // ROM[02378]
@ :push_this                                 // ROM[02379]
0; JMP                                       // ROM[02380]
( String.eraseLastChar:85)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[02381]
D = A                                        // ROM[02382]
// ---------------------------
// push D
@ SP                                         // ROM[02383]
AM = M+1                                     // ROM[02384]
A = A-1                                      // ROM[02385]
M = D                                        // ROM[02386]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ String.eraseLastChar:86                    // ROM[02387]
D = A                                        // ROM[02388]
@ R15                                        // ROM[02389]
M = D                                        // ROM[02390]
@ :sub                                       // ROM[02391]
0; JMP                                       // ROM[02392]
( String.eraseLastChar:86)

// -------------------------------------
// POP: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02393]
D = A                                        // ROM[02394]
@ R13                                        // ROM[02395]
M = D                                        // ROM[02396]
// ---------------------------
// call
@ String.eraseLastChar:87                    // ROM[02397]
D = A                                        // ROM[02398]
@ R15                                        // ROM[02399]
M = D                                        // ROM[02400]
@ :pop_this                                  // ROM[02401]
0; JMP                                       // ROM[02402]
( String.eraseLastChar:87)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02403]
D = A                                        // ROM[02404]
// ---------------------------
// push D
@ SP                                         // ROM[02405]
AM = M+1                                     // ROM[02406]
A = A-1                                      // ROM[02407]
M = D                                        // ROM[02408]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.eraseLastChar:88                    // ROM[02409]
D = A                                        // ROM[02410]
@ R15                                        // ROM[02411]
M = D                                        // ROM[02412]
@ :return                                    // ROM[02413]
0; JMP                                       // ROM[02414]
( String.eraseLastChar:88)

// =========================================================
// FUNCTION: String.intValue(5 locals)
// =========================================================

( String.intValue )
// ---------------------------
// clear local segment
D = 0                                        // ROM[02415]
// ---------------------------
// push D
@ SP                                         // ROM[02416]
AM = M+1                                     // ROM[02417]
A = A-1                                      // ROM[02418]
M = D                                        // ROM[02419]
// ---------------------------
// push D
@ SP                                         // ROM[02420]
AM = M+1                                     // ROM[02421]
A = A-1                                      // ROM[02422]
M = D                                        // ROM[02423]
// ---------------------------
// push D
@ SP                                         // ROM[02424]
AM = M+1                                     // ROM[02425]
A = A-1                                      // ROM[02426]
M = D                                        // ROM[02427]
// ---------------------------
// push D
@ SP                                         // ROM[02428]
AM = M+1                                     // ROM[02429]
A = A-1                                      // ROM[02430]
M = D                                        // ROM[02431]
// ---------------------------
// push D
@ SP                                         // ROM[02432]
AM = M+1                                     // ROM[02433]
A = A-1                                      // ROM[02434]
M = D                                        // ROM[02435]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02436]
D = A                                        // ROM[02437]
@ R13                                        // ROM[02438]
M = D                                        // ROM[02439]
// ---------------------------
// call
@ String.intValue:89                         // ROM[02440]
D = A                                        // ROM[02441]
@ R15                                        // ROM[02442]
M = D                                        // ROM[02443]
@ :push_argument                             // ROM[02444]
0; JMP                                       // ROM[02445]
( String.intValue:89)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02446]
AM = M-1                                     // ROM[02447]
D = M                                        // ROM[02448]
// ---------------------------
@ 3                                          // ROM[02449]
M = D                                        // ROM[02450]

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02451]
D = A                                        // ROM[02452]
@ R13                                        // ROM[02453]
M = D                                        // ROM[02454]
// ---------------------------
// call
@ String.intValue:90                         // ROM[02455]
D = A                                        // ROM[02456]
@ R15                                        // ROM[02457]
M = D                                        // ROM[02458]
@ :push_this                                 // ROM[02459]
0; JMP                                       // ROM[02460]
( String.intValue:90)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02461]
D = A                                        // ROM[02462]
// ---------------------------
// push D
@ SP                                         // ROM[02463]
AM = M+1                                     // ROM[02464]
A = A-1                                      // ROM[02465]
M = D                                        // ROM[02466]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ String.intValue:91                         // ROM[02467]
D = A                                        // ROM[02468]
@ R15                                        // ROM[02469]
M = D                                        // ROM[02470]
@ :eq                                        // ROM[02471]
0; JMP                                       // ROM[02472]
( String.intValue:91)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02473]
AM = M-1                                     // ROM[02474]
D = M                                        // ROM[02475]
// ---------------------------
@ String.intValue$IF_TRUE0                   // ROM[02476]
D; JNE                                       // ROM[02477]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ String.intValue$IF_FALSE0                  // ROM[02478]
0; JMP                                       // ROM[02479]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( String.intValue$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02480]
D = A                                        // ROM[02481]
// ---------------------------
// push D
@ SP                                         // ROM[02482]
AM = M+1                                     // ROM[02483]
A = A-1                                      // ROM[02484]
M = D                                        // ROM[02485]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.intValue:92                         // ROM[02486]
D = A                                        // ROM[02487]
@ R15                                        // ROM[02488]
M = D                                        // ROM[02489]
@ :return                                    // ROM[02490]
0; JMP                                       // ROM[02491]
( String.intValue:92)

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( String.intValue$IF_FALSE0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02492]
D = A                                        // ROM[02493]
// ---------------------------
// push D
@ SP                                         // ROM[02494]
AM = M+1                                     // ROM[02495]
A = A-1                                      // ROM[02496]
M = D                                        // ROM[02497]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[02498]
A = M-1                                      // ROM[02499]
M = !M                                       // ROM[02500]

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[02501]
D = A                                        // ROM[02502]
@ R13                                        // ROM[02503]
M = D                                        // ROM[02504]
// ---------------------------
// call
@ String.intValue:93                         // ROM[02505]
D = A                                        // ROM[02506]
@ R15                                        // ROM[02507]
M = D                                        // ROM[02508]
@ :pop_local                                 // ROM[02509]
0; JMP                                       // ROM[02510]
( String.intValue:93)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02511]
D = A                                        // ROM[02512]
// ---------------------------
// push D
@ SP                                         // ROM[02513]
AM = M+1                                     // ROM[02514]
A = A-1                                      // ROM[02515]
M = D                                        // ROM[02516]

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02517]
D = A                                        // ROM[02518]
@ R13                                        // ROM[02519]
M = D                                        // ROM[02520]
// ---------------------------
// call
@ String.intValue:94                         // ROM[02521]
D = A                                        // ROM[02522]
@ R15                                        // ROM[02523]
M = D                                        // ROM[02524]
@ :push_this                                 // ROM[02525]
0; JMP                                       // ROM[02526]
( String.intValue:94)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.intValue:95                         // ROM[02527]
D = A                                        // ROM[02528]
@ R15                                        // ROM[02529]
M = D                                        // ROM[02530]
@ :add                                       // ROM[02531]
0; JMP                                       // ROM[02532]
( String.intValue:95)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02533]
AM = M-1                                     // ROM[02534]
D = M                                        // ROM[02535]
// ---------------------------
@ 4                                          // ROM[02536]
M = D                                        // ROM[02537]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02538]
D = A                                        // ROM[02539]
@ R13                                        // ROM[02540]
M = D                                        // ROM[02541]
// ---------------------------
// call
@ String.intValue:96                         // ROM[02542]
D = A                                        // ROM[02543]
@ R15                                        // ROM[02544]
M = D                                        // ROM[02545]
@ :push_that                                 // ROM[02546]
0; JMP                                       // ROM[02547]
( String.intValue:96)

// -------------------------------------
// PUSH: <constant, 45>
// -------------------------------------
@ 45                                         // ROM[02548]
D = A                                        // ROM[02549]
// ---------------------------
// push D
@ SP                                         // ROM[02550]
AM = M+1                                     // ROM[02551]
A = A-1                                      // ROM[02552]
M = D                                        // ROM[02553]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ String.intValue:97                         // ROM[02554]
D = A                                        // ROM[02555]
@ R15                                        // ROM[02556]
M = D                                        // ROM[02557]
@ :eq                                        // ROM[02558]
0; JMP                                       // ROM[02559]
( String.intValue:97)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02560]
AM = M-1                                     // ROM[02561]
D = M                                        // ROM[02562]
// ---------------------------
@ String.intValue$IF_TRUE1                   // ROM[02563]
D; JNE                                       // ROM[02564]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ String.intValue$IF_FALSE1                  // ROM[02565]
0; JMP                                       // ROM[02566]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( String.intValue$IF_TRUE1 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02567]
D = A                                        // ROM[02568]
// ---------------------------
// push D
@ SP                                         // ROM[02569]
AM = M+1                                     // ROM[02570]
A = A-1                                      // ROM[02571]
M = D                                        // ROM[02572]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[02573]
A = M-1                                      // ROM[02574]
M = !M                                       // ROM[02575]

// -------------------------------------
// POP: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[02576]
D = A                                        // ROM[02577]
@ R13                                        // ROM[02578]
M = D                                        // ROM[02579]
// ---------------------------
// call
@ String.intValue:98                         // ROM[02580]
D = A                                        // ROM[02581]
@ R15                                        // ROM[02582]
M = D                                        // ROM[02583]
@ :pop_local                                 // ROM[02584]
0; JMP                                       // ROM[02585]
( String.intValue:98)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[02586]
D = A                                        // ROM[02587]
// ---------------------------
// push D
@ SP                                         // ROM[02588]
AM = M+1                                     // ROM[02589]
A = A-1                                      // ROM[02590]
M = D                                        // ROM[02591]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02592]
D = A                                        // ROM[02593]
@ R13                                        // ROM[02594]
M = D                                        // ROM[02595]
// ---------------------------
// call
@ String.intValue:99                         // ROM[02596]
D = A                                        // ROM[02597]
@ R15                                        // ROM[02598]
M = D                                        // ROM[02599]
@ :pop_local                                 // ROM[02600]
0; JMP                                       // ROM[02601]
( String.intValue:99)

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( String.intValue$IF_FALSE1 )

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( String.intValue$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02602]
D = A                                        // ROM[02603]
@ R13                                        // ROM[02604]
M = D                                        // ROM[02605]
// ---------------------------
// call
@ String.intValue:100                        // ROM[02606]
D = A                                        // ROM[02607]
@ R15                                        // ROM[02608]
M = D                                        // ROM[02609]
@ :push_local                                // ROM[02610]
0; JMP                                       // ROM[02611]
( String.intValue:100)

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02612]
D = A                                        // ROM[02613]
@ R13                                        // ROM[02614]
M = D                                        // ROM[02615]
// ---------------------------
// call
@ String.intValue:101                        // ROM[02616]
D = A                                        // ROM[02617]
@ R15                                        // ROM[02618]
M = D                                        // ROM[02619]
@ :push_this                                 // ROM[02620]
0; JMP                                       // ROM[02621]
( String.intValue:101)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ String.intValue:102                        // ROM[02622]
D = A                                        // ROM[02623]
@ R15                                        // ROM[02624]
M = D                                        // ROM[02625]
@ :lt                                        // ROM[02626]
0; JMP                                       // ROM[02627]
( String.intValue:102)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[02628]
D = A                                        // ROM[02629]
@ R13                                        // ROM[02630]
M = D                                        // ROM[02631]
// ---------------------------
// call
@ String.intValue:103                        // ROM[02632]
D = A                                        // ROM[02633]
@ R15                                        // ROM[02634]
M = D                                        // ROM[02635]
@ :push_local                                // ROM[02636]
0; JMP                                       // ROM[02637]
( String.intValue:103)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ String.intValue:104                        // ROM[02638]
D = A                                        // ROM[02639]
@ R15                                        // ROM[02640]
M = D                                        // ROM[02641]
@ :and                                       // ROM[02642]
0; JMP                                       // ROM[02643]
( String.intValue:104)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[02644]
A = M-1                                      // ROM[02645]
M = !M                                       // ROM[02646]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02647]
AM = M-1                                     // ROM[02648]
D = M                                        // ROM[02649]
// ---------------------------
@ String.intValue$WHILE_END0                 // ROM[02650]
D; JNE                                       // ROM[02651]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02652]
D = A                                        // ROM[02653]
@ R13                                        // ROM[02654]
M = D                                        // ROM[02655]
// ---------------------------
// call
@ String.intValue:105                        // ROM[02656]
D = A                                        // ROM[02657]
@ R15                                        // ROM[02658]
M = D                                        // ROM[02659]
@ :push_local                                // ROM[02660]
0; JMP                                       // ROM[02661]
( String.intValue:105)

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02662]
D = A                                        // ROM[02663]
@ R13                                        // ROM[02664]
M = D                                        // ROM[02665]
// ---------------------------
// call
@ String.intValue:106                        // ROM[02666]
D = A                                        // ROM[02667]
@ R15                                        // ROM[02668]
M = D                                        // ROM[02669]
@ :push_this                                 // ROM[02670]
0; JMP                                       // ROM[02671]
( String.intValue:106)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.intValue:107                        // ROM[02672]
D = A                                        // ROM[02673]
@ R15                                        // ROM[02674]
M = D                                        // ROM[02675]
@ :add                                       // ROM[02676]
0; JMP                                       // ROM[02677]
( String.intValue:107)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02678]
AM = M-1                                     // ROM[02679]
D = M                                        // ROM[02680]
// ---------------------------
@ 4                                          // ROM[02681]
M = D                                        // ROM[02682]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02683]
D = A                                        // ROM[02684]
@ R13                                        // ROM[02685]
M = D                                        // ROM[02686]
// ---------------------------
// call
@ String.intValue:108                        // ROM[02687]
D = A                                        // ROM[02688]
@ R15                                        // ROM[02689]
M = D                                        // ROM[02690]
@ :push_that                                 // ROM[02691]
0; JMP                                       // ROM[02692]
( String.intValue:108)

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[02693]
D = A                                        // ROM[02694]
// ---------------------------
// push D
@ SP                                         // ROM[02695]
AM = M+1                                     // ROM[02696]
A = A-1                                      // ROM[02697]
M = D                                        // ROM[02698]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ String.intValue:109                        // ROM[02699]
D = A                                        // ROM[02700]
@ R15                                        // ROM[02701]
M = D                                        // ROM[02702]
@ :sub                                       // ROM[02703]
0; JMP                                       // ROM[02704]
( String.intValue:109)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02705]
D = A                                        // ROM[02706]
@ R13                                        // ROM[02707]
M = D                                        // ROM[02708]
// ---------------------------
// call
@ String.intValue:110                        // ROM[02709]
D = A                                        // ROM[02710]
@ R15                                        // ROM[02711]
M = D                                        // ROM[02712]
@ :pop_local                                 // ROM[02713]
0; JMP                                       // ROM[02714]
( String.intValue:110)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02715]
D = A                                        // ROM[02716]
@ R13                                        // ROM[02717]
M = D                                        // ROM[02718]
// ---------------------------
// call
@ String.intValue:111                        // ROM[02719]
D = A                                        // ROM[02720]
@ R15                                        // ROM[02721]
M = D                                        // ROM[02722]
@ :push_local                                // ROM[02723]
0; JMP                                       // ROM[02724]
( String.intValue:111)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02725]
D = A                                        // ROM[02726]
// ---------------------------
// push D
@ SP                                         // ROM[02727]
AM = M+1                                     // ROM[02728]
A = A-1                                      // ROM[02729]
M = D                                        // ROM[02730]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ String.intValue:112                        // ROM[02731]
D = A                                        // ROM[02732]
@ R15                                        // ROM[02733]
M = D                                        // ROM[02734]
@ :lt                                        // ROM[02735]
0; JMP                                       // ROM[02736]
( String.intValue:112)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02737]
D = A                                        // ROM[02738]
@ R13                                        // ROM[02739]
M = D                                        // ROM[02740]
// ---------------------------
// call
@ String.intValue:113                        // ROM[02741]
D = A                                        // ROM[02742]
@ R15                                        // ROM[02743]
M = D                                        // ROM[02744]
@ :push_local                                // ROM[02745]
0; JMP                                       // ROM[02746]
( String.intValue:113)

// -------------------------------------
// PUSH: <constant, 9>
// -------------------------------------
@ 9                                          // ROM[02747]
D = A                                        // ROM[02748]
// ---------------------------
// push D
@ SP                                         // ROM[02749]
AM = M+1                                     // ROM[02750]
A = A-1                                      // ROM[02751]
M = D                                        // ROM[02752]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ String.intValue:114                        // ROM[02753]
D = A                                        // ROM[02754]
@ R15                                        // ROM[02755]
M = D                                        // ROM[02756]
@ :gt                                        // ROM[02757]
0; JMP                                       // ROM[02758]
( String.intValue:114)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ String.intValue:115                        // ROM[02759]
D = A                                        // ROM[02760]
@ R15                                        // ROM[02761]
M = D                                        // ROM[02762]
@ :or                                        // ROM[02763]
0; JMP                                       // ROM[02764]
( String.intValue:115)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[02765]
A = M-1                                      // ROM[02766]
M = !M                                       // ROM[02767]

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[02768]
D = A                                        // ROM[02769]
@ R13                                        // ROM[02770]
M = D                                        // ROM[02771]
// ---------------------------
// call
@ String.intValue:116                        // ROM[02772]
D = A                                        // ROM[02773]
@ R15                                        // ROM[02774]
M = D                                        // ROM[02775]
@ :pop_local                                 // ROM[02776]
0; JMP                                       // ROM[02777]
( String.intValue:116)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[02778]
D = A                                        // ROM[02779]
@ R13                                        // ROM[02780]
M = D                                        // ROM[02781]
// ---------------------------
// call
@ String.intValue:117                        // ROM[02782]
D = A                                        // ROM[02783]
@ R15                                        // ROM[02784]
M = D                                        // ROM[02785]
@ :push_local                                // ROM[02786]
0; JMP                                       // ROM[02787]
( String.intValue:117)

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02788]
AM = M-1                                     // ROM[02789]
D = M                                        // ROM[02790]
// ---------------------------
@ String.intValue$IF_TRUE2                   // ROM[02791]
D; JNE                                       // ROM[02792]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ String.intValue$IF_FALSE2                  // ROM[02793]
0; JMP                                       // ROM[02794]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( String.intValue$IF_TRUE2 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02795]
D = A                                        // ROM[02796]
@ R13                                        // ROM[02797]
M = D                                        // ROM[02798]
// ---------------------------
// call
@ String.intValue:118                        // ROM[02799]
D = A                                        // ROM[02800]
@ R15                                        // ROM[02801]
M = D                                        // ROM[02802]
@ :push_local                                // ROM[02803]
0; JMP                                       // ROM[02804]
( String.intValue:118)

// -------------------------------------
// PUSH: <constant, 10>
// -------------------------------------
@ 10                                         // ROM[02805]
D = A                                        // ROM[02806]
// ---------------------------
// push D
@ SP                                         // ROM[02807]
AM = M+1                                     // ROM[02808]
A = A-1                                      // ROM[02809]
M = D                                        // ROM[02810]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[02811]
D = A                                        // ROM[02812]
@ R13                                        // ROM[02813]
M = D                                        // ROM[02814]
// ---------------------------
// Push RA
@ String.intValue:119                        // ROM[02815]
D = A                                        // ROM[02816]
// ---------------------------
// push D
@ SP                                         // ROM[02817]
AM = M+1                                     // ROM[02818]
A = A-1                                      // ROM[02819]
M = D                                        // ROM[02820]
// ---------------------------
// call
@ String.intValue:120                        // ROM[02821]
D = A                                        // ROM[02822]
@ R15                                        // ROM[02823]
M = D                                        // ROM[02824]
@ :call                                      // ROM[02825]
0; JMP                                       // ROM[02826]
( String.intValue:120)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[02827]
0; JMP                                       // ROM[02828]
// ---------------------------
// ( RA )
( String.intValue:119) 

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[02829]
D = A                                        // ROM[02830]
@ R13                                        // ROM[02831]
M = D                                        // ROM[02832]
// ---------------------------
// call
@ String.intValue:121                        // ROM[02833]
D = A                                        // ROM[02834]
@ R15                                        // ROM[02835]
M = D                                        // ROM[02836]
@ :push_local                                // ROM[02837]
0; JMP                                       // ROM[02838]
( String.intValue:121)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.intValue:122                        // ROM[02839]
D = A                                        // ROM[02840]
@ R15                                        // ROM[02841]
M = D                                        // ROM[02842]
@ :add                                       // ROM[02843]
0; JMP                                       // ROM[02844]
( String.intValue:122)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02845]
D = A                                        // ROM[02846]
@ R13                                        // ROM[02847]
M = D                                        // ROM[02848]
// ---------------------------
// call
@ String.intValue:123                        // ROM[02849]
D = A                                        // ROM[02850]
@ R15                                        // ROM[02851]
M = D                                        // ROM[02852]
@ :pop_local                                 // ROM[02853]
0; JMP                                       // ROM[02854]
( String.intValue:123)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02855]
D = A                                        // ROM[02856]
@ R13                                        // ROM[02857]
M = D                                        // ROM[02858]
// ---------------------------
// call
@ String.intValue:124                        // ROM[02859]
D = A                                        // ROM[02860]
@ R15                                        // ROM[02861]
M = D                                        // ROM[02862]
@ :push_local                                // ROM[02863]
0; JMP                                       // ROM[02864]
( String.intValue:124)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[02865]
D = A                                        // ROM[02866]
// ---------------------------
// push D
@ SP                                         // ROM[02867]
AM = M+1                                     // ROM[02868]
A = A-1                                      // ROM[02869]
M = D                                        // ROM[02870]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.intValue:125                        // ROM[02871]
D = A                                        // ROM[02872]
@ R15                                        // ROM[02873]
M = D                                        // ROM[02874]
@ :add                                       // ROM[02875]
0; JMP                                       // ROM[02876]
( String.intValue:125)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02877]
D = A                                        // ROM[02878]
@ R13                                        // ROM[02879]
M = D                                        // ROM[02880]
// ---------------------------
// call
@ String.intValue:126                        // ROM[02881]
D = A                                        // ROM[02882]
@ R15                                        // ROM[02883]
M = D                                        // ROM[02884]
@ :pop_local                                 // ROM[02885]
0; JMP                                       // ROM[02886]
( String.intValue:126)

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( String.intValue$IF_FALSE2 )

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ String.intValue$WHILE_EXP0                 // ROM[02887]
0; JMP                                       // ROM[02888]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( String.intValue$WHILE_END0 )

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[02889]
D = A                                        // ROM[02890]
@ R13                                        // ROM[02891]
M = D                                        // ROM[02892]
// ---------------------------
// call
@ String.intValue:127                        // ROM[02893]
D = A                                        // ROM[02894]
@ R15                                        // ROM[02895]
M = D                                        // ROM[02896]
@ :push_local                                // ROM[02897]
0; JMP                                       // ROM[02898]
( String.intValue:127)

// -------------------------------------
// IF-GOTO: IF_TRUE3
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02899]
AM = M-1                                     // ROM[02900]
D = M                                        // ROM[02901]
// ---------------------------
@ String.intValue$IF_TRUE3                   // ROM[02902]
D; JNE                                       // ROM[02903]

// -------------------------------------
// GOTO: IF_FALSE3
// -------------------------------------
@ String.intValue$IF_FALSE3                  // ROM[02904]
0; JMP                                       // ROM[02905]

// -------------------------------------
// LABEL: IF_TRUE3
// -------------------------------------
( String.intValue$IF_TRUE3 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02906]
D = A                                        // ROM[02907]
@ R13                                        // ROM[02908]
M = D                                        // ROM[02909]
// ---------------------------
// call
@ String.intValue:128                        // ROM[02910]
D = A                                        // ROM[02911]
@ R15                                        // ROM[02912]
M = D                                        // ROM[02913]
@ :push_local                                // ROM[02914]
0; JMP                                       // ROM[02915]
( String.intValue:128)

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[02916]
A = M-1                                      // ROM[02917]
M = -M                                       // ROM[02918]

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02919]
D = A                                        // ROM[02920]
@ R13                                        // ROM[02921]
M = D                                        // ROM[02922]
// ---------------------------
// call
@ String.intValue:129                        // ROM[02923]
D = A                                        // ROM[02924]
@ R15                                        // ROM[02925]
M = D                                        // ROM[02926]
@ :pop_local                                 // ROM[02927]
0; JMP                                       // ROM[02928]
( String.intValue:129)

// -------------------------------------
// LABEL: IF_FALSE3
// -------------------------------------
( String.intValue$IF_FALSE3 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[02929]
D = A                                        // ROM[02930]
@ R13                                        // ROM[02931]
M = D                                        // ROM[02932]
// ---------------------------
// call
@ String.intValue:130                        // ROM[02933]
D = A                                        // ROM[02934]
@ R15                                        // ROM[02935]
M = D                                        // ROM[02936]
@ :push_local                                // ROM[02937]
0; JMP                                       // ROM[02938]
( String.intValue:130)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.intValue:131                        // ROM[02939]
D = A                                        // ROM[02940]
@ R15                                        // ROM[02941]
M = D                                        // ROM[02942]
@ :return                                    // ROM[02943]
0; JMP                                       // ROM[02944]
( String.intValue:131)

// =========================================================
// FUNCTION: String.setInt(4 locals)
// =========================================================

( String.setInt )
// ---------------------------
// clear local segment
D = 0                                        // ROM[02945]
// ---------------------------
// push D
@ SP                                         // ROM[02946]
AM = M+1                                     // ROM[02947]
A = A-1                                      // ROM[02948]
M = D                                        // ROM[02949]
// ---------------------------
// push D
@ SP                                         // ROM[02950]
AM = M+1                                     // ROM[02951]
A = A-1                                      // ROM[02952]
M = D                                        // ROM[02953]
// ---------------------------
// push D
@ SP                                         // ROM[02954]
AM = M+1                                     // ROM[02955]
A = A-1                                      // ROM[02956]
M = D                                        // ROM[02957]
// ---------------------------
// push D
@ SP                                         // ROM[02958]
AM = M+1                                     // ROM[02959]
A = A-1                                      // ROM[02960]
M = D                                        // ROM[02961]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02962]
D = A                                        // ROM[02963]
@ R13                                        // ROM[02964]
M = D                                        // ROM[02965]
// ---------------------------
// call
@ String.setInt:132                          // ROM[02966]
D = A                                        // ROM[02967]
@ R15                                        // ROM[02968]
M = D                                        // ROM[02969]
@ :push_argument                             // ROM[02970]
0; JMP                                       // ROM[02971]
( String.setInt:132)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02972]
AM = M-1                                     // ROM[02973]
D = M                                        // ROM[02974]
// ---------------------------
@ 3                                          // ROM[02975]
M = D                                        // ROM[02976]

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[02977]
D = A                                        // ROM[02978]
@ R13                                        // ROM[02979]
M = D                                        // ROM[02980]
// ---------------------------
// call
@ String.setInt:133                          // ROM[02981]
D = A                                        // ROM[02982]
@ R15                                        // ROM[02983]
M = D                                        // ROM[02984]
@ :push_this                                 // ROM[02985]
0; JMP                                       // ROM[02986]
( String.setInt:133)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[02987]
D = A                                        // ROM[02988]
// ---------------------------
// push D
@ SP                                         // ROM[02989]
AM = M+1                                     // ROM[02990]
A = A-1                                      // ROM[02991]
M = D                                        // ROM[02992]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ String.setInt:134                          // ROM[02993]
D = A                                        // ROM[02994]
@ R15                                        // ROM[02995]
M = D                                        // ROM[02996]
@ :eq                                        // ROM[02997]
0; JMP                                       // ROM[02998]
( String.setInt:134)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[02999]
AM = M-1                                     // ROM[03000]
D = M                                        // ROM[03001]
// ---------------------------
@ String.setInt$IF_TRUE0                     // ROM[03002]
D; JNE                                       // ROM[03003]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ String.setInt$IF_FALSE0                    // ROM[03004]
0; JMP                                       // ROM[03005]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( String.setInt$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 19>
// -------------------------------------
@ 19                                         // ROM[03006]
D = A                                        // ROM[03007]
// ---------------------------
// push D
@ SP                                         // ROM[03008]
AM = M+1                                     // ROM[03009]
A = A-1                                      // ROM[03010]
M = D                                        // ROM[03011]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[03012]
D = A                                        // ROM[03013]
@ R13                                        // ROM[03014]
M = D                                        // ROM[03015]
// ---------------------------
// Push RA
@ String.setInt:135                          // ROM[03016]
D = A                                        // ROM[03017]
// ---------------------------
// push D
@ SP                                         // ROM[03018]
AM = M+1                                     // ROM[03019]
A = A-1                                      // ROM[03020]
M = D                                        // ROM[03021]
// ---------------------------
// call
@ String.setInt:136                          // ROM[03022]
D = A                                        // ROM[03023]
@ R15                                        // ROM[03024]
M = D                                        // ROM[03025]
@ :call                                      // ROM[03026]
0; JMP                                       // ROM[03027]
( String.setInt:136)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[03028]
0; JMP                                       // ROM[03029]
// ---------------------------
// ( RA )
( String.setInt:135) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03030]
AM = M-1                                     // ROM[03031]
D = M                                        // ROM[03032]
// ---------------------------
@ 5                                          // ROM[03033]
M = D                                        // ROM[03034]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( String.setInt$IF_FALSE0 )

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[03035]
D = A                                        // ROM[03036]
// ---------------------------
// push D
@ SP                                         // ROM[03037]
AM = M+1                                     // ROM[03038]
A = A-1                                      // ROM[03039]
M = D                                        // ROM[03040]

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[03041]
D = A                                        // ROM[03042]
@ R13                                        // ROM[03043]
M = D                                        // ROM[03044]
// ---------------------------
// Push RA
@ String.setInt:137                          // ROM[03045]
D = A                                        // ROM[03046]
// ---------------------------
// push D
@ SP                                         // ROM[03047]
AM = M+1                                     // ROM[03048]
A = A-1                                      // ROM[03049]
M = D                                        // ROM[03050]
// ---------------------------
// call
@ String.setInt:138                          // ROM[03051]
D = A                                        // ROM[03052]
@ R15                                        // ROM[03053]
M = D                                        // ROM[03054]
@ :call                                      // ROM[03055]
0; JMP                                       // ROM[03056]
( String.setInt:138)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[03057]
0; JMP                                       // ROM[03058]
// ---------------------------
// ( RA )
( String.setInt:137) 

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03059]
D = A                                        // ROM[03060]
@ R13                                        // ROM[03061]
M = D                                        // ROM[03062]
// ---------------------------
// call
@ String.setInt:139                          // ROM[03063]
D = A                                        // ROM[03064]
@ R15                                        // ROM[03065]
M = D                                        // ROM[03066]
@ :pop_local                                 // ROM[03067]
0; JMP                                       // ROM[03068]
( String.setInt:139)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03069]
D = A                                        // ROM[03070]
@ R13                                        // ROM[03071]
M = D                                        // ROM[03072]
// ---------------------------
// call
@ String.setInt:140                          // ROM[03073]
D = A                                        // ROM[03074]
@ R15                                        // ROM[03075]
M = D                                        // ROM[03076]
@ :push_argument                             // ROM[03077]
0; JMP                                       // ROM[03078]
( String.setInt:140)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[03079]
D = A                                        // ROM[03080]
// ---------------------------
// push D
@ SP                                         // ROM[03081]
AM = M+1                                     // ROM[03082]
A = A-1                                      // ROM[03083]
M = D                                        // ROM[03084]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ String.setInt:141                          // ROM[03085]
D = A                                        // ROM[03086]
@ R15                                        // ROM[03087]
M = D                                        // ROM[03088]
@ :lt                                        // ROM[03089]
0; JMP                                       // ROM[03090]
( String.setInt:141)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03091]
AM = M-1                                     // ROM[03092]
D = M                                        // ROM[03093]
// ---------------------------
@ String.setInt$IF_TRUE1                     // ROM[03094]
D; JNE                                       // ROM[03095]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ String.setInt$IF_FALSE1                    // ROM[03096]
0; JMP                                       // ROM[03097]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( String.setInt$IF_TRUE1 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[03098]
D = A                                        // ROM[03099]
// ---------------------------
// push D
@ SP                                         // ROM[03100]
AM = M+1                                     // ROM[03101]
A = A-1                                      // ROM[03102]
M = D                                        // ROM[03103]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[03104]
A = M-1                                      // ROM[03105]
M = !M                                       // ROM[03106]

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[03107]
D = A                                        // ROM[03108]
@ R13                                        // ROM[03109]
M = D                                        // ROM[03110]
// ---------------------------
// call
@ String.setInt:142                          // ROM[03111]
D = A                                        // ROM[03112]
@ R15                                        // ROM[03113]
M = D                                        // ROM[03114]
@ :pop_local                                 // ROM[03115]
0; JMP                                       // ROM[03116]
( String.setInt:142)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03117]
D = A                                        // ROM[03118]
@ R13                                        // ROM[03119]
M = D                                        // ROM[03120]
// ---------------------------
// call
@ String.setInt:143                          // ROM[03121]
D = A                                        // ROM[03122]
@ R15                                        // ROM[03123]
M = D                                        // ROM[03124]
@ :push_argument                             // ROM[03125]
0; JMP                                       // ROM[03126]
( String.setInt:143)

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[03127]
A = M-1                                      // ROM[03128]
M = -M                                       // ROM[03129]

// -------------------------------------
// POP: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03130]
D = A                                        // ROM[03131]
@ R13                                        // ROM[03132]
M = D                                        // ROM[03133]
// ---------------------------
// call
@ String.setInt:144                          // ROM[03134]
D = A                                        // ROM[03135]
@ R15                                        // ROM[03136]
M = D                                        // ROM[03137]
@ :pop_argument                              // ROM[03138]
0; JMP                                       // ROM[03139]
( String.setInt:144)

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( String.setInt$IF_FALSE1 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03140]
D = A                                        // ROM[03141]
@ R13                                        // ROM[03142]
M = D                                        // ROM[03143]
// ---------------------------
// call
@ String.setInt:145                          // ROM[03144]
D = A                                        // ROM[03145]
@ R15                                        // ROM[03146]
M = D                                        // ROM[03147]
@ :push_argument                             // ROM[03148]
0; JMP                                       // ROM[03149]
( String.setInt:145)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03150]
D = A                                        // ROM[03151]
@ R13                                        // ROM[03152]
M = D                                        // ROM[03153]
// ---------------------------
// call
@ String.setInt:146                          // ROM[03154]
D = A                                        // ROM[03155]
@ R15                                        // ROM[03156]
M = D                                        // ROM[03157]
@ :pop_local                                 // ROM[03158]
0; JMP                                       // ROM[03159]
( String.setInt:146)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( String.setInt$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03160]
D = A                                        // ROM[03161]
@ R13                                        // ROM[03162]
M = D                                        // ROM[03163]
// ---------------------------
// call
@ String.setInt:147                          // ROM[03164]
D = A                                        // ROM[03165]
@ R15                                        // ROM[03166]
M = D                                        // ROM[03167]
@ :push_local                                // ROM[03168]
0; JMP                                       // ROM[03169]
( String.setInt:147)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[03170]
D = A                                        // ROM[03171]
// ---------------------------
// push D
@ SP                                         // ROM[03172]
AM = M+1                                     // ROM[03173]
A = A-1                                      // ROM[03174]
M = D                                        // ROM[03175]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ String.setInt:148                          // ROM[03176]
D = A                                        // ROM[03177]
@ R15                                        // ROM[03178]
M = D                                        // ROM[03179]
@ :gt                                        // ROM[03180]
0; JMP                                       // ROM[03181]
( String.setInt:148)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[03182]
A = M-1                                      // ROM[03183]
M = !M                                       // ROM[03184]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03185]
AM = M-1                                     // ROM[03186]
D = M                                        // ROM[03187]
// ---------------------------
@ String.setInt$WHILE_END0                   // ROM[03188]
D; JNE                                       // ROM[03189]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03190]
D = A                                        // ROM[03191]
@ R13                                        // ROM[03192]
M = D                                        // ROM[03193]
// ---------------------------
// call
@ String.setInt:149                          // ROM[03194]
D = A                                        // ROM[03195]
@ R15                                        // ROM[03196]
M = D                                        // ROM[03197]
@ :push_argument                             // ROM[03198]
0; JMP                                       // ROM[03199]
( String.setInt:149)

// -------------------------------------
// PUSH: <constant, 10>
// -------------------------------------
@ 10                                         // ROM[03200]
D = A                                        // ROM[03201]
// ---------------------------
// push D
@ SP                                         // ROM[03202]
AM = M+1                                     // ROM[03203]
A = A-1                                      // ROM[03204]
M = D                                        // ROM[03205]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[03206]
D = A                                        // ROM[03207]
@ R13                                        // ROM[03208]
M = D                                        // ROM[03209]
// ---------------------------
// Push RA
@ String.setInt:150                          // ROM[03210]
D = A                                        // ROM[03211]
// ---------------------------
// push D
@ SP                                         // ROM[03212]
AM = M+1                                     // ROM[03213]
A = A-1                                      // ROM[03214]
M = D                                        // ROM[03215]
// ---------------------------
// call
@ String.setInt:151                          // ROM[03216]
D = A                                        // ROM[03217]
@ R15                                        // ROM[03218]
M = D                                        // ROM[03219]
@ :call                                      // ROM[03220]
0; JMP                                       // ROM[03221]
( String.setInt:151)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[03222]
0; JMP                                       // ROM[03223]
// ---------------------------
// ( RA )
( String.setInt:150) 

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03224]
D = A                                        // ROM[03225]
@ R13                                        // ROM[03226]
M = D                                        // ROM[03227]
// ---------------------------
// call
@ String.setInt:152                          // ROM[03228]
D = A                                        // ROM[03229]
@ R15                                        // ROM[03230]
M = D                                        // ROM[03231]
@ :pop_local                                 // ROM[03232]
0; JMP                                       // ROM[03233]
( String.setInt:152)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03234]
D = A                                        // ROM[03235]
@ R13                                        // ROM[03236]
M = D                                        // ROM[03237]
// ---------------------------
// call
@ String.setInt:153                          // ROM[03238]
D = A                                        // ROM[03239]
@ R15                                        // ROM[03240]
M = D                                        // ROM[03241]
@ :push_local                                // ROM[03242]
0; JMP                                       // ROM[03243]
( String.setInt:153)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03244]
D = A                                        // ROM[03245]
@ R13                                        // ROM[03246]
M = D                                        // ROM[03247]
// ---------------------------
// call
@ String.setInt:154                          // ROM[03248]
D = A                                        // ROM[03249]
@ R15                                        // ROM[03250]
M = D                                        // ROM[03251]
@ :push_local                                // ROM[03252]
0; JMP                                       // ROM[03253]
( String.setInt:154)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:155                          // ROM[03254]
D = A                                        // ROM[03255]
@ R15                                        // ROM[03256]
M = D                                        // ROM[03257]
@ :add                                       // ROM[03258]
0; JMP                                       // ROM[03259]
( String.setInt:155)

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[03260]
D = A                                        // ROM[03261]
// ---------------------------
// push D
@ SP                                         // ROM[03262]
AM = M+1                                     // ROM[03263]
A = A-1                                      // ROM[03264]
M = D                                        // ROM[03265]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03266]
D = A                                        // ROM[03267]
@ R13                                        // ROM[03268]
M = D                                        // ROM[03269]
// ---------------------------
// call
@ String.setInt:156                          // ROM[03270]
D = A                                        // ROM[03271]
@ R15                                        // ROM[03272]
M = D                                        // ROM[03273]
@ :push_argument                             // ROM[03274]
0; JMP                                       // ROM[03275]
( String.setInt:156)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03276]
D = A                                        // ROM[03277]
@ R13                                        // ROM[03278]
M = D                                        // ROM[03279]
// ---------------------------
// call
@ String.setInt:157                          // ROM[03280]
D = A                                        // ROM[03281]
@ R15                                        // ROM[03282]
M = D                                        // ROM[03283]
@ :push_local                                // ROM[03284]
0; JMP                                       // ROM[03285]
( String.setInt:157)

// -------------------------------------
// PUSH: <constant, 10>
// -------------------------------------
@ 10                                         // ROM[03286]
D = A                                        // ROM[03287]
// ---------------------------
// push D
@ SP                                         // ROM[03288]
AM = M+1                                     // ROM[03289]
A = A-1                                      // ROM[03290]
M = D                                        // ROM[03291]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[03292]
D = A                                        // ROM[03293]
@ R13                                        // ROM[03294]
M = D                                        // ROM[03295]
// ---------------------------
// Push RA
@ String.setInt:158                          // ROM[03296]
D = A                                        // ROM[03297]
// ---------------------------
// push D
@ SP                                         // ROM[03298]
AM = M+1                                     // ROM[03299]
A = A-1                                      // ROM[03300]
M = D                                        // ROM[03301]
// ---------------------------
// call
@ String.setInt:159                          // ROM[03302]
D = A                                        // ROM[03303]
@ R15                                        // ROM[03304]
M = D                                        // ROM[03305]
@ :call                                      // ROM[03306]
0; JMP                                       // ROM[03307]
( String.setInt:159)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[03308]
0; JMP                                       // ROM[03309]
// ---------------------------
// ( RA )
( String.setInt:158) 

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ String.setInt:160                          // ROM[03310]
D = A                                        // ROM[03311]
@ R15                                        // ROM[03312]
M = D                                        // ROM[03313]
@ :sub                                       // ROM[03314]
0; JMP                                       // ROM[03315]
( String.setInt:160)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:161                          // ROM[03316]
D = A                                        // ROM[03317]
@ R15                                        // ROM[03318]
M = D                                        // ROM[03319]
@ :add                                       // ROM[03320]
0; JMP                                       // ROM[03321]
( String.setInt:161)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03322]
AM = M-1                                     // ROM[03323]
D = M                                        // ROM[03324]
// ---------------------------
@ 5                                          // ROM[03325]
M = D                                        // ROM[03326]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03327]
AM = M-1                                     // ROM[03328]
D = M                                        // ROM[03329]
// ---------------------------
@ 4                                          // ROM[03330]
M = D                                        // ROM[03331]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[03332]
D = M                                        // ROM[03333]
// ---------------------------
// push D
@ SP                                         // ROM[03334]
AM = M+1                                     // ROM[03335]
A = A-1                                      // ROM[03336]
M = D                                        // ROM[03337]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03338]
D = A                                        // ROM[03339]
@ R13                                        // ROM[03340]
M = D                                        // ROM[03341]
// ---------------------------
// call
@ String.setInt:162                          // ROM[03342]
D = A                                        // ROM[03343]
@ R15                                        // ROM[03344]
M = D                                        // ROM[03345]
@ :pop_that                                  // ROM[03346]
0; JMP                                       // ROM[03347]
( String.setInt:162)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03348]
D = A                                        // ROM[03349]
@ R13                                        // ROM[03350]
M = D                                        // ROM[03351]
// ---------------------------
// call
@ String.setInt:163                          // ROM[03352]
D = A                                        // ROM[03353]
@ R15                                        // ROM[03354]
M = D                                        // ROM[03355]
@ :push_local                                // ROM[03356]
0; JMP                                       // ROM[03357]
( String.setInt:163)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[03358]
D = A                                        // ROM[03359]
// ---------------------------
// push D
@ SP                                         // ROM[03360]
AM = M+1                                     // ROM[03361]
A = A-1                                      // ROM[03362]
M = D                                        // ROM[03363]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:164                          // ROM[03364]
D = A                                        // ROM[03365]
@ R15                                        // ROM[03366]
M = D                                        // ROM[03367]
@ :add                                       // ROM[03368]
0; JMP                                       // ROM[03369]
( String.setInt:164)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03370]
D = A                                        // ROM[03371]
@ R13                                        // ROM[03372]
M = D                                        // ROM[03373]
// ---------------------------
// call
@ String.setInt:165                          // ROM[03374]
D = A                                        // ROM[03375]
@ R15                                        // ROM[03376]
M = D                                        // ROM[03377]
@ :pop_local                                 // ROM[03378]
0; JMP                                       // ROM[03379]
( String.setInt:165)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03380]
D = A                                        // ROM[03381]
@ R13                                        // ROM[03382]
M = D                                        // ROM[03383]
// ---------------------------
// call
@ String.setInt:166                          // ROM[03384]
D = A                                        // ROM[03385]
@ R15                                        // ROM[03386]
M = D                                        // ROM[03387]
@ :push_local                                // ROM[03388]
0; JMP                                       // ROM[03389]
( String.setInt:166)

// -------------------------------------
// POP: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03390]
D = A                                        // ROM[03391]
@ R13                                        // ROM[03392]
M = D                                        // ROM[03393]
// ---------------------------
// call
@ String.setInt:167                          // ROM[03394]
D = A                                        // ROM[03395]
@ R15                                        // ROM[03396]
M = D                                        // ROM[03397]
@ :pop_argument                              // ROM[03398]
0; JMP                                       // ROM[03399]
( String.setInt:167)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ String.setInt$WHILE_EXP0                   // ROM[03400]
0; JMP                                       // ROM[03401]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( String.setInt$WHILE_END0 )

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[03402]
D = A                                        // ROM[03403]
@ R13                                        // ROM[03404]
M = D                                        // ROM[03405]
// ---------------------------
// call
@ String.setInt:168                          // ROM[03406]
D = A                                        // ROM[03407]
@ R15                                        // ROM[03408]
M = D                                        // ROM[03409]
@ :push_local                                // ROM[03410]
0; JMP                                       // ROM[03411]
( String.setInt:168)

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03412]
AM = M-1                                     // ROM[03413]
D = M                                        // ROM[03414]
// ---------------------------
@ String.setInt$IF_TRUE2                     // ROM[03415]
D; JNE                                       // ROM[03416]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ String.setInt$IF_FALSE2                    // ROM[03417]
0; JMP                                       // ROM[03418]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( String.setInt$IF_TRUE2 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03419]
D = A                                        // ROM[03420]
@ R13                                        // ROM[03421]
M = D                                        // ROM[03422]
// ---------------------------
// call
@ String.setInt:169                          // ROM[03423]
D = A                                        // ROM[03424]
@ R15                                        // ROM[03425]
M = D                                        // ROM[03426]
@ :push_local                                // ROM[03427]
0; JMP                                       // ROM[03428]
( String.setInt:169)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03429]
D = A                                        // ROM[03430]
@ R13                                        // ROM[03431]
M = D                                        // ROM[03432]
// ---------------------------
// call
@ String.setInt:170                          // ROM[03433]
D = A                                        // ROM[03434]
@ R15                                        // ROM[03435]
M = D                                        // ROM[03436]
@ :push_local                                // ROM[03437]
0; JMP                                       // ROM[03438]
( String.setInt:170)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:171                          // ROM[03439]
D = A                                        // ROM[03440]
@ R15                                        // ROM[03441]
M = D                                        // ROM[03442]
@ :add                                       // ROM[03443]
0; JMP                                       // ROM[03444]
( String.setInt:171)

// -------------------------------------
// PUSH: <constant, 45>
// -------------------------------------
@ 45                                         // ROM[03445]
D = A                                        // ROM[03446]
// ---------------------------
// push D
@ SP                                         // ROM[03447]
AM = M+1                                     // ROM[03448]
A = A-1                                      // ROM[03449]
M = D                                        // ROM[03450]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03451]
AM = M-1                                     // ROM[03452]
D = M                                        // ROM[03453]
// ---------------------------
@ 5                                          // ROM[03454]
M = D                                        // ROM[03455]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03456]
AM = M-1                                     // ROM[03457]
D = M                                        // ROM[03458]
// ---------------------------
@ 4                                          // ROM[03459]
M = D                                        // ROM[03460]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[03461]
D = M                                        // ROM[03462]
// ---------------------------
// push D
@ SP                                         // ROM[03463]
AM = M+1                                     // ROM[03464]
A = A-1                                      // ROM[03465]
M = D                                        // ROM[03466]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03467]
D = A                                        // ROM[03468]
@ R13                                        // ROM[03469]
M = D                                        // ROM[03470]
// ---------------------------
// call
@ String.setInt:172                          // ROM[03471]
D = A                                        // ROM[03472]
@ R15                                        // ROM[03473]
M = D                                        // ROM[03474]
@ :pop_that                                  // ROM[03475]
0; JMP                                       // ROM[03476]
( String.setInt:172)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03477]
D = A                                        // ROM[03478]
@ R13                                        // ROM[03479]
M = D                                        // ROM[03480]
// ---------------------------
// call
@ String.setInt:173                          // ROM[03481]
D = A                                        // ROM[03482]
@ R15                                        // ROM[03483]
M = D                                        // ROM[03484]
@ :push_local                                // ROM[03485]
0; JMP                                       // ROM[03486]
( String.setInt:173)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[03487]
D = A                                        // ROM[03488]
// ---------------------------
// push D
@ SP                                         // ROM[03489]
AM = M+1                                     // ROM[03490]
A = A-1                                      // ROM[03491]
M = D                                        // ROM[03492]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:174                          // ROM[03493]
D = A                                        // ROM[03494]
@ R15                                        // ROM[03495]
M = D                                        // ROM[03496]
@ :add                                       // ROM[03497]
0; JMP                                       // ROM[03498]
( String.setInt:174)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03499]
D = A                                        // ROM[03500]
@ R13                                        // ROM[03501]
M = D                                        // ROM[03502]
// ---------------------------
// call
@ String.setInt:175                          // ROM[03503]
D = A                                        // ROM[03504]
@ R15                                        // ROM[03505]
M = D                                        // ROM[03506]
@ :pop_local                                 // ROM[03507]
0; JMP                                       // ROM[03508]
( String.setInt:175)

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( String.setInt$IF_FALSE2 )

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03509]
D = A                                        // ROM[03510]
@ R13                                        // ROM[03511]
M = D                                        // ROM[03512]
// ---------------------------
// call
@ String.setInt:176                          // ROM[03513]
D = A                                        // ROM[03514]
@ R15                                        // ROM[03515]
M = D                                        // ROM[03516]
@ :push_this                                 // ROM[03517]
0; JMP                                       // ROM[03518]
( String.setInt:176)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03519]
D = A                                        // ROM[03520]
@ R13                                        // ROM[03521]
M = D                                        // ROM[03522]
// ---------------------------
// call
@ String.setInt:177                          // ROM[03523]
D = A                                        // ROM[03524]
@ R15                                        // ROM[03525]
M = D                                        // ROM[03526]
@ :push_local                                // ROM[03527]
0; JMP                                       // ROM[03528]
( String.setInt:177)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ String.setInt:178                          // ROM[03529]
D = A                                        // ROM[03530]
@ R15                                        // ROM[03531]
M = D                                        // ROM[03532]
@ :lt                                        // ROM[03533]
0; JMP                                       // ROM[03534]
( String.setInt:178)

// -------------------------------------
// IF-GOTO: IF_TRUE3
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03535]
AM = M-1                                     // ROM[03536]
D = M                                        // ROM[03537]
// ---------------------------
@ String.setInt$IF_TRUE3                     // ROM[03538]
D; JNE                                       // ROM[03539]

// -------------------------------------
// GOTO: IF_FALSE3
// -------------------------------------
@ String.setInt$IF_FALSE3                    // ROM[03540]
0; JMP                                       // ROM[03541]

// -------------------------------------
// LABEL: IF_TRUE3
// -------------------------------------
( String.setInt$IF_TRUE3 )

// -------------------------------------
// PUSH: <constant, 19>
// -------------------------------------
@ 19                                         // ROM[03542]
D = A                                        // ROM[03543]
// ---------------------------
// push D
@ SP                                         // ROM[03544]
AM = M+1                                     // ROM[03545]
A = A-1                                      // ROM[03546]
M = D                                        // ROM[03547]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[03548]
D = A                                        // ROM[03549]
@ R13                                        // ROM[03550]
M = D                                        // ROM[03551]
// ---------------------------
// Push RA
@ String.setInt:179                          // ROM[03552]
D = A                                        // ROM[03553]
// ---------------------------
// push D
@ SP                                         // ROM[03554]
AM = M+1                                     // ROM[03555]
A = A-1                                      // ROM[03556]
M = D                                        // ROM[03557]
// ---------------------------
// call
@ String.setInt:180                          // ROM[03558]
D = A                                        // ROM[03559]
@ R15                                        // ROM[03560]
M = D                                        // ROM[03561]
@ :call                                      // ROM[03562]
0; JMP                                       // ROM[03563]
( String.setInt:180)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[03564]
0; JMP                                       // ROM[03565]
// ---------------------------
// ( RA )
( String.setInt:179) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03566]
AM = M-1                                     // ROM[03567]
D = M                                        // ROM[03568]
// ---------------------------
@ 5                                          // ROM[03569]
M = D                                        // ROM[03570]

// -------------------------------------
// LABEL: IF_FALSE3
// -------------------------------------
( String.setInt$IF_FALSE3 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03571]
D = A                                        // ROM[03572]
@ R13                                        // ROM[03573]
M = D                                        // ROM[03574]
// ---------------------------
// call
@ String.setInt:181                          // ROM[03575]
D = A                                        // ROM[03576]
@ R15                                        // ROM[03577]
M = D                                        // ROM[03578]
@ :push_local                                // ROM[03579]
0; JMP                                       // ROM[03580]
( String.setInt:181)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[03581]
D = A                                        // ROM[03582]
// ---------------------------
// push D
@ SP                                         // ROM[03583]
AM = M+1                                     // ROM[03584]
A = A-1                                      // ROM[03585]
M = D                                        // ROM[03586]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ String.setInt:182                          // ROM[03587]
D = A                                        // ROM[03588]
@ R15                                        // ROM[03589]
M = D                                        // ROM[03590]
@ :eq                                        // ROM[03591]
0; JMP                                       // ROM[03592]
( String.setInt:182)

// -------------------------------------
// IF-GOTO: IF_TRUE4
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03593]
AM = M-1                                     // ROM[03594]
D = M                                        // ROM[03595]
// ---------------------------
@ String.setInt$IF_TRUE4                     // ROM[03596]
D; JNE                                       // ROM[03597]

// -------------------------------------
// GOTO: IF_FALSE4
// -------------------------------------
@ String.setInt$IF_FALSE4                    // ROM[03598]
0; JMP                                       // ROM[03599]

// -------------------------------------
// LABEL: IF_TRUE4
// -------------------------------------
( String.setInt$IF_TRUE4 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[03600]
D = A                                        // ROM[03601]
// ---------------------------
// push D
@ SP                                         // ROM[03602]
AM = M+1                                     // ROM[03603]
A = A-1                                      // ROM[03604]
M = D                                        // ROM[03605]

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03606]
D = A                                        // ROM[03607]
@ R13                                        // ROM[03608]
M = D                                        // ROM[03609]
// ---------------------------
// call
@ String.setInt:183                          // ROM[03610]
D = A                                        // ROM[03611]
@ R15                                        // ROM[03612]
M = D                                        // ROM[03613]
@ :push_this                                 // ROM[03614]
0; JMP                                       // ROM[03615]
( String.setInt:183)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:184                          // ROM[03616]
D = A                                        // ROM[03617]
@ R15                                        // ROM[03618]
M = D                                        // ROM[03619]
@ :add                                       // ROM[03620]
0; JMP                                       // ROM[03621]
( String.setInt:184)

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[03622]
D = A                                        // ROM[03623]
// ---------------------------
// push D
@ SP                                         // ROM[03624]
AM = M+1                                     // ROM[03625]
A = A-1                                      // ROM[03626]
M = D                                        // ROM[03627]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03628]
AM = M-1                                     // ROM[03629]
D = M                                        // ROM[03630]
// ---------------------------
@ 5                                          // ROM[03631]
M = D                                        // ROM[03632]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03633]
AM = M-1                                     // ROM[03634]
D = M                                        // ROM[03635]
// ---------------------------
@ 4                                          // ROM[03636]
M = D                                        // ROM[03637]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[03638]
D = M                                        // ROM[03639]
// ---------------------------
// push D
@ SP                                         // ROM[03640]
AM = M+1                                     // ROM[03641]
A = A-1                                      // ROM[03642]
M = D                                        // ROM[03643]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03644]
D = A                                        // ROM[03645]
@ R13                                        // ROM[03646]
M = D                                        // ROM[03647]
// ---------------------------
// call
@ String.setInt:185                          // ROM[03648]
D = A                                        // ROM[03649]
@ R15                                        // ROM[03650]
M = D                                        // ROM[03651]
@ :pop_that                                  // ROM[03652]
0; JMP                                       // ROM[03653]
( String.setInt:185)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[03654]
D = A                                        // ROM[03655]
// ---------------------------
// push D
@ SP                                         // ROM[03656]
AM = M+1                                     // ROM[03657]
A = A-1                                      // ROM[03658]
M = D                                        // ROM[03659]

// -------------------------------------
// POP: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03660]
D = A                                        // ROM[03661]
@ R13                                        // ROM[03662]
M = D                                        // ROM[03663]
// ---------------------------
// call
@ String.setInt:186                          // ROM[03664]
D = A                                        // ROM[03665]
@ R15                                        // ROM[03666]
M = D                                        // ROM[03667]
@ :pop_this                                  // ROM[03668]
0; JMP                                       // ROM[03669]
( String.setInt:186)

// -------------------------------------
// GOTO: IF_END4
// -------------------------------------
@ String.setInt$IF_END4                      // ROM[03670]
0; JMP                                       // ROM[03671]

// -------------------------------------
// LABEL: IF_FALSE4
// -------------------------------------
( String.setInt$IF_FALSE4 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[03672]
D = A                                        // ROM[03673]
// ---------------------------
// push D
@ SP                                         // ROM[03674]
AM = M+1                                     // ROM[03675]
A = A-1                                      // ROM[03676]
M = D                                        // ROM[03677]

// -------------------------------------
// POP: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03678]
D = A                                        // ROM[03679]
@ R13                                        // ROM[03680]
M = D                                        // ROM[03681]
// ---------------------------
// call
@ String.setInt:187                          // ROM[03682]
D = A                                        // ROM[03683]
@ R15                                        // ROM[03684]
M = D                                        // ROM[03685]
@ :pop_this                                  // ROM[03686]
0; JMP                                       // ROM[03687]
( String.setInt:187)

// -------------------------------------
// LABEL: WHILE_EXP1
// -------------------------------------
( String.setInt$WHILE_EXP1 )

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03688]
D = A                                        // ROM[03689]
@ R13                                        // ROM[03690]
M = D                                        // ROM[03691]
// ---------------------------
// call
@ String.setInt:188                          // ROM[03692]
D = A                                        // ROM[03693]
@ R15                                        // ROM[03694]
M = D                                        // ROM[03695]
@ :push_this                                 // ROM[03696]
0; JMP                                       // ROM[03697]
( String.setInt:188)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03698]
D = A                                        // ROM[03699]
@ R13                                        // ROM[03700]
M = D                                        // ROM[03701]
// ---------------------------
// call
@ String.setInt:189                          // ROM[03702]
D = A                                        // ROM[03703]
@ R15                                        // ROM[03704]
M = D                                        // ROM[03705]
@ :push_local                                // ROM[03706]
0; JMP                                       // ROM[03707]
( String.setInt:189)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ String.setInt:190                          // ROM[03708]
D = A                                        // ROM[03709]
@ R15                                        // ROM[03710]
M = D                                        // ROM[03711]
@ :lt                                        // ROM[03712]
0; JMP                                       // ROM[03713]
( String.setInt:190)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[03714]
A = M-1                                      // ROM[03715]
M = !M                                       // ROM[03716]

// -------------------------------------
// IF-GOTO: WHILE_END1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03717]
AM = M-1                                     // ROM[03718]
D = M                                        // ROM[03719]
// ---------------------------
@ String.setInt$WHILE_END1                   // ROM[03720]
D; JNE                                       // ROM[03721]

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03722]
D = A                                        // ROM[03723]
@ R13                                        // ROM[03724]
M = D                                        // ROM[03725]
// ---------------------------
// call
@ String.setInt:191                          // ROM[03726]
D = A                                        // ROM[03727]
@ R15                                        // ROM[03728]
M = D                                        // ROM[03729]
@ :push_this                                 // ROM[03730]
0; JMP                                       // ROM[03731]
( String.setInt:191)

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[03732]
D = A                                        // ROM[03733]
@ R13                                        // ROM[03734]
M = D                                        // ROM[03735]
// ---------------------------
// call
@ String.setInt:192                          // ROM[03736]
D = A                                        // ROM[03737]
@ R15                                        // ROM[03738]
M = D                                        // ROM[03739]
@ :push_this                                 // ROM[03740]
0; JMP                                       // ROM[03741]
( String.setInt:192)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:193                          // ROM[03742]
D = A                                        // ROM[03743]
@ R15                                        // ROM[03744]
M = D                                        // ROM[03745]
@ :add                                       // ROM[03746]
0; JMP                                       // ROM[03747]
( String.setInt:193)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03748]
D = A                                        // ROM[03749]
@ R13                                        // ROM[03750]
M = D                                        // ROM[03751]
// ---------------------------
// call
@ String.setInt:194                          // ROM[03752]
D = A                                        // ROM[03753]
@ R15                                        // ROM[03754]
M = D                                        // ROM[03755]
@ :push_local                                // ROM[03756]
0; JMP                                       // ROM[03757]
( String.setInt:194)

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03758]
D = A                                        // ROM[03759]
@ R13                                        // ROM[03760]
M = D                                        // ROM[03761]
// ---------------------------
// call
@ String.setInt:195                          // ROM[03762]
D = A                                        // ROM[03763]
@ R15                                        // ROM[03764]
M = D                                        // ROM[03765]
@ :push_this                                 // ROM[03766]
0; JMP                                       // ROM[03767]
( String.setInt:195)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[03768]
D = A                                        // ROM[03769]
// ---------------------------
// push D
@ SP                                         // ROM[03770]
AM = M+1                                     // ROM[03771]
A = A-1                                      // ROM[03772]
M = D                                        // ROM[03773]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:196                          // ROM[03774]
D = A                                        // ROM[03775]
@ R15                                        // ROM[03776]
M = D                                        // ROM[03777]
@ :add                                       // ROM[03778]
0; JMP                                       // ROM[03779]
( String.setInt:196)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ String.setInt:197                          // ROM[03780]
D = A                                        // ROM[03781]
@ R15                                        // ROM[03782]
M = D                                        // ROM[03783]
@ :sub                                       // ROM[03784]
0; JMP                                       // ROM[03785]
( String.setInt:197)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03786]
D = A                                        // ROM[03787]
@ R13                                        // ROM[03788]
M = D                                        // ROM[03789]
// ---------------------------
// call
@ String.setInt:198                          // ROM[03790]
D = A                                        // ROM[03791]
@ R15                                        // ROM[03792]
M = D                                        // ROM[03793]
@ :push_local                                // ROM[03794]
0; JMP                                       // ROM[03795]
( String.setInt:198)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:199                          // ROM[03796]
D = A                                        // ROM[03797]
@ R15                                        // ROM[03798]
M = D                                        // ROM[03799]
@ :add                                       // ROM[03800]
0; JMP                                       // ROM[03801]
( String.setInt:199)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03802]
AM = M-1                                     // ROM[03803]
D = M                                        // ROM[03804]
// ---------------------------
@ 4                                          // ROM[03805]
M = D                                        // ROM[03806]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03807]
D = A                                        // ROM[03808]
@ R13                                        // ROM[03809]
M = D                                        // ROM[03810]
// ---------------------------
// call
@ String.setInt:200                          // ROM[03811]
D = A                                        // ROM[03812]
@ R15                                        // ROM[03813]
M = D                                        // ROM[03814]
@ :push_that                                 // ROM[03815]
0; JMP                                       // ROM[03816]
( String.setInt:200)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03817]
AM = M-1                                     // ROM[03818]
D = M                                        // ROM[03819]
// ---------------------------
@ 5                                          // ROM[03820]
M = D                                        // ROM[03821]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03822]
AM = M-1                                     // ROM[03823]
D = M                                        // ROM[03824]
// ---------------------------
@ 4                                          // ROM[03825]
M = D                                        // ROM[03826]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[03827]
D = M                                        // ROM[03828]
// ---------------------------
// push D
@ SP                                         // ROM[03829]
AM = M+1                                     // ROM[03830]
A = A-1                                      // ROM[03831]
M = D                                        // ROM[03832]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[03833]
D = A                                        // ROM[03834]
@ R13                                        // ROM[03835]
M = D                                        // ROM[03836]
// ---------------------------
// call
@ String.setInt:201                          // ROM[03837]
D = A                                        // ROM[03838]
@ R15                                        // ROM[03839]
M = D                                        // ROM[03840]
@ :pop_that                                  // ROM[03841]
0; JMP                                       // ROM[03842]
( String.setInt:201)

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03843]
D = A                                        // ROM[03844]
@ R13                                        // ROM[03845]
M = D                                        // ROM[03846]
// ---------------------------
// call
@ String.setInt:202                          // ROM[03847]
D = A                                        // ROM[03848]
@ R15                                        // ROM[03849]
M = D                                        // ROM[03850]
@ :push_this                                 // ROM[03851]
0; JMP                                       // ROM[03852]
( String.setInt:202)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[03853]
D = A                                        // ROM[03854]
// ---------------------------
// push D
@ SP                                         // ROM[03855]
AM = M+1                                     // ROM[03856]
A = A-1                                      // ROM[03857]
M = D                                        // ROM[03858]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ String.setInt:203                          // ROM[03859]
D = A                                        // ROM[03860]
@ R15                                        // ROM[03861]
M = D                                        // ROM[03862]
@ :add                                       // ROM[03863]
0; JMP                                       // ROM[03864]
( String.setInt:203)

// -------------------------------------
// POP: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03865]
D = A                                        // ROM[03866]
@ R13                                        // ROM[03867]
M = D                                        // ROM[03868]
// ---------------------------
// call
@ String.setInt:204                          // ROM[03869]
D = A                                        // ROM[03870]
@ R15                                        // ROM[03871]
M = D                                        // ROM[03872]
@ :pop_this                                  // ROM[03873]
0; JMP                                       // ROM[03874]
( String.setInt:204)

// -------------------------------------
// GOTO: WHILE_EXP1
// -------------------------------------
@ String.setInt$WHILE_EXP1                   // ROM[03875]
0; JMP                                       // ROM[03876]

// -------------------------------------
// LABEL: WHILE_END1
// -------------------------------------
( String.setInt$WHILE_END1 )

// -------------------------------------
// LABEL: IF_END4
// -------------------------------------
( String.setInt$IF_END4 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[03877]
D = A                                        // ROM[03878]
@ R13                                        // ROM[03879]
M = D                                        // ROM[03880]
// ---------------------------
// call
@ String.setInt:205                          // ROM[03881]
D = A                                        // ROM[03882]
@ R15                                        // ROM[03883]
M = D                                        // ROM[03884]
@ :push_local                                // ROM[03885]
0; JMP                                       // ROM[03886]
( String.setInt:205)

// -------------------------------------
// CALL: Array.dispose(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[03887]
D = A                                        // ROM[03888]
@ R13                                        // ROM[03889]
M = D                                        // ROM[03890]
// ---------------------------
// Push RA
@ String.setInt:206                          // ROM[03891]
D = A                                        // ROM[03892]
// ---------------------------
// push D
@ SP                                         // ROM[03893]
AM = M+1                                     // ROM[03894]
A = A-1                                      // ROM[03895]
M = D                                        // ROM[03896]
// ---------------------------
// call
@ String.setInt:207                          // ROM[03897]
D = A                                        // ROM[03898]
@ R15                                        // ROM[03899]
M = D                                        // ROM[03900]
@ :call                                      // ROM[03901]
0; JMP                                       // ROM[03902]
( String.setInt:207)
// ---------------------------
// goto functionName
@ Array.dispose                              // ROM[03903]
0; JMP                                       // ROM[03904]
// ---------------------------
// ( RA )
( String.setInt:206) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03905]
AM = M-1                                     // ROM[03906]
D = M                                        // ROM[03907]
// ---------------------------
@ 5                                          // ROM[03908]
M = D                                        // ROM[03909]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[03910]
D = A                                        // ROM[03911]
// ---------------------------
// push D
@ SP                                         // ROM[03912]
AM = M+1                                     // ROM[03913]
A = A-1                                      // ROM[03914]
M = D                                        // ROM[03915]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.setInt:208                          // ROM[03916]
D = A                                        // ROM[03917]
@ R15                                        // ROM[03918]
M = D                                        // ROM[03919]
@ :return                                    // ROM[03920]
0; JMP                                       // ROM[03921]
( String.setInt:208)

// =========================================================
// FUNCTION: String.newLine(0 locals)
// =========================================================

( String.newLine )
// ---------------------------
// clear local segment
D = 0                                        // ROM[03922]

// -------------------------------------
// PUSH: <constant, 128>
// -------------------------------------
@ 128                                        // ROM[03923]
D = A                                        // ROM[03924]
// ---------------------------
// push D
@ SP                                         // ROM[03925]
AM = M+1                                     // ROM[03926]
A = A-1                                      // ROM[03927]
M = D                                        // ROM[03928]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.newLine:209                         // ROM[03929]
D = A                                        // ROM[03930]
@ R15                                        // ROM[03931]
M = D                                        // ROM[03932]
@ :return                                    // ROM[03933]
0; JMP                                       // ROM[03934]
( String.newLine:209)

// =========================================================
// FUNCTION: String.backSpace(0 locals)
// =========================================================

( String.backSpace )
// ---------------------------
// clear local segment
D = 0                                        // ROM[03935]

// -------------------------------------
// PUSH: <constant, 129>
// -------------------------------------
@ 129                                        // ROM[03936]
D = A                                        // ROM[03937]
// ---------------------------
// push D
@ SP                                         // ROM[03938]
AM = M+1                                     // ROM[03939]
A = A-1                                      // ROM[03940]
M = D                                        // ROM[03941]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.backSpace:210                       // ROM[03942]
D = A                                        // ROM[03943]
@ R15                                        // ROM[03944]
M = D                                        // ROM[03945]
@ :return                                    // ROM[03946]
0; JMP                                       // ROM[03947]
( String.backSpace:210)

// =========================================================
// FUNCTION: String.doubleQuote(0 locals)
// =========================================================

( String.doubleQuote )
// ---------------------------
// clear local segment
D = 0                                        // ROM[03948]

// -------------------------------------
// PUSH: <constant, 34>
// -------------------------------------
@ 34                                         // ROM[03949]
D = A                                        // ROM[03950]
// ---------------------------
// push D
@ SP                                         // ROM[03951]
AM = M+1                                     // ROM[03952]
A = A-1                                      // ROM[03953]
M = D                                        // ROM[03954]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ String.doubleQuote:211                     // ROM[03955]
D = A                                        // ROM[03956]
@ R15                                        // ROM[03957]
M = D                                        // ROM[03958]
@ :return                                    // ROM[03959]
0; JMP                                       // ROM[03960]
( String.doubleQuote:211)

// *********************************************************
// Translation of: ./Math.vm
// *********************************************************


// =========================================================
// FUNCTION: Math.init(1 locals)
// =========================================================

( Math.init )
// ---------------------------
// clear local segment
D = 0                                        // ROM[03961]
// ---------------------------
// push D
@ SP                                         // ROM[03962]
AM = M+1                                     // ROM[03963]
A = A-1                                      // ROM[03964]
M = D                                        // ROM[03965]

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[03966]
D = A                                        // ROM[03967]
// ---------------------------
// push D
@ SP                                         // ROM[03968]
AM = M+1                                     // ROM[03969]
A = A-1                                      // ROM[03970]
M = D                                        // ROM[03971]

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[03972]
D = A                                        // ROM[03973]
@ R13                                        // ROM[03974]
M = D                                        // ROM[03975]
// ---------------------------
// Push RA
@ Math.init:0                                // ROM[03976]
D = A                                        // ROM[03977]
// ---------------------------
// push D
@ SP                                         // ROM[03978]
AM = M+1                                     // ROM[03979]
A = A-1                                      // ROM[03980]
M = D                                        // ROM[03981]
// ---------------------------
// call
@ Math.init:1                                // ROM[03982]
D = A                                        // ROM[03983]
@ R15                                        // ROM[03984]
M = D                                        // ROM[03985]
@ :call                                      // ROM[03986]
0; JMP                                       // ROM[03987]
( Math.init:1)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[03988]
0; JMP                                       // ROM[03989]
// ---------------------------
// ( RA )
( Math.init:0) 

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[03990]
AM = M-1                                     // ROM[03991]
D = M                                        // ROM[03992]
// ---------------------------
// static[index] = D
@ Math.1                                     // ROM[03993]
M = D                                        // ROM[03994]

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[03995]
D = A                                        // ROM[03996]
// ---------------------------
// push D
@ SP                                         // ROM[03997]
AM = M+1                                     // ROM[03998]
A = A-1                                      // ROM[03999]
M = D                                        // ROM[04000]

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[04001]
D = A                                        // ROM[04002]
@ R13                                        // ROM[04003]
M = D                                        // ROM[04004]
// ---------------------------
// Push RA
@ Math.init:2                                // ROM[04005]
D = A                                        // ROM[04006]
// ---------------------------
// push D
@ SP                                         // ROM[04007]
AM = M+1                                     // ROM[04008]
A = A-1                                      // ROM[04009]
M = D                                        // ROM[04010]
// ---------------------------
// call
@ Math.init:3                                // ROM[04011]
D = A                                        // ROM[04012]
@ R15                                        // ROM[04013]
M = D                                        // ROM[04014]
@ :call                                      // ROM[04015]
0; JMP                                       // ROM[04016]
( Math.init:3)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[04017]
0; JMP                                       // ROM[04018]
// ---------------------------
// ( RA )
( Math.init:2) 

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04019]
AM = M-1                                     // ROM[04020]
D = M                                        // ROM[04021]
// ---------------------------
// static[index] = D
@ Math.0                                     // ROM[04022]
M = D                                        // ROM[04023]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[04024]
D = A                                        // ROM[04025]
// ---------------------------
// push D
@ SP                                         // ROM[04026]
AM = M+1                                     // ROM[04027]
A = A-1                                      // ROM[04028]
M = D                                        // ROM[04029]

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.0                                     // ROM[04030]
D = M                                        // ROM[04031]
// ---------------------------
// push D
@ SP                                         // ROM[04032]
AM = M+1                                     // ROM[04033]
A = A-1                                      // ROM[04034]
M = D                                        // ROM[04035]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.init:4                                // ROM[04036]
D = A                                        // ROM[04037]
@ R15                                        // ROM[04038]
M = D                                        // ROM[04039]
@ :add                                       // ROM[04040]
0; JMP                                       // ROM[04041]
( Math.init:4)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[04042]
D = A                                        // ROM[04043]
// ---------------------------
// push D
@ SP                                         // ROM[04044]
AM = M+1                                     // ROM[04045]
A = A-1                                      // ROM[04046]
M = D                                        // ROM[04047]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04048]
AM = M-1                                     // ROM[04049]
D = M                                        // ROM[04050]
// ---------------------------
@ 5                                          // ROM[04051]
M = D                                        // ROM[04052]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04053]
AM = M-1                                     // ROM[04054]
D = M                                        // ROM[04055]
// ---------------------------
@ 4                                          // ROM[04056]
M = D                                        // ROM[04057]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[04058]
D = M                                        // ROM[04059]
// ---------------------------
// push D
@ SP                                         // ROM[04060]
AM = M+1                                     // ROM[04061]
A = A-1                                      // ROM[04062]
M = D                                        // ROM[04063]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04064]
D = A                                        // ROM[04065]
@ R13                                        // ROM[04066]
M = D                                        // ROM[04067]
// ---------------------------
// call
@ Math.init:5                                // ROM[04068]
D = A                                        // ROM[04069]
@ R15                                        // ROM[04070]
M = D                                        // ROM[04071]
@ :pop_that                                  // ROM[04072]
0; JMP                                       // ROM[04073]
( Math.init:5)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Math.init$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04074]
D = A                                        // ROM[04075]
@ R13                                        // ROM[04076]
M = D                                        // ROM[04077]
// ---------------------------
// call
@ Math.init:6                                // ROM[04078]
D = A                                        // ROM[04079]
@ R15                                        // ROM[04080]
M = D                                        // ROM[04081]
@ :push_local                                // ROM[04082]
0; JMP                                       // ROM[04083]
( Math.init:6)

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[04084]
D = A                                        // ROM[04085]
// ---------------------------
// push D
@ SP                                         // ROM[04086]
AM = M+1                                     // ROM[04087]
A = A-1                                      // ROM[04088]
M = D                                        // ROM[04089]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.init:7                                // ROM[04090]
D = A                                        // ROM[04091]
@ R15                                        // ROM[04092]
M = D                                        // ROM[04093]
@ :lt                                        // ROM[04094]
0; JMP                                       // ROM[04095]
( Math.init:7)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[04096]
A = M-1                                      // ROM[04097]
M = !M                                       // ROM[04098]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04099]
AM = M-1                                     // ROM[04100]
D = M                                        // ROM[04101]
// ---------------------------
@ Math.init$WHILE_END0                       // ROM[04102]
D; JNE                                       // ROM[04103]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04104]
D = A                                        // ROM[04105]
@ R13                                        // ROM[04106]
M = D                                        // ROM[04107]
// ---------------------------
// call
@ Math.init:8                                // ROM[04108]
D = A                                        // ROM[04109]
@ R15                                        // ROM[04110]
M = D                                        // ROM[04111]
@ :push_local                                // ROM[04112]
0; JMP                                       // ROM[04113]
( Math.init:8)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[04114]
D = A                                        // ROM[04115]
// ---------------------------
// push D
@ SP                                         // ROM[04116]
AM = M+1                                     // ROM[04117]
A = A-1                                      // ROM[04118]
M = D                                        // ROM[04119]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.init:9                                // ROM[04120]
D = A                                        // ROM[04121]
@ R15                                        // ROM[04122]
M = D                                        // ROM[04123]
@ :add                                       // ROM[04124]
0; JMP                                       // ROM[04125]
( Math.init:9)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04126]
D = A                                        // ROM[04127]
@ R13                                        // ROM[04128]
M = D                                        // ROM[04129]
// ---------------------------
// call
@ Math.init:10                               // ROM[04130]
D = A                                        // ROM[04131]
@ R15                                        // ROM[04132]
M = D                                        // ROM[04133]
@ :pop_local                                 // ROM[04134]
0; JMP                                       // ROM[04135]
( Math.init:10)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04136]
D = A                                        // ROM[04137]
@ R13                                        // ROM[04138]
M = D                                        // ROM[04139]
// ---------------------------
// call
@ Math.init:11                               // ROM[04140]
D = A                                        // ROM[04141]
@ R15                                        // ROM[04142]
M = D                                        // ROM[04143]
@ :push_local                                // ROM[04144]
0; JMP                                       // ROM[04145]
( Math.init:11)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.0                                     // ROM[04146]
D = M                                        // ROM[04147]
// ---------------------------
// push D
@ SP                                         // ROM[04148]
AM = M+1                                     // ROM[04149]
A = A-1                                      // ROM[04150]
M = D                                        // ROM[04151]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.init:12                               // ROM[04152]
D = A                                        // ROM[04153]
@ R15                                        // ROM[04154]
M = D                                        // ROM[04155]
@ :add                                       // ROM[04156]
0; JMP                                       // ROM[04157]
( Math.init:12)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04158]
D = A                                        // ROM[04159]
@ R13                                        // ROM[04160]
M = D                                        // ROM[04161]
// ---------------------------
// call
@ Math.init:13                               // ROM[04162]
D = A                                        // ROM[04163]
@ R15                                        // ROM[04164]
M = D                                        // ROM[04165]
@ :push_local                                // ROM[04166]
0; JMP                                       // ROM[04167]
( Math.init:13)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[04168]
D = A                                        // ROM[04169]
// ---------------------------
// push D
@ SP                                         // ROM[04170]
AM = M+1                                     // ROM[04171]
A = A-1                                      // ROM[04172]
M = D                                        // ROM[04173]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.init:14                               // ROM[04174]
D = A                                        // ROM[04175]
@ R15                                        // ROM[04176]
M = D                                        // ROM[04177]
@ :sub                                       // ROM[04178]
0; JMP                                       // ROM[04179]
( Math.init:14)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.0                                     // ROM[04180]
D = M                                        // ROM[04181]
// ---------------------------
// push D
@ SP                                         // ROM[04182]
AM = M+1                                     // ROM[04183]
A = A-1                                      // ROM[04184]
M = D                                        // ROM[04185]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.init:15                               // ROM[04186]
D = A                                        // ROM[04187]
@ R15                                        // ROM[04188]
M = D                                        // ROM[04189]
@ :add                                       // ROM[04190]
0; JMP                                       // ROM[04191]
( Math.init:15)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04192]
AM = M-1                                     // ROM[04193]
D = M                                        // ROM[04194]
// ---------------------------
@ 4                                          // ROM[04195]
M = D                                        // ROM[04196]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04197]
D = A                                        // ROM[04198]
@ R13                                        // ROM[04199]
M = D                                        // ROM[04200]
// ---------------------------
// call
@ Math.init:16                               // ROM[04201]
D = A                                        // ROM[04202]
@ R15                                        // ROM[04203]
M = D                                        // ROM[04204]
@ :push_that                                 // ROM[04205]
0; JMP                                       // ROM[04206]
( Math.init:16)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04207]
D = A                                        // ROM[04208]
@ R13                                        // ROM[04209]
M = D                                        // ROM[04210]
// ---------------------------
// call
@ Math.init:17                               // ROM[04211]
D = A                                        // ROM[04212]
@ R15                                        // ROM[04213]
M = D                                        // ROM[04214]
@ :push_local                                // ROM[04215]
0; JMP                                       // ROM[04216]
( Math.init:17)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[04217]
D = A                                        // ROM[04218]
// ---------------------------
// push D
@ SP                                         // ROM[04219]
AM = M+1                                     // ROM[04220]
A = A-1                                      // ROM[04221]
M = D                                        // ROM[04222]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.init:18                               // ROM[04223]
D = A                                        // ROM[04224]
@ R15                                        // ROM[04225]
M = D                                        // ROM[04226]
@ :sub                                       // ROM[04227]
0; JMP                                       // ROM[04228]
( Math.init:18)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.0                                     // ROM[04229]
D = M                                        // ROM[04230]
// ---------------------------
// push D
@ SP                                         // ROM[04231]
AM = M+1                                     // ROM[04232]
A = A-1                                      // ROM[04233]
M = D                                        // ROM[04234]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.init:19                               // ROM[04235]
D = A                                        // ROM[04236]
@ R15                                        // ROM[04237]
M = D                                        // ROM[04238]
@ :add                                       // ROM[04239]
0; JMP                                       // ROM[04240]
( Math.init:19)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04241]
AM = M-1                                     // ROM[04242]
D = M                                        // ROM[04243]
// ---------------------------
@ 4                                          // ROM[04244]
M = D                                        // ROM[04245]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04246]
D = A                                        // ROM[04247]
@ R13                                        // ROM[04248]
M = D                                        // ROM[04249]
// ---------------------------
// call
@ Math.init:20                               // ROM[04250]
D = A                                        // ROM[04251]
@ R15                                        // ROM[04252]
M = D                                        // ROM[04253]
@ :push_that                                 // ROM[04254]
0; JMP                                       // ROM[04255]
( Math.init:20)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.init:21                               // ROM[04256]
D = A                                        // ROM[04257]
@ R15                                        // ROM[04258]
M = D                                        // ROM[04259]
@ :add                                       // ROM[04260]
0; JMP                                       // ROM[04261]
( Math.init:21)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04262]
AM = M-1                                     // ROM[04263]
D = M                                        // ROM[04264]
// ---------------------------
@ 5                                          // ROM[04265]
M = D                                        // ROM[04266]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04267]
AM = M-1                                     // ROM[04268]
D = M                                        // ROM[04269]
// ---------------------------
@ 4                                          // ROM[04270]
M = D                                        // ROM[04271]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[04272]
D = M                                        // ROM[04273]
// ---------------------------
// push D
@ SP                                         // ROM[04274]
AM = M+1                                     // ROM[04275]
A = A-1                                      // ROM[04276]
M = D                                        // ROM[04277]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04278]
D = A                                        // ROM[04279]
@ R13                                        // ROM[04280]
M = D                                        // ROM[04281]
// ---------------------------
// call
@ Math.init:22                               // ROM[04282]
D = A                                        // ROM[04283]
@ R15                                        // ROM[04284]
M = D                                        // ROM[04285]
@ :pop_that                                  // ROM[04286]
0; JMP                                       // ROM[04287]
( Math.init:22)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Math.init$WHILE_EXP0                       // ROM[04288]
0; JMP                                       // ROM[04289]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Math.init$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[04290]
D = A                                        // ROM[04291]
// ---------------------------
// push D
@ SP                                         // ROM[04292]
AM = M+1                                     // ROM[04293]
A = A-1                                      // ROM[04294]
M = D                                        // ROM[04295]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Math.init:23                               // ROM[04296]
D = A                                        // ROM[04297]
@ R15                                        // ROM[04298]
M = D                                        // ROM[04299]
@ :return                                    // ROM[04300]
0; JMP                                       // ROM[04301]
( Math.init:23)

// =========================================================
// FUNCTION: Math.abs(0 locals)
// =========================================================

( Math.abs )
// ---------------------------
// clear local segment
D = 0                                        // ROM[04302]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04303]
D = A                                        // ROM[04304]
@ R13                                        // ROM[04305]
M = D                                        // ROM[04306]
// ---------------------------
// call
@ Math.abs:24                                // ROM[04307]
D = A                                        // ROM[04308]
@ R15                                        // ROM[04309]
M = D                                        // ROM[04310]
@ :push_argument                             // ROM[04311]
0; JMP                                       // ROM[04312]
( Math.abs:24)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[04313]
D = A                                        // ROM[04314]
// ---------------------------
// push D
@ SP                                         // ROM[04315]
AM = M+1                                     // ROM[04316]
A = A-1                                      // ROM[04317]
M = D                                        // ROM[04318]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.abs:25                                // ROM[04319]
D = A                                        // ROM[04320]
@ R15                                        // ROM[04321]
M = D                                        // ROM[04322]
@ :lt                                        // ROM[04323]
0; JMP                                       // ROM[04324]
( Math.abs:25)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04325]
AM = M-1                                     // ROM[04326]
D = M                                        // ROM[04327]
// ---------------------------
@ Math.abs$IF_TRUE0                          // ROM[04328]
D; JNE                                       // ROM[04329]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Math.abs$IF_FALSE0                         // ROM[04330]
0; JMP                                       // ROM[04331]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Math.abs$IF_TRUE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04332]
D = A                                        // ROM[04333]
@ R13                                        // ROM[04334]
M = D                                        // ROM[04335]
// ---------------------------
// call
@ Math.abs:26                                // ROM[04336]
D = A                                        // ROM[04337]
@ R15                                        // ROM[04338]
M = D                                        // ROM[04339]
@ :push_argument                             // ROM[04340]
0; JMP                                       // ROM[04341]
( Math.abs:26)

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[04342]
A = M-1                                      // ROM[04343]
M = -M                                       // ROM[04344]

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04345]
D = A                                        // ROM[04346]
@ R13                                        // ROM[04347]
M = D                                        // ROM[04348]
// ---------------------------
// call
@ Math.abs:27                                // ROM[04349]
D = A                                        // ROM[04350]
@ R15                                        // ROM[04351]
M = D                                        // ROM[04352]
@ :pop_argument                              // ROM[04353]
0; JMP                                       // ROM[04354]
( Math.abs:27)

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Math.abs$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04355]
D = A                                        // ROM[04356]
@ R13                                        // ROM[04357]
M = D                                        // ROM[04358]
// ---------------------------
// call
@ Math.abs:28                                // ROM[04359]
D = A                                        // ROM[04360]
@ R15                                        // ROM[04361]
M = D                                        // ROM[04362]
@ :push_argument                             // ROM[04363]
0; JMP                                       // ROM[04364]
( Math.abs:28)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Math.abs:29                                // ROM[04365]
D = A                                        // ROM[04366]
@ R15                                        // ROM[04367]
M = D                                        // ROM[04368]
@ :return                                    // ROM[04369]
0; JMP                                       // ROM[04370]
( Math.abs:29)

// =========================================================
// FUNCTION: Math.multiply(5 locals)
// =========================================================

( Math.multiply )
// ---------------------------
// clear local segment
D = 0                                        // ROM[04371]
// ---------------------------
// push D
@ SP                                         // ROM[04372]
AM = M+1                                     // ROM[04373]
A = A-1                                      // ROM[04374]
M = D                                        // ROM[04375]
// ---------------------------
// push D
@ SP                                         // ROM[04376]
AM = M+1                                     // ROM[04377]
A = A-1                                      // ROM[04378]
M = D                                        // ROM[04379]
// ---------------------------
// push D
@ SP                                         // ROM[04380]
AM = M+1                                     // ROM[04381]
A = A-1                                      // ROM[04382]
M = D                                        // ROM[04383]
// ---------------------------
// push D
@ SP                                         // ROM[04384]
AM = M+1                                     // ROM[04385]
A = A-1                                      // ROM[04386]
M = D                                        // ROM[04387]
// ---------------------------
// push D
@ SP                                         // ROM[04388]
AM = M+1                                     // ROM[04389]
A = A-1                                      // ROM[04390]
M = D                                        // ROM[04391]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04392]
D = A                                        // ROM[04393]
@ R13                                        // ROM[04394]
M = D                                        // ROM[04395]
// ---------------------------
// call
@ Math.multiply:30                           // ROM[04396]
D = A                                        // ROM[04397]
@ R15                                        // ROM[04398]
M = D                                        // ROM[04399]
@ :push_argument                             // ROM[04400]
0; JMP                                       // ROM[04401]
( Math.multiply:30)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[04402]
D = A                                        // ROM[04403]
// ---------------------------
// push D
@ SP                                         // ROM[04404]
AM = M+1                                     // ROM[04405]
A = A-1                                      // ROM[04406]
M = D                                        // ROM[04407]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:31                           // ROM[04408]
D = A                                        // ROM[04409]
@ R15                                        // ROM[04410]
M = D                                        // ROM[04411]
@ :lt                                        // ROM[04412]
0; JMP                                       // ROM[04413]
( Math.multiply:31)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04414]
D = A                                        // ROM[04415]
@ R13                                        // ROM[04416]
M = D                                        // ROM[04417]
// ---------------------------
// call
@ Math.multiply:32                           // ROM[04418]
D = A                                        // ROM[04419]
@ R15                                        // ROM[04420]
M = D                                        // ROM[04421]
@ :push_argument                             // ROM[04422]
0; JMP                                       // ROM[04423]
( Math.multiply:32)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[04424]
D = A                                        // ROM[04425]
// ---------------------------
// push D
@ SP                                         // ROM[04426]
AM = M+1                                     // ROM[04427]
A = A-1                                      // ROM[04428]
M = D                                        // ROM[04429]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:33                           // ROM[04430]
D = A                                        // ROM[04431]
@ R15                                        // ROM[04432]
M = D                                        // ROM[04433]
@ :gt                                        // ROM[04434]
0; JMP                                       // ROM[04435]
( Math.multiply:33)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:34                           // ROM[04436]
D = A                                        // ROM[04437]
@ R15                                        // ROM[04438]
M = D                                        // ROM[04439]
@ :and                                       // ROM[04440]
0; JMP                                       // ROM[04441]
( Math.multiply:34)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04442]
D = A                                        // ROM[04443]
@ R13                                        // ROM[04444]
M = D                                        // ROM[04445]
// ---------------------------
// call
@ Math.multiply:35                           // ROM[04446]
D = A                                        // ROM[04447]
@ R15                                        // ROM[04448]
M = D                                        // ROM[04449]
@ :push_argument                             // ROM[04450]
0; JMP                                       // ROM[04451]
( Math.multiply:35)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[04452]
D = A                                        // ROM[04453]
// ---------------------------
// push D
@ SP                                         // ROM[04454]
AM = M+1                                     // ROM[04455]
A = A-1                                      // ROM[04456]
M = D                                        // ROM[04457]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:36                           // ROM[04458]
D = A                                        // ROM[04459]
@ R15                                        // ROM[04460]
M = D                                        // ROM[04461]
@ :gt                                        // ROM[04462]
0; JMP                                       // ROM[04463]
( Math.multiply:36)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04464]
D = A                                        // ROM[04465]
@ R13                                        // ROM[04466]
M = D                                        // ROM[04467]
// ---------------------------
// call
@ Math.multiply:37                           // ROM[04468]
D = A                                        // ROM[04469]
@ R15                                        // ROM[04470]
M = D                                        // ROM[04471]
@ :push_argument                             // ROM[04472]
0; JMP                                       // ROM[04473]
( Math.multiply:37)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[04474]
D = A                                        // ROM[04475]
// ---------------------------
// push D
@ SP                                         // ROM[04476]
AM = M+1                                     // ROM[04477]
A = A-1                                      // ROM[04478]
M = D                                        // ROM[04479]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:38                           // ROM[04480]
D = A                                        // ROM[04481]
@ R15                                        // ROM[04482]
M = D                                        // ROM[04483]
@ :lt                                        // ROM[04484]
0; JMP                                       // ROM[04485]
( Math.multiply:38)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:39                           // ROM[04486]
D = A                                        // ROM[04487]
@ R15                                        // ROM[04488]
M = D                                        // ROM[04489]
@ :and                                       // ROM[04490]
0; JMP                                       // ROM[04491]
( Math.multiply:39)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:40                           // ROM[04492]
D = A                                        // ROM[04493]
@ R15                                        // ROM[04494]
M = D                                        // ROM[04495]
@ :or                                        // ROM[04496]
0; JMP                                       // ROM[04497]
( Math.multiply:40)

// -------------------------------------
// POP: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[04498]
D = A                                        // ROM[04499]
@ R13                                        // ROM[04500]
M = D                                        // ROM[04501]
// ---------------------------
// call
@ Math.multiply:41                           // ROM[04502]
D = A                                        // ROM[04503]
@ R15                                        // ROM[04504]
M = D                                        // ROM[04505]
@ :pop_local                                 // ROM[04506]
0; JMP                                       // ROM[04507]
( Math.multiply:41)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04508]
D = A                                        // ROM[04509]
@ R13                                        // ROM[04510]
M = D                                        // ROM[04511]
// ---------------------------
// call
@ Math.multiply:42                           // ROM[04512]
D = A                                        // ROM[04513]
@ R15                                        // ROM[04514]
M = D                                        // ROM[04515]
@ :push_argument                             // ROM[04516]
0; JMP                                       // ROM[04517]
( Math.multiply:42)

// -------------------------------------
// CALL: Math.abs(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[04518]
D = A                                        // ROM[04519]
@ R13                                        // ROM[04520]
M = D                                        // ROM[04521]
// ---------------------------
// Push RA
@ Math.multiply:43                           // ROM[04522]
D = A                                        // ROM[04523]
// ---------------------------
// push D
@ SP                                         // ROM[04524]
AM = M+1                                     // ROM[04525]
A = A-1                                      // ROM[04526]
M = D                                        // ROM[04527]
// ---------------------------
// call
@ Math.multiply:44                           // ROM[04528]
D = A                                        // ROM[04529]
@ R15                                        // ROM[04530]
M = D                                        // ROM[04531]
@ :call                                      // ROM[04532]
0; JMP                                       // ROM[04533]
( Math.multiply:44)
// ---------------------------
// goto functionName
@ Math.abs                                   // ROM[04534]
0; JMP                                       // ROM[04535]
// ---------------------------
// ( RA )
( Math.multiply:43) 

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04536]
D = A                                        // ROM[04537]
@ R13                                        // ROM[04538]
M = D                                        // ROM[04539]
// ---------------------------
// call
@ Math.multiply:45                           // ROM[04540]
D = A                                        // ROM[04541]
@ R15                                        // ROM[04542]
M = D                                        // ROM[04543]
@ :pop_argument                              // ROM[04544]
0; JMP                                       // ROM[04545]
( Math.multiply:45)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04546]
D = A                                        // ROM[04547]
@ R13                                        // ROM[04548]
M = D                                        // ROM[04549]
// ---------------------------
// call
@ Math.multiply:46                           // ROM[04550]
D = A                                        // ROM[04551]
@ R15                                        // ROM[04552]
M = D                                        // ROM[04553]
@ :push_argument                             // ROM[04554]
0; JMP                                       // ROM[04555]
( Math.multiply:46)

// -------------------------------------
// CALL: Math.abs(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[04556]
D = A                                        // ROM[04557]
@ R13                                        // ROM[04558]
M = D                                        // ROM[04559]
// ---------------------------
// Push RA
@ Math.multiply:47                           // ROM[04560]
D = A                                        // ROM[04561]
// ---------------------------
// push D
@ SP                                         // ROM[04562]
AM = M+1                                     // ROM[04563]
A = A-1                                      // ROM[04564]
M = D                                        // ROM[04565]
// ---------------------------
// call
@ Math.multiply:48                           // ROM[04566]
D = A                                        // ROM[04567]
@ R15                                        // ROM[04568]
M = D                                        // ROM[04569]
@ :call                                      // ROM[04570]
0; JMP                                       // ROM[04571]
( Math.multiply:48)
// ---------------------------
// goto functionName
@ Math.abs                                   // ROM[04572]
0; JMP                                       // ROM[04573]
// ---------------------------
// ( RA )
( Math.multiply:47) 

// -------------------------------------
// POP: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04574]
D = A                                        // ROM[04575]
@ R13                                        // ROM[04576]
M = D                                        // ROM[04577]
// ---------------------------
// call
@ Math.multiply:49                           // ROM[04578]
D = A                                        // ROM[04579]
@ R15                                        // ROM[04580]
M = D                                        // ROM[04581]
@ :pop_argument                              // ROM[04582]
0; JMP                                       // ROM[04583]
( Math.multiply:49)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04584]
D = A                                        // ROM[04585]
@ R13                                        // ROM[04586]
M = D                                        // ROM[04587]
// ---------------------------
// call
@ Math.multiply:50                           // ROM[04588]
D = A                                        // ROM[04589]
@ R15                                        // ROM[04590]
M = D                                        // ROM[04591]
@ :push_argument                             // ROM[04592]
0; JMP                                       // ROM[04593]
( Math.multiply:50)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04594]
D = A                                        // ROM[04595]
@ R13                                        // ROM[04596]
M = D                                        // ROM[04597]
// ---------------------------
// call
@ Math.multiply:51                           // ROM[04598]
D = A                                        // ROM[04599]
@ R15                                        // ROM[04600]
M = D                                        // ROM[04601]
@ :push_argument                             // ROM[04602]
0; JMP                                       // ROM[04603]
( Math.multiply:51)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:52                           // ROM[04604]
D = A                                        // ROM[04605]
@ R15                                        // ROM[04606]
M = D                                        // ROM[04607]
@ :lt                                        // ROM[04608]
0; JMP                                       // ROM[04609]
( Math.multiply:52)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04610]
AM = M-1                                     // ROM[04611]
D = M                                        // ROM[04612]
// ---------------------------
@ Math.multiply$IF_TRUE0                     // ROM[04613]
D; JNE                                       // ROM[04614]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Math.multiply$IF_FALSE0                    // ROM[04615]
0; JMP                                       // ROM[04616]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Math.multiply$IF_TRUE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04617]
D = A                                        // ROM[04618]
@ R13                                        // ROM[04619]
M = D                                        // ROM[04620]
// ---------------------------
// call
@ Math.multiply:53                           // ROM[04621]
D = A                                        // ROM[04622]
@ R15                                        // ROM[04623]
M = D                                        // ROM[04624]
@ :push_argument                             // ROM[04625]
0; JMP                                       // ROM[04626]
( Math.multiply:53)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04627]
D = A                                        // ROM[04628]
@ R13                                        // ROM[04629]
M = D                                        // ROM[04630]
// ---------------------------
// call
@ Math.multiply:54                           // ROM[04631]
D = A                                        // ROM[04632]
@ R15                                        // ROM[04633]
M = D                                        // ROM[04634]
@ :pop_local                                 // ROM[04635]
0; JMP                                       // ROM[04636]
( Math.multiply:54)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04637]
D = A                                        // ROM[04638]
@ R13                                        // ROM[04639]
M = D                                        // ROM[04640]
// ---------------------------
// call
@ Math.multiply:55                           // ROM[04641]
D = A                                        // ROM[04642]
@ R15                                        // ROM[04643]
M = D                                        // ROM[04644]
@ :push_argument                             // ROM[04645]
0; JMP                                       // ROM[04646]
( Math.multiply:55)

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04647]
D = A                                        // ROM[04648]
@ R13                                        // ROM[04649]
M = D                                        // ROM[04650]
// ---------------------------
// call
@ Math.multiply:56                           // ROM[04651]
D = A                                        // ROM[04652]
@ R15                                        // ROM[04653]
M = D                                        // ROM[04654]
@ :pop_argument                              // ROM[04655]
0; JMP                                       // ROM[04656]
( Math.multiply:56)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04657]
D = A                                        // ROM[04658]
@ R13                                        // ROM[04659]
M = D                                        // ROM[04660]
// ---------------------------
// call
@ Math.multiply:57                           // ROM[04661]
D = A                                        // ROM[04662]
@ R15                                        // ROM[04663]
M = D                                        // ROM[04664]
@ :push_local                                // ROM[04665]
0; JMP                                       // ROM[04666]
( Math.multiply:57)

// -------------------------------------
// POP: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04667]
D = A                                        // ROM[04668]
@ R13                                        // ROM[04669]
M = D                                        // ROM[04670]
// ---------------------------
// call
@ Math.multiply:58                           // ROM[04671]
D = A                                        // ROM[04672]
@ R15                                        // ROM[04673]
M = D                                        // ROM[04674]
@ :pop_argument                              // ROM[04675]
0; JMP                                       // ROM[04676]
( Math.multiply:58)

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Math.multiply$IF_FALSE0 )

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Math.multiply$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[04677]
D = A                                        // ROM[04678]
@ R13                                        // ROM[04679]
M = D                                        // ROM[04680]
// ---------------------------
// call
@ Math.multiply:59                           // ROM[04681]
D = A                                        // ROM[04682]
@ R15                                        // ROM[04683]
M = D                                        // ROM[04684]
@ :push_local                                // ROM[04685]
0; JMP                                       // ROM[04686]
( Math.multiply:59)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[04687]
D = A                                        // ROM[04688]
// ---------------------------
// push D
@ SP                                         // ROM[04689]
AM = M+1                                     // ROM[04690]
A = A-1                                      // ROM[04691]
M = D                                        // ROM[04692]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:60                           // ROM[04693]
D = A                                        // ROM[04694]
@ R15                                        // ROM[04695]
M = D                                        // ROM[04696]
@ :sub                                       // ROM[04697]
0; JMP                                       // ROM[04698]
( Math.multiply:60)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04699]
D = A                                        // ROM[04700]
@ R13                                        // ROM[04701]
M = D                                        // ROM[04702]
// ---------------------------
// call
@ Math.multiply:61                           // ROM[04703]
D = A                                        // ROM[04704]
@ R15                                        // ROM[04705]
M = D                                        // ROM[04706]
@ :push_argument                             // ROM[04707]
0; JMP                                       // ROM[04708]
( Math.multiply:61)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[04709]
D = A                                        // ROM[04710]
// ---------------------------
// push D
@ SP                                         // ROM[04711]
AM = M+1                                     // ROM[04712]
A = A-1                                      // ROM[04713]
M = D                                        // ROM[04714]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:62                           // ROM[04715]
D = A                                        // ROM[04716]
@ R15                                        // ROM[04717]
M = D                                        // ROM[04718]
@ :sub                                       // ROM[04719]
0; JMP                                       // ROM[04720]
( Math.multiply:62)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:63                           // ROM[04721]
D = A                                        // ROM[04722]
@ R15                                        // ROM[04723]
M = D                                        // ROM[04724]
@ :lt                                        // ROM[04725]
0; JMP                                       // ROM[04726]
( Math.multiply:63)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[04727]
A = M-1                                      // ROM[04728]
M = !M                                       // ROM[04729]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04730]
AM = M-1                                     // ROM[04731]
D = M                                        // ROM[04732]
// ---------------------------
@ Math.multiply$WHILE_END0                   // ROM[04733]
D; JNE                                       // ROM[04734]

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[04735]
D = A                                        // ROM[04736]
@ R13                                        // ROM[04737]
M = D                                        // ROM[04738]
// ---------------------------
// call
@ Math.multiply:64                           // ROM[04739]
D = A                                        // ROM[04740]
@ R15                                        // ROM[04741]
M = D                                        // ROM[04742]
@ :push_local                                // ROM[04743]
0; JMP                                       // ROM[04744]
( Math.multiply:64)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.0                                     // ROM[04745]
D = M                                        // ROM[04746]
// ---------------------------
// push D
@ SP                                         // ROM[04747]
AM = M+1                                     // ROM[04748]
A = A-1                                      // ROM[04749]
M = D                                        // ROM[04750]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:65                           // ROM[04751]
D = A                                        // ROM[04752]
@ R15                                        // ROM[04753]
M = D                                        // ROM[04754]
@ :add                                       // ROM[04755]
0; JMP                                       // ROM[04756]
( Math.multiply:65)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04757]
AM = M-1                                     // ROM[04758]
D = M                                        // ROM[04759]
// ---------------------------
@ 4                                          // ROM[04760]
M = D                                        // ROM[04761]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04762]
D = A                                        // ROM[04763]
@ R13                                        // ROM[04764]
M = D                                        // ROM[04765]
// ---------------------------
// call
@ Math.multiply:66                           // ROM[04766]
D = A                                        // ROM[04767]
@ R15                                        // ROM[04768]
M = D                                        // ROM[04769]
@ :push_that                                 // ROM[04770]
0; JMP                                       // ROM[04771]
( Math.multiply:66)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[04772]
D = A                                        // ROM[04773]
@ R13                                        // ROM[04774]
M = D                                        // ROM[04775]
// ---------------------------
// call
@ Math.multiply:67                           // ROM[04776]
D = A                                        // ROM[04777]
@ R15                                        // ROM[04778]
M = D                                        // ROM[04779]
@ :push_argument                             // ROM[04780]
0; JMP                                       // ROM[04781]
( Math.multiply:67)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:68                           // ROM[04782]
D = A                                        // ROM[04783]
@ R15                                        // ROM[04784]
M = D                                        // ROM[04785]
@ :and                                       // ROM[04786]
0; JMP                                       // ROM[04787]
( Math.multiply:68)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[04788]
D = A                                        // ROM[04789]
// ---------------------------
// push D
@ SP                                         // ROM[04790]
AM = M+1                                     // ROM[04791]
A = A-1                                      // ROM[04792]
M = D                                        // ROM[04793]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:69                           // ROM[04794]
D = A                                        // ROM[04795]
@ R15                                        // ROM[04796]
M = D                                        // ROM[04797]
@ :eq                                        // ROM[04798]
0; JMP                                       // ROM[04799]
( Math.multiply:69)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[04800]
A = M-1                                      // ROM[04801]
M = !M                                       // ROM[04802]

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04803]
AM = M-1                                     // ROM[04804]
D = M                                        // ROM[04805]
// ---------------------------
@ Math.multiply$IF_TRUE1                     // ROM[04806]
D; JNE                                       // ROM[04807]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Math.multiply$IF_FALSE1                    // ROM[04808]
0; JMP                                       // ROM[04809]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Math.multiply$IF_TRUE1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04810]
D = A                                        // ROM[04811]
@ R13                                        // ROM[04812]
M = D                                        // ROM[04813]
// ---------------------------
// call
@ Math.multiply:70                           // ROM[04814]
D = A                                        // ROM[04815]
@ R15                                        // ROM[04816]
M = D                                        // ROM[04817]
@ :push_local                                // ROM[04818]
0; JMP                                       // ROM[04819]
( Math.multiply:70)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04820]
D = A                                        // ROM[04821]
@ R13                                        // ROM[04822]
M = D                                        // ROM[04823]
// ---------------------------
// call
@ Math.multiply:71                           // ROM[04824]
D = A                                        // ROM[04825]
@ R15                                        // ROM[04826]
M = D                                        // ROM[04827]
@ :push_argument                             // ROM[04828]
0; JMP                                       // ROM[04829]
( Math.multiply:71)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:72                           // ROM[04830]
D = A                                        // ROM[04831]
@ R15                                        // ROM[04832]
M = D                                        // ROM[04833]
@ :add                                       // ROM[04834]
0; JMP                                       // ROM[04835]
( Math.multiply:72)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04836]
D = A                                        // ROM[04837]
@ R13                                        // ROM[04838]
M = D                                        // ROM[04839]
// ---------------------------
// call
@ Math.multiply:73                           // ROM[04840]
D = A                                        // ROM[04841]
@ R15                                        // ROM[04842]
M = D                                        // ROM[04843]
@ :pop_local                                 // ROM[04844]
0; JMP                                       // ROM[04845]
( Math.multiply:73)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[04846]
D = A                                        // ROM[04847]
@ R13                                        // ROM[04848]
M = D                                        // ROM[04849]
// ---------------------------
// call
@ Math.multiply:74                           // ROM[04850]
D = A                                        // ROM[04851]
@ R15                                        // ROM[04852]
M = D                                        // ROM[04853]
@ :push_local                                // ROM[04854]
0; JMP                                       // ROM[04855]
( Math.multiply:74)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[04856]
D = A                                        // ROM[04857]
@ R13                                        // ROM[04858]
M = D                                        // ROM[04859]
// ---------------------------
// call
@ Math.multiply:75                           // ROM[04860]
D = A                                        // ROM[04861]
@ R15                                        // ROM[04862]
M = D                                        // ROM[04863]
@ :push_local                                // ROM[04864]
0; JMP                                       // ROM[04865]
( Math.multiply:75)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.0                                     // ROM[04866]
D = M                                        // ROM[04867]
// ---------------------------
// push D
@ SP                                         // ROM[04868]
AM = M+1                                     // ROM[04869]
A = A-1                                      // ROM[04870]
M = D                                        // ROM[04871]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:76                           // ROM[04872]
D = A                                        // ROM[04873]
@ R15                                        // ROM[04874]
M = D                                        // ROM[04875]
@ :add                                       // ROM[04876]
0; JMP                                       // ROM[04877]
( Math.multiply:76)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04878]
AM = M-1                                     // ROM[04879]
D = M                                        // ROM[04880]
// ---------------------------
@ 4                                          // ROM[04881]
M = D                                        // ROM[04882]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04883]
D = A                                        // ROM[04884]
@ R13                                        // ROM[04885]
M = D                                        // ROM[04886]
// ---------------------------
// call
@ Math.multiply:77                           // ROM[04887]
D = A                                        // ROM[04888]
@ R15                                        // ROM[04889]
M = D                                        // ROM[04890]
@ :push_that                                 // ROM[04891]
0; JMP                                       // ROM[04892]
( Math.multiply:77)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:78                           // ROM[04893]
D = A                                        // ROM[04894]
@ R15                                        // ROM[04895]
M = D                                        // ROM[04896]
@ :add                                       // ROM[04897]
0; JMP                                       // ROM[04898]
( Math.multiply:78)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[04899]
D = A                                        // ROM[04900]
@ R13                                        // ROM[04901]
M = D                                        // ROM[04902]
// ---------------------------
// call
@ Math.multiply:79                           // ROM[04903]
D = A                                        // ROM[04904]
@ R15                                        // ROM[04905]
M = D                                        // ROM[04906]
@ :pop_local                                 // ROM[04907]
0; JMP                                       // ROM[04908]
( Math.multiply:79)

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Math.multiply$IF_FALSE1 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04909]
D = A                                        // ROM[04910]
@ R13                                        // ROM[04911]
M = D                                        // ROM[04912]
// ---------------------------
// call
@ Math.multiply:80                           // ROM[04913]
D = A                                        // ROM[04914]
@ R15                                        // ROM[04915]
M = D                                        // ROM[04916]
@ :push_argument                             // ROM[04917]
0; JMP                                       // ROM[04918]
( Math.multiply:80)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04919]
D = A                                        // ROM[04920]
@ R13                                        // ROM[04921]
M = D                                        // ROM[04922]
// ---------------------------
// call
@ Math.multiply:81                           // ROM[04923]
D = A                                        // ROM[04924]
@ R15                                        // ROM[04925]
M = D                                        // ROM[04926]
@ :push_argument                             // ROM[04927]
0; JMP                                       // ROM[04928]
( Math.multiply:81)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:82                           // ROM[04929]
D = A                                        // ROM[04930]
@ R15                                        // ROM[04931]
M = D                                        // ROM[04932]
@ :add                                       // ROM[04933]
0; JMP                                       // ROM[04934]
( Math.multiply:82)

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04935]
D = A                                        // ROM[04936]
@ R13                                        // ROM[04937]
M = D                                        // ROM[04938]
// ---------------------------
// call
@ Math.multiply:83                           // ROM[04939]
D = A                                        // ROM[04940]
@ R15                                        // ROM[04941]
M = D                                        // ROM[04942]
@ :pop_argument                              // ROM[04943]
0; JMP                                       // ROM[04944]
( Math.multiply:83)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[04945]
D = A                                        // ROM[04946]
@ R13                                        // ROM[04947]
M = D                                        // ROM[04948]
// ---------------------------
// call
@ Math.multiply:84                           // ROM[04949]
D = A                                        // ROM[04950]
@ R15                                        // ROM[04951]
M = D                                        // ROM[04952]
@ :push_local                                // ROM[04953]
0; JMP                                       // ROM[04954]
( Math.multiply:84)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[04955]
D = A                                        // ROM[04956]
// ---------------------------
// push D
@ SP                                         // ROM[04957]
AM = M+1                                     // ROM[04958]
A = A-1                                      // ROM[04959]
M = D                                        // ROM[04960]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:85                           // ROM[04961]
D = A                                        // ROM[04962]
@ R15                                        // ROM[04963]
M = D                                        // ROM[04964]
@ :add                                       // ROM[04965]
0; JMP                                       // ROM[04966]
( Math.multiply:85)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[04967]
D = A                                        // ROM[04968]
@ R13                                        // ROM[04969]
M = D                                        // ROM[04970]
// ---------------------------
// call
@ Math.multiply:86                           // ROM[04971]
D = A                                        // ROM[04972]
@ R15                                        // ROM[04973]
M = D                                        // ROM[04974]
@ :pop_local                                 // ROM[04975]
0; JMP                                       // ROM[04976]
( Math.multiply:86)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Math.multiply$WHILE_EXP0                   // ROM[04977]
0; JMP                                       // ROM[04978]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Math.multiply$WHILE_END0 )

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[04979]
D = A                                        // ROM[04980]
@ R13                                        // ROM[04981]
M = D                                        // ROM[04982]
// ---------------------------
// call
@ Math.multiply:87                           // ROM[04983]
D = A                                        // ROM[04984]
@ R15                                        // ROM[04985]
M = D                                        // ROM[04986]
@ :push_local                                // ROM[04987]
0; JMP                                       // ROM[04988]
( Math.multiply:87)

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[04989]
AM = M-1                                     // ROM[04990]
D = M                                        // ROM[04991]
// ---------------------------
@ Math.multiply$IF_TRUE2                     // ROM[04992]
D; JNE                                       // ROM[04993]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ Math.multiply$IF_FALSE2                    // ROM[04994]
0; JMP                                       // ROM[04995]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( Math.multiply$IF_TRUE2 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[04996]
D = A                                        // ROM[04997]
@ R13                                        // ROM[04998]
M = D                                        // ROM[04999]
// ---------------------------
// call
@ Math.multiply:88                           // ROM[05000]
D = A                                        // ROM[05001]
@ R15                                        // ROM[05002]
M = D                                        // ROM[05003]
@ :push_local                                // ROM[05004]
0; JMP                                       // ROM[05005]
( Math.multiply:88)

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[05006]
A = M-1                                      // ROM[05007]
M = -M                                       // ROM[05008]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05009]
D = A                                        // ROM[05010]
@ R13                                        // ROM[05011]
M = D                                        // ROM[05012]
// ---------------------------
// call
@ Math.multiply:89                           // ROM[05013]
D = A                                        // ROM[05014]
@ R15                                        // ROM[05015]
M = D                                        // ROM[05016]
@ :pop_local                                 // ROM[05017]
0; JMP                                       // ROM[05018]
( Math.multiply:89)

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( Math.multiply$IF_FALSE2 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05019]
D = A                                        // ROM[05020]
@ R13                                        // ROM[05021]
M = D                                        // ROM[05022]
// ---------------------------
// call
@ Math.multiply:90                           // ROM[05023]
D = A                                        // ROM[05024]
@ R15                                        // ROM[05025]
M = D                                        // ROM[05026]
@ :push_local                                // ROM[05027]
0; JMP                                       // ROM[05028]
( Math.multiply:90)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Math.multiply:91                           // ROM[05029]
D = A                                        // ROM[05030]
@ R15                                        // ROM[05031]
M = D                                        // ROM[05032]
@ :return                                    // ROM[05033]
0; JMP                                       // ROM[05034]
( Math.multiply:91)

// =========================================================
// FUNCTION: Math.divide(4 locals)
// =========================================================

( Math.divide )
// ---------------------------
// clear local segment
D = 0                                        // ROM[05035]
// ---------------------------
// push D
@ SP                                         // ROM[05036]
AM = M+1                                     // ROM[05037]
A = A-1                                      // ROM[05038]
M = D                                        // ROM[05039]
// ---------------------------
// push D
@ SP                                         // ROM[05040]
AM = M+1                                     // ROM[05041]
A = A-1                                      // ROM[05042]
M = D                                        // ROM[05043]
// ---------------------------
// push D
@ SP                                         // ROM[05044]
AM = M+1                                     // ROM[05045]
A = A-1                                      // ROM[05046]
M = D                                        // ROM[05047]
// ---------------------------
// push D
@ SP                                         // ROM[05048]
AM = M+1                                     // ROM[05049]
A = A-1                                      // ROM[05050]
M = D                                        // ROM[05051]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[05052]
D = A                                        // ROM[05053]
@ R13                                        // ROM[05054]
M = D                                        // ROM[05055]
// ---------------------------
// call
@ Math.divide:92                             // ROM[05056]
D = A                                        // ROM[05057]
@ R15                                        // ROM[05058]
M = D                                        // ROM[05059]
@ :push_argument                             // ROM[05060]
0; JMP                                       // ROM[05061]
( Math.divide:92)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[05062]
D = A                                        // ROM[05063]
// ---------------------------
// push D
@ SP                                         // ROM[05064]
AM = M+1                                     // ROM[05065]
A = A-1                                      // ROM[05066]
M = D                                        // ROM[05067]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Math.divide:93                             // ROM[05068]
D = A                                        // ROM[05069]
@ R15                                        // ROM[05070]
M = D                                        // ROM[05071]
@ :eq                                        // ROM[05072]
0; JMP                                       // ROM[05073]
( Math.divide:93)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05074]
AM = M-1                                     // ROM[05075]
D = M                                        // ROM[05076]
// ---------------------------
@ Math.divide$IF_TRUE0                       // ROM[05077]
D; JNE                                       // ROM[05078]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Math.divide$IF_FALSE0                      // ROM[05079]
0; JMP                                       // ROM[05080]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Math.divide$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[05081]
D = A                                        // ROM[05082]
// ---------------------------
// push D
@ SP                                         // ROM[05083]
AM = M+1                                     // ROM[05084]
A = A-1                                      // ROM[05085]
M = D                                        // ROM[05086]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[05087]
D = A                                        // ROM[05088]
@ R13                                        // ROM[05089]
M = D                                        // ROM[05090]
// ---------------------------
// Push RA
@ Math.divide:94                             // ROM[05091]
D = A                                        // ROM[05092]
// ---------------------------
// push D
@ SP                                         // ROM[05093]
AM = M+1                                     // ROM[05094]
A = A-1                                      // ROM[05095]
M = D                                        // ROM[05096]
// ---------------------------
// call
@ Math.divide:95                             // ROM[05097]
D = A                                        // ROM[05098]
@ R15                                        // ROM[05099]
M = D                                        // ROM[05100]
@ :call                                      // ROM[05101]
0; JMP                                       // ROM[05102]
( Math.divide:95)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[05103]
0; JMP                                       // ROM[05104]
// ---------------------------
// ( RA )
( Math.divide:94) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05105]
AM = M-1                                     // ROM[05106]
D = M                                        // ROM[05107]
// ---------------------------
@ 5                                          // ROM[05108]
M = D                                        // ROM[05109]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Math.divide$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05110]
D = A                                        // ROM[05111]
@ R13                                        // ROM[05112]
M = D                                        // ROM[05113]
// ---------------------------
// call
@ Math.divide:96                             // ROM[05114]
D = A                                        // ROM[05115]
@ R15                                        // ROM[05116]
M = D                                        // ROM[05117]
@ :push_argument                             // ROM[05118]
0; JMP                                       // ROM[05119]
( Math.divide:96)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[05120]
D = A                                        // ROM[05121]
// ---------------------------
// push D
@ SP                                         // ROM[05122]
AM = M+1                                     // ROM[05123]
A = A-1                                      // ROM[05124]
M = D                                        // ROM[05125]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:97                             // ROM[05126]
D = A                                        // ROM[05127]
@ R15                                        // ROM[05128]
M = D                                        // ROM[05129]
@ :lt                                        // ROM[05130]
0; JMP                                       // ROM[05131]
( Math.divide:97)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[05132]
D = A                                        // ROM[05133]
@ R13                                        // ROM[05134]
M = D                                        // ROM[05135]
// ---------------------------
// call
@ Math.divide:98                             // ROM[05136]
D = A                                        // ROM[05137]
@ R15                                        // ROM[05138]
M = D                                        // ROM[05139]
@ :push_argument                             // ROM[05140]
0; JMP                                       // ROM[05141]
( Math.divide:98)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[05142]
D = A                                        // ROM[05143]
// ---------------------------
// push D
@ SP                                         // ROM[05144]
AM = M+1                                     // ROM[05145]
A = A-1                                      // ROM[05146]
M = D                                        // ROM[05147]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:99                             // ROM[05148]
D = A                                        // ROM[05149]
@ R15                                        // ROM[05150]
M = D                                        // ROM[05151]
@ :gt                                        // ROM[05152]
0; JMP                                       // ROM[05153]
( Math.divide:99)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Math.divide:100                            // ROM[05154]
D = A                                        // ROM[05155]
@ R15                                        // ROM[05156]
M = D                                        // ROM[05157]
@ :and                                       // ROM[05158]
0; JMP                                       // ROM[05159]
( Math.divide:100)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05160]
D = A                                        // ROM[05161]
@ R13                                        // ROM[05162]
M = D                                        // ROM[05163]
// ---------------------------
// call
@ Math.divide:101                            // ROM[05164]
D = A                                        // ROM[05165]
@ R15                                        // ROM[05166]
M = D                                        // ROM[05167]
@ :push_argument                             // ROM[05168]
0; JMP                                       // ROM[05169]
( Math.divide:101)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[05170]
D = A                                        // ROM[05171]
// ---------------------------
// push D
@ SP                                         // ROM[05172]
AM = M+1                                     // ROM[05173]
A = A-1                                      // ROM[05174]
M = D                                        // ROM[05175]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:102                            // ROM[05176]
D = A                                        // ROM[05177]
@ R15                                        // ROM[05178]
M = D                                        // ROM[05179]
@ :gt                                        // ROM[05180]
0; JMP                                       // ROM[05181]
( Math.divide:102)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[05182]
D = A                                        // ROM[05183]
@ R13                                        // ROM[05184]
M = D                                        // ROM[05185]
// ---------------------------
// call
@ Math.divide:103                            // ROM[05186]
D = A                                        // ROM[05187]
@ R15                                        // ROM[05188]
M = D                                        // ROM[05189]
@ :push_argument                             // ROM[05190]
0; JMP                                       // ROM[05191]
( Math.divide:103)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[05192]
D = A                                        // ROM[05193]
// ---------------------------
// push D
@ SP                                         // ROM[05194]
AM = M+1                                     // ROM[05195]
A = A-1                                      // ROM[05196]
M = D                                        // ROM[05197]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:104                            // ROM[05198]
D = A                                        // ROM[05199]
@ R15                                        // ROM[05200]
M = D                                        // ROM[05201]
@ :lt                                        // ROM[05202]
0; JMP                                       // ROM[05203]
( Math.divide:104)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Math.divide:105                            // ROM[05204]
D = A                                        // ROM[05205]
@ R15                                        // ROM[05206]
M = D                                        // ROM[05207]
@ :and                                       // ROM[05208]
0; JMP                                       // ROM[05209]
( Math.divide:105)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Math.divide:106                            // ROM[05210]
D = A                                        // ROM[05211]
@ R15                                        // ROM[05212]
M = D                                        // ROM[05213]
@ :or                                        // ROM[05214]
0; JMP                                       // ROM[05215]
( Math.divide:106)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[05216]
D = A                                        // ROM[05217]
@ R13                                        // ROM[05218]
M = D                                        // ROM[05219]
// ---------------------------
// call
@ Math.divide:107                            // ROM[05220]
D = A                                        // ROM[05221]
@ R15                                        // ROM[05222]
M = D                                        // ROM[05223]
@ :pop_local                                 // ROM[05224]
0; JMP                                       // ROM[05225]
( Math.divide:107)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[05226]
D = A                                        // ROM[05227]
// ---------------------------
// push D
@ SP                                         // ROM[05228]
AM = M+1                                     // ROM[05229]
A = A-1                                      // ROM[05230]
M = D                                        // ROM[05231]

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[05232]
D = M                                        // ROM[05233]
// ---------------------------
// push D
@ SP                                         // ROM[05234]
AM = M+1                                     // ROM[05235]
A = A-1                                      // ROM[05236]
M = D                                        // ROM[05237]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:108                            // ROM[05238]
D = A                                        // ROM[05239]
@ R15                                        // ROM[05240]
M = D                                        // ROM[05241]
@ :add                                       // ROM[05242]
0; JMP                                       // ROM[05243]
( Math.divide:108)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[05244]
D = A                                        // ROM[05245]
@ R13                                        // ROM[05246]
M = D                                        // ROM[05247]
// ---------------------------
// call
@ Math.divide:109                            // ROM[05248]
D = A                                        // ROM[05249]
@ R15                                        // ROM[05250]
M = D                                        // ROM[05251]
@ :push_argument                             // ROM[05252]
0; JMP                                       // ROM[05253]
( Math.divide:109)

// -------------------------------------
// CALL: Math.abs(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[05254]
D = A                                        // ROM[05255]
@ R13                                        // ROM[05256]
M = D                                        // ROM[05257]
// ---------------------------
// Push RA
@ Math.divide:110                            // ROM[05258]
D = A                                        // ROM[05259]
// ---------------------------
// push D
@ SP                                         // ROM[05260]
AM = M+1                                     // ROM[05261]
A = A-1                                      // ROM[05262]
M = D                                        // ROM[05263]
// ---------------------------
// call
@ Math.divide:111                            // ROM[05264]
D = A                                        // ROM[05265]
@ R15                                        // ROM[05266]
M = D                                        // ROM[05267]
@ :call                                      // ROM[05268]
0; JMP                                       // ROM[05269]
( Math.divide:111)
// ---------------------------
// goto functionName
@ Math.abs                                   // ROM[05270]
0; JMP                                       // ROM[05271]
// ---------------------------
// ( RA )
( Math.divide:110) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05272]
AM = M-1                                     // ROM[05273]
D = M                                        // ROM[05274]
// ---------------------------
@ 5                                          // ROM[05275]
M = D                                        // ROM[05276]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05277]
AM = M-1                                     // ROM[05278]
D = M                                        // ROM[05279]
// ---------------------------
@ 4                                          // ROM[05280]
M = D                                        // ROM[05281]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[05282]
D = M                                        // ROM[05283]
// ---------------------------
// push D
@ SP                                         // ROM[05284]
AM = M+1                                     // ROM[05285]
A = A-1                                      // ROM[05286]
M = D                                        // ROM[05287]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05288]
D = A                                        // ROM[05289]
@ R13                                        // ROM[05290]
M = D                                        // ROM[05291]
// ---------------------------
// call
@ Math.divide:112                            // ROM[05292]
D = A                                        // ROM[05293]
@ R15                                        // ROM[05294]
M = D                                        // ROM[05295]
@ :pop_that                                  // ROM[05296]
0; JMP                                       // ROM[05297]
( Math.divide:112)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05298]
D = A                                        // ROM[05299]
@ R13                                        // ROM[05300]
M = D                                        // ROM[05301]
// ---------------------------
// call
@ Math.divide:113                            // ROM[05302]
D = A                                        // ROM[05303]
@ R15                                        // ROM[05304]
M = D                                        // ROM[05305]
@ :push_argument                             // ROM[05306]
0; JMP                                       // ROM[05307]
( Math.divide:113)

// -------------------------------------
// CALL: Math.abs(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[05308]
D = A                                        // ROM[05309]
@ R13                                        // ROM[05310]
M = D                                        // ROM[05311]
// ---------------------------
// Push RA
@ Math.divide:114                            // ROM[05312]
D = A                                        // ROM[05313]
// ---------------------------
// push D
@ SP                                         // ROM[05314]
AM = M+1                                     // ROM[05315]
A = A-1                                      // ROM[05316]
M = D                                        // ROM[05317]
// ---------------------------
// call
@ Math.divide:115                            // ROM[05318]
D = A                                        // ROM[05319]
@ R15                                        // ROM[05320]
M = D                                        // ROM[05321]
@ :call                                      // ROM[05322]
0; JMP                                       // ROM[05323]
( Math.divide:115)
// ---------------------------
// goto functionName
@ Math.abs                                   // ROM[05324]
0; JMP                                       // ROM[05325]
// ---------------------------
// ( RA )
( Math.divide:114) 

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05326]
D = A                                        // ROM[05327]
@ R13                                        // ROM[05328]
M = D                                        // ROM[05329]
// ---------------------------
// call
@ Math.divide:116                            // ROM[05330]
D = A                                        // ROM[05331]
@ R15                                        // ROM[05332]
M = D                                        // ROM[05333]
@ :pop_argument                              // ROM[05334]
0; JMP                                       // ROM[05335]
( Math.divide:116)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Math.divide$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05336]
D = A                                        // ROM[05337]
@ R13                                        // ROM[05338]
M = D                                        // ROM[05339]
// ---------------------------
// call
@ Math.divide:117                            // ROM[05340]
D = A                                        // ROM[05341]
@ R15                                        // ROM[05342]
M = D                                        // ROM[05343]
@ :push_local                                // ROM[05344]
0; JMP                                       // ROM[05345]
( Math.divide:117)

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[05346]
D = A                                        // ROM[05347]
// ---------------------------
// push D
@ SP                                         // ROM[05348]
AM = M+1                                     // ROM[05349]
A = A-1                                      // ROM[05350]
M = D                                        // ROM[05351]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:118                            // ROM[05352]
D = A                                        // ROM[05353]
@ R15                                        // ROM[05354]
M = D                                        // ROM[05355]
@ :lt                                        // ROM[05356]
0; JMP                                       // ROM[05357]
( Math.divide:118)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[05358]
D = A                                        // ROM[05359]
@ R13                                        // ROM[05360]
M = D                                        // ROM[05361]
// ---------------------------
// call
@ Math.divide:119                            // ROM[05362]
D = A                                        // ROM[05363]
@ R15                                        // ROM[05364]
M = D                                        // ROM[05365]
@ :push_local                                // ROM[05366]
0; JMP                                       // ROM[05367]
( Math.divide:119)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[05368]
A = M-1                                      // ROM[05369]
M = !M                                       // ROM[05370]

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Math.divide:120                            // ROM[05371]
D = A                                        // ROM[05372]
@ R15                                        // ROM[05373]
M = D                                        // ROM[05374]
@ :and                                       // ROM[05375]
0; JMP                                       // ROM[05376]
( Math.divide:120)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[05377]
A = M-1                                      // ROM[05378]
M = !M                                       // ROM[05379]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05380]
AM = M-1                                     // ROM[05381]
D = M                                        // ROM[05382]
// ---------------------------
@ Math.divide$WHILE_END0                     // ROM[05383]
D; JNE                                       // ROM[05384]

// -------------------------------------
// PUSH: <constant, 32767>
// -------------------------------------
@ 32767                                      // ROM[05385]
D = A                                        // ROM[05386]
// ---------------------------
// push D
@ SP                                         // ROM[05387]
AM = M+1                                     // ROM[05388]
A = A-1                                      // ROM[05389]
M = D                                        // ROM[05390]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05391]
D = A                                        // ROM[05392]
@ R13                                        // ROM[05393]
M = D                                        // ROM[05394]
// ---------------------------
// call
@ Math.divide:121                            // ROM[05395]
D = A                                        // ROM[05396]
@ R15                                        // ROM[05397]
M = D                                        // ROM[05398]
@ :push_local                                // ROM[05399]
0; JMP                                       // ROM[05400]
( Math.divide:121)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[05401]
D = M                                        // ROM[05402]
// ---------------------------
// push D
@ SP                                         // ROM[05403]
AM = M+1                                     // ROM[05404]
A = A-1                                      // ROM[05405]
M = D                                        // ROM[05406]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:122                            // ROM[05407]
D = A                                        // ROM[05408]
@ R15                                        // ROM[05409]
M = D                                        // ROM[05410]
@ :add                                       // ROM[05411]
0; JMP                                       // ROM[05412]
( Math.divide:122)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05413]
AM = M-1                                     // ROM[05414]
D = M                                        // ROM[05415]
// ---------------------------
@ 4                                          // ROM[05416]
M = D                                        // ROM[05417]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05418]
D = A                                        // ROM[05419]
@ R13                                        // ROM[05420]
M = D                                        // ROM[05421]
// ---------------------------
// call
@ Math.divide:123                            // ROM[05422]
D = A                                        // ROM[05423]
@ R15                                        // ROM[05424]
M = D                                        // ROM[05425]
@ :push_that                                 // ROM[05426]
0; JMP                                       // ROM[05427]
( Math.divide:123)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05428]
D = A                                        // ROM[05429]
// ---------------------------
// push D
@ SP                                         // ROM[05430]
AM = M+1                                     // ROM[05431]
A = A-1                                      // ROM[05432]
M = D                                        // ROM[05433]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:124                            // ROM[05434]
D = A                                        // ROM[05435]
@ R15                                        // ROM[05436]
M = D                                        // ROM[05437]
@ :sub                                       // ROM[05438]
0; JMP                                       // ROM[05439]
( Math.divide:124)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:125                            // ROM[05440]
D = A                                        // ROM[05441]
@ R15                                        // ROM[05442]
M = D                                        // ROM[05443]
@ :sub                                       // ROM[05444]
0; JMP                                       // ROM[05445]
( Math.divide:125)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05446]
D = A                                        // ROM[05447]
@ R13                                        // ROM[05448]
M = D                                        // ROM[05449]
// ---------------------------
// call
@ Math.divide:126                            // ROM[05450]
D = A                                        // ROM[05451]
@ R15                                        // ROM[05452]
M = D                                        // ROM[05453]
@ :push_local                                // ROM[05454]
0; JMP                                       // ROM[05455]
( Math.divide:126)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[05456]
D = M                                        // ROM[05457]
// ---------------------------
// push D
@ SP                                         // ROM[05458]
AM = M+1                                     // ROM[05459]
A = A-1                                      // ROM[05460]
M = D                                        // ROM[05461]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:127                            // ROM[05462]
D = A                                        // ROM[05463]
@ R15                                        // ROM[05464]
M = D                                        // ROM[05465]
@ :add                                       // ROM[05466]
0; JMP                                       // ROM[05467]
( Math.divide:127)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05468]
AM = M-1                                     // ROM[05469]
D = M                                        // ROM[05470]
// ---------------------------
@ 4                                          // ROM[05471]
M = D                                        // ROM[05472]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05473]
D = A                                        // ROM[05474]
@ R13                                        // ROM[05475]
M = D                                        // ROM[05476]
// ---------------------------
// call
@ Math.divide:128                            // ROM[05477]
D = A                                        // ROM[05478]
@ R15                                        // ROM[05479]
M = D                                        // ROM[05480]
@ :push_that                                 // ROM[05481]
0; JMP                                       // ROM[05482]
( Math.divide:128)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05483]
D = A                                        // ROM[05484]
// ---------------------------
// push D
@ SP                                         // ROM[05485]
AM = M+1                                     // ROM[05486]
A = A-1                                      // ROM[05487]
M = D                                        // ROM[05488]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:129                            // ROM[05489]
D = A                                        // ROM[05490]
@ R15                                        // ROM[05491]
M = D                                        // ROM[05492]
@ :sub                                       // ROM[05493]
0; JMP                                       // ROM[05494]
( Math.divide:129)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:130                            // ROM[05495]
D = A                                        // ROM[05496]
@ R15                                        // ROM[05497]
M = D                                        // ROM[05498]
@ :lt                                        // ROM[05499]
0; JMP                                       // ROM[05500]
( Math.divide:130)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[05501]
D = A                                        // ROM[05502]
@ R13                                        // ROM[05503]
M = D                                        // ROM[05504]
// ---------------------------
// call
@ Math.divide:131                            // ROM[05505]
D = A                                        // ROM[05506]
@ R15                                        // ROM[05507]
M = D                                        // ROM[05508]
@ :pop_local                                 // ROM[05509]
0; JMP                                       // ROM[05510]
( Math.divide:131)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[05511]
D = A                                        // ROM[05512]
@ R13                                        // ROM[05513]
M = D                                        // ROM[05514]
// ---------------------------
// call
@ Math.divide:132                            // ROM[05515]
D = A                                        // ROM[05516]
@ R15                                        // ROM[05517]
M = D                                        // ROM[05518]
@ :push_local                                // ROM[05519]
0; JMP                                       // ROM[05520]
( Math.divide:132)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[05521]
A = M-1                                      // ROM[05522]
M = !M                                       // ROM[05523]

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05524]
AM = M-1                                     // ROM[05525]
D = M                                        // ROM[05526]
// ---------------------------
@ Math.divide$IF_TRUE1                       // ROM[05527]
D; JNE                                       // ROM[05528]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Math.divide$IF_FALSE1                      // ROM[05529]
0; JMP                                       // ROM[05530]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Math.divide$IF_TRUE1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05531]
D = A                                        // ROM[05532]
@ R13                                        // ROM[05533]
M = D                                        // ROM[05534]
// ---------------------------
// call
@ Math.divide:133                            // ROM[05535]
D = A                                        // ROM[05536]
@ R15                                        // ROM[05537]
M = D                                        // ROM[05538]
@ :push_local                                // ROM[05539]
0; JMP                                       // ROM[05540]
( Math.divide:133)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05541]
D = A                                        // ROM[05542]
// ---------------------------
// push D
@ SP                                         // ROM[05543]
AM = M+1                                     // ROM[05544]
A = A-1                                      // ROM[05545]
M = D                                        // ROM[05546]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:134                            // ROM[05547]
D = A                                        // ROM[05548]
@ R15                                        // ROM[05549]
M = D                                        // ROM[05550]
@ :add                                       // ROM[05551]
0; JMP                                       // ROM[05552]
( Math.divide:134)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[05553]
D = M                                        // ROM[05554]
// ---------------------------
// push D
@ SP                                         // ROM[05555]
AM = M+1                                     // ROM[05556]
A = A-1                                      // ROM[05557]
M = D                                        // ROM[05558]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:135                            // ROM[05559]
D = A                                        // ROM[05560]
@ R15                                        // ROM[05561]
M = D                                        // ROM[05562]
@ :add                                       // ROM[05563]
0; JMP                                       // ROM[05564]
( Math.divide:135)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05565]
D = A                                        // ROM[05566]
@ R13                                        // ROM[05567]
M = D                                        // ROM[05568]
// ---------------------------
// call
@ Math.divide:136                            // ROM[05569]
D = A                                        // ROM[05570]
@ R15                                        // ROM[05571]
M = D                                        // ROM[05572]
@ :push_local                                // ROM[05573]
0; JMP                                       // ROM[05574]
( Math.divide:136)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[05575]
D = M                                        // ROM[05576]
// ---------------------------
// push D
@ SP                                         // ROM[05577]
AM = M+1                                     // ROM[05578]
A = A-1                                      // ROM[05579]
M = D                                        // ROM[05580]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:137                            // ROM[05581]
D = A                                        // ROM[05582]
@ R15                                        // ROM[05583]
M = D                                        // ROM[05584]
@ :add                                       // ROM[05585]
0; JMP                                       // ROM[05586]
( Math.divide:137)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05587]
AM = M-1                                     // ROM[05588]
D = M                                        // ROM[05589]
// ---------------------------
@ 4                                          // ROM[05590]
M = D                                        // ROM[05591]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05592]
D = A                                        // ROM[05593]
@ R13                                        // ROM[05594]
M = D                                        // ROM[05595]
// ---------------------------
// call
@ Math.divide:138                            // ROM[05596]
D = A                                        // ROM[05597]
@ R15                                        // ROM[05598]
M = D                                        // ROM[05599]
@ :push_that                                 // ROM[05600]
0; JMP                                       // ROM[05601]
( Math.divide:138)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05602]
D = A                                        // ROM[05603]
@ R13                                        // ROM[05604]
M = D                                        // ROM[05605]
// ---------------------------
// call
@ Math.divide:139                            // ROM[05606]
D = A                                        // ROM[05607]
@ R15                                        // ROM[05608]
M = D                                        // ROM[05609]
@ :push_local                                // ROM[05610]
0; JMP                                       // ROM[05611]
( Math.divide:139)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[05612]
D = M                                        // ROM[05613]
// ---------------------------
// push D
@ SP                                         // ROM[05614]
AM = M+1                                     // ROM[05615]
A = A-1                                      // ROM[05616]
M = D                                        // ROM[05617]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:140                            // ROM[05618]
D = A                                        // ROM[05619]
@ R15                                        // ROM[05620]
M = D                                        // ROM[05621]
@ :add                                       // ROM[05622]
0; JMP                                       // ROM[05623]
( Math.divide:140)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05624]
AM = M-1                                     // ROM[05625]
D = M                                        // ROM[05626]
// ---------------------------
@ 4                                          // ROM[05627]
M = D                                        // ROM[05628]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05629]
D = A                                        // ROM[05630]
@ R13                                        // ROM[05631]
M = D                                        // ROM[05632]
// ---------------------------
// call
@ Math.divide:141                            // ROM[05633]
D = A                                        // ROM[05634]
@ R15                                        // ROM[05635]
M = D                                        // ROM[05636]
@ :push_that                                 // ROM[05637]
0; JMP                                       // ROM[05638]
( Math.divide:141)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:142                            // ROM[05639]
D = A                                        // ROM[05640]
@ R15                                        // ROM[05641]
M = D                                        // ROM[05642]
@ :add                                       // ROM[05643]
0; JMP                                       // ROM[05644]
( Math.divide:142)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05645]
AM = M-1                                     // ROM[05646]
D = M                                        // ROM[05647]
// ---------------------------
@ 5                                          // ROM[05648]
M = D                                        // ROM[05649]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05650]
AM = M-1                                     // ROM[05651]
D = M                                        // ROM[05652]
// ---------------------------
@ 4                                          // ROM[05653]
M = D                                        // ROM[05654]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[05655]
D = M                                        // ROM[05656]
// ---------------------------
// push D
@ SP                                         // ROM[05657]
AM = M+1                                     // ROM[05658]
A = A-1                                      // ROM[05659]
M = D                                        // ROM[05660]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05661]
D = A                                        // ROM[05662]
@ R13                                        // ROM[05663]
M = D                                        // ROM[05664]
// ---------------------------
// call
@ Math.divide:143                            // ROM[05665]
D = A                                        // ROM[05666]
@ R15                                        // ROM[05667]
M = D                                        // ROM[05668]
@ :pop_that                                  // ROM[05669]
0; JMP                                       // ROM[05670]
( Math.divide:143)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05671]
D = A                                        // ROM[05672]
@ R13                                        // ROM[05673]
M = D                                        // ROM[05674]
// ---------------------------
// call
@ Math.divide:144                            // ROM[05675]
D = A                                        // ROM[05676]
@ R15                                        // ROM[05677]
M = D                                        // ROM[05678]
@ :push_local                                // ROM[05679]
0; JMP                                       // ROM[05680]
( Math.divide:144)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05681]
D = A                                        // ROM[05682]
// ---------------------------
// push D
@ SP                                         // ROM[05683]
AM = M+1                                     // ROM[05684]
A = A-1                                      // ROM[05685]
M = D                                        // ROM[05686]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:145                            // ROM[05687]
D = A                                        // ROM[05688]
@ R15                                        // ROM[05689]
M = D                                        // ROM[05690]
@ :add                                       // ROM[05691]
0; JMP                                       // ROM[05692]
( Math.divide:145)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[05693]
D = M                                        // ROM[05694]
// ---------------------------
// push D
@ SP                                         // ROM[05695]
AM = M+1                                     // ROM[05696]
A = A-1                                      // ROM[05697]
M = D                                        // ROM[05698]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:146                            // ROM[05699]
D = A                                        // ROM[05700]
@ R15                                        // ROM[05701]
M = D                                        // ROM[05702]
@ :add                                       // ROM[05703]
0; JMP                                       // ROM[05704]
( Math.divide:146)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05705]
AM = M-1                                     // ROM[05706]
D = M                                        // ROM[05707]
// ---------------------------
@ 4                                          // ROM[05708]
M = D                                        // ROM[05709]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05710]
D = A                                        // ROM[05711]
@ R13                                        // ROM[05712]
M = D                                        // ROM[05713]
// ---------------------------
// call
@ Math.divide:147                            // ROM[05714]
D = A                                        // ROM[05715]
@ R15                                        // ROM[05716]
M = D                                        // ROM[05717]
@ :push_that                                 // ROM[05718]
0; JMP                                       // ROM[05719]
( Math.divide:147)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05720]
D = A                                        // ROM[05721]
// ---------------------------
// push D
@ SP                                         // ROM[05722]
AM = M+1                                     // ROM[05723]
A = A-1                                      // ROM[05724]
M = D                                        // ROM[05725]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:148                            // ROM[05726]
D = A                                        // ROM[05727]
@ R15                                        // ROM[05728]
M = D                                        // ROM[05729]
@ :sub                                       // ROM[05730]
0; JMP                                       // ROM[05731]
( Math.divide:148)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05732]
D = A                                        // ROM[05733]
@ R13                                        // ROM[05734]
M = D                                        // ROM[05735]
// ---------------------------
// call
@ Math.divide:149                            // ROM[05736]
D = A                                        // ROM[05737]
@ R15                                        // ROM[05738]
M = D                                        // ROM[05739]
@ :push_argument                             // ROM[05740]
0; JMP                                       // ROM[05741]
( Math.divide:149)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05742]
D = A                                        // ROM[05743]
// ---------------------------
// push D
@ SP                                         // ROM[05744]
AM = M+1                                     // ROM[05745]
A = A-1                                      // ROM[05746]
M = D                                        // ROM[05747]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:150                            // ROM[05748]
D = A                                        // ROM[05749]
@ R15                                        // ROM[05750]
M = D                                        // ROM[05751]
@ :sub                                       // ROM[05752]
0; JMP                                       // ROM[05753]
( Math.divide:150)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:151                            // ROM[05754]
D = A                                        // ROM[05755]
@ R15                                        // ROM[05756]
M = D                                        // ROM[05757]
@ :gt                                        // ROM[05758]
0; JMP                                       // ROM[05759]
( Math.divide:151)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[05760]
D = A                                        // ROM[05761]
@ R13                                        // ROM[05762]
M = D                                        // ROM[05763]
// ---------------------------
// call
@ Math.divide:152                            // ROM[05764]
D = A                                        // ROM[05765]
@ R15                                        // ROM[05766]
M = D                                        // ROM[05767]
@ :pop_local                                 // ROM[05768]
0; JMP                                       // ROM[05769]
( Math.divide:152)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[05770]
D = A                                        // ROM[05771]
@ R13                                        // ROM[05772]
M = D                                        // ROM[05773]
// ---------------------------
// call
@ Math.divide:153                            // ROM[05774]
D = A                                        // ROM[05775]
@ R15                                        // ROM[05776]
M = D                                        // ROM[05777]
@ :push_local                                // ROM[05778]
0; JMP                                       // ROM[05779]
( Math.divide:153)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[05780]
A = M-1                                      // ROM[05781]
M = !M                                       // ROM[05782]

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05783]
AM = M-1                                     // ROM[05784]
D = M                                        // ROM[05785]
// ---------------------------
@ Math.divide$IF_TRUE2                       // ROM[05786]
D; JNE                                       // ROM[05787]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ Math.divide$IF_FALSE2                      // ROM[05788]
0; JMP                                       // ROM[05789]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( Math.divide$IF_TRUE2 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05790]
D = A                                        // ROM[05791]
@ R13                                        // ROM[05792]
M = D                                        // ROM[05793]
// ---------------------------
// call
@ Math.divide:154                            // ROM[05794]
D = A                                        // ROM[05795]
@ R15                                        // ROM[05796]
M = D                                        // ROM[05797]
@ :push_local                                // ROM[05798]
0; JMP                                       // ROM[05799]
( Math.divide:154)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05800]
D = A                                        // ROM[05801]
// ---------------------------
// push D
@ SP                                         // ROM[05802]
AM = M+1                                     // ROM[05803]
A = A-1                                      // ROM[05804]
M = D                                        // ROM[05805]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:155                            // ROM[05806]
D = A                                        // ROM[05807]
@ R15                                        // ROM[05808]
M = D                                        // ROM[05809]
@ :add                                       // ROM[05810]
0; JMP                                       // ROM[05811]
( Math.divide:155)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05812]
D = A                                        // ROM[05813]
@ R13                                        // ROM[05814]
M = D                                        // ROM[05815]
// ---------------------------
// call
@ Math.divide:156                            // ROM[05816]
D = A                                        // ROM[05817]
@ R15                                        // ROM[05818]
M = D                                        // ROM[05819]
@ :pop_local                                 // ROM[05820]
0; JMP                                       // ROM[05821]
( Math.divide:156)

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( Math.divide$IF_FALSE2 )

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Math.divide$IF_FALSE1 )

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Math.divide$WHILE_EXP0                     // ROM[05822]
0; JMP                                       // ROM[05823]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Math.divide$WHILE_END0 )

// -------------------------------------
// LABEL: WHILE_EXP1
// -------------------------------------
( Math.divide$WHILE_EXP1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05824]
D = A                                        // ROM[05825]
@ R13                                        // ROM[05826]
M = D                                        // ROM[05827]
// ---------------------------
// call
@ Math.divide:157                            // ROM[05828]
D = A                                        // ROM[05829]
@ R15                                        // ROM[05830]
M = D                                        // ROM[05831]
@ :push_local                                // ROM[05832]
0; JMP                                       // ROM[05833]
( Math.divide:157)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05834]
D = A                                        // ROM[05835]
// ---------------------------
// push D
@ SP                                         // ROM[05836]
AM = M+1                                     // ROM[05837]
A = A-1                                      // ROM[05838]
M = D                                        // ROM[05839]

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[05840]
A = M-1                                      // ROM[05841]
M = -M                                       // ROM[05842]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:158                            // ROM[05843]
D = A                                        // ROM[05844]
@ R15                                        // ROM[05845]
M = D                                        // ROM[05846]
@ :gt                                        // ROM[05847]
0; JMP                                       // ROM[05848]
( Math.divide:158)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[05849]
A = M-1                                      // ROM[05850]
M = !M                                       // ROM[05851]

// -------------------------------------
// IF-GOTO: WHILE_END1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05852]
AM = M-1                                     // ROM[05853]
D = M                                        // ROM[05854]
// ---------------------------
@ Math.divide$WHILE_END1                     // ROM[05855]
D; JNE                                       // ROM[05856]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05857]
D = A                                        // ROM[05858]
@ R13                                        // ROM[05859]
M = D                                        // ROM[05860]
// ---------------------------
// call
@ Math.divide:159                            // ROM[05861]
D = A                                        // ROM[05862]
@ R15                                        // ROM[05863]
M = D                                        // ROM[05864]
@ :push_local                                // ROM[05865]
0; JMP                                       // ROM[05866]
( Math.divide:159)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[05867]
D = M                                        // ROM[05868]
// ---------------------------
// push D
@ SP                                         // ROM[05869]
AM = M+1                                     // ROM[05870]
A = A-1                                      // ROM[05871]
M = D                                        // ROM[05872]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:160                            // ROM[05873]
D = A                                        // ROM[05874]
@ R15                                        // ROM[05875]
M = D                                        // ROM[05876]
@ :add                                       // ROM[05877]
0; JMP                                       // ROM[05878]
( Math.divide:160)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05879]
AM = M-1                                     // ROM[05880]
D = M                                        // ROM[05881]
// ---------------------------
@ 4                                          // ROM[05882]
M = D                                        // ROM[05883]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05884]
D = A                                        // ROM[05885]
@ R13                                        // ROM[05886]
M = D                                        // ROM[05887]
// ---------------------------
// call
@ Math.divide:161                            // ROM[05888]
D = A                                        // ROM[05889]
@ R15                                        // ROM[05890]
M = D                                        // ROM[05891]
@ :push_that                                 // ROM[05892]
0; JMP                                       // ROM[05893]
( Math.divide:161)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05894]
D = A                                        // ROM[05895]
// ---------------------------
// push D
@ SP                                         // ROM[05896]
AM = M+1                                     // ROM[05897]
A = A-1                                      // ROM[05898]
M = D                                        // ROM[05899]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:162                            // ROM[05900]
D = A                                        // ROM[05901]
@ R15                                        // ROM[05902]
M = D                                        // ROM[05903]
@ :sub                                       // ROM[05904]
0; JMP                                       // ROM[05905]
( Math.divide:162)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05906]
D = A                                        // ROM[05907]
@ R13                                        // ROM[05908]
M = D                                        // ROM[05909]
// ---------------------------
// call
@ Math.divide:163                            // ROM[05910]
D = A                                        // ROM[05911]
@ R15                                        // ROM[05912]
M = D                                        // ROM[05913]
@ :push_argument                             // ROM[05914]
0; JMP                                       // ROM[05915]
( Math.divide:163)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[05916]
D = A                                        // ROM[05917]
// ---------------------------
// push D
@ SP                                         // ROM[05918]
AM = M+1                                     // ROM[05919]
A = A-1                                      // ROM[05920]
M = D                                        // ROM[05921]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:164                            // ROM[05922]
D = A                                        // ROM[05923]
@ R15                                        // ROM[05924]
M = D                                        // ROM[05925]
@ :sub                                       // ROM[05926]
0; JMP                                       // ROM[05927]
( Math.divide:164)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.divide:165                            // ROM[05928]
D = A                                        // ROM[05929]
@ R15                                        // ROM[05930]
M = D                                        // ROM[05931]
@ :gt                                        // ROM[05932]
0; JMP                                       // ROM[05933]
( Math.divide:165)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[05934]
A = M-1                                      // ROM[05935]
M = !M                                       // ROM[05936]

// -------------------------------------
// IF-GOTO: IF_TRUE3
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05937]
AM = M-1                                     // ROM[05938]
D = M                                        // ROM[05939]
// ---------------------------
@ Math.divide$IF_TRUE3                       // ROM[05940]
D; JNE                                       // ROM[05941]

// -------------------------------------
// GOTO: IF_FALSE3
// -------------------------------------
@ Math.divide$IF_FALSE3                      // ROM[05942]
0; JMP                                       // ROM[05943]

// -------------------------------------
// LABEL: IF_TRUE3
// -------------------------------------
( Math.divide$IF_TRUE3 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[05944]
D = A                                        // ROM[05945]
@ R13                                        // ROM[05946]
M = D                                        // ROM[05947]
// ---------------------------
// call
@ Math.divide:166                            // ROM[05948]
D = A                                        // ROM[05949]
@ R15                                        // ROM[05950]
M = D                                        // ROM[05951]
@ :push_local                                // ROM[05952]
0; JMP                                       // ROM[05953]
( Math.divide:166)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05954]
D = A                                        // ROM[05955]
@ R13                                        // ROM[05956]
M = D                                        // ROM[05957]
// ---------------------------
// call
@ Math.divide:167                            // ROM[05958]
D = A                                        // ROM[05959]
@ R15                                        // ROM[05960]
M = D                                        // ROM[05961]
@ :push_local                                // ROM[05962]
0; JMP                                       // ROM[05963]
( Math.divide:167)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.0                                     // ROM[05964]
D = M                                        // ROM[05965]
// ---------------------------
// push D
@ SP                                         // ROM[05966]
AM = M+1                                     // ROM[05967]
A = A-1                                      // ROM[05968]
M = D                                        // ROM[05969]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:168                            // ROM[05970]
D = A                                        // ROM[05971]
@ R15                                        // ROM[05972]
M = D                                        // ROM[05973]
@ :add                                       // ROM[05974]
0; JMP                                       // ROM[05975]
( Math.divide:168)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[05976]
AM = M-1                                     // ROM[05977]
D = M                                        // ROM[05978]
// ---------------------------
@ 4                                          // ROM[05979]
M = D                                        // ROM[05980]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[05981]
D = A                                        // ROM[05982]
@ R13                                        // ROM[05983]
M = D                                        // ROM[05984]
// ---------------------------
// call
@ Math.divide:169                            // ROM[05985]
D = A                                        // ROM[05986]
@ R15                                        // ROM[05987]
M = D                                        // ROM[05988]
@ :push_that                                 // ROM[05989]
0; JMP                                       // ROM[05990]
( Math.divide:169)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:170                            // ROM[05991]
D = A                                        // ROM[05992]
@ R15                                        // ROM[05993]
M = D                                        // ROM[05994]
@ :add                                       // ROM[05995]
0; JMP                                       // ROM[05996]
( Math.divide:170)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[05997]
D = A                                        // ROM[05998]
@ R13                                        // ROM[05999]
M = D                                        // ROM[06000]
// ---------------------------
// call
@ Math.divide:171                            // ROM[06001]
D = A                                        // ROM[06002]
@ R15                                        // ROM[06003]
M = D                                        // ROM[06004]
@ :pop_local                                 // ROM[06005]
0; JMP                                       // ROM[06006]
( Math.divide:171)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06007]
D = A                                        // ROM[06008]
@ R13                                        // ROM[06009]
M = D                                        // ROM[06010]
// ---------------------------
// call
@ Math.divide:172                            // ROM[06011]
D = A                                        // ROM[06012]
@ R15                                        // ROM[06013]
M = D                                        // ROM[06014]
@ :push_argument                             // ROM[06015]
0; JMP                                       // ROM[06016]
( Math.divide:172)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06017]
D = A                                        // ROM[06018]
@ R13                                        // ROM[06019]
M = D                                        // ROM[06020]
// ---------------------------
// call
@ Math.divide:173                            // ROM[06021]
D = A                                        // ROM[06022]
@ R15                                        // ROM[06023]
M = D                                        // ROM[06024]
@ :push_local                                // ROM[06025]
0; JMP                                       // ROM[06026]
( Math.divide:173)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.1                                     // ROM[06027]
D = M                                        // ROM[06028]
// ---------------------------
// push D
@ SP                                         // ROM[06029]
AM = M+1                                     // ROM[06030]
A = A-1                                      // ROM[06031]
M = D                                        // ROM[06032]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.divide:174                            // ROM[06033]
D = A                                        // ROM[06034]
@ R15                                        // ROM[06035]
M = D                                        // ROM[06036]
@ :add                                       // ROM[06037]
0; JMP                                       // ROM[06038]
( Math.divide:174)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06039]
AM = M-1                                     // ROM[06040]
D = M                                        // ROM[06041]
// ---------------------------
@ 4                                          // ROM[06042]
M = D                                        // ROM[06043]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06044]
D = A                                        // ROM[06045]
@ R13                                        // ROM[06046]
M = D                                        // ROM[06047]
// ---------------------------
// call
@ Math.divide:175                            // ROM[06048]
D = A                                        // ROM[06049]
@ R15                                        // ROM[06050]
M = D                                        // ROM[06051]
@ :push_that                                 // ROM[06052]
0; JMP                                       // ROM[06053]
( Math.divide:175)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:176                            // ROM[06054]
D = A                                        // ROM[06055]
@ R15                                        // ROM[06056]
M = D                                        // ROM[06057]
@ :sub                                       // ROM[06058]
0; JMP                                       // ROM[06059]
( Math.divide:176)

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06060]
D = A                                        // ROM[06061]
@ R13                                        // ROM[06062]
M = D                                        // ROM[06063]
// ---------------------------
// call
@ Math.divide:177                            // ROM[06064]
D = A                                        // ROM[06065]
@ R15                                        // ROM[06066]
M = D                                        // ROM[06067]
@ :pop_argument                              // ROM[06068]
0; JMP                                       // ROM[06069]
( Math.divide:177)

// -------------------------------------
// LABEL: IF_FALSE3
// -------------------------------------
( Math.divide$IF_FALSE3 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06070]
D = A                                        // ROM[06071]
@ R13                                        // ROM[06072]
M = D                                        // ROM[06073]
// ---------------------------
// call
@ Math.divide:178                            // ROM[06074]
D = A                                        // ROM[06075]
@ R15                                        // ROM[06076]
M = D                                        // ROM[06077]
@ :push_local                                // ROM[06078]
0; JMP                                       // ROM[06079]
( Math.divide:178)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[06080]
D = A                                        // ROM[06081]
// ---------------------------
// push D
@ SP                                         // ROM[06082]
AM = M+1                                     // ROM[06083]
A = A-1                                      // ROM[06084]
M = D                                        // ROM[06085]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.divide:179                            // ROM[06086]
D = A                                        // ROM[06087]
@ R15                                        // ROM[06088]
M = D                                        // ROM[06089]
@ :sub                                       // ROM[06090]
0; JMP                                       // ROM[06091]
( Math.divide:179)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06092]
D = A                                        // ROM[06093]
@ R13                                        // ROM[06094]
M = D                                        // ROM[06095]
// ---------------------------
// call
@ Math.divide:180                            // ROM[06096]
D = A                                        // ROM[06097]
@ R15                                        // ROM[06098]
M = D                                        // ROM[06099]
@ :pop_local                                 // ROM[06100]
0; JMP                                       // ROM[06101]
( Math.divide:180)

// -------------------------------------
// GOTO: WHILE_EXP1
// -------------------------------------
@ Math.divide$WHILE_EXP1                     // ROM[06102]
0; JMP                                       // ROM[06103]

// -------------------------------------
// LABEL: WHILE_END1
// -------------------------------------
( Math.divide$WHILE_END1 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[06104]
D = A                                        // ROM[06105]
@ R13                                        // ROM[06106]
M = D                                        // ROM[06107]
// ---------------------------
// call
@ Math.divide:181                            // ROM[06108]
D = A                                        // ROM[06109]
@ R15                                        // ROM[06110]
M = D                                        // ROM[06111]
@ :push_local                                // ROM[06112]
0; JMP                                       // ROM[06113]
( Math.divide:181)

// -------------------------------------
// IF-GOTO: IF_TRUE4
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06114]
AM = M-1                                     // ROM[06115]
D = M                                        // ROM[06116]
// ---------------------------
@ Math.divide$IF_TRUE4                       // ROM[06117]
D; JNE                                       // ROM[06118]

// -------------------------------------
// GOTO: IF_FALSE4
// -------------------------------------
@ Math.divide$IF_FALSE4                      // ROM[06119]
0; JMP                                       // ROM[06120]

// -------------------------------------
// LABEL: IF_TRUE4
// -------------------------------------
( Math.divide$IF_TRUE4 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06121]
D = A                                        // ROM[06122]
@ R13                                        // ROM[06123]
M = D                                        // ROM[06124]
// ---------------------------
// call
@ Math.divide:182                            // ROM[06125]
D = A                                        // ROM[06126]
@ R15                                        // ROM[06127]
M = D                                        // ROM[06128]
@ :push_local                                // ROM[06129]
0; JMP                                       // ROM[06130]
( Math.divide:182)

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[06131]
A = M-1                                      // ROM[06132]
M = -M                                       // ROM[06133]

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06134]
D = A                                        // ROM[06135]
@ R13                                        // ROM[06136]
M = D                                        // ROM[06137]
// ---------------------------
// call
@ Math.divide:183                            // ROM[06138]
D = A                                        // ROM[06139]
@ R15                                        // ROM[06140]
M = D                                        // ROM[06141]
@ :pop_local                                 // ROM[06142]
0; JMP                                       // ROM[06143]
( Math.divide:183)

// -------------------------------------
// LABEL: IF_FALSE4
// -------------------------------------
( Math.divide$IF_FALSE4 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06144]
D = A                                        // ROM[06145]
@ R13                                        // ROM[06146]
M = D                                        // ROM[06147]
// ---------------------------
// call
@ Math.divide:184                            // ROM[06148]
D = A                                        // ROM[06149]
@ R15                                        // ROM[06150]
M = D                                        // ROM[06151]
@ :push_local                                // ROM[06152]
0; JMP                                       // ROM[06153]
( Math.divide:184)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Math.divide:185                            // ROM[06154]
D = A                                        // ROM[06155]
@ R15                                        // ROM[06156]
M = D                                        // ROM[06157]
@ :return                                    // ROM[06158]
0; JMP                                       // ROM[06159]
( Math.divide:185)

// =========================================================
// FUNCTION: Math.sqrt(4 locals)
// =========================================================

( Math.sqrt )
// ---------------------------
// clear local segment
D = 0                                        // ROM[06160]
// ---------------------------
// push D
@ SP                                         // ROM[06161]
AM = M+1                                     // ROM[06162]
A = A-1                                      // ROM[06163]
M = D                                        // ROM[06164]
// ---------------------------
// push D
@ SP                                         // ROM[06165]
AM = M+1                                     // ROM[06166]
A = A-1                                      // ROM[06167]
M = D                                        // ROM[06168]
// ---------------------------
// push D
@ SP                                         // ROM[06169]
AM = M+1                                     // ROM[06170]
A = A-1                                      // ROM[06171]
M = D                                        // ROM[06172]
// ---------------------------
// push D
@ SP                                         // ROM[06173]
AM = M+1                                     // ROM[06174]
A = A-1                                      // ROM[06175]
M = D                                        // ROM[06176]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06177]
D = A                                        // ROM[06178]
@ R13                                        // ROM[06179]
M = D                                        // ROM[06180]
// ---------------------------
// call
@ Math.sqrt:186                              // ROM[06181]
D = A                                        // ROM[06182]
@ R15                                        // ROM[06183]
M = D                                        // ROM[06184]
@ :push_argument                             // ROM[06185]
0; JMP                                       // ROM[06186]
( Math.sqrt:186)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[06187]
D = A                                        // ROM[06188]
// ---------------------------
// push D
@ SP                                         // ROM[06189]
AM = M+1                                     // ROM[06190]
A = A-1                                      // ROM[06191]
M = D                                        // ROM[06192]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:187                              // ROM[06193]
D = A                                        // ROM[06194]
@ R15                                        // ROM[06195]
M = D                                        // ROM[06196]
@ :lt                                        // ROM[06197]
0; JMP                                       // ROM[06198]
( Math.sqrt:187)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06199]
AM = M-1                                     // ROM[06200]
D = M                                        // ROM[06201]
// ---------------------------
@ Math.sqrt$IF_TRUE0                         // ROM[06202]
D; JNE                                       // ROM[06203]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Math.sqrt$IF_FALSE0                        // ROM[06204]
0; JMP                                       // ROM[06205]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Math.sqrt$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 4>
// -------------------------------------
@ 4                                          // ROM[06206]
D = A                                        // ROM[06207]
// ---------------------------
// push D
@ SP                                         // ROM[06208]
AM = M+1                                     // ROM[06209]
A = A-1                                      // ROM[06210]
M = D                                        // ROM[06211]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[06212]
D = A                                        // ROM[06213]
@ R13                                        // ROM[06214]
M = D                                        // ROM[06215]
// ---------------------------
// Push RA
@ Math.sqrt:188                              // ROM[06216]
D = A                                        // ROM[06217]
// ---------------------------
// push D
@ SP                                         // ROM[06218]
AM = M+1                                     // ROM[06219]
A = A-1                                      // ROM[06220]
M = D                                        // ROM[06221]
// ---------------------------
// call
@ Math.sqrt:189                              // ROM[06222]
D = A                                        // ROM[06223]
@ R15                                        // ROM[06224]
M = D                                        // ROM[06225]
@ :call                                      // ROM[06226]
0; JMP                                       // ROM[06227]
( Math.sqrt:189)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[06228]
0; JMP                                       // ROM[06229]
// ---------------------------
// ( RA )
( Math.sqrt:188) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06230]
AM = M-1                                     // ROM[06231]
D = M                                        // ROM[06232]
// ---------------------------
@ 5                                          // ROM[06233]
M = D                                        // ROM[06234]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Math.sqrt$IF_FALSE0 )

// -------------------------------------
// PUSH: <constant, 7>
// -------------------------------------
@ 7                                          // ROM[06235]
D = A                                        // ROM[06236]
// ---------------------------
// push D
@ SP                                         // ROM[06237]
AM = M+1                                     // ROM[06238]
A = A-1                                      // ROM[06239]
M = D                                        // ROM[06240]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06241]
D = A                                        // ROM[06242]
@ R13                                        // ROM[06243]
M = D                                        // ROM[06244]
// ---------------------------
// call
@ Math.sqrt:190                              // ROM[06245]
D = A                                        // ROM[06246]
@ R15                                        // ROM[06247]
M = D                                        // ROM[06248]
@ :pop_local                                 // ROM[06249]
0; JMP                                       // ROM[06250]
( Math.sqrt:190)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Math.sqrt$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06251]
D = A                                        // ROM[06252]
@ R13                                        // ROM[06253]
M = D                                        // ROM[06254]
// ---------------------------
// call
@ Math.sqrt:191                              // ROM[06255]
D = A                                        // ROM[06256]
@ R15                                        // ROM[06257]
M = D                                        // ROM[06258]
@ :push_local                                // ROM[06259]
0; JMP                                       // ROM[06260]
( Math.sqrt:191)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[06261]
D = A                                        // ROM[06262]
// ---------------------------
// push D
@ SP                                         // ROM[06263]
AM = M+1                                     // ROM[06264]
A = A-1                                      // ROM[06265]
M = D                                        // ROM[06266]

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[06267]
A = M-1                                      // ROM[06268]
M = -M                                       // ROM[06269]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:192                              // ROM[06270]
D = A                                        // ROM[06271]
@ R15                                        // ROM[06272]
M = D                                        // ROM[06273]
@ :gt                                        // ROM[06274]
0; JMP                                       // ROM[06275]
( Math.sqrt:192)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[06276]
A = M-1                                      // ROM[06277]
M = !M                                       // ROM[06278]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06279]
AM = M-1                                     // ROM[06280]
D = M                                        // ROM[06281]
// ---------------------------
@ Math.sqrt$WHILE_END0                       // ROM[06282]
D; JNE                                       // ROM[06283]

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[06284]
D = A                                        // ROM[06285]
@ R13                                        // ROM[06286]
M = D                                        // ROM[06287]
// ---------------------------
// call
@ Math.sqrt:193                              // ROM[06288]
D = A                                        // ROM[06289]
@ R15                                        // ROM[06290]
M = D                                        // ROM[06291]
@ :push_local                                // ROM[06292]
0; JMP                                       // ROM[06293]
( Math.sqrt:193)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06294]
D = A                                        // ROM[06295]
@ R13                                        // ROM[06296]
M = D                                        // ROM[06297]
// ---------------------------
// call
@ Math.sqrt:194                              // ROM[06298]
D = A                                        // ROM[06299]
@ R15                                        // ROM[06300]
M = D                                        // ROM[06301]
@ :push_local                                // ROM[06302]
0; JMP                                       // ROM[06303]
( Math.sqrt:194)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Math.0                                     // ROM[06304]
D = M                                        // ROM[06305]
// ---------------------------
// push D
@ SP                                         // ROM[06306]
AM = M+1                                     // ROM[06307]
A = A-1                                      // ROM[06308]
M = D                                        // ROM[06309]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:195                              // ROM[06310]
D = A                                        // ROM[06311]
@ R15                                        // ROM[06312]
M = D                                        // ROM[06313]
@ :add                                       // ROM[06314]
0; JMP                                       // ROM[06315]
( Math.sqrt:195)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06316]
AM = M-1                                     // ROM[06317]
D = M                                        // ROM[06318]
// ---------------------------
@ 4                                          // ROM[06319]
M = D                                        // ROM[06320]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06321]
D = A                                        // ROM[06322]
@ R13                                        // ROM[06323]
M = D                                        // ROM[06324]
// ---------------------------
// call
@ Math.sqrt:196                              // ROM[06325]
D = A                                        // ROM[06326]
@ R15                                        // ROM[06327]
M = D                                        // ROM[06328]
@ :push_that                                 // ROM[06329]
0; JMP                                       // ROM[06330]
( Math.sqrt:196)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:197                              // ROM[06331]
D = A                                        // ROM[06332]
@ R15                                        // ROM[06333]
M = D                                        // ROM[06334]
@ :add                                       // ROM[06335]
0; JMP                                       // ROM[06336]
( Math.sqrt:197)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06337]
D = A                                        // ROM[06338]
@ R13                                        // ROM[06339]
M = D                                        // ROM[06340]
// ---------------------------
// call
@ Math.sqrt:198                              // ROM[06341]
D = A                                        // ROM[06342]
@ R15                                        // ROM[06343]
M = D                                        // ROM[06344]
@ :pop_local                                 // ROM[06345]
0; JMP                                       // ROM[06346]
( Math.sqrt:198)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06347]
D = A                                        // ROM[06348]
@ R13                                        // ROM[06349]
M = D                                        // ROM[06350]
// ---------------------------
// call
@ Math.sqrt:199                              // ROM[06351]
D = A                                        // ROM[06352]
@ R15                                        // ROM[06353]
M = D                                        // ROM[06354]
@ :push_local                                // ROM[06355]
0; JMP                                       // ROM[06356]
( Math.sqrt:199)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06357]
D = A                                        // ROM[06358]
@ R13                                        // ROM[06359]
M = D                                        // ROM[06360]
// ---------------------------
// call
@ Math.sqrt:200                              // ROM[06361]
D = A                                        // ROM[06362]
@ R15                                        // ROM[06363]
M = D                                        // ROM[06364]
@ :push_local                                // ROM[06365]
0; JMP                                       // ROM[06366]
( Math.sqrt:200)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[06367]
D = A                                        // ROM[06368]
@ R13                                        // ROM[06369]
M = D                                        // ROM[06370]
// ---------------------------
// Push RA
@ Math.sqrt:201                              // ROM[06371]
D = A                                        // ROM[06372]
// ---------------------------
// push D
@ SP                                         // ROM[06373]
AM = M+1                                     // ROM[06374]
A = A-1                                      // ROM[06375]
M = D                                        // ROM[06376]
// ---------------------------
// call
@ Math.sqrt:202                              // ROM[06377]
D = A                                        // ROM[06378]
@ R15                                        // ROM[06379]
M = D                                        // ROM[06380]
@ :call                                      // ROM[06381]
0; JMP                                       // ROM[06382]
( Math.sqrt:202)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[06383]
0; JMP                                       // ROM[06384]
// ---------------------------
// ( RA )
( Math.sqrt:201) 

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[06385]
D = A                                        // ROM[06386]
@ R13                                        // ROM[06387]
M = D                                        // ROM[06388]
// ---------------------------
// call
@ Math.sqrt:203                              // ROM[06389]
D = A                                        // ROM[06390]
@ R15                                        // ROM[06391]
M = D                                        // ROM[06392]
@ :pop_local                                 // ROM[06393]
0; JMP                                       // ROM[06394]
( Math.sqrt:203)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[06395]
D = A                                        // ROM[06396]
@ R13                                        // ROM[06397]
M = D                                        // ROM[06398]
// ---------------------------
// call
@ Math.sqrt:204                              // ROM[06399]
D = A                                        // ROM[06400]
@ R15                                        // ROM[06401]
M = D                                        // ROM[06402]
@ :push_local                                // ROM[06403]
0; JMP                                       // ROM[06404]
( Math.sqrt:204)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06405]
D = A                                        // ROM[06406]
@ R13                                        // ROM[06407]
M = D                                        // ROM[06408]
// ---------------------------
// call
@ Math.sqrt:205                              // ROM[06409]
D = A                                        // ROM[06410]
@ R15                                        // ROM[06411]
M = D                                        // ROM[06412]
@ :push_argument                             // ROM[06413]
0; JMP                                       // ROM[06414]
( Math.sqrt:205)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:206                              // ROM[06415]
D = A                                        // ROM[06416]
@ R15                                        // ROM[06417]
M = D                                        // ROM[06418]
@ :gt                                        // ROM[06419]
0; JMP                                       // ROM[06420]
( Math.sqrt:206)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[06421]
A = M-1                                      // ROM[06422]
M = !M                                       // ROM[06423]

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[06424]
D = A                                        // ROM[06425]
@ R13                                        // ROM[06426]
M = D                                        // ROM[06427]
// ---------------------------
// call
@ Math.sqrt:207                              // ROM[06428]
D = A                                        // ROM[06429]
@ R15                                        // ROM[06430]
M = D                                        // ROM[06431]
@ :push_local                                // ROM[06432]
0; JMP                                       // ROM[06433]
( Math.sqrt:207)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[06434]
D = A                                        // ROM[06435]
// ---------------------------
// push D
@ SP                                         // ROM[06436]
AM = M+1                                     // ROM[06437]
A = A-1                                      // ROM[06438]
M = D                                        // ROM[06439]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:208                              // ROM[06440]
D = A                                        // ROM[06441]
@ R15                                        // ROM[06442]
M = D                                        // ROM[06443]
@ :lt                                        // ROM[06444]
0; JMP                                       // ROM[06445]
( Math.sqrt:208)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[06446]
A = M-1                                      // ROM[06447]
M = !M                                       // ROM[06448]

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:209                              // ROM[06449]
D = A                                        // ROM[06450]
@ R15                                        // ROM[06451]
M = D                                        // ROM[06452]
@ :and                                       // ROM[06453]
0; JMP                                       // ROM[06454]
( Math.sqrt:209)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06455]
AM = M-1                                     // ROM[06456]
D = M                                        // ROM[06457]
// ---------------------------
@ Math.sqrt$IF_TRUE1                         // ROM[06458]
D; JNE                                       // ROM[06459]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Math.sqrt$IF_FALSE1                        // ROM[06460]
0; JMP                                       // ROM[06461]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Math.sqrt$IF_TRUE1 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06462]
D = A                                        // ROM[06463]
@ R13                                        // ROM[06464]
M = D                                        // ROM[06465]
// ---------------------------
// call
@ Math.sqrt:210                              // ROM[06466]
D = A                                        // ROM[06467]
@ R15                                        // ROM[06468]
M = D                                        // ROM[06469]
@ :push_local                                // ROM[06470]
0; JMP                                       // ROM[06471]
( Math.sqrt:210)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[06472]
D = A                                        // ROM[06473]
@ R13                                        // ROM[06474]
M = D                                        // ROM[06475]
// ---------------------------
// call
@ Math.sqrt:211                              // ROM[06476]
D = A                                        // ROM[06477]
@ R15                                        // ROM[06478]
M = D                                        // ROM[06479]
@ :pop_local                                 // ROM[06480]
0; JMP                                       // ROM[06481]
( Math.sqrt:211)

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Math.sqrt$IF_FALSE1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06482]
D = A                                        // ROM[06483]
@ R13                                        // ROM[06484]
M = D                                        // ROM[06485]
// ---------------------------
// call
@ Math.sqrt:212                              // ROM[06486]
D = A                                        // ROM[06487]
@ R15                                        // ROM[06488]
M = D                                        // ROM[06489]
@ :push_local                                // ROM[06490]
0; JMP                                       // ROM[06491]
( Math.sqrt:212)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[06492]
D = A                                        // ROM[06493]
// ---------------------------
// push D
@ SP                                         // ROM[06494]
AM = M+1                                     // ROM[06495]
A = A-1                                      // ROM[06496]
M = D                                        // ROM[06497]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:213                              // ROM[06498]
D = A                                        // ROM[06499]
@ R15                                        // ROM[06500]
M = D                                        // ROM[06501]
@ :sub                                       // ROM[06502]
0; JMP                                       // ROM[06503]
( Math.sqrt:213)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06504]
D = A                                        // ROM[06505]
@ R13                                        // ROM[06506]
M = D                                        // ROM[06507]
// ---------------------------
// call
@ Math.sqrt:214                              // ROM[06508]
D = A                                        // ROM[06509]
@ R15                                        // ROM[06510]
M = D                                        // ROM[06511]
@ :pop_local                                 // ROM[06512]
0; JMP                                       // ROM[06513]
( Math.sqrt:214)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Math.sqrt$WHILE_EXP0                       // ROM[06514]
0; JMP                                       // ROM[06515]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Math.sqrt$WHILE_END0 )

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[06516]
D = A                                        // ROM[06517]
@ R13                                        // ROM[06518]
M = D                                        // ROM[06519]
// ---------------------------
// call
@ Math.sqrt:215                              // ROM[06520]
D = A                                        // ROM[06521]
@ R15                                        // ROM[06522]
M = D                                        // ROM[06523]
@ :push_local                                // ROM[06524]
0; JMP                                       // ROM[06525]
( Math.sqrt:215)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Math.sqrt:216                              // ROM[06526]
D = A                                        // ROM[06527]
@ R15                                        // ROM[06528]
M = D                                        // ROM[06529]
@ :return                                    // ROM[06530]
0; JMP                                       // ROM[06531]
( Math.sqrt:216)

// =========================================================
// FUNCTION: Math.max(0 locals)
// =========================================================

( Math.max )
// ---------------------------
// clear local segment
D = 0                                        // ROM[06532]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06533]
D = A                                        // ROM[06534]
@ R13                                        // ROM[06535]
M = D                                        // ROM[06536]
// ---------------------------
// call
@ Math.max:217                               // ROM[06537]
D = A                                        // ROM[06538]
@ R15                                        // ROM[06539]
M = D                                        // ROM[06540]
@ :push_argument                             // ROM[06541]
0; JMP                                       // ROM[06542]
( Math.max:217)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06543]
D = A                                        // ROM[06544]
@ R13                                        // ROM[06545]
M = D                                        // ROM[06546]
// ---------------------------
// call
@ Math.max:218                               // ROM[06547]
D = A                                        // ROM[06548]
@ R15                                        // ROM[06549]
M = D                                        // ROM[06550]
@ :push_argument                             // ROM[06551]
0; JMP                                       // ROM[06552]
( Math.max:218)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Math.max:219                               // ROM[06553]
D = A                                        // ROM[06554]
@ R15                                        // ROM[06555]
M = D                                        // ROM[06556]
@ :gt                                        // ROM[06557]
0; JMP                                       // ROM[06558]
( Math.max:219)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06559]
AM = M-1                                     // ROM[06560]
D = M                                        // ROM[06561]
// ---------------------------
@ Math.max$IF_TRUE0                          // ROM[06562]
D; JNE                                       // ROM[06563]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Math.max$IF_FALSE0                         // ROM[06564]
0; JMP                                       // ROM[06565]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Math.max$IF_TRUE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06566]
D = A                                        // ROM[06567]
@ R13                                        // ROM[06568]
M = D                                        // ROM[06569]
// ---------------------------
// call
@ Math.max:220                               // ROM[06570]
D = A                                        // ROM[06571]
@ R15                                        // ROM[06572]
M = D                                        // ROM[06573]
@ :push_argument                             // ROM[06574]
0; JMP                                       // ROM[06575]
( Math.max:220)

// -------------------------------------
// POP: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06576]
D = A                                        // ROM[06577]
@ R13                                        // ROM[06578]
M = D                                        // ROM[06579]
// ---------------------------
// call
@ Math.max:221                               // ROM[06580]
D = A                                        // ROM[06581]
@ R15                                        // ROM[06582]
M = D                                        // ROM[06583]
@ :pop_argument                              // ROM[06584]
0; JMP                                       // ROM[06585]
( Math.max:221)

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Math.max$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06586]
D = A                                        // ROM[06587]
@ R13                                        // ROM[06588]
M = D                                        // ROM[06589]
// ---------------------------
// call
@ Math.max:222                               // ROM[06590]
D = A                                        // ROM[06591]
@ R15                                        // ROM[06592]
M = D                                        // ROM[06593]
@ :push_argument                             // ROM[06594]
0; JMP                                       // ROM[06595]
( Math.max:222)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Math.max:223                               // ROM[06596]
D = A                                        // ROM[06597]
@ R15                                        // ROM[06598]
M = D                                        // ROM[06599]
@ :return                                    // ROM[06600]
0; JMP                                       // ROM[06601]
( Math.max:223)

// =========================================================
// FUNCTION: Math.min(0 locals)
// =========================================================

( Math.min )
// ---------------------------
// clear local segment
D = 0                                        // ROM[06602]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06603]
D = A                                        // ROM[06604]
@ R13                                        // ROM[06605]
M = D                                        // ROM[06606]
// ---------------------------
// call
@ Math.min:224                               // ROM[06607]
D = A                                        // ROM[06608]
@ R15                                        // ROM[06609]
M = D                                        // ROM[06610]
@ :push_argument                             // ROM[06611]
0; JMP                                       // ROM[06612]
( Math.min:224)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06613]
D = A                                        // ROM[06614]
@ R13                                        // ROM[06615]
M = D                                        // ROM[06616]
// ---------------------------
// call
@ Math.min:225                               // ROM[06617]
D = A                                        // ROM[06618]
@ R15                                        // ROM[06619]
M = D                                        // ROM[06620]
@ :push_argument                             // ROM[06621]
0; JMP                                       // ROM[06622]
( Math.min:225)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Math.min:226                               // ROM[06623]
D = A                                        // ROM[06624]
@ R15                                        // ROM[06625]
M = D                                        // ROM[06626]
@ :lt                                        // ROM[06627]
0; JMP                                       // ROM[06628]
( Math.min:226)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06629]
AM = M-1                                     // ROM[06630]
D = M                                        // ROM[06631]
// ---------------------------
@ Math.min$IF_TRUE0                          // ROM[06632]
D; JNE                                       // ROM[06633]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Math.min$IF_FALSE0                         // ROM[06634]
0; JMP                                       // ROM[06635]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Math.min$IF_TRUE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06636]
D = A                                        // ROM[06637]
@ R13                                        // ROM[06638]
M = D                                        // ROM[06639]
// ---------------------------
// call
@ Math.min:227                               // ROM[06640]
D = A                                        // ROM[06641]
@ R15                                        // ROM[06642]
M = D                                        // ROM[06643]
@ :push_argument                             // ROM[06644]
0; JMP                                       // ROM[06645]
( Math.min:227)

// -------------------------------------
// POP: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06646]
D = A                                        // ROM[06647]
@ R13                                        // ROM[06648]
M = D                                        // ROM[06649]
// ---------------------------
// call
@ Math.min:228                               // ROM[06650]
D = A                                        // ROM[06651]
@ R15                                        // ROM[06652]
M = D                                        // ROM[06653]
@ :pop_argument                              // ROM[06654]
0; JMP                                       // ROM[06655]
( Math.min:228)

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Math.min$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[06656]
D = A                                        // ROM[06657]
@ R13                                        // ROM[06658]
M = D                                        // ROM[06659]
// ---------------------------
// call
@ Math.min:229                               // ROM[06660]
D = A                                        // ROM[06661]
@ R15                                        // ROM[06662]
M = D                                        // ROM[06663]
@ :push_argument                             // ROM[06664]
0; JMP                                       // ROM[06665]
( Math.min:229)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Math.min:230                               // ROM[06666]
D = A                                        // ROM[06667]
@ R15                                        // ROM[06668]
M = D                                        // ROM[06669]
@ :return                                    // ROM[06670]
0; JMP                                       // ROM[06671]
( Math.min:230)

// *********************************************************
// Translation of: ./Array.vm
// *********************************************************


// =========================================================
// FUNCTION: Array.new(0 locals)
// =========================================================

( Array.new )
// ---------------------------
// clear local segment
D = 0                                        // ROM[06672]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06673]
D = A                                        // ROM[06674]
@ R13                                        // ROM[06675]
M = D                                        // ROM[06676]
// ---------------------------
// call
@ Array.new:0                                // ROM[06677]
D = A                                        // ROM[06678]
@ R15                                        // ROM[06679]
M = D                                        // ROM[06680]
@ :push_argument                             // ROM[06681]
0; JMP                                       // ROM[06682]
( Array.new:0)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[06683]
D = A                                        // ROM[06684]
// ---------------------------
// push D
@ SP                                         // ROM[06685]
AM = M+1                                     // ROM[06686]
A = A-1                                      // ROM[06687]
M = D                                        // ROM[06688]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Array.new:1                                // ROM[06689]
D = A                                        // ROM[06690]
@ R15                                        // ROM[06691]
M = D                                        // ROM[06692]
@ :gt                                        // ROM[06693]
0; JMP                                       // ROM[06694]
( Array.new:1)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[06695]
A = M-1                                      // ROM[06696]
M = !M                                       // ROM[06697]

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06698]
AM = M-1                                     // ROM[06699]
D = M                                        // ROM[06700]
// ---------------------------
@ Array.new$IF_TRUE0                         // ROM[06701]
D; JNE                                       // ROM[06702]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Array.new$IF_FALSE0                        // ROM[06703]
0; JMP                                       // ROM[06704]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Array.new$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[06705]
D = A                                        // ROM[06706]
// ---------------------------
// push D
@ SP                                         // ROM[06707]
AM = M+1                                     // ROM[06708]
A = A-1                                      // ROM[06709]
M = D                                        // ROM[06710]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[06711]
D = A                                        // ROM[06712]
@ R13                                        // ROM[06713]
M = D                                        // ROM[06714]
// ---------------------------
// Push RA
@ Array.new:2                                // ROM[06715]
D = A                                        // ROM[06716]
// ---------------------------
// push D
@ SP                                         // ROM[06717]
AM = M+1                                     // ROM[06718]
A = A-1                                      // ROM[06719]
M = D                                        // ROM[06720]
// ---------------------------
// call
@ Array.new:3                                // ROM[06721]
D = A                                        // ROM[06722]
@ R15                                        // ROM[06723]
M = D                                        // ROM[06724]
@ :call                                      // ROM[06725]
0; JMP                                       // ROM[06726]
( Array.new:3)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[06727]
0; JMP                                       // ROM[06728]
// ---------------------------
// ( RA )
( Array.new:2) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06729]
AM = M-1                                     // ROM[06730]
D = M                                        // ROM[06731]
// ---------------------------
@ 5                                          // ROM[06732]
M = D                                        // ROM[06733]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Array.new$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06734]
D = A                                        // ROM[06735]
@ R13                                        // ROM[06736]
M = D                                        // ROM[06737]
// ---------------------------
// call
@ Array.new:4                                // ROM[06738]
D = A                                        // ROM[06739]
@ R15                                        // ROM[06740]
M = D                                        // ROM[06741]
@ :push_argument                             // ROM[06742]
0; JMP                                       // ROM[06743]
( Array.new:4)

// -------------------------------------
// CALL: Memory.alloc(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[06744]
D = A                                        // ROM[06745]
@ R13                                        // ROM[06746]
M = D                                        // ROM[06747]
// ---------------------------
// Push RA
@ Array.new:5                                // ROM[06748]
D = A                                        // ROM[06749]
// ---------------------------
// push D
@ SP                                         // ROM[06750]
AM = M+1                                     // ROM[06751]
A = A-1                                      // ROM[06752]
M = D                                        // ROM[06753]
// ---------------------------
// call
@ Array.new:6                                // ROM[06754]
D = A                                        // ROM[06755]
@ R15                                        // ROM[06756]
M = D                                        // ROM[06757]
@ :call                                      // ROM[06758]
0; JMP                                       // ROM[06759]
( Array.new:6)
// ---------------------------
// goto functionName
@ Memory.alloc                               // ROM[06760]
0; JMP                                       // ROM[06761]
// ---------------------------
// ( RA )
( Array.new:5) 

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Array.new:7                                // ROM[06762]
D = A                                        // ROM[06763]
@ R15                                        // ROM[06764]
M = D                                        // ROM[06765]
@ :return                                    // ROM[06766]
0; JMP                                       // ROM[06767]
( Array.new:7)

// =========================================================
// FUNCTION: Array.dispose(0 locals)
// =========================================================

( Array.dispose )
// ---------------------------
// clear local segment
D = 0                                        // ROM[06768]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06769]
D = A                                        // ROM[06770]
@ R13                                        // ROM[06771]
M = D                                        // ROM[06772]
// ---------------------------
// call
@ Array.dispose:8                            // ROM[06773]
D = A                                        // ROM[06774]
@ R15                                        // ROM[06775]
M = D                                        // ROM[06776]
@ :push_argument                             // ROM[06777]
0; JMP                                       // ROM[06778]
( Array.dispose:8)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06779]
AM = M-1                                     // ROM[06780]
D = M                                        // ROM[06781]
// ---------------------------
@ 3                                          // ROM[06782]
M = D                                        // ROM[06783]

// -------------------------------------
// PUSH: <pointer, 0>
// -------------------------------------
@ 3                                          // ROM[06784]
D = M                                        // ROM[06785]
// ---------------------------
// push D
@ SP                                         // ROM[06786]
AM = M+1                                     // ROM[06787]
A = A-1                                      // ROM[06788]
M = D                                        // ROM[06789]

// -------------------------------------
// CALL: Memory.deAlloc(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[06790]
D = A                                        // ROM[06791]
@ R13                                        // ROM[06792]
M = D                                        // ROM[06793]
// ---------------------------
// Push RA
@ Array.dispose:9                            // ROM[06794]
D = A                                        // ROM[06795]
// ---------------------------
// push D
@ SP                                         // ROM[06796]
AM = M+1                                     // ROM[06797]
A = A-1                                      // ROM[06798]
M = D                                        // ROM[06799]
// ---------------------------
// call
@ Array.dispose:10                           // ROM[06800]
D = A                                        // ROM[06801]
@ R15                                        // ROM[06802]
M = D                                        // ROM[06803]
@ :call                                      // ROM[06804]
0; JMP                                       // ROM[06805]
( Array.dispose:10)
// ---------------------------
// goto functionName
@ Memory.deAlloc                             // ROM[06806]
0; JMP                                       // ROM[06807]
// ---------------------------
// ( RA )
( Array.dispose:9) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06808]
AM = M-1                                     // ROM[06809]
D = M                                        // ROM[06810]
// ---------------------------
@ 5                                          // ROM[06811]
M = D                                        // ROM[06812]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[06813]
D = A                                        // ROM[06814]
// ---------------------------
// push D
@ SP                                         // ROM[06815]
AM = M+1                                     // ROM[06816]
A = A-1                                      // ROM[06817]
M = D                                        // ROM[06818]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Array.dispose:11                           // ROM[06819]
D = A                                        // ROM[06820]
@ R15                                        // ROM[06821]
M = D                                        // ROM[06822]
@ :return                                    // ROM[06823]
0; JMP                                       // ROM[06824]
( Array.dispose:11)

// *********************************************************
// Translation of: ./Main.vm
// *********************************************************


// =========================================================
// FUNCTION: Main.main(3 locals)
// =========================================================

( Main.main )
// ---------------------------
// clear local segment
D = 0                                        // ROM[06825]
// ---------------------------
// push D
@ SP                                         // ROM[06826]
AM = M+1                                     // ROM[06827]
A = A-1                                      // ROM[06828]
M = D                                        // ROM[06829]
// ---------------------------
// push D
@ SP                                         // ROM[06830]
AM = M+1                                     // ROM[06831]
A = A-1                                      // ROM[06832]
M = D                                        // ROM[06833]
// ---------------------------
// push D
@ SP                                         // ROM[06834]
AM = M+1                                     // ROM[06835]
A = A-1                                      // ROM[06836]
M = D                                        // ROM[06837]

// -------------------------------------
// PUSH: <constant, 16383>
// -------------------------------------
@ 16383                                      // ROM[06838]
D = A                                        // ROM[06839]
// ---------------------------
// push D
@ SP                                         // ROM[06840]
AM = M+1                                     // ROM[06841]
A = A-1                                      // ROM[06842]
M = D                                        // ROM[06843]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06844]
D = A                                        // ROM[06845]
@ R13                                        // ROM[06846]
M = D                                        // ROM[06847]
// ---------------------------
// call
@ Main.main:0                                // ROM[06848]
D = A                                        // ROM[06849]
@ R15                                        // ROM[06850]
M = D                                        // ROM[06851]
@ :pop_local                                 // ROM[06852]
0; JMP                                       // ROM[06853]
( Main.main:0)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[06854]
D = A                                        // ROM[06855]
// ---------------------------
// push D
@ SP                                         // ROM[06856]
AM = M+1                                     // ROM[06857]
A = A-1                                      // ROM[06858]
M = D                                        // ROM[06859]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06860]
D = A                                        // ROM[06861]
@ R13                                        // ROM[06862]
M = D                                        // ROM[06863]
// ---------------------------
// call
@ Main.main:1                                // ROM[06864]
D = A                                        // ROM[06865]
@ R15                                        // ROM[06866]
M = D                                        // ROM[06867]
@ :push_local                                // ROM[06868]
0; JMP                                       // ROM[06869]
( Main.main:1)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Main.main:2                                // ROM[06870]
D = A                                        // ROM[06871]
@ R15                                        // ROM[06872]
M = D                                        // ROM[06873]
@ :add                                       // ROM[06874]
0; JMP                                       // ROM[06875]
( Main.main:2)

// -------------------------------------
// PUSH: <constant, 2424>
// -------------------------------------
@ 2424                                       // ROM[06876]
D = A                                        // ROM[06877]
// ---------------------------
// push D
@ SP                                         // ROM[06878]
AM = M+1                                     // ROM[06879]
A = A-1                                      // ROM[06880]
M = D                                        // ROM[06881]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06882]
AM = M-1                                     // ROM[06883]
D = M                                        // ROM[06884]
// ---------------------------
@ 5                                          // ROM[06885]
M = D                                        // ROM[06886]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[06887]
AM = M-1                                     // ROM[06888]
D = M                                        // ROM[06889]
// ---------------------------
@ 4                                          // ROM[06890]
M = D                                        // ROM[06891]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[06892]
D = M                                        // ROM[06893]
// ---------------------------
// push D
@ SP                                         // ROM[06894]
AM = M+1                                     // ROM[06895]
A = A-1                                      // ROM[06896]
M = D                                        // ROM[06897]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[06898]
D = A                                        // ROM[06899]
@ R13                                        // ROM[06900]
M = D                                        // ROM[06901]
// ---------------------------
// call
@ Main.main:3                                // ROM[06902]
D = A                                        // ROM[06903]
@ R15                                        // ROM[06904]
M = D                                        // ROM[06905]
@ :pop_that                                  // ROM[06906]
0; JMP                                       // ROM[06907]
( Main.main:3)

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[06908]
D = A                                        // ROM[06909]
// ---------------------------
// push D
@ SP                                         // ROM[06910]
AM = M+1                                     // ROM[06911]
A = A-1                                      // ROM[06912]
M = D                                        // ROM[06913]

// -------------------------------------
// CALL: String.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[06914]
D = A                                        // ROM[06915]
@ R13                                        // ROM[06916]
M = D                                        // ROM[06917]
// ---------------------------
// Push RA
@ Main.main:4                                // ROM[06918]
D = A                                        // ROM[06919]
// ---------------------------
// push D
@ SP                                         // ROM[06920]
AM = M+1                                     // ROM[06921]
A = A-1                                      // ROM[06922]
M = D                                        // ROM[06923]
// ---------------------------
// call
@ Main.main:5                                // ROM[06924]
D = A                                        // ROM[06925]
@ R15                                        // ROM[06926]
M = D                                        // ROM[06927]
@ :call                                      // ROM[06928]
0; JMP                                       // ROM[06929]
( Main.main:5)
// ---------------------------
// goto functionName
@ String.new                                 // ROM[06930]
0; JMP                                       // ROM[06931]
// ---------------------------
// ( RA )
( Main.main:4) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[06932]
D = A                                        // ROM[06933]
// ---------------------------
// push D
@ SP                                         // ROM[06934]
AM = M+1                                     // ROM[06935]
A = A-1                                      // ROM[06936]
M = D                                        // ROM[06937]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[06938]
D = A                                        // ROM[06939]
@ R13                                        // ROM[06940]
M = D                                        // ROM[06941]
// ---------------------------
// Push RA
@ Main.main:6                                // ROM[06942]
D = A                                        // ROM[06943]
// ---------------------------
// push D
@ SP                                         // ROM[06944]
AM = M+1                                     // ROM[06945]
A = A-1                                      // ROM[06946]
M = D                                        // ROM[06947]
// ---------------------------
// call
@ Main.main:7                                // ROM[06948]
D = A                                        // ROM[06949]
@ R15                                        // ROM[06950]
M = D                                        // ROM[06951]
@ :call                                      // ROM[06952]
0; JMP                                       // ROM[06953]
( Main.main:7)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[06954]
0; JMP                                       // ROM[06955]
// ---------------------------
// ( RA )
( Main.main:6) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[06956]
D = A                                        // ROM[06957]
// ---------------------------
// push D
@ SP                                         // ROM[06958]
AM = M+1                                     // ROM[06959]
A = A-1                                      // ROM[06960]
M = D                                        // ROM[06961]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[06962]
D = A                                        // ROM[06963]
@ R13                                        // ROM[06964]
M = D                                        // ROM[06965]
// ---------------------------
// Push RA
@ Main.main:8                                // ROM[06966]
D = A                                        // ROM[06967]
// ---------------------------
// push D
@ SP                                         // ROM[06968]
AM = M+1                                     // ROM[06969]
A = A-1                                      // ROM[06970]
M = D                                        // ROM[06971]
// ---------------------------
// call
@ Main.main:9                                // ROM[06972]
D = A                                        // ROM[06973]
@ R15                                        // ROM[06974]
M = D                                        // ROM[06975]
@ :call                                      // ROM[06976]
0; JMP                                       // ROM[06977]
( Main.main:9)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[06978]
0; JMP                                       // ROM[06979]
// ---------------------------
// ( RA )
( Main.main:8) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[06980]
D = A                                        // ROM[06981]
// ---------------------------
// push D
@ SP                                         // ROM[06982]
AM = M+1                                     // ROM[06983]
A = A-1                                      // ROM[06984]
M = D                                        // ROM[06985]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[06986]
D = A                                        // ROM[06987]
@ R13                                        // ROM[06988]
M = D                                        // ROM[06989]
// ---------------------------
// Push RA
@ Main.main:10                               // ROM[06990]
D = A                                        // ROM[06991]
// ---------------------------
// push D
@ SP                                         // ROM[06992]
AM = M+1                                     // ROM[06993]
A = A-1                                      // ROM[06994]
M = D                                        // ROM[06995]
// ---------------------------
// call
@ Main.main:11                               // ROM[06996]
D = A                                        // ROM[06997]
@ R15                                        // ROM[06998]
M = D                                        // ROM[06999]
@ :call                                      // ROM[07000]
0; JMP                                       // ROM[07001]
( Main.main:11)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07002]
0; JMP                                       // ROM[07003]
// ---------------------------
// ( RA )
( Main.main:10) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07004]
D = A                                        // ROM[07005]
// ---------------------------
// push D
@ SP                                         // ROM[07006]
AM = M+1                                     // ROM[07007]
A = A-1                                      // ROM[07008]
M = D                                        // ROM[07009]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07010]
D = A                                        // ROM[07011]
@ R13                                        // ROM[07012]
M = D                                        // ROM[07013]
// ---------------------------
// Push RA
@ Main.main:12                               // ROM[07014]
D = A                                        // ROM[07015]
// ---------------------------
// push D
@ SP                                         // ROM[07016]
AM = M+1                                     // ROM[07017]
A = A-1                                      // ROM[07018]
M = D                                        // ROM[07019]
// ---------------------------
// call
@ Main.main:13                               // ROM[07020]
D = A                                        // ROM[07021]
@ R15                                        // ROM[07022]
M = D                                        // ROM[07023]
@ :call                                      // ROM[07024]
0; JMP                                       // ROM[07025]
( Main.main:13)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07026]
0; JMP                                       // ROM[07027]
// ---------------------------
// ( RA )
( Main.main:12) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07028]
D = A                                        // ROM[07029]
// ---------------------------
// push D
@ SP                                         // ROM[07030]
AM = M+1                                     // ROM[07031]
A = A-1                                      // ROM[07032]
M = D                                        // ROM[07033]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07034]
D = A                                        // ROM[07035]
@ R13                                        // ROM[07036]
M = D                                        // ROM[07037]
// ---------------------------
// Push RA
@ Main.main:14                               // ROM[07038]
D = A                                        // ROM[07039]
// ---------------------------
// push D
@ SP                                         // ROM[07040]
AM = M+1                                     // ROM[07041]
A = A-1                                      // ROM[07042]
M = D                                        // ROM[07043]
// ---------------------------
// call
@ Main.main:15                               // ROM[07044]
D = A                                        // ROM[07045]
@ R15                                        // ROM[07046]
M = D                                        // ROM[07047]
@ :call                                      // ROM[07048]
0; JMP                                       // ROM[07049]
( Main.main:15)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07050]
0; JMP                                       // ROM[07051]
// ---------------------------
// ( RA )
( Main.main:14) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07052]
D = A                                        // ROM[07053]
// ---------------------------
// push D
@ SP                                         // ROM[07054]
AM = M+1                                     // ROM[07055]
A = A-1                                      // ROM[07056]
M = D                                        // ROM[07057]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07058]
D = A                                        // ROM[07059]
@ R13                                        // ROM[07060]
M = D                                        // ROM[07061]
// ---------------------------
// Push RA
@ Main.main:16                               // ROM[07062]
D = A                                        // ROM[07063]
// ---------------------------
// push D
@ SP                                         // ROM[07064]
AM = M+1                                     // ROM[07065]
A = A-1                                      // ROM[07066]
M = D                                        // ROM[07067]
// ---------------------------
// call
@ Main.main:17                               // ROM[07068]
D = A                                        // ROM[07069]
@ R15                                        // ROM[07070]
M = D                                        // ROM[07071]
@ :call                                      // ROM[07072]
0; JMP                                       // ROM[07073]
( Main.main:17)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07074]
0; JMP                                       // ROM[07075]
// ---------------------------
// ( RA )
( Main.main:16) 

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[07076]
D = A                                        // ROM[07077]
// ---------------------------
// push D
@ SP                                         // ROM[07078]
AM = M+1                                     // ROM[07079]
A = A-1                                      // ROM[07080]
M = D                                        // ROM[07081]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07082]
D = A                                        // ROM[07083]
@ R13                                        // ROM[07084]
M = D                                        // ROM[07085]
// ---------------------------
// Push RA
@ Main.main:18                               // ROM[07086]
D = A                                        // ROM[07087]
// ---------------------------
// push D
@ SP                                         // ROM[07088]
AM = M+1                                     // ROM[07089]
A = A-1                                      // ROM[07090]
M = D                                        // ROM[07091]
// ---------------------------
// call
@ Main.main:19                               // ROM[07092]
D = A                                        // ROM[07093]
@ R15                                        // ROM[07094]
M = D                                        // ROM[07095]
@ :call                                      // ROM[07096]
0; JMP                                       // ROM[07097]
( Main.main:19)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07098]
0; JMP                                       // ROM[07099]
// ---------------------------
// ( RA )
( Main.main:18) 

// -------------------------------------
// PUSH: <constant, 82>
// -------------------------------------
@ 82                                         // ROM[07100]
D = A                                        // ROM[07101]
// ---------------------------
// push D
@ SP                                         // ROM[07102]
AM = M+1                                     // ROM[07103]
A = A-1                                      // ROM[07104]
M = D                                        // ROM[07105]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07106]
D = A                                        // ROM[07107]
@ R13                                        // ROM[07108]
M = D                                        // ROM[07109]
// ---------------------------
// Push RA
@ Main.main:20                               // ROM[07110]
D = A                                        // ROM[07111]
// ---------------------------
// push D
@ SP                                         // ROM[07112]
AM = M+1                                     // ROM[07113]
A = A-1                                      // ROM[07114]
M = D                                        // ROM[07115]
// ---------------------------
// call
@ Main.main:21                               // ROM[07116]
D = A                                        // ROM[07117]
@ R15                                        // ROM[07118]
M = D                                        // ROM[07119]
@ :call                                      // ROM[07120]
0; JMP                                       // ROM[07121]
( Main.main:21)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07122]
0; JMP                                       // ROM[07123]
// ---------------------------
// ( RA )
( Main.main:20) 

// -------------------------------------
// PUSH: <constant, 117>
// -------------------------------------
@ 117                                        // ROM[07124]
D = A                                        // ROM[07125]
// ---------------------------
// push D
@ SP                                         // ROM[07126]
AM = M+1                                     // ROM[07127]
A = A-1                                      // ROM[07128]
M = D                                        // ROM[07129]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07130]
D = A                                        // ROM[07131]
@ R13                                        // ROM[07132]
M = D                                        // ROM[07133]
// ---------------------------
// Push RA
@ Main.main:22                               // ROM[07134]
D = A                                        // ROM[07135]
// ---------------------------
// push D
@ SP                                         // ROM[07136]
AM = M+1                                     // ROM[07137]
A = A-1                                      // ROM[07138]
M = D                                        // ROM[07139]
// ---------------------------
// call
@ Main.main:23                               // ROM[07140]
D = A                                        // ROM[07141]
@ R15                                        // ROM[07142]
M = D                                        // ROM[07143]
@ :call                                      // ROM[07144]
0; JMP                                       // ROM[07145]
( Main.main:23)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07146]
0; JMP                                       // ROM[07147]
// ---------------------------
// ( RA )
( Main.main:22) 

// -------------------------------------
// PUSH: <constant, 110>
// -------------------------------------
@ 110                                        // ROM[07148]
D = A                                        // ROM[07149]
// ---------------------------
// push D
@ SP                                         // ROM[07150]
AM = M+1                                     // ROM[07151]
A = A-1                                      // ROM[07152]
M = D                                        // ROM[07153]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07154]
D = A                                        // ROM[07155]
@ R13                                        // ROM[07156]
M = D                                        // ROM[07157]
// ---------------------------
// Push RA
@ Main.main:24                               // ROM[07158]
D = A                                        // ROM[07159]
// ---------------------------
// push D
@ SP                                         // ROM[07160]
AM = M+1                                     // ROM[07161]
A = A-1                                      // ROM[07162]
M = D                                        // ROM[07163]
// ---------------------------
// call
@ Main.main:25                               // ROM[07164]
D = A                                        // ROM[07165]
@ R15                                        // ROM[07166]
M = D                                        // ROM[07167]
@ :call                                      // ROM[07168]
0; JMP                                       // ROM[07169]
( Main.main:25)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07170]
0; JMP                                       // ROM[07171]
// ---------------------------
// ( RA )
( Main.main:24) 

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[07172]
D = A                                        // ROM[07173]
// ---------------------------
// push D
@ SP                                         // ROM[07174]
AM = M+1                                     // ROM[07175]
A = A-1                                      // ROM[07176]
M = D                                        // ROM[07177]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07178]
D = A                                        // ROM[07179]
@ R13                                        // ROM[07180]
M = D                                        // ROM[07181]
// ---------------------------
// Push RA
@ Main.main:26                               // ROM[07182]
D = A                                        // ROM[07183]
// ---------------------------
// push D
@ SP                                         // ROM[07184]
AM = M+1                                     // ROM[07185]
A = A-1                                      // ROM[07186]
M = D                                        // ROM[07187]
// ---------------------------
// call
@ Main.main:27                               // ROM[07188]
D = A                                        // ROM[07189]
@ R15                                        // ROM[07190]
M = D                                        // ROM[07191]
@ :call                                      // ROM[07192]
0; JMP                                       // ROM[07193]
( Main.main:27)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07194]
0; JMP                                       // ROM[07195]
// ---------------------------
// ( RA )
( Main.main:26) 

// -------------------------------------
// PUSH: <constant, 99>
// -------------------------------------
@ 99                                         // ROM[07196]
D = A                                        // ROM[07197]
// ---------------------------
// push D
@ SP                                         // ROM[07198]
AM = M+1                                     // ROM[07199]
A = A-1                                      // ROM[07200]
M = D                                        // ROM[07201]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07202]
D = A                                        // ROM[07203]
@ R13                                        // ROM[07204]
M = D                                        // ROM[07205]
// ---------------------------
// Push RA
@ Main.main:28                               // ROM[07206]
D = A                                        // ROM[07207]
// ---------------------------
// push D
@ SP                                         // ROM[07208]
AM = M+1                                     // ROM[07209]
A = A-1                                      // ROM[07210]
M = D                                        // ROM[07211]
// ---------------------------
// call
@ Main.main:29                               // ROM[07212]
D = A                                        // ROM[07213]
@ R15                                        // ROM[07214]
M = D                                        // ROM[07215]
@ :call                                      // ROM[07216]
0; JMP                                       // ROM[07217]
( Main.main:29)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07218]
0; JMP                                       // ROM[07219]
// ---------------------------
// ( RA )
( Main.main:28) 

// -------------------------------------
// PUSH: <constant, 111>
// -------------------------------------
@ 111                                        // ROM[07220]
D = A                                        // ROM[07221]
// ---------------------------
// push D
@ SP                                         // ROM[07222]
AM = M+1                                     // ROM[07223]
A = A-1                                      // ROM[07224]
M = D                                        // ROM[07225]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07226]
D = A                                        // ROM[07227]
@ R13                                        // ROM[07228]
M = D                                        // ROM[07229]
// ---------------------------
// Push RA
@ Main.main:30                               // ROM[07230]
D = A                                        // ROM[07231]
// ---------------------------
// push D
@ SP                                         // ROM[07232]
AM = M+1                                     // ROM[07233]
A = A-1                                      // ROM[07234]
M = D                                        // ROM[07235]
// ---------------------------
// call
@ Main.main:31                               // ROM[07236]
D = A                                        // ROM[07237]
@ R15                                        // ROM[07238]
M = D                                        // ROM[07239]
@ :call                                      // ROM[07240]
0; JMP                                       // ROM[07241]
( Main.main:31)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07242]
0; JMP                                       // ROM[07243]
// ---------------------------
// ( RA )
( Main.main:30) 

// -------------------------------------
// PUSH: <constant, 109>
// -------------------------------------
@ 109                                        // ROM[07244]
D = A                                        // ROM[07245]
// ---------------------------
// push D
@ SP                                         // ROM[07246]
AM = M+1                                     // ROM[07247]
A = A-1                                      // ROM[07248]
M = D                                        // ROM[07249]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07250]
D = A                                        // ROM[07251]
@ R13                                        // ROM[07252]
M = D                                        // ROM[07253]
// ---------------------------
// Push RA
@ Main.main:32                               // ROM[07254]
D = A                                        // ROM[07255]
// ---------------------------
// push D
@ SP                                         // ROM[07256]
AM = M+1                                     // ROM[07257]
A = A-1                                      // ROM[07258]
M = D                                        // ROM[07259]
// ---------------------------
// call
@ Main.main:33                               // ROM[07260]
D = A                                        // ROM[07261]
@ R15                                        // ROM[07262]
M = D                                        // ROM[07263]
@ :call                                      // ROM[07264]
0; JMP                                       // ROM[07265]
( Main.main:33)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07266]
0; JMP                                       // ROM[07267]
// ---------------------------
// ( RA )
( Main.main:32) 

// -------------------------------------
// PUSH: <constant, 109>
// -------------------------------------
@ 109                                        // ROM[07268]
D = A                                        // ROM[07269]
// ---------------------------
// push D
@ SP                                         // ROM[07270]
AM = M+1                                     // ROM[07271]
A = A-1                                      // ROM[07272]
M = D                                        // ROM[07273]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07274]
D = A                                        // ROM[07275]
@ R13                                        // ROM[07276]
M = D                                        // ROM[07277]
// ---------------------------
// Push RA
@ Main.main:34                               // ROM[07278]
D = A                                        // ROM[07279]
// ---------------------------
// push D
@ SP                                         // ROM[07280]
AM = M+1                                     // ROM[07281]
A = A-1                                      // ROM[07282]
M = D                                        // ROM[07283]
// ---------------------------
// call
@ Main.main:35                               // ROM[07284]
D = A                                        // ROM[07285]
@ R15                                        // ROM[07286]
M = D                                        // ROM[07287]
@ :call                                      // ROM[07288]
0; JMP                                       // ROM[07289]
( Main.main:35)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07290]
0; JMP                                       // ROM[07291]
// ---------------------------
// ( RA )
( Main.main:34) 

// -------------------------------------
// PUSH: <constant, 101>
// -------------------------------------
@ 101                                        // ROM[07292]
D = A                                        // ROM[07293]
// ---------------------------
// push D
@ SP                                         // ROM[07294]
AM = M+1                                     // ROM[07295]
A = A-1                                      // ROM[07296]
M = D                                        // ROM[07297]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07298]
D = A                                        // ROM[07299]
@ R13                                        // ROM[07300]
M = D                                        // ROM[07301]
// ---------------------------
// Push RA
@ Main.main:36                               // ROM[07302]
D = A                                        // ROM[07303]
// ---------------------------
// push D
@ SP                                         // ROM[07304]
AM = M+1                                     // ROM[07305]
A = A-1                                      // ROM[07306]
M = D                                        // ROM[07307]
// ---------------------------
// call
@ Main.main:37                               // ROM[07308]
D = A                                        // ROM[07309]
@ R15                                        // ROM[07310]
M = D                                        // ROM[07311]
@ :call                                      // ROM[07312]
0; JMP                                       // ROM[07313]
( Main.main:37)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07314]
0; JMP                                       // ROM[07315]
// ---------------------------
// ( RA )
( Main.main:36) 

// -------------------------------------
// PUSH: <constant, 110>
// -------------------------------------
@ 110                                        // ROM[07316]
D = A                                        // ROM[07317]
// ---------------------------
// push D
@ SP                                         // ROM[07318]
AM = M+1                                     // ROM[07319]
A = A-1                                      // ROM[07320]
M = D                                        // ROM[07321]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07322]
D = A                                        // ROM[07323]
@ R13                                        // ROM[07324]
M = D                                        // ROM[07325]
// ---------------------------
// Push RA
@ Main.main:38                               // ROM[07326]
D = A                                        // ROM[07327]
// ---------------------------
// push D
@ SP                                         // ROM[07328]
AM = M+1                                     // ROM[07329]
A = A-1                                      // ROM[07330]
M = D                                        // ROM[07331]
// ---------------------------
// call
@ Main.main:39                               // ROM[07332]
D = A                                        // ROM[07333]
@ R15                                        // ROM[07334]
M = D                                        // ROM[07335]
@ :call                                      // ROM[07336]
0; JMP                                       // ROM[07337]
( Main.main:39)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07338]
0; JMP                                       // ROM[07339]
// ---------------------------
// ( RA )
( Main.main:38) 

// -------------------------------------
// PUSH: <constant, 99>
// -------------------------------------
@ 99                                         // ROM[07340]
D = A                                        // ROM[07341]
// ---------------------------
// push D
@ SP                                         // ROM[07342]
AM = M+1                                     // ROM[07343]
A = A-1                                      // ROM[07344]
M = D                                        // ROM[07345]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07346]
D = A                                        // ROM[07347]
@ R13                                        // ROM[07348]
M = D                                        // ROM[07349]
// ---------------------------
// Push RA
@ Main.main:40                               // ROM[07350]
D = A                                        // ROM[07351]
// ---------------------------
// push D
@ SP                                         // ROM[07352]
AM = M+1                                     // ROM[07353]
A = A-1                                      // ROM[07354]
M = D                                        // ROM[07355]
// ---------------------------
// call
@ Main.main:41                               // ROM[07356]
D = A                                        // ROM[07357]
@ R15                                        // ROM[07358]
M = D                                        // ROM[07359]
@ :call                                      // ROM[07360]
0; JMP                                       // ROM[07361]
( Main.main:41)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07362]
0; JMP                                       // ROM[07363]
// ---------------------------
// ( RA )
( Main.main:40) 

// -------------------------------------
// PUSH: <constant, 105>
// -------------------------------------
@ 105                                        // ROM[07364]
D = A                                        // ROM[07365]
// ---------------------------
// push D
@ SP                                         // ROM[07366]
AM = M+1                                     // ROM[07367]
A = A-1                                      // ROM[07368]
M = D                                        // ROM[07369]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07370]
D = A                                        // ROM[07371]
@ R13                                        // ROM[07372]
M = D                                        // ROM[07373]
// ---------------------------
// Push RA
@ Main.main:42                               // ROM[07374]
D = A                                        // ROM[07375]
// ---------------------------
// push D
@ SP                                         // ROM[07376]
AM = M+1                                     // ROM[07377]
A = A-1                                      // ROM[07378]
M = D                                        // ROM[07379]
// ---------------------------
// call
@ Main.main:43                               // ROM[07380]
D = A                                        // ROM[07381]
@ R15                                        // ROM[07382]
M = D                                        // ROM[07383]
@ :call                                      // ROM[07384]
0; JMP                                       // ROM[07385]
( Main.main:43)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07386]
0; JMP                                       // ROM[07387]
// ---------------------------
// ( RA )
( Main.main:42) 

// -------------------------------------
// PUSH: <constant, 110>
// -------------------------------------
@ 110                                        // ROM[07388]
D = A                                        // ROM[07389]
// ---------------------------
// push D
@ SP                                         // ROM[07390]
AM = M+1                                     // ROM[07391]
A = A-1                                      // ROM[07392]
M = D                                        // ROM[07393]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07394]
D = A                                        // ROM[07395]
@ R13                                        // ROM[07396]
M = D                                        // ROM[07397]
// ---------------------------
// Push RA
@ Main.main:44                               // ROM[07398]
D = A                                        // ROM[07399]
// ---------------------------
// push D
@ SP                                         // ROM[07400]
AM = M+1                                     // ROM[07401]
A = A-1                                      // ROM[07402]
M = D                                        // ROM[07403]
// ---------------------------
// call
@ Main.main:45                               // ROM[07404]
D = A                                        // ROM[07405]
@ R15                                        // ROM[07406]
M = D                                        // ROM[07407]
@ :call                                      // ROM[07408]
0; JMP                                       // ROM[07409]
( Main.main:45)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07410]
0; JMP                                       // ROM[07411]
// ---------------------------
// ( RA )
( Main.main:44) 

// -------------------------------------
// PUSH: <constant, 103>
// -------------------------------------
@ 103                                        // ROM[07412]
D = A                                        // ROM[07413]
// ---------------------------
// push D
@ SP                                         // ROM[07414]
AM = M+1                                     // ROM[07415]
A = A-1                                      // ROM[07416]
M = D                                        // ROM[07417]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07418]
D = A                                        // ROM[07419]
@ R13                                        // ROM[07420]
M = D                                        // ROM[07421]
// ---------------------------
// Push RA
@ Main.main:46                               // ROM[07422]
D = A                                        // ROM[07423]
// ---------------------------
// push D
@ SP                                         // ROM[07424]
AM = M+1                                     // ROM[07425]
A = A-1                                      // ROM[07426]
M = D                                        // ROM[07427]
// ---------------------------
// call
@ Main.main:47                               // ROM[07428]
D = A                                        // ROM[07429]
@ R15                                        // ROM[07430]
M = D                                        // ROM[07431]
@ :call                                      // ROM[07432]
0; JMP                                       // ROM[07433]
( Main.main:47)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07434]
0; JMP                                       // ROM[07435]
// ---------------------------
// ( RA )
( Main.main:46) 

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[07436]
D = A                                        // ROM[07437]
// ---------------------------
// push D
@ SP                                         // ROM[07438]
AM = M+1                                     // ROM[07439]
A = A-1                                      // ROM[07440]
M = D                                        // ROM[07441]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07442]
D = A                                        // ROM[07443]
@ R13                                        // ROM[07444]
M = D                                        // ROM[07445]
// ---------------------------
// Push RA
@ Main.main:48                               // ROM[07446]
D = A                                        // ROM[07447]
// ---------------------------
// push D
@ SP                                         // ROM[07448]
AM = M+1                                     // ROM[07449]
A = A-1                                      // ROM[07450]
M = D                                        // ROM[07451]
// ---------------------------
// call
@ Main.main:49                               // ROM[07452]
D = A                                        // ROM[07453]
@ R15                                        // ROM[07454]
M = D                                        // ROM[07455]
@ :call                                      // ROM[07456]
0; JMP                                       // ROM[07457]
( Main.main:49)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07458]
0; JMP                                       // ROM[07459]
// ---------------------------
// ( RA )
( Main.main:48) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07460]
D = A                                        // ROM[07461]
// ---------------------------
// push D
@ SP                                         // ROM[07462]
AM = M+1                                     // ROM[07463]
A = A-1                                      // ROM[07464]
M = D                                        // ROM[07465]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07466]
D = A                                        // ROM[07467]
@ R13                                        // ROM[07468]
M = D                                        // ROM[07469]
// ---------------------------
// Push RA
@ Main.main:50                               // ROM[07470]
D = A                                        // ROM[07471]
// ---------------------------
// push D
@ SP                                         // ROM[07472]
AM = M+1                                     // ROM[07473]
A = A-1                                      // ROM[07474]
M = D                                        // ROM[07475]
// ---------------------------
// call
@ Main.main:51                               // ROM[07476]
D = A                                        // ROM[07477]
@ R15                                        // ROM[07478]
M = D                                        // ROM[07479]
@ :call                                      // ROM[07480]
0; JMP                                       // ROM[07481]
( Main.main:51)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07482]
0; JMP                                       // ROM[07483]
// ---------------------------
// ( RA )
( Main.main:50) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07484]
D = A                                        // ROM[07485]
// ---------------------------
// push D
@ SP                                         // ROM[07486]
AM = M+1                                     // ROM[07487]
A = A-1                                      // ROM[07488]
M = D                                        // ROM[07489]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07490]
D = A                                        // ROM[07491]
@ R13                                        // ROM[07492]
M = D                                        // ROM[07493]
// ---------------------------
// Push RA
@ Main.main:52                               // ROM[07494]
D = A                                        // ROM[07495]
// ---------------------------
// push D
@ SP                                         // ROM[07496]
AM = M+1                                     // ROM[07497]
A = A-1                                      // ROM[07498]
M = D                                        // ROM[07499]
// ---------------------------
// call
@ Main.main:53                               // ROM[07500]
D = A                                        // ROM[07501]
@ R15                                        // ROM[07502]
M = D                                        // ROM[07503]
@ :call                                      // ROM[07504]
0; JMP                                       // ROM[07505]
( Main.main:53)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07506]
0; JMP                                       // ROM[07507]
// ---------------------------
// ( RA )
( Main.main:52) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07508]
D = A                                        // ROM[07509]
// ---------------------------
// push D
@ SP                                         // ROM[07510]
AM = M+1                                     // ROM[07511]
A = A-1                                      // ROM[07512]
M = D                                        // ROM[07513]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07514]
D = A                                        // ROM[07515]
@ R13                                        // ROM[07516]
M = D                                        // ROM[07517]
// ---------------------------
// Push RA
@ Main.main:54                               // ROM[07518]
D = A                                        // ROM[07519]
// ---------------------------
// push D
@ SP                                         // ROM[07520]
AM = M+1                                     // ROM[07521]
A = A-1                                      // ROM[07522]
M = D                                        // ROM[07523]
// ---------------------------
// call
@ Main.main:55                               // ROM[07524]
D = A                                        // ROM[07525]
@ R15                                        // ROM[07526]
M = D                                        // ROM[07527]
@ :call                                      // ROM[07528]
0; JMP                                       // ROM[07529]
( Main.main:55)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07530]
0; JMP                                       // ROM[07531]
// ---------------------------
// ( RA )
( Main.main:54) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07532]
D = A                                        // ROM[07533]
// ---------------------------
// push D
@ SP                                         // ROM[07534]
AM = M+1                                     // ROM[07535]
A = A-1                                      // ROM[07536]
M = D                                        // ROM[07537]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07538]
D = A                                        // ROM[07539]
@ R13                                        // ROM[07540]
M = D                                        // ROM[07541]
// ---------------------------
// Push RA
@ Main.main:56                               // ROM[07542]
D = A                                        // ROM[07543]
// ---------------------------
// push D
@ SP                                         // ROM[07544]
AM = M+1                                     // ROM[07545]
A = A-1                                      // ROM[07546]
M = D                                        // ROM[07547]
// ---------------------------
// call
@ Main.main:57                               // ROM[07548]
D = A                                        // ROM[07549]
@ R15                                        // ROM[07550]
M = D                                        // ROM[07551]
@ :call                                      // ROM[07552]
0; JMP                                       // ROM[07553]
( Main.main:57)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07554]
0; JMP                                       // ROM[07555]
// ---------------------------
// ( RA )
( Main.main:56) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07556]
D = A                                        // ROM[07557]
// ---------------------------
// push D
@ SP                                         // ROM[07558]
AM = M+1                                     // ROM[07559]
A = A-1                                      // ROM[07560]
M = D                                        // ROM[07561]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07562]
D = A                                        // ROM[07563]
@ R13                                        // ROM[07564]
M = D                                        // ROM[07565]
// ---------------------------
// Push RA
@ Main.main:58                               // ROM[07566]
D = A                                        // ROM[07567]
// ---------------------------
// push D
@ SP                                         // ROM[07568]
AM = M+1                                     // ROM[07569]
A = A-1                                      // ROM[07570]
M = D                                        // ROM[07571]
// ---------------------------
// call
@ Main.main:59                               // ROM[07572]
D = A                                        // ROM[07573]
@ R15                                        // ROM[07574]
M = D                                        // ROM[07575]
@ :call                                      // ROM[07576]
0; JMP                                       // ROM[07577]
( Main.main:59)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07578]
0; JMP                                       // ROM[07579]
// ---------------------------
// ( RA )
( Main.main:58) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07580]
D = A                                        // ROM[07581]
// ---------------------------
// push D
@ SP                                         // ROM[07582]
AM = M+1                                     // ROM[07583]
A = A-1                                      // ROM[07584]
M = D                                        // ROM[07585]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07586]
D = A                                        // ROM[07587]
@ R13                                        // ROM[07588]
M = D                                        // ROM[07589]
// ---------------------------
// Push RA
@ Main.main:60                               // ROM[07590]
D = A                                        // ROM[07591]
// ---------------------------
// push D
@ SP                                         // ROM[07592]
AM = M+1                                     // ROM[07593]
A = A-1                                      // ROM[07594]
M = D                                        // ROM[07595]
// ---------------------------
// call
@ Main.main:61                               // ROM[07596]
D = A                                        // ROM[07597]
@ R15                                        // ROM[07598]
M = D                                        // ROM[07599]
@ :call                                      // ROM[07600]
0; JMP                                       // ROM[07601]
( Main.main:61)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07602]
0; JMP                                       // ROM[07603]
// ---------------------------
// ( RA )
( Main.main:60) 

// -------------------------------------
// CALL: Main.message(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[07604]
D = A                                        // ROM[07605]
@ R13                                        // ROM[07606]
M = D                                        // ROM[07607]
// ---------------------------
// Push RA
@ Main.main:62                               // ROM[07608]
D = A                                        // ROM[07609]
// ---------------------------
// push D
@ SP                                         // ROM[07610]
AM = M+1                                     // ROM[07611]
A = A-1                                      // ROM[07612]
M = D                                        // ROM[07613]
// ---------------------------
// call
@ Main.main:63                               // ROM[07614]
D = A                                        // ROM[07615]
@ R15                                        // ROM[07616]
M = D                                        // ROM[07617]
@ :call                                      // ROM[07618]
0; JMP                                       // ROM[07619]
( Main.main:63)
// ---------------------------
// goto functionName
@ Main.message                               // ROM[07620]
0; JMP                                       // ROM[07621]
// ---------------------------
// ( RA )
( Main.main:62) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[07622]
AM = M-1                                     // ROM[07623]
D = M                                        // ROM[07624]
// ---------------------------
@ 5                                          // ROM[07625]
M = D                                        // ROM[07626]

// -------------------------------------
// PUSH: <constant, 4>
// -------------------------------------
@ 4                                          // ROM[07627]
D = A                                        // ROM[07628]
// ---------------------------
// push D
@ SP                                         // ROM[07629]
AM = M+1                                     // ROM[07630]
A = A-1                                      // ROM[07631]
M = D                                        // ROM[07632]

// -------------------------------------
// PUSH: <constant, 7>
// -------------------------------------
@ 7                                          // ROM[07633]
D = A                                        // ROM[07634]
// ---------------------------
// push D
@ SP                                         // ROM[07635]
AM = M+1                                     // ROM[07636]
A = A-1                                      // ROM[07637]
M = D                                        // ROM[07638]

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[07639]
D = A                                        // ROM[07640]
// ---------------------------
// push D
@ SP                                         // ROM[07641]
AM = M+1                                     // ROM[07642]
A = A-1                                      // ROM[07643]
M = D                                        // ROM[07644]

// -------------------------------------
// PUSH: <constant, 5>
// -------------------------------------
@ 5                                          // ROM[07645]
D = A                                        // ROM[07646]
// ---------------------------
// push D
@ SP                                         // ROM[07647]
AM = M+1                                     // ROM[07648]
A = A-1                                      // ROM[07649]
M = D                                        // ROM[07650]

// -------------------------------------
// CALL: Map.new(4 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 4                                          // ROM[07651]
D = A                                        // ROM[07652]
@ R13                                        // ROM[07653]
M = D                                        // ROM[07654]
// ---------------------------
// Push RA
@ Main.main:64                               // ROM[07655]
D = A                                        // ROM[07656]
// ---------------------------
// push D
@ SP                                         // ROM[07657]
AM = M+1                                     // ROM[07658]
A = A-1                                      // ROM[07659]
M = D                                        // ROM[07660]
// ---------------------------
// call
@ Main.main:65                               // ROM[07661]
D = A                                        // ROM[07662]
@ R15                                        // ROM[07663]
M = D                                        // ROM[07664]
@ :call                                      // ROM[07665]
0; JMP                                       // ROM[07666]
( Main.main:65)
// ---------------------------
// goto functionName
@ Map.new                                    // ROM[07667]
0; JMP                                       // ROM[07668]
// ---------------------------
// ( RA )
( Main.main:64) 

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[07669]
D = A                                        // ROM[07670]
@ R13                                        // ROM[07671]
M = D                                        // ROM[07672]
// ---------------------------
// call
@ Main.main:66                               // ROM[07673]
D = A                                        // ROM[07674]
@ R15                                        // ROM[07675]
M = D                                        // ROM[07676]
@ :pop_local                                 // ROM[07677]
0; JMP                                       // ROM[07678]
( Main.main:66)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[07679]
D = A                                        // ROM[07680]
@ R13                                        // ROM[07681]
M = D                                        // ROM[07682]
// ---------------------------
// call
@ Main.main:67                               // ROM[07683]
D = A                                        // ROM[07684]
@ R15                                        // ROM[07685]
M = D                                        // ROM[07686]
@ :push_local                                // ROM[07687]
0; JMP                                       // ROM[07688]
( Main.main:67)

// -------------------------------------
// CALL: Map.draw(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[07689]
D = A                                        // ROM[07690]
@ R13                                        // ROM[07691]
M = D                                        // ROM[07692]
// ---------------------------
// Push RA
@ Main.main:68                               // ROM[07693]
D = A                                        // ROM[07694]
// ---------------------------
// push D
@ SP                                         // ROM[07695]
AM = M+1                                     // ROM[07696]
A = A-1                                      // ROM[07697]
M = D                                        // ROM[07698]
// ---------------------------
// call
@ Main.main:69                               // ROM[07699]
D = A                                        // ROM[07700]
@ R15                                        // ROM[07701]
M = D                                        // ROM[07702]
@ :call                                      // ROM[07703]
0; JMP                                       // ROM[07704]
( Main.main:69)
// ---------------------------
// goto functionName
@ Map.draw                                   // ROM[07705]
0; JMP                                       // ROM[07706]
// ---------------------------
// ( RA )
( Main.main:68) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[07707]
AM = M-1                                     // ROM[07708]
D = M                                        // ROM[07709]
// ---------------------------
@ 5                                          // ROM[07710]
M = D                                        // ROM[07711]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[07712]
D = A                                        // ROM[07713]
@ R13                                        // ROM[07714]
M = D                                        // ROM[07715]
// ---------------------------
// call
@ Main.main:70                               // ROM[07716]
D = A                                        // ROM[07717]
@ R15                                        // ROM[07718]
M = D                                        // ROM[07719]
@ :push_local                                // ROM[07720]
0; JMP                                       // ROM[07721]
( Main.main:70)

// -------------------------------------
// CALL: Map.dispose(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[07722]
D = A                                        // ROM[07723]
@ R13                                        // ROM[07724]
M = D                                        // ROM[07725]
// ---------------------------
// Push RA
@ Main.main:71                               // ROM[07726]
D = A                                        // ROM[07727]
// ---------------------------
// push D
@ SP                                         // ROM[07728]
AM = M+1                                     // ROM[07729]
A = A-1                                      // ROM[07730]
M = D                                        // ROM[07731]
// ---------------------------
// call
@ Main.main:72                               // ROM[07732]
D = A                                        // ROM[07733]
@ R15                                        // ROM[07734]
M = D                                        // ROM[07735]
@ :call                                      // ROM[07736]
0; JMP                                       // ROM[07737]
( Main.main:72)
// ---------------------------
// goto functionName
@ Map.dispose                                // ROM[07738]
0; JMP                                       // ROM[07739]
// ---------------------------
// ( RA )
( Main.main:71) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[07740]
AM = M-1                                     // ROM[07741]
D = M                                        // ROM[07742]
// ---------------------------
@ 5                                          // ROM[07743]
M = D                                        // ROM[07744]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[07745]
D = A                                        // ROM[07746]
// ---------------------------
// push D
@ SP                                         // ROM[07747]
AM = M+1                                     // ROM[07748]
A = A-1                                      // ROM[07749]
M = D                                        // ROM[07750]

// -------------------------------------
// CALL: String.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[07751]
D = A                                        // ROM[07752]
@ R13                                        // ROM[07753]
M = D                                        // ROM[07754]
// ---------------------------
// Push RA
@ Main.main:73                               // ROM[07755]
D = A                                        // ROM[07756]
// ---------------------------
// push D
@ SP                                         // ROM[07757]
AM = M+1                                     // ROM[07758]
A = A-1                                      // ROM[07759]
M = D                                        // ROM[07760]
// ---------------------------
// call
@ Main.main:74                               // ROM[07761]
D = A                                        // ROM[07762]
@ R15                                        // ROM[07763]
M = D                                        // ROM[07764]
@ :call                                      // ROM[07765]
0; JMP                                       // ROM[07766]
( Main.main:74)
// ---------------------------
// goto functionName
@ String.new                                 // ROM[07767]
0; JMP                                       // ROM[07768]
// ---------------------------
// ( RA )
( Main.main:73) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07769]
D = A                                        // ROM[07770]
// ---------------------------
// push D
@ SP                                         // ROM[07771]
AM = M+1                                     // ROM[07772]
A = A-1                                      // ROM[07773]
M = D                                        // ROM[07774]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07775]
D = A                                        // ROM[07776]
@ R13                                        // ROM[07777]
M = D                                        // ROM[07778]
// ---------------------------
// Push RA
@ Main.main:75                               // ROM[07779]
D = A                                        // ROM[07780]
// ---------------------------
// push D
@ SP                                         // ROM[07781]
AM = M+1                                     // ROM[07782]
A = A-1                                      // ROM[07783]
M = D                                        // ROM[07784]
// ---------------------------
// call
@ Main.main:76                               // ROM[07785]
D = A                                        // ROM[07786]
@ R15                                        // ROM[07787]
M = D                                        // ROM[07788]
@ :call                                      // ROM[07789]
0; JMP                                       // ROM[07790]
( Main.main:76)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07791]
0; JMP                                       // ROM[07792]
// ---------------------------
// ( RA )
( Main.main:75) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07793]
D = A                                        // ROM[07794]
// ---------------------------
// push D
@ SP                                         // ROM[07795]
AM = M+1                                     // ROM[07796]
A = A-1                                      // ROM[07797]
M = D                                        // ROM[07798]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07799]
D = A                                        // ROM[07800]
@ R13                                        // ROM[07801]
M = D                                        // ROM[07802]
// ---------------------------
// Push RA
@ Main.main:77                               // ROM[07803]
D = A                                        // ROM[07804]
// ---------------------------
// push D
@ SP                                         // ROM[07805]
AM = M+1                                     // ROM[07806]
A = A-1                                      // ROM[07807]
M = D                                        // ROM[07808]
// ---------------------------
// call
@ Main.main:78                               // ROM[07809]
D = A                                        // ROM[07810]
@ R15                                        // ROM[07811]
M = D                                        // ROM[07812]
@ :call                                      // ROM[07813]
0; JMP                                       // ROM[07814]
( Main.main:78)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07815]
0; JMP                                       // ROM[07816]
// ---------------------------
// ( RA )
( Main.main:77) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[07817]
D = A                                        // ROM[07818]
// ---------------------------
// push D
@ SP                                         // ROM[07819]
AM = M+1                                     // ROM[07820]
A = A-1                                      // ROM[07821]
M = D                                        // ROM[07822]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07823]
D = A                                        // ROM[07824]
@ R13                                        // ROM[07825]
M = D                                        // ROM[07826]
// ---------------------------
// Push RA
@ Main.main:79                               // ROM[07827]
D = A                                        // ROM[07828]
// ---------------------------
// push D
@ SP                                         // ROM[07829]
AM = M+1                                     // ROM[07830]
A = A-1                                      // ROM[07831]
M = D                                        // ROM[07832]
// ---------------------------
// call
@ Main.main:80                               // ROM[07833]
D = A                                        // ROM[07834]
@ R15                                        // ROM[07835]
M = D                                        // ROM[07836]
@ :call                                      // ROM[07837]
0; JMP                                       // ROM[07838]
( Main.main:80)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07839]
0; JMP                                       // ROM[07840]
// ---------------------------
// ( RA )
( Main.main:79) 

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[07841]
D = A                                        // ROM[07842]
// ---------------------------
// push D
@ SP                                         // ROM[07843]
AM = M+1                                     // ROM[07844]
A = A-1                                      // ROM[07845]
M = D                                        // ROM[07846]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07847]
D = A                                        // ROM[07848]
@ R13                                        // ROM[07849]
M = D                                        // ROM[07850]
// ---------------------------
// Push RA
@ Main.main:81                               // ROM[07851]
D = A                                        // ROM[07852]
// ---------------------------
// push D
@ SP                                         // ROM[07853]
AM = M+1                                     // ROM[07854]
A = A-1                                      // ROM[07855]
M = D                                        // ROM[07856]
// ---------------------------
// call
@ Main.main:82                               // ROM[07857]
D = A                                        // ROM[07858]
@ R15                                        // ROM[07859]
M = D                                        // ROM[07860]
@ :call                                      // ROM[07861]
0; JMP                                       // ROM[07862]
( Main.main:82)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07863]
0; JMP                                       // ROM[07864]
// ---------------------------
// ( RA )
( Main.main:81) 

// -------------------------------------
// PUSH: <constant, 83>
// -------------------------------------
@ 83                                         // ROM[07865]
D = A                                        // ROM[07866]
// ---------------------------
// push D
@ SP                                         // ROM[07867]
AM = M+1                                     // ROM[07868]
A = A-1                                      // ROM[07869]
M = D                                        // ROM[07870]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07871]
D = A                                        // ROM[07872]
@ R13                                        // ROM[07873]
M = D                                        // ROM[07874]
// ---------------------------
// Push RA
@ Main.main:83                               // ROM[07875]
D = A                                        // ROM[07876]
// ---------------------------
// push D
@ SP                                         // ROM[07877]
AM = M+1                                     // ROM[07878]
A = A-1                                      // ROM[07879]
M = D                                        // ROM[07880]
// ---------------------------
// call
@ Main.main:84                               // ROM[07881]
D = A                                        // ROM[07882]
@ R15                                        // ROM[07883]
M = D                                        // ROM[07884]
@ :call                                      // ROM[07885]
0; JMP                                       // ROM[07886]
( Main.main:84)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07887]
0; JMP                                       // ROM[07888]
// ---------------------------
// ( RA )
( Main.main:83) 

// -------------------------------------
// PUSH: <constant, 112>
// -------------------------------------
@ 112                                        // ROM[07889]
D = A                                        // ROM[07890]
// ---------------------------
// push D
@ SP                                         // ROM[07891]
AM = M+1                                     // ROM[07892]
A = A-1                                      // ROM[07893]
M = D                                        // ROM[07894]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07895]
D = A                                        // ROM[07896]
@ R13                                        // ROM[07897]
M = D                                        // ROM[07898]
// ---------------------------
// Push RA
@ Main.main:85                               // ROM[07899]
D = A                                        // ROM[07900]
// ---------------------------
// push D
@ SP                                         // ROM[07901]
AM = M+1                                     // ROM[07902]
A = A-1                                      // ROM[07903]
M = D                                        // ROM[07904]
// ---------------------------
// call
@ Main.main:86                               // ROM[07905]
D = A                                        // ROM[07906]
@ R15                                        // ROM[07907]
M = D                                        // ROM[07908]
@ :call                                      // ROM[07909]
0; JMP                                       // ROM[07910]
( Main.main:86)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07911]
0; JMP                                       // ROM[07912]
// ---------------------------
// ( RA )
( Main.main:85) 

// -------------------------------------
// PUSH: <constant, 114>
// -------------------------------------
@ 114                                        // ROM[07913]
D = A                                        // ROM[07914]
// ---------------------------
// push D
@ SP                                         // ROM[07915]
AM = M+1                                     // ROM[07916]
A = A-1                                      // ROM[07917]
M = D                                        // ROM[07918]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07919]
D = A                                        // ROM[07920]
@ R13                                        // ROM[07921]
M = D                                        // ROM[07922]
// ---------------------------
// Push RA
@ Main.main:87                               // ROM[07923]
D = A                                        // ROM[07924]
// ---------------------------
// push D
@ SP                                         // ROM[07925]
AM = M+1                                     // ROM[07926]
A = A-1                                      // ROM[07927]
M = D                                        // ROM[07928]
// ---------------------------
// call
@ Main.main:88                               // ROM[07929]
D = A                                        // ROM[07930]
@ R15                                        // ROM[07931]
M = D                                        // ROM[07932]
@ :call                                      // ROM[07933]
0; JMP                                       // ROM[07934]
( Main.main:88)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07935]
0; JMP                                       // ROM[07936]
// ---------------------------
// ( RA )
( Main.main:87) 

// -------------------------------------
// PUSH: <constant, 105>
// -------------------------------------
@ 105                                        // ROM[07937]
D = A                                        // ROM[07938]
// ---------------------------
// push D
@ SP                                         // ROM[07939]
AM = M+1                                     // ROM[07940]
A = A-1                                      // ROM[07941]
M = D                                        // ROM[07942]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07943]
D = A                                        // ROM[07944]
@ R13                                        // ROM[07945]
M = D                                        // ROM[07946]
// ---------------------------
// Push RA
@ Main.main:89                               // ROM[07947]
D = A                                        // ROM[07948]
// ---------------------------
// push D
@ SP                                         // ROM[07949]
AM = M+1                                     // ROM[07950]
A = A-1                                      // ROM[07951]
M = D                                        // ROM[07952]
// ---------------------------
// call
@ Main.main:90                               // ROM[07953]
D = A                                        // ROM[07954]
@ R15                                        // ROM[07955]
M = D                                        // ROM[07956]
@ :call                                      // ROM[07957]
0; JMP                                       // ROM[07958]
( Main.main:90)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07959]
0; JMP                                       // ROM[07960]
// ---------------------------
// ( RA )
( Main.main:89) 

// -------------------------------------
// PUSH: <constant, 110>
// -------------------------------------
@ 110                                        // ROM[07961]
D = A                                        // ROM[07962]
// ---------------------------
// push D
@ SP                                         // ROM[07963]
AM = M+1                                     // ROM[07964]
A = A-1                                      // ROM[07965]
M = D                                        // ROM[07966]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07967]
D = A                                        // ROM[07968]
@ R13                                        // ROM[07969]
M = D                                        // ROM[07970]
// ---------------------------
// Push RA
@ Main.main:91                               // ROM[07971]
D = A                                        // ROM[07972]
// ---------------------------
// push D
@ SP                                         // ROM[07973]
AM = M+1                                     // ROM[07974]
A = A-1                                      // ROM[07975]
M = D                                        // ROM[07976]
// ---------------------------
// call
@ Main.main:92                               // ROM[07977]
D = A                                        // ROM[07978]
@ R15                                        // ROM[07979]
M = D                                        // ROM[07980]
@ :call                                      // ROM[07981]
0; JMP                                       // ROM[07982]
( Main.main:92)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[07983]
0; JMP                                       // ROM[07984]
// ---------------------------
// ( RA )
( Main.main:91) 

// -------------------------------------
// PUSH: <constant, 103>
// -------------------------------------
@ 103                                        // ROM[07985]
D = A                                        // ROM[07986]
// ---------------------------
// push D
@ SP                                         // ROM[07987]
AM = M+1                                     // ROM[07988]
A = A-1                                      // ROM[07989]
M = D                                        // ROM[07990]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[07991]
D = A                                        // ROM[07992]
@ R13                                        // ROM[07993]
M = D                                        // ROM[07994]
// ---------------------------
// Push RA
@ Main.main:93                               // ROM[07995]
D = A                                        // ROM[07996]
// ---------------------------
// push D
@ SP                                         // ROM[07997]
AM = M+1                                     // ROM[07998]
A = A-1                                      // ROM[07999]
M = D                                        // ROM[08000]
// ---------------------------
// call
@ Main.main:94                               // ROM[08001]
D = A                                        // ROM[08002]
@ R15                                        // ROM[08003]
M = D                                        // ROM[08004]
@ :call                                      // ROM[08005]
0; JMP                                       // ROM[08006]
( Main.main:94)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08007]
0; JMP                                       // ROM[08008]
// ---------------------------
// ( RA )
( Main.main:93) 

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[08009]
D = A                                        // ROM[08010]
// ---------------------------
// push D
@ SP                                         // ROM[08011]
AM = M+1                                     // ROM[08012]
A = A-1                                      // ROM[08013]
M = D                                        // ROM[08014]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08015]
D = A                                        // ROM[08016]
@ R13                                        // ROM[08017]
M = D                                        // ROM[08018]
// ---------------------------
// Push RA
@ Main.main:95                               // ROM[08019]
D = A                                        // ROM[08020]
// ---------------------------
// push D
@ SP                                         // ROM[08021]
AM = M+1                                     // ROM[08022]
A = A-1                                      // ROM[08023]
M = D                                        // ROM[08024]
// ---------------------------
// call
@ Main.main:96                               // ROM[08025]
D = A                                        // ROM[08026]
@ R15                                        // ROM[08027]
M = D                                        // ROM[08028]
@ :call                                      // ROM[08029]
0; JMP                                       // ROM[08030]
( Main.main:96)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08031]
0; JMP                                       // ROM[08032]
// ---------------------------
// ( RA )
( Main.main:95) 

// -------------------------------------
// PUSH: <constant, 50>
// -------------------------------------
@ 50                                         // ROM[08033]
D = A                                        // ROM[08034]
// ---------------------------
// push D
@ SP                                         // ROM[08035]
AM = M+1                                     // ROM[08036]
A = A-1                                      // ROM[08037]
M = D                                        // ROM[08038]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08039]
D = A                                        // ROM[08040]
@ R13                                        // ROM[08041]
M = D                                        // ROM[08042]
// ---------------------------
// Push RA
@ Main.main:97                               // ROM[08043]
D = A                                        // ROM[08044]
// ---------------------------
// push D
@ SP                                         // ROM[08045]
AM = M+1                                     // ROM[08046]
A = A-1                                      // ROM[08047]
M = D                                        // ROM[08048]
// ---------------------------
// call
@ Main.main:98                               // ROM[08049]
D = A                                        // ROM[08050]
@ R15                                        // ROM[08051]
M = D                                        // ROM[08052]
@ :call                                      // ROM[08053]
0; JMP                                       // ROM[08054]
( Main.main:98)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08055]
0; JMP                                       // ROM[08056]
// ---------------------------
// ( RA )
( Main.main:97) 

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[08057]
D = A                                        // ROM[08058]
// ---------------------------
// push D
@ SP                                         // ROM[08059]
AM = M+1                                     // ROM[08060]
A = A-1                                      // ROM[08061]
M = D                                        // ROM[08062]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08063]
D = A                                        // ROM[08064]
@ R13                                        // ROM[08065]
M = D                                        // ROM[08066]
// ---------------------------
// Push RA
@ Main.main:99                               // ROM[08067]
D = A                                        // ROM[08068]
// ---------------------------
// push D
@ SP                                         // ROM[08069]
AM = M+1                                     // ROM[08070]
A = A-1                                      // ROM[08071]
M = D                                        // ROM[08072]
// ---------------------------
// call
@ Main.main:100                              // ROM[08073]
D = A                                        // ROM[08074]
@ R15                                        // ROM[08075]
M = D                                        // ROM[08076]
@ :call                                      // ROM[08077]
0; JMP                                       // ROM[08078]
( Main.main:100)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08079]
0; JMP                                       // ROM[08080]
// ---------------------------
// ( RA )
( Main.main:99) 

// -------------------------------------
// PUSH: <constant, 50>
// -------------------------------------
@ 50                                         // ROM[08081]
D = A                                        // ROM[08082]
// ---------------------------
// push D
@ SP                                         // ROM[08083]
AM = M+1                                     // ROM[08084]
A = A-1                                      // ROM[08085]
M = D                                        // ROM[08086]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08087]
D = A                                        // ROM[08088]
@ R13                                        // ROM[08089]
M = D                                        // ROM[08090]
// ---------------------------
// Push RA
@ Main.main:101                              // ROM[08091]
D = A                                        // ROM[08092]
// ---------------------------
// push D
@ SP                                         // ROM[08093]
AM = M+1                                     // ROM[08094]
A = A-1                                      // ROM[08095]
M = D                                        // ROM[08096]
// ---------------------------
// call
@ Main.main:102                              // ROM[08097]
D = A                                        // ROM[08098]
@ R15                                        // ROM[08099]
M = D                                        // ROM[08100]
@ :call                                      // ROM[08101]
0; JMP                                       // ROM[08102]
( Main.main:102)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08103]
0; JMP                                       // ROM[08104]
// ---------------------------
// ( RA )
( Main.main:101) 

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[08105]
D = A                                        // ROM[08106]
// ---------------------------
// push D
@ SP                                         // ROM[08107]
AM = M+1                                     // ROM[08108]
A = A-1                                      // ROM[08109]
M = D                                        // ROM[08110]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08111]
D = A                                        // ROM[08112]
@ R13                                        // ROM[08113]
M = D                                        // ROM[08114]
// ---------------------------
// Push RA
@ Main.main:103                              // ROM[08115]
D = A                                        // ROM[08116]
// ---------------------------
// push D
@ SP                                         // ROM[08117]
AM = M+1                                     // ROM[08118]
A = A-1                                      // ROM[08119]
M = D                                        // ROM[08120]
// ---------------------------
// call
@ Main.main:104                              // ROM[08121]
D = A                                        // ROM[08122]
@ R15                                        // ROM[08123]
M = D                                        // ROM[08124]
@ :call                                      // ROM[08125]
0; JMP                                       // ROM[08126]
( Main.main:104)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08127]
0; JMP                                       // ROM[08128]
// ---------------------------
// ( RA )
( Main.main:103) 

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[08129]
D = A                                        // ROM[08130]
// ---------------------------
// push D
@ SP                                         // ROM[08131]
AM = M+1                                     // ROM[08132]
A = A-1                                      // ROM[08133]
M = D                                        // ROM[08134]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08135]
D = A                                        // ROM[08136]
@ R13                                        // ROM[08137]
M = D                                        // ROM[08138]
// ---------------------------
// Push RA
@ Main.main:105                              // ROM[08139]
D = A                                        // ROM[08140]
// ---------------------------
// push D
@ SP                                         // ROM[08141]
AM = M+1                                     // ROM[08142]
A = A-1                                      // ROM[08143]
M = D                                        // ROM[08144]
// ---------------------------
// call
@ Main.main:106                              // ROM[08145]
D = A                                        // ROM[08146]
@ R15                                        // ROM[08147]
M = D                                        // ROM[08148]
@ :call                                      // ROM[08149]
0; JMP                                       // ROM[08150]
( Main.main:106)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08151]
0; JMP                                       // ROM[08152]
// ---------------------------
// ( RA )
( Main.main:105) 

// -------------------------------------
// PUSH: <constant, 99>
// -------------------------------------
@ 99                                         // ROM[08153]
D = A                                        // ROM[08154]
// ---------------------------
// push D
@ SP                                         // ROM[08155]
AM = M+1                                     // ROM[08156]
A = A-1                                      // ROM[08157]
M = D                                        // ROM[08158]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08159]
D = A                                        // ROM[08160]
@ R13                                        // ROM[08161]
M = D                                        // ROM[08162]
// ---------------------------
// Push RA
@ Main.main:107                              // ROM[08163]
D = A                                        // ROM[08164]
// ---------------------------
// push D
@ SP                                         // ROM[08165]
AM = M+1                                     // ROM[08166]
A = A-1                                      // ROM[08167]
M = D                                        // ROM[08168]
// ---------------------------
// call
@ Main.main:108                              // ROM[08169]
D = A                                        // ROM[08170]
@ R15                                        // ROM[08171]
M = D                                        // ROM[08172]
@ :call                                      // ROM[08173]
0; JMP                                       // ROM[08174]
( Main.main:108)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08175]
0; JMP                                       // ROM[08176]
// ---------------------------
// ( RA )
( Main.main:107) 

// -------------------------------------
// PUSH: <constant, 111>
// -------------------------------------
@ 111                                        // ROM[08177]
D = A                                        // ROM[08178]
// ---------------------------
// push D
@ SP                                         // ROM[08179]
AM = M+1                                     // ROM[08180]
A = A-1                                      // ROM[08181]
M = D                                        // ROM[08182]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08183]
D = A                                        // ROM[08184]
@ R13                                        // ROM[08185]
M = D                                        // ROM[08186]
// ---------------------------
// Push RA
@ Main.main:109                              // ROM[08187]
D = A                                        // ROM[08188]
// ---------------------------
// push D
@ SP                                         // ROM[08189]
AM = M+1                                     // ROM[08190]
A = A-1                                      // ROM[08191]
M = D                                        // ROM[08192]
// ---------------------------
// call
@ Main.main:110                              // ROM[08193]
D = A                                        // ROM[08194]
@ R15                                        // ROM[08195]
M = D                                        // ROM[08196]
@ :call                                      // ROM[08197]
0; JMP                                       // ROM[08198]
( Main.main:110)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08199]
0; JMP                                       // ROM[08200]
// ---------------------------
// ( RA )
( Main.main:109) 

// -------------------------------------
// PUSH: <constant, 109>
// -------------------------------------
@ 109                                        // ROM[08201]
D = A                                        // ROM[08202]
// ---------------------------
// push D
@ SP                                         // ROM[08203]
AM = M+1                                     // ROM[08204]
A = A-1                                      // ROM[08205]
M = D                                        // ROM[08206]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08207]
D = A                                        // ROM[08208]
@ R13                                        // ROM[08209]
M = D                                        // ROM[08210]
// ---------------------------
// Push RA
@ Main.main:111                              // ROM[08211]
D = A                                        // ROM[08212]
// ---------------------------
// push D
@ SP                                         // ROM[08213]
AM = M+1                                     // ROM[08214]
A = A-1                                      // ROM[08215]
M = D                                        // ROM[08216]
// ---------------------------
// call
@ Main.main:112                              // ROM[08217]
D = A                                        // ROM[08218]
@ R15                                        // ROM[08219]
M = D                                        // ROM[08220]
@ :call                                      // ROM[08221]
0; JMP                                       // ROM[08222]
( Main.main:112)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08223]
0; JMP                                       // ROM[08224]
// ---------------------------
// ( RA )
( Main.main:111) 

// -------------------------------------
// PUSH: <constant, 112>
// -------------------------------------
@ 112                                        // ROM[08225]
D = A                                        // ROM[08226]
// ---------------------------
// push D
@ SP                                         // ROM[08227]
AM = M+1                                     // ROM[08228]
A = A-1                                      // ROM[08229]
M = D                                        // ROM[08230]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08231]
D = A                                        // ROM[08232]
@ R13                                        // ROM[08233]
M = D                                        // ROM[08234]
// ---------------------------
// Push RA
@ Main.main:113                              // ROM[08235]
D = A                                        // ROM[08236]
// ---------------------------
// push D
@ SP                                         // ROM[08237]
AM = M+1                                     // ROM[08238]
A = A-1                                      // ROM[08239]
M = D                                        // ROM[08240]
// ---------------------------
// call
@ Main.main:114                              // ROM[08241]
D = A                                        // ROM[08242]
@ R15                                        // ROM[08243]
M = D                                        // ROM[08244]
@ :call                                      // ROM[08245]
0; JMP                                       // ROM[08246]
( Main.main:114)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08247]
0; JMP                                       // ROM[08248]
// ---------------------------
// ( RA )
( Main.main:113) 

// -------------------------------------
// PUSH: <constant, 108>
// -------------------------------------
@ 108                                        // ROM[08249]
D = A                                        // ROM[08250]
// ---------------------------
// push D
@ SP                                         // ROM[08251]
AM = M+1                                     // ROM[08252]
A = A-1                                      // ROM[08253]
M = D                                        // ROM[08254]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08255]
D = A                                        // ROM[08256]
@ R13                                        // ROM[08257]
M = D                                        // ROM[08258]
// ---------------------------
// Push RA
@ Main.main:115                              // ROM[08259]
D = A                                        // ROM[08260]
// ---------------------------
// push D
@ SP                                         // ROM[08261]
AM = M+1                                     // ROM[08262]
A = A-1                                      // ROM[08263]
M = D                                        // ROM[08264]
// ---------------------------
// call
@ Main.main:116                              // ROM[08265]
D = A                                        // ROM[08266]
@ R15                                        // ROM[08267]
M = D                                        // ROM[08268]
@ :call                                      // ROM[08269]
0; JMP                                       // ROM[08270]
( Main.main:116)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08271]
0; JMP                                       // ROM[08272]
// ---------------------------
// ( RA )
( Main.main:115) 

// -------------------------------------
// PUSH: <constant, 101>
// -------------------------------------
@ 101                                        // ROM[08273]
D = A                                        // ROM[08274]
// ---------------------------
// push D
@ SP                                         // ROM[08275]
AM = M+1                                     // ROM[08276]
A = A-1                                      // ROM[08277]
M = D                                        // ROM[08278]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08279]
D = A                                        // ROM[08280]
@ R13                                        // ROM[08281]
M = D                                        // ROM[08282]
// ---------------------------
// Push RA
@ Main.main:117                              // ROM[08283]
D = A                                        // ROM[08284]
// ---------------------------
// push D
@ SP                                         // ROM[08285]
AM = M+1                                     // ROM[08286]
A = A-1                                      // ROM[08287]
M = D                                        // ROM[08288]
// ---------------------------
// call
@ Main.main:118                              // ROM[08289]
D = A                                        // ROM[08290]
@ R15                                        // ROM[08291]
M = D                                        // ROM[08292]
@ :call                                      // ROM[08293]
0; JMP                                       // ROM[08294]
( Main.main:118)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08295]
0; JMP                                       // ROM[08296]
// ---------------------------
// ( RA )
( Main.main:117) 

// -------------------------------------
// PUSH: <constant, 116>
// -------------------------------------
@ 116                                        // ROM[08297]
D = A                                        // ROM[08298]
// ---------------------------
// push D
@ SP                                         // ROM[08299]
AM = M+1                                     // ROM[08300]
A = A-1                                      // ROM[08301]
M = D                                        // ROM[08302]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08303]
D = A                                        // ROM[08304]
@ R13                                        // ROM[08305]
M = D                                        // ROM[08306]
// ---------------------------
// Push RA
@ Main.main:119                              // ROM[08307]
D = A                                        // ROM[08308]
// ---------------------------
// push D
@ SP                                         // ROM[08309]
AM = M+1                                     // ROM[08310]
A = A-1                                      // ROM[08311]
M = D                                        // ROM[08312]
// ---------------------------
// call
@ Main.main:120                              // ROM[08313]
D = A                                        // ROM[08314]
@ R15                                        // ROM[08315]
M = D                                        // ROM[08316]
@ :call                                      // ROM[08317]
0; JMP                                       // ROM[08318]
( Main.main:120)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08319]
0; JMP                                       // ROM[08320]
// ---------------------------
// ( RA )
( Main.main:119) 

// -------------------------------------
// PUSH: <constant, 101>
// -------------------------------------
@ 101                                        // ROM[08321]
D = A                                        // ROM[08322]
// ---------------------------
// push D
@ SP                                         // ROM[08323]
AM = M+1                                     // ROM[08324]
A = A-1                                      // ROM[08325]
M = D                                        // ROM[08326]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08327]
D = A                                        // ROM[08328]
@ R13                                        // ROM[08329]
M = D                                        // ROM[08330]
// ---------------------------
// Push RA
@ Main.main:121                              // ROM[08331]
D = A                                        // ROM[08332]
// ---------------------------
// push D
@ SP                                         // ROM[08333]
AM = M+1                                     // ROM[08334]
A = A-1                                      // ROM[08335]
M = D                                        // ROM[08336]
// ---------------------------
// call
@ Main.main:122                              // ROM[08337]
D = A                                        // ROM[08338]
@ R15                                        // ROM[08339]
M = D                                        // ROM[08340]
@ :call                                      // ROM[08341]
0; JMP                                       // ROM[08342]
( Main.main:122)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08343]
0; JMP                                       // ROM[08344]
// ---------------------------
// ( RA )
( Main.main:121) 

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[08345]
D = A                                        // ROM[08346]
// ---------------------------
// push D
@ SP                                         // ROM[08347]
AM = M+1                                     // ROM[08348]
A = A-1                                      // ROM[08349]
M = D                                        // ROM[08350]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08351]
D = A                                        // ROM[08352]
@ R13                                        // ROM[08353]
M = D                                        // ROM[08354]
// ---------------------------
// Push RA
@ Main.main:123                              // ROM[08355]
D = A                                        // ROM[08356]
// ---------------------------
// push D
@ SP                                         // ROM[08357]
AM = M+1                                     // ROM[08358]
A = A-1                                      // ROM[08359]
M = D                                        // ROM[08360]
// ---------------------------
// call
@ Main.main:124                              // ROM[08361]
D = A                                        // ROM[08362]
@ R15                                        // ROM[08363]
M = D                                        // ROM[08364]
@ :call                                      // ROM[08365]
0; JMP                                       // ROM[08366]
( Main.main:124)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08367]
0; JMP                                       // ROM[08368]
// ---------------------------
// ( RA )
( Main.main:123) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[08369]
D = A                                        // ROM[08370]
// ---------------------------
// push D
@ SP                                         // ROM[08371]
AM = M+1                                     // ROM[08372]
A = A-1                                      // ROM[08373]
M = D                                        // ROM[08374]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08375]
D = A                                        // ROM[08376]
@ R13                                        // ROM[08377]
M = D                                        // ROM[08378]
// ---------------------------
// Push RA
@ Main.main:125                              // ROM[08379]
D = A                                        // ROM[08380]
// ---------------------------
// push D
@ SP                                         // ROM[08381]
AM = M+1                                     // ROM[08382]
A = A-1                                      // ROM[08383]
M = D                                        // ROM[08384]
// ---------------------------
// call
@ Main.main:126                              // ROM[08385]
D = A                                        // ROM[08386]
@ R15                                        // ROM[08387]
M = D                                        // ROM[08388]
@ :call                                      // ROM[08389]
0; JMP                                       // ROM[08390]
( Main.main:126)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08391]
0; JMP                                       // ROM[08392]
// ---------------------------
// ( RA )
( Main.main:125) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[08393]
D = A                                        // ROM[08394]
// ---------------------------
// push D
@ SP                                         // ROM[08395]
AM = M+1                                     // ROM[08396]
A = A-1                                      // ROM[08397]
M = D                                        // ROM[08398]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08399]
D = A                                        // ROM[08400]
@ R13                                        // ROM[08401]
M = D                                        // ROM[08402]
// ---------------------------
// Push RA
@ Main.main:127                              // ROM[08403]
D = A                                        // ROM[08404]
// ---------------------------
// push D
@ SP                                         // ROM[08405]
AM = M+1                                     // ROM[08406]
A = A-1                                      // ROM[08407]
M = D                                        // ROM[08408]
// ---------------------------
// call
@ Main.main:128                              // ROM[08409]
D = A                                        // ROM[08410]
@ R15                                        // ROM[08411]
M = D                                        // ROM[08412]
@ :call                                      // ROM[08413]
0; JMP                                       // ROM[08414]
( Main.main:128)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08415]
0; JMP                                       // ROM[08416]
// ---------------------------
// ( RA )
( Main.main:127) 

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[08417]
D = A                                        // ROM[08418]
// ---------------------------
// push D
@ SP                                         // ROM[08419]
AM = M+1                                     // ROM[08420]
A = A-1                                      // ROM[08421]
M = D                                        // ROM[08422]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08423]
D = A                                        // ROM[08424]
@ R13                                        // ROM[08425]
M = D                                        // ROM[08426]
// ---------------------------
// Push RA
@ Main.main:129                              // ROM[08427]
D = A                                        // ROM[08428]
// ---------------------------
// push D
@ SP                                         // ROM[08429]
AM = M+1                                     // ROM[08430]
A = A-1                                      // ROM[08431]
M = D                                        // ROM[08432]
// ---------------------------
// call
@ Main.main:130                              // ROM[08433]
D = A                                        // ROM[08434]
@ R15                                        // ROM[08435]
M = D                                        // ROM[08436]
@ :call                                      // ROM[08437]
0; JMP                                       // ROM[08438]
( Main.main:130)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[08439]
0; JMP                                       // ROM[08440]
// ---------------------------
// ( RA )
( Main.main:129) 

// -------------------------------------
// CALL: Main.message(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[08441]
D = A                                        // ROM[08442]
@ R13                                        // ROM[08443]
M = D                                        // ROM[08444]
// ---------------------------
// Push RA
@ Main.main:131                              // ROM[08445]
D = A                                        // ROM[08446]
// ---------------------------
// push D
@ SP                                         // ROM[08447]
AM = M+1                                     // ROM[08448]
A = A-1                                      // ROM[08449]
M = D                                        // ROM[08450]
// ---------------------------
// call
@ Main.main:132                              // ROM[08451]
D = A                                        // ROM[08452]
@ R15                                        // ROM[08453]
M = D                                        // ROM[08454]
@ :call                                      // ROM[08455]
0; JMP                                       // ROM[08456]
( Main.main:132)
// ---------------------------
// goto functionName
@ Main.message                               // ROM[08457]
0; JMP                                       // ROM[08458]
// ---------------------------
// ( RA )
( Main.main:131) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08459]
AM = M-1                                     // ROM[08460]
D = M                                        // ROM[08461]
// ---------------------------
@ 5                                          // ROM[08462]
M = D                                        // ROM[08463]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[08464]
D = A                                        // ROM[08465]
// ---------------------------
// push D
@ SP                                         // ROM[08466]
AM = M+1                                     // ROM[08467]
A = A-1                                      // ROM[08468]
M = D                                        // ROM[08469]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08470]
D = A                                        // ROM[08471]
@ R13                                        // ROM[08472]
M = D                                        // ROM[08473]
// ---------------------------
// call
@ Main.main:133                              // ROM[08474]
D = A                                        // ROM[08475]
@ R15                                        // ROM[08476]
M = D                                        // ROM[08477]
@ :push_local                                // ROM[08478]
0; JMP                                       // ROM[08479]
( Main.main:133)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Main.main:134                              // ROM[08480]
D = A                                        // ROM[08481]
@ R15                                        // ROM[08482]
M = D                                        // ROM[08483]
@ :add                                       // ROM[08484]
0; JMP                                       // ROM[08485]
( Main.main:134)

// -------------------------------------
// PUSH: <constant, 4242>
// -------------------------------------
@ 4242                                       // ROM[08486]
D = A                                        // ROM[08487]
// ---------------------------
// push D
@ SP                                         // ROM[08488]
AM = M+1                                     // ROM[08489]
A = A-1                                      // ROM[08490]
M = D                                        // ROM[08491]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08492]
AM = M-1                                     // ROM[08493]
D = M                                        // ROM[08494]
// ---------------------------
@ 5                                          // ROM[08495]
M = D                                        // ROM[08496]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08497]
AM = M-1                                     // ROM[08498]
D = M                                        // ROM[08499]
// ---------------------------
@ 4                                          // ROM[08500]
M = D                                        // ROM[08501]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[08502]
D = M                                        // ROM[08503]
// ---------------------------
// push D
@ SP                                         // ROM[08504]
AM = M+1                                     // ROM[08505]
A = A-1                                      // ROM[08506]
M = D                                        // ROM[08507]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08508]
D = A                                        // ROM[08509]
@ R13                                        // ROM[08510]
M = D                                        // ROM[08511]
// ---------------------------
// call
@ Main.main:135                              // ROM[08512]
D = A                                        // ROM[08513]
@ R15                                        // ROM[08514]
M = D                                        // ROM[08515]
@ :pop_that                                  // ROM[08516]
0; JMP                                       // ROM[08517]
( Main.main:135)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[08518]
D = A                                        // ROM[08519]
// ---------------------------
// push D
@ SP                                         // ROM[08520]
AM = M+1                                     // ROM[08521]
A = A-1                                      // ROM[08522]
M = D                                        // ROM[08523]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Main.main:136                              // ROM[08524]
D = A                                        // ROM[08525]
@ R15                                        // ROM[08526]
M = D                                        // ROM[08527]
@ :return                                    // ROM[08528]
0; JMP                                       // ROM[08529]
( Main.main:136)

// =========================================================
// FUNCTION: Main.message(0 locals)
// =========================================================

( Main.message )
// ---------------------------
// clear local segment
D = 0                                        // ROM[08530]

// -------------------------------------
// PUSH: <constant, 21>
// -------------------------------------
@ 21                                         // ROM[08531]
D = A                                        // ROM[08532]
// ---------------------------
// push D
@ SP                                         // ROM[08533]
AM = M+1                                     // ROM[08534]
A = A-1                                      // ROM[08535]
M = D                                        // ROM[08536]

// -------------------------------------
// PUSH: <constant, 64>
// -------------------------------------
@ 64                                         // ROM[08537]
D = A                                        // ROM[08538]
// ---------------------------
// push D
@ SP                                         // ROM[08539]
AM = M+1                                     // ROM[08540]
A = A-1                                      // ROM[08541]
M = D                                        // ROM[08542]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08543]
D = A                                        // ROM[08544]
@ R13                                        // ROM[08545]
M = D                                        // ROM[08546]
// ---------------------------
// call
@ Main.message:137                           // ROM[08547]
D = A                                        // ROM[08548]
@ R15                                        // ROM[08549]
M = D                                        // ROM[08550]
@ :push_argument                             // ROM[08551]
0; JMP                                       // ROM[08552]
( Main.message:137)

// -------------------------------------
// CALL: String.length(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[08553]
D = A                                        // ROM[08554]
@ R13                                        // ROM[08555]
M = D                                        // ROM[08556]
// ---------------------------
// Push RA
@ Main.message:138                           // ROM[08557]
D = A                                        // ROM[08558]
// ---------------------------
// push D
@ SP                                         // ROM[08559]
AM = M+1                                     // ROM[08560]
A = A-1                                      // ROM[08561]
M = D                                        // ROM[08562]
// ---------------------------
// call
@ Main.message:139                           // ROM[08563]
D = A                                        // ROM[08564]
@ R15                                        // ROM[08565]
M = D                                        // ROM[08566]
@ :call                                      // ROM[08567]
0; JMP                                       // ROM[08568]
( Main.message:139)
// ---------------------------
// goto functionName
@ String.length                              // ROM[08569]
0; JMP                                       // ROM[08570]
// ---------------------------
// ( RA )
( Main.message:138) 

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Main.message:140                           // ROM[08571]
D = A                                        // ROM[08572]
@ R15                                        // ROM[08573]
M = D                                        // ROM[08574]
@ :sub                                       // ROM[08575]
0; JMP                                       // ROM[08576]
( Main.message:140)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[08577]
D = A                                        // ROM[08578]
// ---------------------------
// push D
@ SP                                         // ROM[08579]
AM = M+1                                     // ROM[08580]
A = A-1                                      // ROM[08581]
M = D                                        // ROM[08582]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08583]
D = A                                        // ROM[08584]
@ R13                                        // ROM[08585]
M = D                                        // ROM[08586]
// ---------------------------
// Push RA
@ Main.message:141                           // ROM[08587]
D = A                                        // ROM[08588]
// ---------------------------
// push D
@ SP                                         // ROM[08589]
AM = M+1                                     // ROM[08590]
A = A-1                                      // ROM[08591]
M = D                                        // ROM[08592]
// ---------------------------
// call
@ Main.message:142                           // ROM[08593]
D = A                                        // ROM[08594]
@ R15                                        // ROM[08595]
M = D                                        // ROM[08596]
@ :call                                      // ROM[08597]
0; JMP                                       // ROM[08598]
( Main.message:142)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[08599]
0; JMP                                       // ROM[08600]
// ---------------------------
// ( RA )
( Main.message:141) 

// -------------------------------------
// CALL: Output.moveCursor(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[08601]
D = A                                        // ROM[08602]
@ R13                                        // ROM[08603]
M = D                                        // ROM[08604]
// ---------------------------
// Push RA
@ Main.message:143                           // ROM[08605]
D = A                                        // ROM[08606]
// ---------------------------
// push D
@ SP                                         // ROM[08607]
AM = M+1                                     // ROM[08608]
A = A-1                                      // ROM[08609]
M = D                                        // ROM[08610]
// ---------------------------
// call
@ Main.message:144                           // ROM[08611]
D = A                                        // ROM[08612]
@ R15                                        // ROM[08613]
M = D                                        // ROM[08614]
@ :call                                      // ROM[08615]
0; JMP                                       // ROM[08616]
( Main.message:144)
// ---------------------------
// goto functionName
@ Output.moveCursor                          // ROM[08617]
0; JMP                                       // ROM[08618]
// ---------------------------
// ( RA )
( Main.message:143) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08619]
AM = M-1                                     // ROM[08620]
D = M                                        // ROM[08621]
// ---------------------------
@ 5                                          // ROM[08622]
M = D                                        // ROM[08623]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08624]
D = A                                        // ROM[08625]
@ R13                                        // ROM[08626]
M = D                                        // ROM[08627]
// ---------------------------
// call
@ Main.message:145                           // ROM[08628]
D = A                                        // ROM[08629]
@ R15                                        // ROM[08630]
M = D                                        // ROM[08631]
@ :push_argument                             // ROM[08632]
0; JMP                                       // ROM[08633]
( Main.message:145)

// -------------------------------------
// CALL: Output.printString(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[08634]
D = A                                        // ROM[08635]
@ R13                                        // ROM[08636]
M = D                                        // ROM[08637]
// ---------------------------
// Push RA
@ Main.message:146                           // ROM[08638]
D = A                                        // ROM[08639]
// ---------------------------
// push D
@ SP                                         // ROM[08640]
AM = M+1                                     // ROM[08641]
A = A-1                                      // ROM[08642]
M = D                                        // ROM[08643]
// ---------------------------
// call
@ Main.message:147                           // ROM[08644]
D = A                                        // ROM[08645]
@ R15                                        // ROM[08646]
M = D                                        // ROM[08647]
@ :call                                      // ROM[08648]
0; JMP                                       // ROM[08649]
( Main.message:147)
// ---------------------------
// goto functionName
@ Output.printString                         // ROM[08650]
0; JMP                                       // ROM[08651]
// ---------------------------
// ( RA )
( Main.message:146) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08652]
AM = M-1                                     // ROM[08653]
D = M                                        // ROM[08654]
// ---------------------------
@ 5                                          // ROM[08655]
M = D                                        // ROM[08656]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08657]
D = A                                        // ROM[08658]
@ R13                                        // ROM[08659]
M = D                                        // ROM[08660]
// ---------------------------
// call
@ Main.message:148                           // ROM[08661]
D = A                                        // ROM[08662]
@ R15                                        // ROM[08663]
M = D                                        // ROM[08664]
@ :push_argument                             // ROM[08665]
0; JMP                                       // ROM[08666]
( Main.message:148)

// -------------------------------------
// CALL: String.dispose(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[08667]
D = A                                        // ROM[08668]
@ R13                                        // ROM[08669]
M = D                                        // ROM[08670]
// ---------------------------
// Push RA
@ Main.message:149                           // ROM[08671]
D = A                                        // ROM[08672]
// ---------------------------
// push D
@ SP                                         // ROM[08673]
AM = M+1                                     // ROM[08674]
A = A-1                                      // ROM[08675]
M = D                                        // ROM[08676]
// ---------------------------
// call
@ Main.message:150                           // ROM[08677]
D = A                                        // ROM[08678]
@ R15                                        // ROM[08679]
M = D                                        // ROM[08680]
@ :call                                      // ROM[08681]
0; JMP                                       // ROM[08682]
( Main.message:150)
// ---------------------------
// goto functionName
@ String.dispose                             // ROM[08683]
0; JMP                                       // ROM[08684]
// ---------------------------
// ( RA )
( Main.message:149) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08685]
AM = M-1                                     // ROM[08686]
D = M                                        // ROM[08687]
// ---------------------------
@ 5                                          // ROM[08688]
M = D                                        // ROM[08689]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[08690]
D = A                                        // ROM[08691]
// ---------------------------
// push D
@ SP                                         // ROM[08692]
AM = M+1                                     // ROM[08693]
A = A-1                                      // ROM[08694]
M = D                                        // ROM[08695]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Main.message:151                           // ROM[08696]
D = A                                        // ROM[08697]
@ R15                                        // ROM[08698]
M = D                                        // ROM[08699]
@ :return                                    // ROM[08700]
0; JMP                                       // ROM[08701]
( Main.message:151)

// *********************************************************
// Translation of: ./Keyboard.vm
// *********************************************************


// =========================================================
// FUNCTION: Keyboard.init(0 locals)
// =========================================================

( Keyboard.init )
// ---------------------------
// clear local segment
D = 0                                        // ROM[08702]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[08703]
D = A                                        // ROM[08704]
// ---------------------------
// push D
@ SP                                         // ROM[08705]
AM = M+1                                     // ROM[08706]
A = A-1                                      // ROM[08707]
M = D                                        // ROM[08708]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Keyboard.init:0                            // ROM[08709]
D = A                                        // ROM[08710]
@ R15                                        // ROM[08711]
M = D                                        // ROM[08712]
@ :return                                    // ROM[08713]
0; JMP                                       // ROM[08714]
( Keyboard.init:0)

// =========================================================
// FUNCTION: Keyboard.keyPressed(0 locals)
// =========================================================

( Keyboard.keyPressed )
// ---------------------------
// clear local segment
D = 0                                        // ROM[08715]

// -------------------------------------
// PUSH: <constant, 24576>
// -------------------------------------
@ 24576                                      // ROM[08716]
D = A                                        // ROM[08717]
// ---------------------------
// push D
@ SP                                         // ROM[08718]
AM = M+1                                     // ROM[08719]
A = A-1                                      // ROM[08720]
M = D                                        // ROM[08721]

// -------------------------------------
// CALL: Memory.peek(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[08722]
D = A                                        // ROM[08723]
@ R13                                        // ROM[08724]
M = D                                        // ROM[08725]
// ---------------------------
// Push RA
@ Keyboard.keyPressed:1                      // ROM[08726]
D = A                                        // ROM[08727]
// ---------------------------
// push D
@ SP                                         // ROM[08728]
AM = M+1                                     // ROM[08729]
A = A-1                                      // ROM[08730]
M = D                                        // ROM[08731]
// ---------------------------
// call
@ Keyboard.keyPressed:2                      // ROM[08732]
D = A                                        // ROM[08733]
@ R15                                        // ROM[08734]
M = D                                        // ROM[08735]
@ :call                                      // ROM[08736]
0; JMP                                       // ROM[08737]
( Keyboard.keyPressed:2)
// ---------------------------
// goto functionName
@ Memory.peek                                // ROM[08738]
0; JMP                                       // ROM[08739]
// ---------------------------
// ( RA )
( Keyboard.keyPressed:1) 

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Keyboard.keyPressed:3                      // ROM[08740]
D = A                                        // ROM[08741]
@ R15                                        // ROM[08742]
M = D                                        // ROM[08743]
@ :return                                    // ROM[08744]
0; JMP                                       // ROM[08745]
( Keyboard.keyPressed:3)

// =========================================================
// FUNCTION: Keyboard.readChar(2 locals)
// =========================================================

( Keyboard.readChar )
// ---------------------------
// clear local segment
D = 0                                        // ROM[08746]
// ---------------------------
// push D
@ SP                                         // ROM[08747]
AM = M+1                                     // ROM[08748]
A = A-1                                      // ROM[08749]
M = D                                        // ROM[08750]
// ---------------------------
// push D
@ SP                                         // ROM[08751]
AM = M+1                                     // ROM[08752]
A = A-1                                      // ROM[08753]
M = D                                        // ROM[08754]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[08755]
D = A                                        // ROM[08756]
// ---------------------------
// push D
@ SP                                         // ROM[08757]
AM = M+1                                     // ROM[08758]
A = A-1                                      // ROM[08759]
M = D                                        // ROM[08760]

// -------------------------------------
// CALL: Output.printChar(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[08761]
D = A                                        // ROM[08762]
@ R13                                        // ROM[08763]
M = D                                        // ROM[08764]
// ---------------------------
// Push RA
@ Keyboard.readChar:4                        // ROM[08765]
D = A                                        // ROM[08766]
// ---------------------------
// push D
@ SP                                         // ROM[08767]
AM = M+1                                     // ROM[08768]
A = A-1                                      // ROM[08769]
M = D                                        // ROM[08770]
// ---------------------------
// call
@ Keyboard.readChar:5                        // ROM[08771]
D = A                                        // ROM[08772]
@ R15                                        // ROM[08773]
M = D                                        // ROM[08774]
@ :call                                      // ROM[08775]
0; JMP                                       // ROM[08776]
( Keyboard.readChar:5)
// ---------------------------
// goto functionName
@ Output.printChar                           // ROM[08777]
0; JMP                                       // ROM[08778]
// ---------------------------
// ( RA )
( Keyboard.readChar:4) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08779]
AM = M-1                                     // ROM[08780]
D = M                                        // ROM[08781]
// ---------------------------
@ 5                                          // ROM[08782]
M = D                                        // ROM[08783]

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Keyboard.readChar$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[08784]
D = A                                        // ROM[08785]
@ R13                                        // ROM[08786]
M = D                                        // ROM[08787]
// ---------------------------
// call
@ Keyboard.readChar:6                        // ROM[08788]
D = A                                        // ROM[08789]
@ R15                                        // ROM[08790]
M = D                                        // ROM[08791]
@ :push_local                                // ROM[08792]
0; JMP                                       // ROM[08793]
( Keyboard.readChar:6)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[08794]
D = A                                        // ROM[08795]
// ---------------------------
// push D
@ SP                                         // ROM[08796]
AM = M+1                                     // ROM[08797]
A = A-1                                      // ROM[08798]
M = D                                        // ROM[08799]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readChar:7                        // ROM[08800]
D = A                                        // ROM[08801]
@ R15                                        // ROM[08802]
M = D                                        // ROM[08803]
@ :eq                                        // ROM[08804]
0; JMP                                       // ROM[08805]
( Keyboard.readChar:7)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08806]
D = A                                        // ROM[08807]
@ R13                                        // ROM[08808]
M = D                                        // ROM[08809]
// ---------------------------
// call
@ Keyboard.readChar:8                        // ROM[08810]
D = A                                        // ROM[08811]
@ R15                                        // ROM[08812]
M = D                                        // ROM[08813]
@ :push_local                                // ROM[08814]
0; JMP                                       // ROM[08815]
( Keyboard.readChar:8)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[08816]
D = A                                        // ROM[08817]
// ---------------------------
// push D
@ SP                                         // ROM[08818]
AM = M+1                                     // ROM[08819]
A = A-1                                      // ROM[08820]
M = D                                        // ROM[08821]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readChar:9                        // ROM[08822]
D = A                                        // ROM[08823]
@ R15                                        // ROM[08824]
M = D                                        // ROM[08825]
@ :gt                                        // ROM[08826]
0; JMP                                       // ROM[08827]
( Keyboard.readChar:9)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readChar:10                       // ROM[08828]
D = A                                        // ROM[08829]
@ R15                                        // ROM[08830]
M = D                                        // ROM[08831]
@ :or                                        // ROM[08832]
0; JMP                                       // ROM[08833]
( Keyboard.readChar:10)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[08834]
A = M-1                                      // ROM[08835]
M = !M                                       // ROM[08836]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08837]
AM = M-1                                     // ROM[08838]
D = M                                        // ROM[08839]
// ---------------------------
@ Keyboard.readChar$WHILE_END0               // ROM[08840]
D; JNE                                       // ROM[08841]

// -------------------------------------
// CALL: Keyboard.keyPressed(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[08842]
D = A                                        // ROM[08843]
@ R13                                        // ROM[08844]
M = D                                        // ROM[08845]
// ---------------------------
// Push RA
@ Keyboard.readChar:11                       // ROM[08846]
D = A                                        // ROM[08847]
// ---------------------------
// push D
@ SP                                         // ROM[08848]
AM = M+1                                     // ROM[08849]
A = A-1                                      // ROM[08850]
M = D                                        // ROM[08851]
// ---------------------------
// call
@ Keyboard.readChar:12                       // ROM[08852]
D = A                                        // ROM[08853]
@ R15                                        // ROM[08854]
M = D                                        // ROM[08855]
@ :call                                      // ROM[08856]
0; JMP                                       // ROM[08857]
( Keyboard.readChar:12)
// ---------------------------
// goto functionName
@ Keyboard.keyPressed                        // ROM[08858]
0; JMP                                       // ROM[08859]
// ---------------------------
// ( RA )
( Keyboard.readChar:11) 

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08860]
D = A                                        // ROM[08861]
@ R13                                        // ROM[08862]
M = D                                        // ROM[08863]
// ---------------------------
// call
@ Keyboard.readChar:13                       // ROM[08864]
D = A                                        // ROM[08865]
@ R15                                        // ROM[08866]
M = D                                        // ROM[08867]
@ :pop_local                                 // ROM[08868]
0; JMP                                       // ROM[08869]
( Keyboard.readChar:13)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08870]
D = A                                        // ROM[08871]
@ R13                                        // ROM[08872]
M = D                                        // ROM[08873]
// ---------------------------
// call
@ Keyboard.readChar:14                       // ROM[08874]
D = A                                        // ROM[08875]
@ R15                                        // ROM[08876]
M = D                                        // ROM[08877]
@ :push_local                                // ROM[08878]
0; JMP                                       // ROM[08879]
( Keyboard.readChar:14)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[08880]
D = A                                        // ROM[08881]
// ---------------------------
// push D
@ SP                                         // ROM[08882]
AM = M+1                                     // ROM[08883]
A = A-1                                      // ROM[08884]
M = D                                        // ROM[08885]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readChar:15                       // ROM[08886]
D = A                                        // ROM[08887]
@ R15                                        // ROM[08888]
M = D                                        // ROM[08889]
@ :gt                                        // ROM[08890]
0; JMP                                       // ROM[08891]
( Keyboard.readChar:15)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08892]
AM = M-1                                     // ROM[08893]
D = M                                        // ROM[08894]
// ---------------------------
@ Keyboard.readChar$IF_TRUE0                 // ROM[08895]
D; JNE                                       // ROM[08896]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Keyboard.readChar$IF_FALSE0                // ROM[08897]
0; JMP                                       // ROM[08898]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Keyboard.readChar$IF_TRUE0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[08899]
D = A                                        // ROM[08900]
@ R13                                        // ROM[08901]
M = D                                        // ROM[08902]
// ---------------------------
// call
@ Keyboard.readChar:16                       // ROM[08903]
D = A                                        // ROM[08904]
@ R15                                        // ROM[08905]
M = D                                        // ROM[08906]
@ :push_local                                // ROM[08907]
0; JMP                                       // ROM[08908]
( Keyboard.readChar:16)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[08909]
D = A                                        // ROM[08910]
@ R13                                        // ROM[08911]
M = D                                        // ROM[08912]
// ---------------------------
// call
@ Keyboard.readChar:17                       // ROM[08913]
D = A                                        // ROM[08914]
@ R15                                        // ROM[08915]
M = D                                        // ROM[08916]
@ :pop_local                                 // ROM[08917]
0; JMP                                       // ROM[08918]
( Keyboard.readChar:17)

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Keyboard.readChar$IF_FALSE0 )

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Keyboard.readChar$WHILE_EXP0               // ROM[08919]
0; JMP                                       // ROM[08920]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Keyboard.readChar$WHILE_END0 )

// -------------------------------------
// CALL: String.backSpace(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[08921]
D = A                                        // ROM[08922]
@ R13                                        // ROM[08923]
M = D                                        // ROM[08924]
// ---------------------------
// Push RA
@ Keyboard.readChar:18                       // ROM[08925]
D = A                                        // ROM[08926]
// ---------------------------
// push D
@ SP                                         // ROM[08927]
AM = M+1                                     // ROM[08928]
A = A-1                                      // ROM[08929]
M = D                                        // ROM[08930]
// ---------------------------
// call
@ Keyboard.readChar:19                       // ROM[08931]
D = A                                        // ROM[08932]
@ R15                                        // ROM[08933]
M = D                                        // ROM[08934]
@ :call                                      // ROM[08935]
0; JMP                                       // ROM[08936]
( Keyboard.readChar:19)
// ---------------------------
// goto functionName
@ String.backSpace                           // ROM[08937]
0; JMP                                       // ROM[08938]
// ---------------------------
// ( RA )
( Keyboard.readChar:18) 

// -------------------------------------
// CALL: Output.printChar(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[08939]
D = A                                        // ROM[08940]
@ R13                                        // ROM[08941]
M = D                                        // ROM[08942]
// ---------------------------
// Push RA
@ Keyboard.readChar:20                       // ROM[08943]
D = A                                        // ROM[08944]
// ---------------------------
// push D
@ SP                                         // ROM[08945]
AM = M+1                                     // ROM[08946]
A = A-1                                      // ROM[08947]
M = D                                        // ROM[08948]
// ---------------------------
// call
@ Keyboard.readChar:21                       // ROM[08949]
D = A                                        // ROM[08950]
@ R15                                        // ROM[08951]
M = D                                        // ROM[08952]
@ :call                                      // ROM[08953]
0; JMP                                       // ROM[08954]
( Keyboard.readChar:21)
// ---------------------------
// goto functionName
@ Output.printChar                           // ROM[08955]
0; JMP                                       // ROM[08956]
// ---------------------------
// ( RA )
( Keyboard.readChar:20) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08957]
AM = M-1                                     // ROM[08958]
D = M                                        // ROM[08959]
// ---------------------------
@ 5                                          // ROM[08960]
M = D                                        // ROM[08961]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[08962]
D = A                                        // ROM[08963]
@ R13                                        // ROM[08964]
M = D                                        // ROM[08965]
// ---------------------------
// call
@ Keyboard.readChar:22                       // ROM[08966]
D = A                                        // ROM[08967]
@ R15                                        // ROM[08968]
M = D                                        // ROM[08969]
@ :push_local                                // ROM[08970]
0; JMP                                       // ROM[08971]
( Keyboard.readChar:22)

// -------------------------------------
// CALL: Output.printChar(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[08972]
D = A                                        // ROM[08973]
@ R13                                        // ROM[08974]
M = D                                        // ROM[08975]
// ---------------------------
// Push RA
@ Keyboard.readChar:23                       // ROM[08976]
D = A                                        // ROM[08977]
// ---------------------------
// push D
@ SP                                         // ROM[08978]
AM = M+1                                     // ROM[08979]
A = A-1                                      // ROM[08980]
M = D                                        // ROM[08981]
// ---------------------------
// call
@ Keyboard.readChar:24                       // ROM[08982]
D = A                                        // ROM[08983]
@ R15                                        // ROM[08984]
M = D                                        // ROM[08985]
@ :call                                      // ROM[08986]
0; JMP                                       // ROM[08987]
( Keyboard.readChar:24)
// ---------------------------
// goto functionName
@ Output.printChar                           // ROM[08988]
0; JMP                                       // ROM[08989]
// ---------------------------
// ( RA )
( Keyboard.readChar:23) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[08990]
AM = M-1                                     // ROM[08991]
D = M                                        // ROM[08992]
// ---------------------------
@ 5                                          // ROM[08993]
M = D                                        // ROM[08994]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[08995]
D = A                                        // ROM[08996]
@ R13                                        // ROM[08997]
M = D                                        // ROM[08998]
// ---------------------------
// call
@ Keyboard.readChar:25                       // ROM[08999]
D = A                                        // ROM[09000]
@ R15                                        // ROM[09001]
M = D                                        // ROM[09002]
@ :push_local                                // ROM[09003]
0; JMP                                       // ROM[09004]
( Keyboard.readChar:25)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readChar:26                       // ROM[09005]
D = A                                        // ROM[09006]
@ R15                                        // ROM[09007]
M = D                                        // ROM[09008]
@ :return                                    // ROM[09009]
0; JMP                                       // ROM[09010]
( Keyboard.readChar:26)

// =========================================================
// FUNCTION: Keyboard.readLine(5 locals)
// =========================================================

( Keyboard.readLine )
// ---------------------------
// clear local segment
D = 0                                        // ROM[09011]
// ---------------------------
// push D
@ SP                                         // ROM[09012]
AM = M+1                                     // ROM[09013]
A = A-1                                      // ROM[09014]
M = D                                        // ROM[09015]
// ---------------------------
// push D
@ SP                                         // ROM[09016]
AM = M+1                                     // ROM[09017]
A = A-1                                      // ROM[09018]
M = D                                        // ROM[09019]
// ---------------------------
// push D
@ SP                                         // ROM[09020]
AM = M+1                                     // ROM[09021]
A = A-1                                      // ROM[09022]
M = D                                        // ROM[09023]
// ---------------------------
// push D
@ SP                                         // ROM[09024]
AM = M+1                                     // ROM[09025]
A = A-1                                      // ROM[09026]
M = D                                        // ROM[09027]
// ---------------------------
// push D
@ SP                                         // ROM[09028]
AM = M+1                                     // ROM[09029]
A = A-1                                      // ROM[09030]
M = D                                        // ROM[09031]

// -------------------------------------
// PUSH: <constant, 80>
// -------------------------------------
@ 80                                         // ROM[09032]
D = A                                        // ROM[09033]
// ---------------------------
// push D
@ SP                                         // ROM[09034]
AM = M+1                                     // ROM[09035]
A = A-1                                      // ROM[09036]
M = D                                        // ROM[09037]

// -------------------------------------
// CALL: String.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[09038]
D = A                                        // ROM[09039]
@ R13                                        // ROM[09040]
M = D                                        // ROM[09041]
// ---------------------------
// Push RA
@ Keyboard.readLine:27                       // ROM[09042]
D = A                                        // ROM[09043]
// ---------------------------
// push D
@ SP                                         // ROM[09044]
AM = M+1                                     // ROM[09045]
A = A-1                                      // ROM[09046]
M = D                                        // ROM[09047]
// ---------------------------
// call
@ Keyboard.readLine:28                       // ROM[09048]
D = A                                        // ROM[09049]
@ R15                                        // ROM[09050]
M = D                                        // ROM[09051]
@ :call                                      // ROM[09052]
0; JMP                                       // ROM[09053]
( Keyboard.readLine:28)
// ---------------------------
// goto functionName
@ String.new                                 // ROM[09054]
0; JMP                                       // ROM[09055]
// ---------------------------
// ( RA )
( Keyboard.readLine:27) 

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[09056]
D = A                                        // ROM[09057]
@ R13                                        // ROM[09058]
M = D                                        // ROM[09059]
// ---------------------------
// call
@ Keyboard.readLine:29                       // ROM[09060]
D = A                                        // ROM[09061]
@ R15                                        // ROM[09062]
M = D                                        // ROM[09063]
@ :pop_local                                 // ROM[09064]
0; JMP                                       // ROM[09065]
( Keyboard.readLine:29)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09066]
D = A                                        // ROM[09067]
@ R13                                        // ROM[09068]
M = D                                        // ROM[09069]
// ---------------------------
// call
@ Keyboard.readLine:30                       // ROM[09070]
D = A                                        // ROM[09071]
@ R15                                        // ROM[09072]
M = D                                        // ROM[09073]
@ :push_argument                             // ROM[09074]
0; JMP                                       // ROM[09075]
( Keyboard.readLine:30)

// -------------------------------------
// CALL: Output.printString(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[09076]
D = A                                        // ROM[09077]
@ R13                                        // ROM[09078]
M = D                                        // ROM[09079]
// ---------------------------
// Push RA
@ Keyboard.readLine:31                       // ROM[09080]
D = A                                        // ROM[09081]
// ---------------------------
// push D
@ SP                                         // ROM[09082]
AM = M+1                                     // ROM[09083]
A = A-1                                      // ROM[09084]
M = D                                        // ROM[09085]
// ---------------------------
// call
@ Keyboard.readLine:32                       // ROM[09086]
D = A                                        // ROM[09087]
@ R15                                        // ROM[09088]
M = D                                        // ROM[09089]
@ :call                                      // ROM[09090]
0; JMP                                       // ROM[09091]
( Keyboard.readLine:32)
// ---------------------------
// goto functionName
@ Output.printString                         // ROM[09092]
0; JMP                                       // ROM[09093]
// ---------------------------
// ( RA )
( Keyboard.readLine:31) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09094]
AM = M-1                                     // ROM[09095]
D = M                                        // ROM[09096]
// ---------------------------
@ 5                                          // ROM[09097]
M = D                                        // ROM[09098]

// -------------------------------------
// CALL: String.newLine(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09099]
D = A                                        // ROM[09100]
@ R13                                        // ROM[09101]
M = D                                        // ROM[09102]
// ---------------------------
// Push RA
@ Keyboard.readLine:33                       // ROM[09103]
D = A                                        // ROM[09104]
// ---------------------------
// push D
@ SP                                         // ROM[09105]
AM = M+1                                     // ROM[09106]
A = A-1                                      // ROM[09107]
M = D                                        // ROM[09108]
// ---------------------------
// call
@ Keyboard.readLine:34                       // ROM[09109]
D = A                                        // ROM[09110]
@ R15                                        // ROM[09111]
M = D                                        // ROM[09112]
@ :call                                      // ROM[09113]
0; JMP                                       // ROM[09114]
( Keyboard.readLine:34)
// ---------------------------
// goto functionName
@ String.newLine                             // ROM[09115]
0; JMP                                       // ROM[09116]
// ---------------------------
// ( RA )
( Keyboard.readLine:33) 

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[09117]
D = A                                        // ROM[09118]
@ R13                                        // ROM[09119]
M = D                                        // ROM[09120]
// ---------------------------
// call
@ Keyboard.readLine:35                       // ROM[09121]
D = A                                        // ROM[09122]
@ R15                                        // ROM[09123]
M = D                                        // ROM[09124]
@ :pop_local                                 // ROM[09125]
0; JMP                                       // ROM[09126]
( Keyboard.readLine:35)

// -------------------------------------
// CALL: String.backSpace(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09127]
D = A                                        // ROM[09128]
@ R13                                        // ROM[09129]
M = D                                        // ROM[09130]
// ---------------------------
// Push RA
@ Keyboard.readLine:36                       // ROM[09131]
D = A                                        // ROM[09132]
// ---------------------------
// push D
@ SP                                         // ROM[09133]
AM = M+1                                     // ROM[09134]
A = A-1                                      // ROM[09135]
M = D                                        // ROM[09136]
// ---------------------------
// call
@ Keyboard.readLine:37                       // ROM[09137]
D = A                                        // ROM[09138]
@ R15                                        // ROM[09139]
M = D                                        // ROM[09140]
@ :call                                      // ROM[09141]
0; JMP                                       // ROM[09142]
( Keyboard.readLine:37)
// ---------------------------
// goto functionName
@ String.backSpace                           // ROM[09143]
0; JMP                                       // ROM[09144]
// ---------------------------
// ( RA )
( Keyboard.readLine:36) 

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[09145]
D = A                                        // ROM[09146]
@ R13                                        // ROM[09147]
M = D                                        // ROM[09148]
// ---------------------------
// call
@ Keyboard.readLine:38                       // ROM[09149]
D = A                                        // ROM[09150]
@ R15                                        // ROM[09151]
M = D                                        // ROM[09152]
@ :pop_local                                 // ROM[09153]
0; JMP                                       // ROM[09154]
( Keyboard.readLine:38)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Keyboard.readLine$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[09155]
D = A                                        // ROM[09156]
@ R13                                        // ROM[09157]
M = D                                        // ROM[09158]
// ---------------------------
// call
@ Keyboard.readLine:39                       // ROM[09159]
D = A                                        // ROM[09160]
@ R15                                        // ROM[09161]
M = D                                        // ROM[09162]
@ :push_local                                // ROM[09163]
0; JMP                                       // ROM[09164]
( Keyboard.readLine:39)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[09165]
A = M-1                                      // ROM[09166]
M = !M                                       // ROM[09167]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[09168]
A = M-1                                      // ROM[09169]
M = !M                                       // ROM[09170]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09171]
AM = M-1                                     // ROM[09172]
D = M                                        // ROM[09173]
// ---------------------------
@ Keyboard.readLine$WHILE_END0               // ROM[09174]
D; JNE                                       // ROM[09175]

// -------------------------------------
// CALL: Keyboard.readChar(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09176]
D = A                                        // ROM[09177]
@ R13                                        // ROM[09178]
M = D                                        // ROM[09179]
// ---------------------------
// Push RA
@ Keyboard.readLine:40                       // ROM[09180]
D = A                                        // ROM[09181]
// ---------------------------
// push D
@ SP                                         // ROM[09182]
AM = M+1                                     // ROM[09183]
A = A-1                                      // ROM[09184]
M = D                                        // ROM[09185]
// ---------------------------
// call
@ Keyboard.readLine:41                       // ROM[09186]
D = A                                        // ROM[09187]
@ R15                                        // ROM[09188]
M = D                                        // ROM[09189]
@ :call                                      // ROM[09190]
0; JMP                                       // ROM[09191]
( Keyboard.readLine:41)
// ---------------------------
// goto functionName
@ Keyboard.readChar                          // ROM[09192]
0; JMP                                       // ROM[09193]
// ---------------------------
// ( RA )
( Keyboard.readLine:40) 

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09194]
D = A                                        // ROM[09195]
@ R13                                        // ROM[09196]
M = D                                        // ROM[09197]
// ---------------------------
// call
@ Keyboard.readLine:42                       // ROM[09198]
D = A                                        // ROM[09199]
@ R15                                        // ROM[09200]
M = D                                        // ROM[09201]
@ :pop_local                                 // ROM[09202]
0; JMP                                       // ROM[09203]
( Keyboard.readLine:42)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09204]
D = A                                        // ROM[09205]
@ R13                                        // ROM[09206]
M = D                                        // ROM[09207]
// ---------------------------
// call
@ Keyboard.readLine:43                       // ROM[09208]
D = A                                        // ROM[09209]
@ R15                                        // ROM[09210]
M = D                                        // ROM[09211]
@ :push_local                                // ROM[09212]
0; JMP                                       // ROM[09213]
( Keyboard.readLine:43)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[09214]
D = A                                        // ROM[09215]
@ R13                                        // ROM[09216]
M = D                                        // ROM[09217]
// ---------------------------
// call
@ Keyboard.readLine:44                       // ROM[09218]
D = A                                        // ROM[09219]
@ R15                                        // ROM[09220]
M = D                                        // ROM[09221]
@ :push_local                                // ROM[09222]
0; JMP                                       // ROM[09223]
( Keyboard.readLine:44)

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readLine:45                       // ROM[09224]
D = A                                        // ROM[09225]
@ R15                                        // ROM[09226]
M = D                                        // ROM[09227]
@ :eq                                        // ROM[09228]
0; JMP                                       // ROM[09229]
( Keyboard.readLine:45)

// -------------------------------------
// POP: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[09230]
D = A                                        // ROM[09231]
@ R13                                        // ROM[09232]
M = D                                        // ROM[09233]
// ---------------------------
// call
@ Keyboard.readLine:46                       // ROM[09234]
D = A                                        // ROM[09235]
@ R15                                        // ROM[09236]
M = D                                        // ROM[09237]
@ :pop_local                                 // ROM[09238]
0; JMP                                       // ROM[09239]
( Keyboard.readLine:46)

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[09240]
D = A                                        // ROM[09241]
@ R13                                        // ROM[09242]
M = D                                        // ROM[09243]
// ---------------------------
// call
@ Keyboard.readLine:47                       // ROM[09244]
D = A                                        // ROM[09245]
@ R15                                        // ROM[09246]
M = D                                        // ROM[09247]
@ :push_local                                // ROM[09248]
0; JMP                                       // ROM[09249]
( Keyboard.readLine:47)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[09250]
A = M-1                                      // ROM[09251]
M = !M                                       // ROM[09252]

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09253]
AM = M-1                                     // ROM[09254]
D = M                                        // ROM[09255]
// ---------------------------
@ Keyboard.readLine$IF_TRUE0                 // ROM[09256]
D; JNE                                       // ROM[09257]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Keyboard.readLine$IF_FALSE0                // ROM[09258]
0; JMP                                       // ROM[09259]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Keyboard.readLine$IF_TRUE0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09260]
D = A                                        // ROM[09261]
@ R13                                        // ROM[09262]
M = D                                        // ROM[09263]
// ---------------------------
// call
@ Keyboard.readLine:48                       // ROM[09264]
D = A                                        // ROM[09265]
@ R15                                        // ROM[09266]
M = D                                        // ROM[09267]
@ :push_local                                // ROM[09268]
0; JMP                                       // ROM[09269]
( Keyboard.readLine:48)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[09270]
D = A                                        // ROM[09271]
@ R13                                        // ROM[09272]
M = D                                        // ROM[09273]
// ---------------------------
// call
@ Keyboard.readLine:49                       // ROM[09274]
D = A                                        // ROM[09275]
@ R15                                        // ROM[09276]
M = D                                        // ROM[09277]
@ :push_local                                // ROM[09278]
0; JMP                                       // ROM[09279]
( Keyboard.readLine:49)

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readLine:50                       // ROM[09280]
D = A                                        // ROM[09281]
@ R15                                        // ROM[09282]
M = D                                        // ROM[09283]
@ :eq                                        // ROM[09284]
0; JMP                                       // ROM[09285]
( Keyboard.readLine:50)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09286]
AM = M-1                                     // ROM[09287]
D = M                                        // ROM[09288]
// ---------------------------
@ Keyboard.readLine$IF_TRUE1                 // ROM[09289]
D; JNE                                       // ROM[09290]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Keyboard.readLine$IF_FALSE1                // ROM[09291]
0; JMP                                       // ROM[09292]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Keyboard.readLine$IF_TRUE1 )

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[09293]
D = A                                        // ROM[09294]
@ R13                                        // ROM[09295]
M = D                                        // ROM[09296]
// ---------------------------
// call
@ Keyboard.readLine:51                       // ROM[09297]
D = A                                        // ROM[09298]
@ R15                                        // ROM[09299]
M = D                                        // ROM[09300]
@ :push_local                                // ROM[09301]
0; JMP                                       // ROM[09302]
( Keyboard.readLine:51)

// -------------------------------------
// CALL: String.eraseLastChar(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[09303]
D = A                                        // ROM[09304]
@ R13                                        // ROM[09305]
M = D                                        // ROM[09306]
// ---------------------------
// Push RA
@ Keyboard.readLine:52                       // ROM[09307]
D = A                                        // ROM[09308]
// ---------------------------
// push D
@ SP                                         // ROM[09309]
AM = M+1                                     // ROM[09310]
A = A-1                                      // ROM[09311]
M = D                                        // ROM[09312]
// ---------------------------
// call
@ Keyboard.readLine:53                       // ROM[09313]
D = A                                        // ROM[09314]
@ R15                                        // ROM[09315]
M = D                                        // ROM[09316]
@ :call                                      // ROM[09317]
0; JMP                                       // ROM[09318]
( Keyboard.readLine:53)
// ---------------------------
// goto functionName
@ String.eraseLastChar                       // ROM[09319]
0; JMP                                       // ROM[09320]
// ---------------------------
// ( RA )
( Keyboard.readLine:52) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09321]
AM = M-1                                     // ROM[09322]
D = M                                        // ROM[09323]
// ---------------------------
@ 5                                          // ROM[09324]
M = D                                        // ROM[09325]

// -------------------------------------
// GOTO: IF_END1
// -------------------------------------
@ Keyboard.readLine$IF_END1                  // ROM[09326]
0; JMP                                       // ROM[09327]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Keyboard.readLine$IF_FALSE1 )

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[09328]
D = A                                        // ROM[09329]
@ R13                                        // ROM[09330]
M = D                                        // ROM[09331]
// ---------------------------
// call
@ Keyboard.readLine:54                       // ROM[09332]
D = A                                        // ROM[09333]
@ R15                                        // ROM[09334]
M = D                                        // ROM[09335]
@ :push_local                                // ROM[09336]
0; JMP                                       // ROM[09337]
( Keyboard.readLine:54)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09338]
D = A                                        // ROM[09339]
@ R13                                        // ROM[09340]
M = D                                        // ROM[09341]
// ---------------------------
// call
@ Keyboard.readLine:55                       // ROM[09342]
D = A                                        // ROM[09343]
@ R15                                        // ROM[09344]
M = D                                        // ROM[09345]
@ :push_local                                // ROM[09346]
0; JMP                                       // ROM[09347]
( Keyboard.readLine:55)

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[09348]
D = A                                        // ROM[09349]
@ R13                                        // ROM[09350]
M = D                                        // ROM[09351]
// ---------------------------
// Push RA
@ Keyboard.readLine:56                       // ROM[09352]
D = A                                        // ROM[09353]
// ---------------------------
// push D
@ SP                                         // ROM[09354]
AM = M+1                                     // ROM[09355]
A = A-1                                      // ROM[09356]
M = D                                        // ROM[09357]
// ---------------------------
// call
@ Keyboard.readLine:57                       // ROM[09358]
D = A                                        // ROM[09359]
@ R15                                        // ROM[09360]
M = D                                        // ROM[09361]
@ :call                                      // ROM[09362]
0; JMP                                       // ROM[09363]
( Keyboard.readLine:57)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[09364]
0; JMP                                       // ROM[09365]
// ---------------------------
// ( RA )
( Keyboard.readLine:56) 

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[09366]
D = A                                        // ROM[09367]
@ R13                                        // ROM[09368]
M = D                                        // ROM[09369]
// ---------------------------
// call
@ Keyboard.readLine:58                       // ROM[09370]
D = A                                        // ROM[09371]
@ R15                                        // ROM[09372]
M = D                                        // ROM[09373]
@ :pop_local                                 // ROM[09374]
0; JMP                                       // ROM[09375]
( Keyboard.readLine:58)

// -------------------------------------
// LABEL: IF_END1
// -------------------------------------
( Keyboard.readLine$IF_END1 )

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Keyboard.readLine$IF_FALSE0 )

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Keyboard.readLine$WHILE_EXP0               // ROM[09376]
0; JMP                                       // ROM[09377]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Keyboard.readLine$WHILE_END0 )

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[09378]
D = A                                        // ROM[09379]
@ R13                                        // ROM[09380]
M = D                                        // ROM[09381]
// ---------------------------
// call
@ Keyboard.readLine:59                       // ROM[09382]
D = A                                        // ROM[09383]
@ R15                                        // ROM[09384]
M = D                                        // ROM[09385]
@ :push_local                                // ROM[09386]
0; JMP                                       // ROM[09387]
( Keyboard.readLine:59)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readLine:60                       // ROM[09388]
D = A                                        // ROM[09389]
@ R15                                        // ROM[09390]
M = D                                        // ROM[09391]
@ :return                                    // ROM[09392]
0; JMP                                       // ROM[09393]
( Keyboard.readLine:60)

// =========================================================
// FUNCTION: Keyboard.readInt(2 locals)
// =========================================================

( Keyboard.readInt )
// ---------------------------
// clear local segment
D = 0                                        // ROM[09394]
// ---------------------------
// push D
@ SP                                         // ROM[09395]
AM = M+1                                     // ROM[09396]
A = A-1                                      // ROM[09397]
M = D                                        // ROM[09398]
// ---------------------------
// push D
@ SP                                         // ROM[09399]
AM = M+1                                     // ROM[09400]
A = A-1                                      // ROM[09401]
M = D                                        // ROM[09402]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09403]
D = A                                        // ROM[09404]
@ R13                                        // ROM[09405]
M = D                                        // ROM[09406]
// ---------------------------
// call
@ Keyboard.readInt:61                        // ROM[09407]
D = A                                        // ROM[09408]
@ R15                                        // ROM[09409]
M = D                                        // ROM[09410]
@ :push_argument                             // ROM[09411]
0; JMP                                       // ROM[09412]
( Keyboard.readInt:61)

// -------------------------------------
// CALL: Keyboard.readLine(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[09413]
D = A                                        // ROM[09414]
@ R13                                        // ROM[09415]
M = D                                        // ROM[09416]
// ---------------------------
// Push RA
@ Keyboard.readInt:62                        // ROM[09417]
D = A                                        // ROM[09418]
// ---------------------------
// push D
@ SP                                         // ROM[09419]
AM = M+1                                     // ROM[09420]
A = A-1                                      // ROM[09421]
M = D                                        // ROM[09422]
// ---------------------------
// call
@ Keyboard.readInt:63                        // ROM[09423]
D = A                                        // ROM[09424]
@ R15                                        // ROM[09425]
M = D                                        // ROM[09426]
@ :call                                      // ROM[09427]
0; JMP                                       // ROM[09428]
( Keyboard.readInt:63)
// ---------------------------
// goto functionName
@ Keyboard.readLine                          // ROM[09429]
0; JMP                                       // ROM[09430]
// ---------------------------
// ( RA )
( Keyboard.readInt:62) 

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09431]
D = A                                        // ROM[09432]
@ R13                                        // ROM[09433]
M = D                                        // ROM[09434]
// ---------------------------
// call
@ Keyboard.readInt:64                        // ROM[09435]
D = A                                        // ROM[09436]
@ R15                                        // ROM[09437]
M = D                                        // ROM[09438]
@ :pop_local                                 // ROM[09439]
0; JMP                                       // ROM[09440]
( Keyboard.readInt:64)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09441]
D = A                                        // ROM[09442]
@ R13                                        // ROM[09443]
M = D                                        // ROM[09444]
// ---------------------------
// call
@ Keyboard.readInt:65                        // ROM[09445]
D = A                                        // ROM[09446]
@ R15                                        // ROM[09447]
M = D                                        // ROM[09448]
@ :push_local                                // ROM[09449]
0; JMP                                       // ROM[09450]
( Keyboard.readInt:65)

// -------------------------------------
// CALL: String.intValue(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[09451]
D = A                                        // ROM[09452]
@ R13                                        // ROM[09453]
M = D                                        // ROM[09454]
// ---------------------------
// Push RA
@ Keyboard.readInt:66                        // ROM[09455]
D = A                                        // ROM[09456]
// ---------------------------
// push D
@ SP                                         // ROM[09457]
AM = M+1                                     // ROM[09458]
A = A-1                                      // ROM[09459]
M = D                                        // ROM[09460]
// ---------------------------
// call
@ Keyboard.readInt:67                        // ROM[09461]
D = A                                        // ROM[09462]
@ R15                                        // ROM[09463]
M = D                                        // ROM[09464]
@ :call                                      // ROM[09465]
0; JMP                                       // ROM[09466]
( Keyboard.readInt:67)
// ---------------------------
// goto functionName
@ String.intValue                            // ROM[09467]
0; JMP                                       // ROM[09468]
// ---------------------------
// ( RA )
( Keyboard.readInt:66) 

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[09469]
D = A                                        // ROM[09470]
@ R13                                        // ROM[09471]
M = D                                        // ROM[09472]
// ---------------------------
// call
@ Keyboard.readInt:68                        // ROM[09473]
D = A                                        // ROM[09474]
@ R15                                        // ROM[09475]
M = D                                        // ROM[09476]
@ :pop_local                                 // ROM[09477]
0; JMP                                       // ROM[09478]
( Keyboard.readInt:68)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09479]
D = A                                        // ROM[09480]
@ R13                                        // ROM[09481]
M = D                                        // ROM[09482]
// ---------------------------
// call
@ Keyboard.readInt:69                        // ROM[09483]
D = A                                        // ROM[09484]
@ R15                                        // ROM[09485]
M = D                                        // ROM[09486]
@ :push_local                                // ROM[09487]
0; JMP                                       // ROM[09488]
( Keyboard.readInt:69)

// -------------------------------------
// CALL: String.dispose(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[09489]
D = A                                        // ROM[09490]
@ R13                                        // ROM[09491]
M = D                                        // ROM[09492]
// ---------------------------
// Push RA
@ Keyboard.readInt:70                        // ROM[09493]
D = A                                        // ROM[09494]
// ---------------------------
// push D
@ SP                                         // ROM[09495]
AM = M+1                                     // ROM[09496]
A = A-1                                      // ROM[09497]
M = D                                        // ROM[09498]
// ---------------------------
// call
@ Keyboard.readInt:71                        // ROM[09499]
D = A                                        // ROM[09500]
@ R15                                        // ROM[09501]
M = D                                        // ROM[09502]
@ :call                                      // ROM[09503]
0; JMP                                       // ROM[09504]
( Keyboard.readInt:71)
// ---------------------------
// goto functionName
@ String.dispose                             // ROM[09505]
0; JMP                                       // ROM[09506]
// ---------------------------
// ( RA )
( Keyboard.readInt:70) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09507]
AM = M-1                                     // ROM[09508]
D = M                                        // ROM[09509]
// ---------------------------
@ 5                                          // ROM[09510]
M = D                                        // ROM[09511]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[09512]
D = A                                        // ROM[09513]
@ R13                                        // ROM[09514]
M = D                                        // ROM[09515]
// ---------------------------
// call
@ Keyboard.readInt:72                        // ROM[09516]
D = A                                        // ROM[09517]
@ R15                                        // ROM[09518]
M = D                                        // ROM[09519]
@ :push_local                                // ROM[09520]
0; JMP                                       // ROM[09521]
( Keyboard.readInt:72)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Keyboard.readInt:73                        // ROM[09522]
D = A                                        // ROM[09523]
@ R15                                        // ROM[09524]
M = D                                        // ROM[09525]
@ :return                                    // ROM[09526]
0; JMP                                       // ROM[09527]
( Keyboard.readInt:73)

// *********************************************************
// Translation of: ./Sys.vm
// *********************************************************


// =========================================================
// FUNCTION: Sys.init(0 locals)
// =========================================================

( Sys.init )
// ---------------------------
// clear local segment
D = 0                                        // ROM[09528]

// -------------------------------------
// CALL: Memory.init(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09529]
D = A                                        // ROM[09530]
@ R13                                        // ROM[09531]
M = D                                        // ROM[09532]
// ---------------------------
// Push RA
@ Sys.init:0                                 // ROM[09533]
D = A                                        // ROM[09534]
// ---------------------------
// push D
@ SP                                         // ROM[09535]
AM = M+1                                     // ROM[09536]
A = A-1                                      // ROM[09537]
M = D                                        // ROM[09538]
// ---------------------------
// call
@ Sys.init:1                                 // ROM[09539]
D = A                                        // ROM[09540]
@ R15                                        // ROM[09541]
M = D                                        // ROM[09542]
@ :call                                      // ROM[09543]
0; JMP                                       // ROM[09544]
( Sys.init:1)
// ---------------------------
// goto functionName
@ Memory.init                                // ROM[09545]
0; JMP                                       // ROM[09546]
// ---------------------------
// ( RA )
( Sys.init:0) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09547]
AM = M-1                                     // ROM[09548]
D = M                                        // ROM[09549]
// ---------------------------
@ 5                                          // ROM[09550]
M = D                                        // ROM[09551]

// -------------------------------------
// CALL: Math.init(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09552]
D = A                                        // ROM[09553]
@ R13                                        // ROM[09554]
M = D                                        // ROM[09555]
// ---------------------------
// Push RA
@ Sys.init:2                                 // ROM[09556]
D = A                                        // ROM[09557]
// ---------------------------
// push D
@ SP                                         // ROM[09558]
AM = M+1                                     // ROM[09559]
A = A-1                                      // ROM[09560]
M = D                                        // ROM[09561]
// ---------------------------
// call
@ Sys.init:3                                 // ROM[09562]
D = A                                        // ROM[09563]
@ R15                                        // ROM[09564]
M = D                                        // ROM[09565]
@ :call                                      // ROM[09566]
0; JMP                                       // ROM[09567]
( Sys.init:3)
// ---------------------------
// goto functionName
@ Math.init                                  // ROM[09568]
0; JMP                                       // ROM[09569]
// ---------------------------
// ( RA )
( Sys.init:2) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09570]
AM = M-1                                     // ROM[09571]
D = M                                        // ROM[09572]
// ---------------------------
@ 5                                          // ROM[09573]
M = D                                        // ROM[09574]

// -------------------------------------
// CALL: Screen.init(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09575]
D = A                                        // ROM[09576]
@ R13                                        // ROM[09577]
M = D                                        // ROM[09578]
// ---------------------------
// Push RA
@ Sys.init:4                                 // ROM[09579]
D = A                                        // ROM[09580]
// ---------------------------
// push D
@ SP                                         // ROM[09581]
AM = M+1                                     // ROM[09582]
A = A-1                                      // ROM[09583]
M = D                                        // ROM[09584]
// ---------------------------
// call
@ Sys.init:5                                 // ROM[09585]
D = A                                        // ROM[09586]
@ R15                                        // ROM[09587]
M = D                                        // ROM[09588]
@ :call                                      // ROM[09589]
0; JMP                                       // ROM[09590]
( Sys.init:5)
// ---------------------------
// goto functionName
@ Screen.init                                // ROM[09591]
0; JMP                                       // ROM[09592]
// ---------------------------
// ( RA )
( Sys.init:4) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09593]
AM = M-1                                     // ROM[09594]
D = M                                        // ROM[09595]
// ---------------------------
@ 5                                          // ROM[09596]
M = D                                        // ROM[09597]

// -------------------------------------
// CALL: Output.init(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09598]
D = A                                        // ROM[09599]
@ R13                                        // ROM[09600]
M = D                                        // ROM[09601]
// ---------------------------
// Push RA
@ Sys.init:6                                 // ROM[09602]
D = A                                        // ROM[09603]
// ---------------------------
// push D
@ SP                                         // ROM[09604]
AM = M+1                                     // ROM[09605]
A = A-1                                      // ROM[09606]
M = D                                        // ROM[09607]
// ---------------------------
// call
@ Sys.init:7                                 // ROM[09608]
D = A                                        // ROM[09609]
@ R15                                        // ROM[09610]
M = D                                        // ROM[09611]
@ :call                                      // ROM[09612]
0; JMP                                       // ROM[09613]
( Sys.init:7)
// ---------------------------
// goto functionName
@ Output.init                                // ROM[09614]
0; JMP                                       // ROM[09615]
// ---------------------------
// ( RA )
( Sys.init:6) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09616]
AM = M-1                                     // ROM[09617]
D = M                                        // ROM[09618]
// ---------------------------
@ 5                                          // ROM[09619]
M = D                                        // ROM[09620]

// -------------------------------------
// CALL: Keyboard.init(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09621]
D = A                                        // ROM[09622]
@ R13                                        // ROM[09623]
M = D                                        // ROM[09624]
// ---------------------------
// Push RA
@ Sys.init:8                                 // ROM[09625]
D = A                                        // ROM[09626]
// ---------------------------
// push D
@ SP                                         // ROM[09627]
AM = M+1                                     // ROM[09628]
A = A-1                                      // ROM[09629]
M = D                                        // ROM[09630]
// ---------------------------
// call
@ Sys.init:9                                 // ROM[09631]
D = A                                        // ROM[09632]
@ R15                                        // ROM[09633]
M = D                                        // ROM[09634]
@ :call                                      // ROM[09635]
0; JMP                                       // ROM[09636]
( Sys.init:9)
// ---------------------------
// goto functionName
@ Keyboard.init                              // ROM[09637]
0; JMP                                       // ROM[09638]
// ---------------------------
// ( RA )
( Sys.init:8) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09639]
AM = M-1                                     // ROM[09640]
D = M                                        // ROM[09641]
// ---------------------------
@ 5                                          // ROM[09642]
M = D                                        // ROM[09643]

// -------------------------------------
// CALL: Main.main(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09644]
D = A                                        // ROM[09645]
@ R13                                        // ROM[09646]
M = D                                        // ROM[09647]
// ---------------------------
// Push RA
@ Sys.init:10                                // ROM[09648]
D = A                                        // ROM[09649]
// ---------------------------
// push D
@ SP                                         // ROM[09650]
AM = M+1                                     // ROM[09651]
A = A-1                                      // ROM[09652]
M = D                                        // ROM[09653]
// ---------------------------
// call
@ Sys.init:11                                // ROM[09654]
D = A                                        // ROM[09655]
@ R15                                        // ROM[09656]
M = D                                        // ROM[09657]
@ :call                                      // ROM[09658]
0; JMP                                       // ROM[09659]
( Sys.init:11)
// ---------------------------
// goto functionName
@ Main.main                                  // ROM[09660]
0; JMP                                       // ROM[09661]
// ---------------------------
// ( RA )
( Sys.init:10) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09662]
AM = M-1                                     // ROM[09663]
D = M                                        // ROM[09664]
// ---------------------------
@ 5                                          // ROM[09665]
M = D                                        // ROM[09666]

// -------------------------------------
// CALL: Sys.halt(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[09667]
D = A                                        // ROM[09668]
@ R13                                        // ROM[09669]
M = D                                        // ROM[09670]
// ---------------------------
// Push RA
@ Sys.init:12                                // ROM[09671]
D = A                                        // ROM[09672]
// ---------------------------
// push D
@ SP                                         // ROM[09673]
AM = M+1                                     // ROM[09674]
A = A-1                                      // ROM[09675]
M = D                                        // ROM[09676]
// ---------------------------
// call
@ Sys.init:13                                // ROM[09677]
D = A                                        // ROM[09678]
@ R15                                        // ROM[09679]
M = D                                        // ROM[09680]
@ :call                                      // ROM[09681]
0; JMP                                       // ROM[09682]
( Sys.init:13)
// ---------------------------
// goto functionName
@ Sys.halt                                   // ROM[09683]
0; JMP                                       // ROM[09684]
// ---------------------------
// ( RA )
( Sys.init:12) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09685]
AM = M-1                                     // ROM[09686]
D = M                                        // ROM[09687]
// ---------------------------
@ 5                                          // ROM[09688]
M = D                                        // ROM[09689]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[09690]
D = A                                        // ROM[09691]
// ---------------------------
// push D
@ SP                                         // ROM[09692]
AM = M+1                                     // ROM[09693]
A = A-1                                      // ROM[09694]
M = D                                        // ROM[09695]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Sys.init:14                                // ROM[09696]
D = A                                        // ROM[09697]
@ R15                                        // ROM[09698]
M = D                                        // ROM[09699]
@ :return                                    // ROM[09700]
0; JMP                                       // ROM[09701]
( Sys.init:14)

// =========================================================
// FUNCTION: Sys.halt(0 locals)
// =========================================================

( Sys.halt )
// ---------------------------
// clear local segment
D = 0                                        // ROM[09702]

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Sys.halt$WHILE_EXP0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[09703]
D = A                                        // ROM[09704]
// ---------------------------
// push D
@ SP                                         // ROM[09705]
AM = M+1                                     // ROM[09706]
A = A-1                                      // ROM[09707]
M = D                                        // ROM[09708]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[09709]
A = M-1                                      // ROM[09710]
M = !M                                       // ROM[09711]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[09712]
A = M-1                                      // ROM[09713]
M = !M                                       // ROM[09714]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09715]
AM = M-1                                     // ROM[09716]
D = M                                        // ROM[09717]
// ---------------------------
@ Sys.halt$WHILE_END0                        // ROM[09718]
D; JNE                                       // ROM[09719]

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Sys.halt$WHILE_EXP0                        // ROM[09720]
0; JMP                                       // ROM[09721]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Sys.halt$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[09722]
D = A                                        // ROM[09723]
// ---------------------------
// push D
@ SP                                         // ROM[09724]
AM = M+1                                     // ROM[09725]
A = A-1                                      // ROM[09726]
M = D                                        // ROM[09727]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Sys.halt:15                                // ROM[09728]
D = A                                        // ROM[09729]
@ R15                                        // ROM[09730]
M = D                                        // ROM[09731]
@ :return                                    // ROM[09732]
0; JMP                                       // ROM[09733]
( Sys.halt:15)

// =========================================================
// FUNCTION: Sys.wait(1 locals)
// =========================================================

( Sys.wait )
// ---------------------------
// clear local segment
D = 0                                        // ROM[09734]
// ---------------------------
// push D
@ SP                                         // ROM[09735]
AM = M+1                                     // ROM[09736]
A = A-1                                      // ROM[09737]
M = D                                        // ROM[09738]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09739]
D = A                                        // ROM[09740]
@ R13                                        // ROM[09741]
M = D                                        // ROM[09742]
// ---------------------------
// call
@ Sys.wait:16                                // ROM[09743]
D = A                                        // ROM[09744]
@ R15                                        // ROM[09745]
M = D                                        // ROM[09746]
@ :push_argument                             // ROM[09747]
0; JMP                                       // ROM[09748]
( Sys.wait:16)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[09749]
D = A                                        // ROM[09750]
// ---------------------------
// push D
@ SP                                         // ROM[09751]
AM = M+1                                     // ROM[09752]
A = A-1                                      // ROM[09753]
M = D                                        // ROM[09754]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Sys.wait:17                                // ROM[09755]
D = A                                        // ROM[09756]
@ R15                                        // ROM[09757]
M = D                                        // ROM[09758]
@ :lt                                        // ROM[09759]
0; JMP                                       // ROM[09760]
( Sys.wait:17)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09761]
AM = M-1                                     // ROM[09762]
D = M                                        // ROM[09763]
// ---------------------------
@ Sys.wait$IF_TRUE0                          // ROM[09764]
D; JNE                                       // ROM[09765]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Sys.wait$IF_FALSE0                         // ROM[09766]
0; JMP                                       // ROM[09767]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Sys.wait$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[09768]
D = A                                        // ROM[09769]
// ---------------------------
// push D
@ SP                                         // ROM[09770]
AM = M+1                                     // ROM[09771]
A = A-1                                      // ROM[09772]
M = D                                        // ROM[09773]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[09774]
D = A                                        // ROM[09775]
@ R13                                        // ROM[09776]
M = D                                        // ROM[09777]
// ---------------------------
// Push RA
@ Sys.wait:18                                // ROM[09778]
D = A                                        // ROM[09779]
// ---------------------------
// push D
@ SP                                         // ROM[09780]
AM = M+1                                     // ROM[09781]
A = A-1                                      // ROM[09782]
M = D                                        // ROM[09783]
// ---------------------------
// call
@ Sys.wait:19                                // ROM[09784]
D = A                                        // ROM[09785]
@ R15                                        // ROM[09786]
M = D                                        // ROM[09787]
@ :call                                      // ROM[09788]
0; JMP                                       // ROM[09789]
( Sys.wait:19)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[09790]
0; JMP                                       // ROM[09791]
// ---------------------------
// ( RA )
( Sys.wait:18) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09792]
AM = M-1                                     // ROM[09793]
D = M                                        // ROM[09794]
// ---------------------------
@ 5                                          // ROM[09795]
M = D                                        // ROM[09796]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Sys.wait$IF_FALSE0 )

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Sys.wait$WHILE_EXP0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09797]
D = A                                        // ROM[09798]
@ R13                                        // ROM[09799]
M = D                                        // ROM[09800]
// ---------------------------
// call
@ Sys.wait:20                                // ROM[09801]
D = A                                        // ROM[09802]
@ R15                                        // ROM[09803]
M = D                                        // ROM[09804]
@ :push_argument                             // ROM[09805]
0; JMP                                       // ROM[09806]
( Sys.wait:20)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[09807]
D = A                                        // ROM[09808]
// ---------------------------
// push D
@ SP                                         // ROM[09809]
AM = M+1                                     // ROM[09810]
A = A-1                                      // ROM[09811]
M = D                                        // ROM[09812]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Sys.wait:21                                // ROM[09813]
D = A                                        // ROM[09814]
@ R15                                        // ROM[09815]
M = D                                        // ROM[09816]
@ :gt                                        // ROM[09817]
0; JMP                                       // ROM[09818]
( Sys.wait:21)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[09819]
A = M-1                                      // ROM[09820]
M = !M                                       // ROM[09821]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09822]
AM = M-1                                     // ROM[09823]
D = M                                        // ROM[09824]
// ---------------------------
@ Sys.wait$WHILE_END0                        // ROM[09825]
D; JNE                                       // ROM[09826]

// -------------------------------------
// PUSH: <constant, 50>
// -------------------------------------
@ 50                                         // ROM[09827]
D = A                                        // ROM[09828]
// ---------------------------
// push D
@ SP                                         // ROM[09829]
AM = M+1                                     // ROM[09830]
A = A-1                                      // ROM[09831]
M = D                                        // ROM[09832]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09833]
D = A                                        // ROM[09834]
@ R13                                        // ROM[09835]
M = D                                        // ROM[09836]
// ---------------------------
// call
@ Sys.wait:22                                // ROM[09837]
D = A                                        // ROM[09838]
@ R15                                        // ROM[09839]
M = D                                        // ROM[09840]
@ :pop_local                                 // ROM[09841]
0; JMP                                       // ROM[09842]
( Sys.wait:22)

// -------------------------------------
// LABEL: WHILE_EXP1
// -------------------------------------
( Sys.wait$WHILE_EXP1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09843]
D = A                                        // ROM[09844]
@ R13                                        // ROM[09845]
M = D                                        // ROM[09846]
// ---------------------------
// call
@ Sys.wait:23                                // ROM[09847]
D = A                                        // ROM[09848]
@ R15                                        // ROM[09849]
M = D                                        // ROM[09850]
@ :push_local                                // ROM[09851]
0; JMP                                       // ROM[09852]
( Sys.wait:23)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[09853]
D = A                                        // ROM[09854]
// ---------------------------
// push D
@ SP                                         // ROM[09855]
AM = M+1                                     // ROM[09856]
A = A-1                                      // ROM[09857]
M = D                                        // ROM[09858]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Sys.wait:24                                // ROM[09859]
D = A                                        // ROM[09860]
@ R15                                        // ROM[09861]
M = D                                        // ROM[09862]
@ :gt                                        // ROM[09863]
0; JMP                                       // ROM[09864]
( Sys.wait:24)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[09865]
A = M-1                                      // ROM[09866]
M = !M                                       // ROM[09867]

// -------------------------------------
// IF-GOTO: WHILE_END1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[09868]
AM = M-1                                     // ROM[09869]
D = M                                        // ROM[09870]
// ---------------------------
@ Sys.wait$WHILE_END1                        // ROM[09871]
D; JNE                                       // ROM[09872]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09873]
D = A                                        // ROM[09874]
@ R13                                        // ROM[09875]
M = D                                        // ROM[09876]
// ---------------------------
// call
@ Sys.wait:25                                // ROM[09877]
D = A                                        // ROM[09878]
@ R15                                        // ROM[09879]
M = D                                        // ROM[09880]
@ :push_local                                // ROM[09881]
0; JMP                                       // ROM[09882]
( Sys.wait:25)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[09883]
D = A                                        // ROM[09884]
// ---------------------------
// push D
@ SP                                         // ROM[09885]
AM = M+1                                     // ROM[09886]
A = A-1                                      // ROM[09887]
M = D                                        // ROM[09888]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Sys.wait:26                                // ROM[09889]
D = A                                        // ROM[09890]
@ R15                                        // ROM[09891]
M = D                                        // ROM[09892]
@ :sub                                       // ROM[09893]
0; JMP                                       // ROM[09894]
( Sys.wait:26)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09895]
D = A                                        // ROM[09896]
@ R13                                        // ROM[09897]
M = D                                        // ROM[09898]
// ---------------------------
// call
@ Sys.wait:27                                // ROM[09899]
D = A                                        // ROM[09900]
@ R15                                        // ROM[09901]
M = D                                        // ROM[09902]
@ :pop_local                                 // ROM[09903]
0; JMP                                       // ROM[09904]
( Sys.wait:27)

// -------------------------------------
// GOTO: WHILE_EXP1
// -------------------------------------
@ Sys.wait$WHILE_EXP1                        // ROM[09905]
0; JMP                                       // ROM[09906]

// -------------------------------------
// LABEL: WHILE_END1
// -------------------------------------
( Sys.wait$WHILE_END1 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09907]
D = A                                        // ROM[09908]
@ R13                                        // ROM[09909]
M = D                                        // ROM[09910]
// ---------------------------
// call
@ Sys.wait:28                                // ROM[09911]
D = A                                        // ROM[09912]
@ R15                                        // ROM[09913]
M = D                                        // ROM[09914]
@ :push_argument                             // ROM[09915]
0; JMP                                       // ROM[09916]
( Sys.wait:28)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[09917]
D = A                                        // ROM[09918]
// ---------------------------
// push D
@ SP                                         // ROM[09919]
AM = M+1                                     // ROM[09920]
A = A-1                                      // ROM[09921]
M = D                                        // ROM[09922]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Sys.wait:29                                // ROM[09923]
D = A                                        // ROM[09924]
@ R15                                        // ROM[09925]
M = D                                        // ROM[09926]
@ :sub                                       // ROM[09927]
0; JMP                                       // ROM[09928]
( Sys.wait:29)

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[09929]
D = A                                        // ROM[09930]
@ R13                                        // ROM[09931]
M = D                                        // ROM[09932]
// ---------------------------
// call
@ Sys.wait:30                                // ROM[09933]
D = A                                        // ROM[09934]
@ R15                                        // ROM[09935]
M = D                                        // ROM[09936]
@ :pop_argument                              // ROM[09937]
0; JMP                                       // ROM[09938]
( Sys.wait:30)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Sys.wait$WHILE_EXP0                        // ROM[09939]
0; JMP                                       // ROM[09940]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Sys.wait$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[09941]
D = A                                        // ROM[09942]
// ---------------------------
// push D
@ SP                                         // ROM[09943]
AM = M+1                                     // ROM[09944]
A = A-1                                      // ROM[09945]
M = D                                        // ROM[09946]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Sys.wait:31                                // ROM[09947]
D = A                                        // ROM[09948]
@ R15                                        // ROM[09949]
M = D                                        // ROM[09950]
@ :return                                    // ROM[09951]
0; JMP                                       // ROM[09952]
( Sys.wait:31)

// =========================================================
// FUNCTION: Sys.error(0 locals)
// =========================================================

( Sys.error )
// ---------------------------
// clear local segment
D = 0                                        // ROM[09953]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[09954]
D = A                                        // ROM[09955]
// ---------------------------
// push D
@ SP                                         // ROM[09956]
AM = M+1                                     // ROM[09957]
A = A-1                                      // ROM[09958]
M = D                                        // ROM[09959]

// -------------------------------------
// CALL: String.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[09960]
D = A                                        // ROM[09961]
@ R13                                        // ROM[09962]
M = D                                        // ROM[09963]
// ---------------------------
// Push RA
@ Sys.error:32                               // ROM[09964]
D = A                                        // ROM[09965]
// ---------------------------
// push D
@ SP                                         // ROM[09966]
AM = M+1                                     // ROM[09967]
A = A-1                                      // ROM[09968]
M = D                                        // ROM[09969]
// ---------------------------
// call
@ Sys.error:33                               // ROM[09970]
D = A                                        // ROM[09971]
@ R15                                        // ROM[09972]
M = D                                        // ROM[09973]
@ :call                                      // ROM[09974]
0; JMP                                       // ROM[09975]
( Sys.error:33)
// ---------------------------
// goto functionName
@ String.new                                 // ROM[09976]
0; JMP                                       // ROM[09977]
// ---------------------------
// ( RA )
( Sys.error:32) 

// -------------------------------------
// PUSH: <constant, 69>
// -------------------------------------
@ 69                                         // ROM[09978]
D = A                                        // ROM[09979]
// ---------------------------
// push D
@ SP                                         // ROM[09980]
AM = M+1                                     // ROM[09981]
A = A-1                                      // ROM[09982]
M = D                                        // ROM[09983]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[09984]
D = A                                        // ROM[09985]
@ R13                                        // ROM[09986]
M = D                                        // ROM[09987]
// ---------------------------
// Push RA
@ Sys.error:34                               // ROM[09988]
D = A                                        // ROM[09989]
// ---------------------------
// push D
@ SP                                         // ROM[09990]
AM = M+1                                     // ROM[09991]
A = A-1                                      // ROM[09992]
M = D                                        // ROM[09993]
// ---------------------------
// call
@ Sys.error:35                               // ROM[09994]
D = A                                        // ROM[09995]
@ R15                                        // ROM[09996]
M = D                                        // ROM[09997]
@ :call                                      // ROM[09998]
0; JMP                                       // ROM[09999]
( Sys.error:35)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[10000]
0; JMP                                       // ROM[10001]
// ---------------------------
// ( RA )
( Sys.error:34) 

// -------------------------------------
// PUSH: <constant, 82>
// -------------------------------------
@ 82                                         // ROM[10002]
D = A                                        // ROM[10003]
// ---------------------------
// push D
@ SP                                         // ROM[10004]
AM = M+1                                     // ROM[10005]
A = A-1                                      // ROM[10006]
M = D                                        // ROM[10007]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[10008]
D = A                                        // ROM[10009]
@ R13                                        // ROM[10010]
M = D                                        // ROM[10011]
// ---------------------------
// Push RA
@ Sys.error:36                               // ROM[10012]
D = A                                        // ROM[10013]
// ---------------------------
// push D
@ SP                                         // ROM[10014]
AM = M+1                                     // ROM[10015]
A = A-1                                      // ROM[10016]
M = D                                        // ROM[10017]
// ---------------------------
// call
@ Sys.error:37                               // ROM[10018]
D = A                                        // ROM[10019]
@ R15                                        // ROM[10020]
M = D                                        // ROM[10021]
@ :call                                      // ROM[10022]
0; JMP                                       // ROM[10023]
( Sys.error:37)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[10024]
0; JMP                                       // ROM[10025]
// ---------------------------
// ( RA )
( Sys.error:36) 

// -------------------------------------
// PUSH: <constant, 82>
// -------------------------------------
@ 82                                         // ROM[10026]
D = A                                        // ROM[10027]
// ---------------------------
// push D
@ SP                                         // ROM[10028]
AM = M+1                                     // ROM[10029]
A = A-1                                      // ROM[10030]
M = D                                        // ROM[10031]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[10032]
D = A                                        // ROM[10033]
@ R13                                        // ROM[10034]
M = D                                        // ROM[10035]
// ---------------------------
// Push RA
@ Sys.error:38                               // ROM[10036]
D = A                                        // ROM[10037]
// ---------------------------
// push D
@ SP                                         // ROM[10038]
AM = M+1                                     // ROM[10039]
A = A-1                                      // ROM[10040]
M = D                                        // ROM[10041]
// ---------------------------
// call
@ Sys.error:39                               // ROM[10042]
D = A                                        // ROM[10043]
@ R15                                        // ROM[10044]
M = D                                        // ROM[10045]
@ :call                                      // ROM[10046]
0; JMP                                       // ROM[10047]
( Sys.error:39)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[10048]
0; JMP                                       // ROM[10049]
// ---------------------------
// ( RA )
( Sys.error:38) 

// -------------------------------------
// CALL: Output.printString(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[10050]
D = A                                        // ROM[10051]
@ R13                                        // ROM[10052]
M = D                                        // ROM[10053]
// ---------------------------
// Push RA
@ Sys.error:40                               // ROM[10054]
D = A                                        // ROM[10055]
// ---------------------------
// push D
@ SP                                         // ROM[10056]
AM = M+1                                     // ROM[10057]
A = A-1                                      // ROM[10058]
M = D                                        // ROM[10059]
// ---------------------------
// call
@ Sys.error:41                               // ROM[10060]
D = A                                        // ROM[10061]
@ R15                                        // ROM[10062]
M = D                                        // ROM[10063]
@ :call                                      // ROM[10064]
0; JMP                                       // ROM[10065]
( Sys.error:41)
// ---------------------------
// goto functionName
@ Output.printString                         // ROM[10066]
0; JMP                                       // ROM[10067]
// ---------------------------
// ( RA )
( Sys.error:40) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10068]
AM = M-1                                     // ROM[10069]
D = M                                        // ROM[10070]
// ---------------------------
@ 5                                          // ROM[10071]
M = D                                        // ROM[10072]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[10073]
D = A                                        // ROM[10074]
@ R13                                        // ROM[10075]
M = D                                        // ROM[10076]
// ---------------------------
// call
@ Sys.error:42                               // ROM[10077]
D = A                                        // ROM[10078]
@ R15                                        // ROM[10079]
M = D                                        // ROM[10080]
@ :push_argument                             // ROM[10081]
0; JMP                                       // ROM[10082]
( Sys.error:42)

// -------------------------------------
// CALL: Output.printInt(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[10083]
D = A                                        // ROM[10084]
@ R13                                        // ROM[10085]
M = D                                        // ROM[10086]
// ---------------------------
// Push RA
@ Sys.error:43                               // ROM[10087]
D = A                                        // ROM[10088]
// ---------------------------
// push D
@ SP                                         // ROM[10089]
AM = M+1                                     // ROM[10090]
A = A-1                                      // ROM[10091]
M = D                                        // ROM[10092]
// ---------------------------
// call
@ Sys.error:44                               // ROM[10093]
D = A                                        // ROM[10094]
@ R15                                        // ROM[10095]
M = D                                        // ROM[10096]
@ :call                                      // ROM[10097]
0; JMP                                       // ROM[10098]
( Sys.error:44)
// ---------------------------
// goto functionName
@ Output.printInt                            // ROM[10099]
0; JMP                                       // ROM[10100]
// ---------------------------
// ( RA )
( Sys.error:43) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10101]
AM = M-1                                     // ROM[10102]
D = M                                        // ROM[10103]
// ---------------------------
@ 5                                          // ROM[10104]
M = D                                        // ROM[10105]

// -------------------------------------
// CALL: Sys.halt(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[10106]
D = A                                        // ROM[10107]
@ R13                                        // ROM[10108]
M = D                                        // ROM[10109]
// ---------------------------
// Push RA
@ Sys.error:45                               // ROM[10110]
D = A                                        // ROM[10111]
// ---------------------------
// push D
@ SP                                         // ROM[10112]
AM = M+1                                     // ROM[10113]
A = A-1                                      // ROM[10114]
M = D                                        // ROM[10115]
// ---------------------------
// call
@ Sys.error:46                               // ROM[10116]
D = A                                        // ROM[10117]
@ R15                                        // ROM[10118]
M = D                                        // ROM[10119]
@ :call                                      // ROM[10120]
0; JMP                                       // ROM[10121]
( Sys.error:46)
// ---------------------------
// goto functionName
@ Sys.halt                                   // ROM[10122]
0; JMP                                       // ROM[10123]
// ---------------------------
// ( RA )
( Sys.error:45) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10124]
AM = M-1                                     // ROM[10125]
D = M                                        // ROM[10126]
// ---------------------------
@ 5                                          // ROM[10127]
M = D                                        // ROM[10128]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10129]
D = A                                        // ROM[10130]
// ---------------------------
// push D
@ SP                                         // ROM[10131]
AM = M+1                                     // ROM[10132]
A = A-1                                      // ROM[10133]
M = D                                        // ROM[10134]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Sys.error:47                               // ROM[10135]
D = A                                        // ROM[10136]
@ R15                                        // ROM[10137]
M = D                                        // ROM[10138]
@ :return                                    // ROM[10139]
0; JMP                                       // ROM[10140]
( Sys.error:47)

// *********************************************************
// Translation of: ./Output.vm
// *********************************************************


// =========================================================
// FUNCTION: Output.init(0 locals)
// =========================================================

( Output.init )
// ---------------------------
// clear local segment
D = 0                                        // ROM[10141]

// -------------------------------------
// PUSH: <constant, 16384>
// -------------------------------------
@ 16384                                      // ROM[10142]
D = A                                        // ROM[10143]
// ---------------------------
// push D
@ SP                                         // ROM[10144]
AM = M+1                                     // ROM[10145]
A = A-1                                      // ROM[10146]
M = D                                        // ROM[10147]

// -------------------------------------
// POP: <static, 4>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10148]
AM = M-1                                     // ROM[10149]
D = M                                        // ROM[10150]
// ---------------------------
// static[index] = D
@ Output.4                                   // ROM[10151]
M = D                                        // ROM[10152]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10153]
D = A                                        // ROM[10154]
// ---------------------------
// push D
@ SP                                         // ROM[10155]
AM = M+1                                     // ROM[10156]
A = A-1                                      // ROM[10157]
M = D                                        // ROM[10158]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[10159]
A = M-1                                      // ROM[10160]
M = !M                                       // ROM[10161]

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10162]
AM = M-1                                     // ROM[10163]
D = M                                        // ROM[10164]
// ---------------------------
// static[index] = D
@ Output.2                                   // ROM[10165]
M = D                                        // ROM[10166]

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[10167]
D = A                                        // ROM[10168]
// ---------------------------
// push D
@ SP                                         // ROM[10169]
AM = M+1                                     // ROM[10170]
A = A-1                                      // ROM[10171]
M = D                                        // ROM[10172]

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10173]
AM = M-1                                     // ROM[10174]
D = M                                        // ROM[10175]
// ---------------------------
// static[index] = D
@ Output.1                                   // ROM[10176]
M = D                                        // ROM[10177]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10178]
D = A                                        // ROM[10179]
// ---------------------------
// push D
@ SP                                         // ROM[10180]
AM = M+1                                     // ROM[10181]
A = A-1                                      // ROM[10182]
M = D                                        // ROM[10183]

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10184]
AM = M-1                                     // ROM[10185]
D = M                                        // ROM[10186]
// ---------------------------
// static[index] = D
@ Output.0                                   // ROM[10187]
M = D                                        // ROM[10188]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[10189]
D = A                                        // ROM[10190]
// ---------------------------
// push D
@ SP                                         // ROM[10191]
AM = M+1                                     // ROM[10192]
A = A-1                                      // ROM[10193]
M = D                                        // ROM[10194]

// -------------------------------------
// CALL: String.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[10195]
D = A                                        // ROM[10196]
@ R13                                        // ROM[10197]
M = D                                        // ROM[10198]
// ---------------------------
// Push RA
@ Output.init:0                              // ROM[10199]
D = A                                        // ROM[10200]
// ---------------------------
// push D
@ SP                                         // ROM[10201]
AM = M+1                                     // ROM[10202]
A = A-1                                      // ROM[10203]
M = D                                        // ROM[10204]
// ---------------------------
// call
@ Output.init:1                              // ROM[10205]
D = A                                        // ROM[10206]
@ R15                                        // ROM[10207]
M = D                                        // ROM[10208]
@ :call                                      // ROM[10209]
0; JMP                                       // ROM[10210]
( Output.init:1)
// ---------------------------
// goto functionName
@ String.new                                 // ROM[10211]
0; JMP                                       // ROM[10212]
// ---------------------------
// ( RA )
( Output.init:0) 

// -------------------------------------
// POP: <static, 3>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10213]
AM = M-1                                     // ROM[10214]
D = M                                        // ROM[10215]
// ---------------------------
// static[index] = D
@ Output.3                                   // ROM[10216]
M = D                                        // ROM[10217]

// -------------------------------------
// CALL: Output.initMap(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[10218]
D = A                                        // ROM[10219]
@ R13                                        // ROM[10220]
M = D                                        // ROM[10221]
// ---------------------------
// Push RA
@ Output.init:2                              // ROM[10222]
D = A                                        // ROM[10223]
// ---------------------------
// push D
@ SP                                         // ROM[10224]
AM = M+1                                     // ROM[10225]
A = A-1                                      // ROM[10226]
M = D                                        // ROM[10227]
// ---------------------------
// call
@ Output.init:3                              // ROM[10228]
D = A                                        // ROM[10229]
@ R15                                        // ROM[10230]
M = D                                        // ROM[10231]
@ :call                                      // ROM[10232]
0; JMP                                       // ROM[10233]
( Output.init:3)
// ---------------------------
// goto functionName
@ Output.initMap                             // ROM[10234]
0; JMP                                       // ROM[10235]
// ---------------------------
// ( RA )
( Output.init:2) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10236]
AM = M-1                                     // ROM[10237]
D = M                                        // ROM[10238]
// ---------------------------
@ 5                                          // ROM[10239]
M = D                                        // ROM[10240]

// -------------------------------------
// CALL: Output.createShiftedMap(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[10241]
D = A                                        // ROM[10242]
@ R13                                        // ROM[10243]
M = D                                        // ROM[10244]
// ---------------------------
// Push RA
@ Output.init:4                              // ROM[10245]
D = A                                        // ROM[10246]
// ---------------------------
// push D
@ SP                                         // ROM[10247]
AM = M+1                                     // ROM[10248]
A = A-1                                      // ROM[10249]
M = D                                        // ROM[10250]
// ---------------------------
// call
@ Output.init:5                              // ROM[10251]
D = A                                        // ROM[10252]
@ R15                                        // ROM[10253]
M = D                                        // ROM[10254]
@ :call                                      // ROM[10255]
0; JMP                                       // ROM[10256]
( Output.init:5)
// ---------------------------
// goto functionName
@ Output.createShiftedMap                    // ROM[10257]
0; JMP                                       // ROM[10258]
// ---------------------------
// ( RA )
( Output.init:4) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10259]
AM = M-1                                     // ROM[10260]
D = M                                        // ROM[10261]
// ---------------------------
@ 5                                          // ROM[10262]
M = D                                        // ROM[10263]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10264]
D = A                                        // ROM[10265]
// ---------------------------
// push D
@ SP                                         // ROM[10266]
AM = M+1                                     // ROM[10267]
A = A-1                                      // ROM[10268]
M = D                                        // ROM[10269]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.init:6                              // ROM[10270]
D = A                                        // ROM[10271]
@ R15                                        // ROM[10272]
M = D                                        // ROM[10273]
@ :return                                    // ROM[10274]
0; JMP                                       // ROM[10275]
( Output.init:6)

// =========================================================
// FUNCTION: Output.initMap(0 locals)
// =========================================================

( Output.initMap )
// ---------------------------
// clear local segment
D = 0                                        // ROM[10276]

// -------------------------------------
// PUSH: <constant, 127>
// -------------------------------------
@ 127                                        // ROM[10277]
D = A                                        // ROM[10278]
// ---------------------------
// push D
@ SP                                         // ROM[10279]
AM = M+1                                     // ROM[10280]
A = A-1                                      // ROM[10281]
M = D                                        // ROM[10282]

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[10283]
D = A                                        // ROM[10284]
@ R13                                        // ROM[10285]
M = D                                        // ROM[10286]
// ---------------------------
// Push RA
@ Output.initMap:7                           // ROM[10287]
D = A                                        // ROM[10288]
// ---------------------------
// push D
@ SP                                         // ROM[10289]
AM = M+1                                     // ROM[10290]
A = A-1                                      // ROM[10291]
M = D                                        // ROM[10292]
// ---------------------------
// call
@ Output.initMap:8                           // ROM[10293]
D = A                                        // ROM[10294]
@ R15                                        // ROM[10295]
M = D                                        // ROM[10296]
@ :call                                      // ROM[10297]
0; JMP                                       // ROM[10298]
( Output.initMap:8)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[10299]
0; JMP                                       // ROM[10300]
// ---------------------------
// ( RA )
( Output.initMap:7) 

// -------------------------------------
// POP: <static, 5>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10301]
AM = M-1                                     // ROM[10302]
D = M                                        // ROM[10303]
// ---------------------------
// static[index] = D
@ Output.5                                   // ROM[10304]
M = D                                        // ROM[10305]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10306]
D = A                                        // ROM[10307]
// ---------------------------
// push D
@ SP                                         // ROM[10308]
AM = M+1                                     // ROM[10309]
A = A-1                                      // ROM[10310]
M = D                                        // ROM[10311]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10312]
D = A                                        // ROM[10313]
// ---------------------------
// push D
@ SP                                         // ROM[10314]
AM = M+1                                     // ROM[10315]
A = A-1                                      // ROM[10316]
M = D                                        // ROM[10317]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10318]
D = A                                        // ROM[10319]
// ---------------------------
// push D
@ SP                                         // ROM[10320]
AM = M+1                                     // ROM[10321]
A = A-1                                      // ROM[10322]
M = D                                        // ROM[10323]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10324]
D = A                                        // ROM[10325]
// ---------------------------
// push D
@ SP                                         // ROM[10326]
AM = M+1                                     // ROM[10327]
A = A-1                                      // ROM[10328]
M = D                                        // ROM[10329]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10330]
D = A                                        // ROM[10331]
// ---------------------------
// push D
@ SP                                         // ROM[10332]
AM = M+1                                     // ROM[10333]
A = A-1                                      // ROM[10334]
M = D                                        // ROM[10335]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10336]
D = A                                        // ROM[10337]
// ---------------------------
// push D
@ SP                                         // ROM[10338]
AM = M+1                                     // ROM[10339]
A = A-1                                      // ROM[10340]
M = D                                        // ROM[10341]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10342]
D = A                                        // ROM[10343]
// ---------------------------
// push D
@ SP                                         // ROM[10344]
AM = M+1                                     // ROM[10345]
A = A-1                                      // ROM[10346]
M = D                                        // ROM[10347]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10348]
D = A                                        // ROM[10349]
// ---------------------------
// push D
@ SP                                         // ROM[10350]
AM = M+1                                     // ROM[10351]
A = A-1                                      // ROM[10352]
M = D                                        // ROM[10353]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10354]
D = A                                        // ROM[10355]
// ---------------------------
// push D
@ SP                                         // ROM[10356]
AM = M+1                                     // ROM[10357]
A = A-1                                      // ROM[10358]
M = D                                        // ROM[10359]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10360]
D = A                                        // ROM[10361]
// ---------------------------
// push D
@ SP                                         // ROM[10362]
AM = M+1                                     // ROM[10363]
A = A-1                                      // ROM[10364]
M = D                                        // ROM[10365]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10366]
D = A                                        // ROM[10367]
// ---------------------------
// push D
@ SP                                         // ROM[10368]
AM = M+1                                     // ROM[10369]
A = A-1                                      // ROM[10370]
M = D                                        // ROM[10371]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10372]
D = A                                        // ROM[10373]
// ---------------------------
// push D
@ SP                                         // ROM[10374]
AM = M+1                                     // ROM[10375]
A = A-1                                      // ROM[10376]
M = D                                        // ROM[10377]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[10378]
D = A                                        // ROM[10379]
@ R13                                        // ROM[10380]
M = D                                        // ROM[10381]
// ---------------------------
// Push RA
@ Output.initMap:9                           // ROM[10382]
D = A                                        // ROM[10383]
// ---------------------------
// push D
@ SP                                         // ROM[10384]
AM = M+1                                     // ROM[10385]
A = A-1                                      // ROM[10386]
M = D                                        // ROM[10387]
// ---------------------------
// call
@ Output.initMap:10                          // ROM[10388]
D = A                                        // ROM[10389]
@ R15                                        // ROM[10390]
M = D                                        // ROM[10391]
@ :call                                      // ROM[10392]
0; JMP                                       // ROM[10393]
( Output.initMap:10)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[10394]
0; JMP                                       // ROM[10395]
// ---------------------------
// ( RA )
( Output.initMap:9) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10396]
AM = M-1                                     // ROM[10397]
D = M                                        // ROM[10398]
// ---------------------------
@ 5                                          // ROM[10399]
M = D                                        // ROM[10400]

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[10401]
D = A                                        // ROM[10402]
// ---------------------------
// push D
@ SP                                         // ROM[10403]
AM = M+1                                     // ROM[10404]
A = A-1                                      // ROM[10405]
M = D                                        // ROM[10406]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10407]
D = A                                        // ROM[10408]
// ---------------------------
// push D
@ SP                                         // ROM[10409]
AM = M+1                                     // ROM[10410]
A = A-1                                      // ROM[10411]
M = D                                        // ROM[10412]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10413]
D = A                                        // ROM[10414]
// ---------------------------
// push D
@ SP                                         // ROM[10415]
AM = M+1                                     // ROM[10416]
A = A-1                                      // ROM[10417]
M = D                                        // ROM[10418]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10419]
D = A                                        // ROM[10420]
// ---------------------------
// push D
@ SP                                         // ROM[10421]
AM = M+1                                     // ROM[10422]
A = A-1                                      // ROM[10423]
M = D                                        // ROM[10424]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10425]
D = A                                        // ROM[10426]
// ---------------------------
// push D
@ SP                                         // ROM[10427]
AM = M+1                                     // ROM[10428]
A = A-1                                      // ROM[10429]
M = D                                        // ROM[10430]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10431]
D = A                                        // ROM[10432]
// ---------------------------
// push D
@ SP                                         // ROM[10433]
AM = M+1                                     // ROM[10434]
A = A-1                                      // ROM[10435]
M = D                                        // ROM[10436]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10437]
D = A                                        // ROM[10438]
// ---------------------------
// push D
@ SP                                         // ROM[10439]
AM = M+1                                     // ROM[10440]
A = A-1                                      // ROM[10441]
M = D                                        // ROM[10442]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10443]
D = A                                        // ROM[10444]
// ---------------------------
// push D
@ SP                                         // ROM[10445]
AM = M+1                                     // ROM[10446]
A = A-1                                      // ROM[10447]
M = D                                        // ROM[10448]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10449]
D = A                                        // ROM[10450]
// ---------------------------
// push D
@ SP                                         // ROM[10451]
AM = M+1                                     // ROM[10452]
A = A-1                                      // ROM[10453]
M = D                                        // ROM[10454]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10455]
D = A                                        // ROM[10456]
// ---------------------------
// push D
@ SP                                         // ROM[10457]
AM = M+1                                     // ROM[10458]
A = A-1                                      // ROM[10459]
M = D                                        // ROM[10460]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10461]
D = A                                        // ROM[10462]
// ---------------------------
// push D
@ SP                                         // ROM[10463]
AM = M+1                                     // ROM[10464]
A = A-1                                      // ROM[10465]
M = D                                        // ROM[10466]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10467]
D = A                                        // ROM[10468]
// ---------------------------
// push D
@ SP                                         // ROM[10469]
AM = M+1                                     // ROM[10470]
A = A-1                                      // ROM[10471]
M = D                                        // ROM[10472]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[10473]
D = A                                        // ROM[10474]
@ R13                                        // ROM[10475]
M = D                                        // ROM[10476]
// ---------------------------
// Push RA
@ Output.initMap:11                          // ROM[10477]
D = A                                        // ROM[10478]
// ---------------------------
// push D
@ SP                                         // ROM[10479]
AM = M+1                                     // ROM[10480]
A = A-1                                      // ROM[10481]
M = D                                        // ROM[10482]
// ---------------------------
// call
@ Output.initMap:12                          // ROM[10483]
D = A                                        // ROM[10484]
@ R15                                        // ROM[10485]
M = D                                        // ROM[10486]
@ :call                                      // ROM[10487]
0; JMP                                       // ROM[10488]
( Output.initMap:12)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[10489]
0; JMP                                       // ROM[10490]
// ---------------------------
// ( RA )
( Output.initMap:11) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10491]
AM = M-1                                     // ROM[10492]
D = M                                        // ROM[10493]
// ---------------------------
@ 5                                          // ROM[10494]
M = D                                        // ROM[10495]

// -------------------------------------
// PUSH: <constant, 33>
// -------------------------------------
@ 33                                         // ROM[10496]
D = A                                        // ROM[10497]
// ---------------------------
// push D
@ SP                                         // ROM[10498]
AM = M+1                                     // ROM[10499]
A = A-1                                      // ROM[10500]
M = D                                        // ROM[10501]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10502]
D = A                                        // ROM[10503]
// ---------------------------
// push D
@ SP                                         // ROM[10504]
AM = M+1                                     // ROM[10505]
A = A-1                                      // ROM[10506]
M = D                                        // ROM[10507]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[10508]
D = A                                        // ROM[10509]
// ---------------------------
// push D
@ SP                                         // ROM[10510]
AM = M+1                                     // ROM[10511]
A = A-1                                      // ROM[10512]
M = D                                        // ROM[10513]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[10514]
D = A                                        // ROM[10515]
// ---------------------------
// push D
@ SP                                         // ROM[10516]
AM = M+1                                     // ROM[10517]
A = A-1                                      // ROM[10518]
M = D                                        // ROM[10519]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[10520]
D = A                                        // ROM[10521]
// ---------------------------
// push D
@ SP                                         // ROM[10522]
AM = M+1                                     // ROM[10523]
A = A-1                                      // ROM[10524]
M = D                                        // ROM[10525]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10526]
D = A                                        // ROM[10527]
// ---------------------------
// push D
@ SP                                         // ROM[10528]
AM = M+1                                     // ROM[10529]
A = A-1                                      // ROM[10530]
M = D                                        // ROM[10531]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10532]
D = A                                        // ROM[10533]
// ---------------------------
// push D
@ SP                                         // ROM[10534]
AM = M+1                                     // ROM[10535]
A = A-1                                      // ROM[10536]
M = D                                        // ROM[10537]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10538]
D = A                                        // ROM[10539]
// ---------------------------
// push D
@ SP                                         // ROM[10540]
AM = M+1                                     // ROM[10541]
A = A-1                                      // ROM[10542]
M = D                                        // ROM[10543]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10544]
D = A                                        // ROM[10545]
// ---------------------------
// push D
@ SP                                         // ROM[10546]
AM = M+1                                     // ROM[10547]
A = A-1                                      // ROM[10548]
M = D                                        // ROM[10549]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10550]
D = A                                        // ROM[10551]
// ---------------------------
// push D
@ SP                                         // ROM[10552]
AM = M+1                                     // ROM[10553]
A = A-1                                      // ROM[10554]
M = D                                        // ROM[10555]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10556]
D = A                                        // ROM[10557]
// ---------------------------
// push D
@ SP                                         // ROM[10558]
AM = M+1                                     // ROM[10559]
A = A-1                                      // ROM[10560]
M = D                                        // ROM[10561]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10562]
D = A                                        // ROM[10563]
// ---------------------------
// push D
@ SP                                         // ROM[10564]
AM = M+1                                     // ROM[10565]
A = A-1                                      // ROM[10566]
M = D                                        // ROM[10567]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[10568]
D = A                                        // ROM[10569]
@ R13                                        // ROM[10570]
M = D                                        // ROM[10571]
// ---------------------------
// Push RA
@ Output.initMap:13                          // ROM[10572]
D = A                                        // ROM[10573]
// ---------------------------
// push D
@ SP                                         // ROM[10574]
AM = M+1                                     // ROM[10575]
A = A-1                                      // ROM[10576]
M = D                                        // ROM[10577]
// ---------------------------
// call
@ Output.initMap:14                          // ROM[10578]
D = A                                        // ROM[10579]
@ R15                                        // ROM[10580]
M = D                                        // ROM[10581]
@ :call                                      // ROM[10582]
0; JMP                                       // ROM[10583]
( Output.initMap:14)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[10584]
0; JMP                                       // ROM[10585]
// ---------------------------
// ( RA )
( Output.initMap:13) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10586]
AM = M-1                                     // ROM[10587]
D = M                                        // ROM[10588]
// ---------------------------
@ 5                                          // ROM[10589]
M = D                                        // ROM[10590]

// -------------------------------------
// PUSH: <constant, 34>
// -------------------------------------
@ 34                                         // ROM[10591]
D = A                                        // ROM[10592]
// ---------------------------
// push D
@ SP                                         // ROM[10593]
AM = M+1                                     // ROM[10594]
A = A-1                                      // ROM[10595]
M = D                                        // ROM[10596]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[10597]
D = A                                        // ROM[10598]
// ---------------------------
// push D
@ SP                                         // ROM[10599]
AM = M+1                                     // ROM[10600]
A = A-1                                      // ROM[10601]
M = D                                        // ROM[10602]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[10603]
D = A                                        // ROM[10604]
// ---------------------------
// push D
@ SP                                         // ROM[10605]
AM = M+1                                     // ROM[10606]
A = A-1                                      // ROM[10607]
M = D                                        // ROM[10608]

// -------------------------------------
// PUSH: <constant, 20>
// -------------------------------------
@ 20                                         // ROM[10609]
D = A                                        // ROM[10610]
// ---------------------------
// push D
@ SP                                         // ROM[10611]
AM = M+1                                     // ROM[10612]
A = A-1                                      // ROM[10613]
M = D                                        // ROM[10614]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10615]
D = A                                        // ROM[10616]
// ---------------------------
// push D
@ SP                                         // ROM[10617]
AM = M+1                                     // ROM[10618]
A = A-1                                      // ROM[10619]
M = D                                        // ROM[10620]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10621]
D = A                                        // ROM[10622]
// ---------------------------
// push D
@ SP                                         // ROM[10623]
AM = M+1                                     // ROM[10624]
A = A-1                                      // ROM[10625]
M = D                                        // ROM[10626]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10627]
D = A                                        // ROM[10628]
// ---------------------------
// push D
@ SP                                         // ROM[10629]
AM = M+1                                     // ROM[10630]
A = A-1                                      // ROM[10631]
M = D                                        // ROM[10632]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10633]
D = A                                        // ROM[10634]
// ---------------------------
// push D
@ SP                                         // ROM[10635]
AM = M+1                                     // ROM[10636]
A = A-1                                      // ROM[10637]
M = D                                        // ROM[10638]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10639]
D = A                                        // ROM[10640]
// ---------------------------
// push D
@ SP                                         // ROM[10641]
AM = M+1                                     // ROM[10642]
A = A-1                                      // ROM[10643]
M = D                                        // ROM[10644]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10645]
D = A                                        // ROM[10646]
// ---------------------------
// push D
@ SP                                         // ROM[10647]
AM = M+1                                     // ROM[10648]
A = A-1                                      // ROM[10649]
M = D                                        // ROM[10650]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10651]
D = A                                        // ROM[10652]
// ---------------------------
// push D
@ SP                                         // ROM[10653]
AM = M+1                                     // ROM[10654]
A = A-1                                      // ROM[10655]
M = D                                        // ROM[10656]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10657]
D = A                                        // ROM[10658]
// ---------------------------
// push D
@ SP                                         // ROM[10659]
AM = M+1                                     // ROM[10660]
A = A-1                                      // ROM[10661]
M = D                                        // ROM[10662]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[10663]
D = A                                        // ROM[10664]
@ R13                                        // ROM[10665]
M = D                                        // ROM[10666]
// ---------------------------
// Push RA
@ Output.initMap:15                          // ROM[10667]
D = A                                        // ROM[10668]
// ---------------------------
// push D
@ SP                                         // ROM[10669]
AM = M+1                                     // ROM[10670]
A = A-1                                      // ROM[10671]
M = D                                        // ROM[10672]
// ---------------------------
// call
@ Output.initMap:16                          // ROM[10673]
D = A                                        // ROM[10674]
@ R15                                        // ROM[10675]
M = D                                        // ROM[10676]
@ :call                                      // ROM[10677]
0; JMP                                       // ROM[10678]
( Output.initMap:16)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[10679]
0; JMP                                       // ROM[10680]
// ---------------------------
// ( RA )
( Output.initMap:15) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10681]
AM = M-1                                     // ROM[10682]
D = M                                        // ROM[10683]
// ---------------------------
@ 5                                          // ROM[10684]
M = D                                        // ROM[10685]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[10686]
D = A                                        // ROM[10687]
// ---------------------------
// push D
@ SP                                         // ROM[10688]
AM = M+1                                     // ROM[10689]
A = A-1                                      // ROM[10690]
M = D                                        // ROM[10691]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10692]
D = A                                        // ROM[10693]
// ---------------------------
// push D
@ SP                                         // ROM[10694]
AM = M+1                                     // ROM[10695]
A = A-1                                      // ROM[10696]
M = D                                        // ROM[10697]

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[10698]
D = A                                        // ROM[10699]
// ---------------------------
// push D
@ SP                                         // ROM[10700]
AM = M+1                                     // ROM[10701]
A = A-1                                      // ROM[10702]
M = D                                        // ROM[10703]

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[10704]
D = A                                        // ROM[10705]
// ---------------------------
// push D
@ SP                                         // ROM[10706]
AM = M+1                                     // ROM[10707]
A = A-1                                      // ROM[10708]
M = D                                        // ROM[10709]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10710]
D = A                                        // ROM[10711]
// ---------------------------
// push D
@ SP                                         // ROM[10712]
AM = M+1                                     // ROM[10713]
A = A-1                                      // ROM[10714]
M = D                                        // ROM[10715]

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[10716]
D = A                                        // ROM[10717]
// ---------------------------
// push D
@ SP                                         // ROM[10718]
AM = M+1                                     // ROM[10719]
A = A-1                                      // ROM[10720]
M = D                                        // ROM[10721]

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[10722]
D = A                                        // ROM[10723]
// ---------------------------
// push D
@ SP                                         // ROM[10724]
AM = M+1                                     // ROM[10725]
A = A-1                                      // ROM[10726]
M = D                                        // ROM[10727]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[10728]
D = A                                        // ROM[10729]
// ---------------------------
// push D
@ SP                                         // ROM[10730]
AM = M+1                                     // ROM[10731]
A = A-1                                      // ROM[10732]
M = D                                        // ROM[10733]

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[10734]
D = A                                        // ROM[10735]
// ---------------------------
// push D
@ SP                                         // ROM[10736]
AM = M+1                                     // ROM[10737]
A = A-1                                      // ROM[10738]
M = D                                        // ROM[10739]

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[10740]
D = A                                        // ROM[10741]
// ---------------------------
// push D
@ SP                                         // ROM[10742]
AM = M+1                                     // ROM[10743]
A = A-1                                      // ROM[10744]
M = D                                        // ROM[10745]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10746]
D = A                                        // ROM[10747]
// ---------------------------
// push D
@ SP                                         // ROM[10748]
AM = M+1                                     // ROM[10749]
A = A-1                                      // ROM[10750]
M = D                                        // ROM[10751]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10752]
D = A                                        // ROM[10753]
// ---------------------------
// push D
@ SP                                         // ROM[10754]
AM = M+1                                     // ROM[10755]
A = A-1                                      // ROM[10756]
M = D                                        // ROM[10757]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[10758]
D = A                                        // ROM[10759]
@ R13                                        // ROM[10760]
M = D                                        // ROM[10761]
// ---------------------------
// Push RA
@ Output.initMap:17                          // ROM[10762]
D = A                                        // ROM[10763]
// ---------------------------
// push D
@ SP                                         // ROM[10764]
AM = M+1                                     // ROM[10765]
A = A-1                                      // ROM[10766]
M = D                                        // ROM[10767]
// ---------------------------
// call
@ Output.initMap:18                          // ROM[10768]
D = A                                        // ROM[10769]
@ R15                                        // ROM[10770]
M = D                                        // ROM[10771]
@ :call                                      // ROM[10772]
0; JMP                                       // ROM[10773]
( Output.initMap:18)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[10774]
0; JMP                                       // ROM[10775]
// ---------------------------
// ( RA )
( Output.initMap:17) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10776]
AM = M-1                                     // ROM[10777]
D = M                                        // ROM[10778]
// ---------------------------
@ 5                                          // ROM[10779]
M = D                                        // ROM[10780]

// -------------------------------------
// PUSH: <constant, 36>
// -------------------------------------
@ 36                                         // ROM[10781]
D = A                                        // ROM[10782]
// ---------------------------
// push D
@ SP                                         // ROM[10783]
AM = M+1                                     // ROM[10784]
A = A-1                                      // ROM[10785]
M = D                                        // ROM[10786]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10787]
D = A                                        // ROM[10788]
// ---------------------------
// push D
@ SP                                         // ROM[10789]
AM = M+1                                     // ROM[10790]
A = A-1                                      // ROM[10791]
M = D                                        // ROM[10792]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[10793]
D = A                                        // ROM[10794]
// ---------------------------
// push D
@ SP                                         // ROM[10795]
AM = M+1                                     // ROM[10796]
A = A-1                                      // ROM[10797]
M = D                                        // ROM[10798]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[10799]
D = A                                        // ROM[10800]
// ---------------------------
// push D
@ SP                                         // ROM[10801]
AM = M+1                                     // ROM[10802]
A = A-1                                      // ROM[10803]
M = D                                        // ROM[10804]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[10805]
D = A                                        // ROM[10806]
// ---------------------------
// push D
@ SP                                         // ROM[10807]
AM = M+1                                     // ROM[10808]
A = A-1                                      // ROM[10809]
M = D                                        // ROM[10810]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[10811]
D = A                                        // ROM[10812]
// ---------------------------
// push D
@ SP                                         // ROM[10813]
AM = M+1                                     // ROM[10814]
A = A-1                                      // ROM[10815]
M = D                                        // ROM[10816]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[10817]
D = A                                        // ROM[10818]
// ---------------------------
// push D
@ SP                                         // ROM[10819]
AM = M+1                                     // ROM[10820]
A = A-1                                      // ROM[10821]
M = D                                        // ROM[10822]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[10823]
D = A                                        // ROM[10824]
// ---------------------------
// push D
@ SP                                         // ROM[10825]
AM = M+1                                     // ROM[10826]
A = A-1                                      // ROM[10827]
M = D                                        // ROM[10828]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[10829]
D = A                                        // ROM[10830]
// ---------------------------
// push D
@ SP                                         // ROM[10831]
AM = M+1                                     // ROM[10832]
A = A-1                                      // ROM[10833]
M = D                                        // ROM[10834]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10835]
D = A                                        // ROM[10836]
// ---------------------------
// push D
@ SP                                         // ROM[10837]
AM = M+1                                     // ROM[10838]
A = A-1                                      // ROM[10839]
M = D                                        // ROM[10840]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10841]
D = A                                        // ROM[10842]
// ---------------------------
// push D
@ SP                                         // ROM[10843]
AM = M+1                                     // ROM[10844]
A = A-1                                      // ROM[10845]
M = D                                        // ROM[10846]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10847]
D = A                                        // ROM[10848]
// ---------------------------
// push D
@ SP                                         // ROM[10849]
AM = M+1                                     // ROM[10850]
A = A-1                                      // ROM[10851]
M = D                                        // ROM[10852]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[10853]
D = A                                        // ROM[10854]
@ R13                                        // ROM[10855]
M = D                                        // ROM[10856]
// ---------------------------
// Push RA
@ Output.initMap:19                          // ROM[10857]
D = A                                        // ROM[10858]
// ---------------------------
// push D
@ SP                                         // ROM[10859]
AM = M+1                                     // ROM[10860]
A = A-1                                      // ROM[10861]
M = D                                        // ROM[10862]
// ---------------------------
// call
@ Output.initMap:20                          // ROM[10863]
D = A                                        // ROM[10864]
@ R15                                        // ROM[10865]
M = D                                        // ROM[10866]
@ :call                                      // ROM[10867]
0; JMP                                       // ROM[10868]
( Output.initMap:20)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[10869]
0; JMP                                       // ROM[10870]
// ---------------------------
// ( RA )
( Output.initMap:19) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10871]
AM = M-1                                     // ROM[10872]
D = M                                        // ROM[10873]
// ---------------------------
@ 5                                          // ROM[10874]
M = D                                        // ROM[10875]

// -------------------------------------
// PUSH: <constant, 37>
// -------------------------------------
@ 37                                         // ROM[10876]
D = A                                        // ROM[10877]
// ---------------------------
// push D
@ SP                                         // ROM[10878]
AM = M+1                                     // ROM[10879]
A = A-1                                      // ROM[10880]
M = D                                        // ROM[10881]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10882]
D = A                                        // ROM[10883]
// ---------------------------
// push D
@ SP                                         // ROM[10884]
AM = M+1                                     // ROM[10885]
A = A-1                                      // ROM[10886]
M = D                                        // ROM[10887]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10888]
D = A                                        // ROM[10889]
// ---------------------------
// push D
@ SP                                         // ROM[10890]
AM = M+1                                     // ROM[10891]
A = A-1                                      // ROM[10892]
M = D                                        // ROM[10893]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[10894]
D = A                                        // ROM[10895]
// ---------------------------
// push D
@ SP                                         // ROM[10896]
AM = M+1                                     // ROM[10897]
A = A-1                                      // ROM[10898]
M = D                                        // ROM[10899]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[10900]
D = A                                        // ROM[10901]
// ---------------------------
// push D
@ SP                                         // ROM[10902]
AM = M+1                                     // ROM[10903]
A = A-1                                      // ROM[10904]
M = D                                        // ROM[10905]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[10906]
D = A                                        // ROM[10907]
// ---------------------------
// push D
@ SP                                         // ROM[10908]
AM = M+1                                     // ROM[10909]
A = A-1                                      // ROM[10910]
M = D                                        // ROM[10911]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10912]
D = A                                        // ROM[10913]
// ---------------------------
// push D
@ SP                                         // ROM[10914]
AM = M+1                                     // ROM[10915]
A = A-1                                      // ROM[10916]
M = D                                        // ROM[10917]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[10918]
D = A                                        // ROM[10919]
// ---------------------------
// push D
@ SP                                         // ROM[10920]
AM = M+1                                     // ROM[10921]
A = A-1                                      // ROM[10922]
M = D                                        // ROM[10923]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[10924]
D = A                                        // ROM[10925]
// ---------------------------
// push D
@ SP                                         // ROM[10926]
AM = M+1                                     // ROM[10927]
A = A-1                                      // ROM[10928]
M = D                                        // ROM[10929]

// -------------------------------------
// PUSH: <constant, 49>
// -------------------------------------
@ 49                                         // ROM[10930]
D = A                                        // ROM[10931]
// ---------------------------
// push D
@ SP                                         // ROM[10932]
AM = M+1                                     // ROM[10933]
A = A-1                                      // ROM[10934]
M = D                                        // ROM[10935]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10936]
D = A                                        // ROM[10937]
// ---------------------------
// push D
@ SP                                         // ROM[10938]
AM = M+1                                     // ROM[10939]
A = A-1                                      // ROM[10940]
M = D                                        // ROM[10941]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[10942]
D = A                                        // ROM[10943]
// ---------------------------
// push D
@ SP                                         // ROM[10944]
AM = M+1                                     // ROM[10945]
A = A-1                                      // ROM[10946]
M = D                                        // ROM[10947]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[10948]
D = A                                        // ROM[10949]
@ R13                                        // ROM[10950]
M = D                                        // ROM[10951]
// ---------------------------
// Push RA
@ Output.initMap:21                          // ROM[10952]
D = A                                        // ROM[10953]
// ---------------------------
// push D
@ SP                                         // ROM[10954]
AM = M+1                                     // ROM[10955]
A = A-1                                      // ROM[10956]
M = D                                        // ROM[10957]
// ---------------------------
// call
@ Output.initMap:22                          // ROM[10958]
D = A                                        // ROM[10959]
@ R15                                        // ROM[10960]
M = D                                        // ROM[10961]
@ :call                                      // ROM[10962]
0; JMP                                       // ROM[10963]
( Output.initMap:22)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[10964]
0; JMP                                       // ROM[10965]
// ---------------------------
// ( RA )
( Output.initMap:21) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[10966]
AM = M-1                                     // ROM[10967]
D = M                                        // ROM[10968]
// ---------------------------
@ 5                                          // ROM[10969]
M = D                                        // ROM[10970]

// -------------------------------------
// PUSH: <constant, 38>
// -------------------------------------
@ 38                                         // ROM[10971]
D = A                                        // ROM[10972]
// ---------------------------
// push D
@ SP                                         // ROM[10973]
AM = M+1                                     // ROM[10974]
A = A-1                                      // ROM[10975]
M = D                                        // ROM[10976]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10977]
D = A                                        // ROM[10978]
// ---------------------------
// push D
@ SP                                         // ROM[10979]
AM = M+1                                     // ROM[10980]
A = A-1                                      // ROM[10981]
M = D                                        // ROM[10982]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[10983]
D = A                                        // ROM[10984]
// ---------------------------
// push D
@ SP                                         // ROM[10985]
AM = M+1                                     // ROM[10986]
A = A-1                                      // ROM[10987]
M = D                                        // ROM[10988]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[10989]
D = A                                        // ROM[10990]
// ---------------------------
// push D
@ SP                                         // ROM[10991]
AM = M+1                                     // ROM[10992]
A = A-1                                      // ROM[10993]
M = D                                        // ROM[10994]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[10995]
D = A                                        // ROM[10996]
// ---------------------------
// push D
@ SP                                         // ROM[10997]
AM = M+1                                     // ROM[10998]
A = A-1                                      // ROM[10999]
M = D                                        // ROM[11000]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[11001]
D = A                                        // ROM[11002]
// ---------------------------
// push D
@ SP                                         // ROM[11003]
AM = M+1                                     // ROM[11004]
A = A-1                                      // ROM[11005]
M = D                                        // ROM[11006]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[11007]
D = A                                        // ROM[11008]
// ---------------------------
// push D
@ SP                                         // ROM[11009]
AM = M+1                                     // ROM[11010]
A = A-1                                      // ROM[11011]
M = D                                        // ROM[11012]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[11013]
D = A                                        // ROM[11014]
// ---------------------------
// push D
@ SP                                         // ROM[11015]
AM = M+1                                     // ROM[11016]
A = A-1                                      // ROM[11017]
M = D                                        // ROM[11018]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[11019]
D = A                                        // ROM[11020]
// ---------------------------
// push D
@ SP                                         // ROM[11021]
AM = M+1                                     // ROM[11022]
A = A-1                                      // ROM[11023]
M = D                                        // ROM[11024]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[11025]
D = A                                        // ROM[11026]
// ---------------------------
// push D
@ SP                                         // ROM[11027]
AM = M+1                                     // ROM[11028]
A = A-1                                      // ROM[11029]
M = D                                        // ROM[11030]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11031]
D = A                                        // ROM[11032]
// ---------------------------
// push D
@ SP                                         // ROM[11033]
AM = M+1                                     // ROM[11034]
A = A-1                                      // ROM[11035]
M = D                                        // ROM[11036]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11037]
D = A                                        // ROM[11038]
// ---------------------------
// push D
@ SP                                         // ROM[11039]
AM = M+1                                     // ROM[11040]
A = A-1                                      // ROM[11041]
M = D                                        // ROM[11042]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11043]
D = A                                        // ROM[11044]
@ R13                                        // ROM[11045]
M = D                                        // ROM[11046]
// ---------------------------
// Push RA
@ Output.initMap:23                          // ROM[11047]
D = A                                        // ROM[11048]
// ---------------------------
// push D
@ SP                                         // ROM[11049]
AM = M+1                                     // ROM[11050]
A = A-1                                      // ROM[11051]
M = D                                        // ROM[11052]
// ---------------------------
// call
@ Output.initMap:24                          // ROM[11053]
D = A                                        // ROM[11054]
@ R15                                        // ROM[11055]
M = D                                        // ROM[11056]
@ :call                                      // ROM[11057]
0; JMP                                       // ROM[11058]
( Output.initMap:24)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11059]
0; JMP                                       // ROM[11060]
// ---------------------------
// ( RA )
( Output.initMap:23) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11061]
AM = M-1                                     // ROM[11062]
D = M                                        // ROM[11063]
// ---------------------------
@ 5                                          // ROM[11064]
M = D                                        // ROM[11065]

// -------------------------------------
// PUSH: <constant, 39>
// -------------------------------------
@ 39                                         // ROM[11066]
D = A                                        // ROM[11067]
// ---------------------------
// push D
@ SP                                         // ROM[11068]
AM = M+1                                     // ROM[11069]
A = A-1                                      // ROM[11070]
M = D                                        // ROM[11071]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11072]
D = A                                        // ROM[11073]
// ---------------------------
// push D
@ SP                                         // ROM[11074]
AM = M+1                                     // ROM[11075]
A = A-1                                      // ROM[11076]
M = D                                        // ROM[11077]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11078]
D = A                                        // ROM[11079]
// ---------------------------
// push D
@ SP                                         // ROM[11080]
AM = M+1                                     // ROM[11081]
A = A-1                                      // ROM[11082]
M = D                                        // ROM[11083]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11084]
D = A                                        // ROM[11085]
// ---------------------------
// push D
@ SP                                         // ROM[11086]
AM = M+1                                     // ROM[11087]
A = A-1                                      // ROM[11088]
M = D                                        // ROM[11089]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11090]
D = A                                        // ROM[11091]
// ---------------------------
// push D
@ SP                                         // ROM[11092]
AM = M+1                                     // ROM[11093]
A = A-1                                      // ROM[11094]
M = D                                        // ROM[11095]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11096]
D = A                                        // ROM[11097]
// ---------------------------
// push D
@ SP                                         // ROM[11098]
AM = M+1                                     // ROM[11099]
A = A-1                                      // ROM[11100]
M = D                                        // ROM[11101]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11102]
D = A                                        // ROM[11103]
// ---------------------------
// push D
@ SP                                         // ROM[11104]
AM = M+1                                     // ROM[11105]
A = A-1                                      // ROM[11106]
M = D                                        // ROM[11107]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11108]
D = A                                        // ROM[11109]
// ---------------------------
// push D
@ SP                                         // ROM[11110]
AM = M+1                                     // ROM[11111]
A = A-1                                      // ROM[11112]
M = D                                        // ROM[11113]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11114]
D = A                                        // ROM[11115]
// ---------------------------
// push D
@ SP                                         // ROM[11116]
AM = M+1                                     // ROM[11117]
A = A-1                                      // ROM[11118]
M = D                                        // ROM[11119]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11120]
D = A                                        // ROM[11121]
// ---------------------------
// push D
@ SP                                         // ROM[11122]
AM = M+1                                     // ROM[11123]
A = A-1                                      // ROM[11124]
M = D                                        // ROM[11125]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11126]
D = A                                        // ROM[11127]
// ---------------------------
// push D
@ SP                                         // ROM[11128]
AM = M+1                                     // ROM[11129]
A = A-1                                      // ROM[11130]
M = D                                        // ROM[11131]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11132]
D = A                                        // ROM[11133]
// ---------------------------
// push D
@ SP                                         // ROM[11134]
AM = M+1                                     // ROM[11135]
A = A-1                                      // ROM[11136]
M = D                                        // ROM[11137]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11138]
D = A                                        // ROM[11139]
@ R13                                        // ROM[11140]
M = D                                        // ROM[11141]
// ---------------------------
// Push RA
@ Output.initMap:25                          // ROM[11142]
D = A                                        // ROM[11143]
// ---------------------------
// push D
@ SP                                         // ROM[11144]
AM = M+1                                     // ROM[11145]
A = A-1                                      // ROM[11146]
M = D                                        // ROM[11147]
// ---------------------------
// call
@ Output.initMap:26                          // ROM[11148]
D = A                                        // ROM[11149]
@ R15                                        // ROM[11150]
M = D                                        // ROM[11151]
@ :call                                      // ROM[11152]
0; JMP                                       // ROM[11153]
( Output.initMap:26)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11154]
0; JMP                                       // ROM[11155]
// ---------------------------
// ( RA )
( Output.initMap:25) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11156]
AM = M-1                                     // ROM[11157]
D = M                                        // ROM[11158]
// ---------------------------
@ 5                                          // ROM[11159]
M = D                                        // ROM[11160]

// -------------------------------------
// PUSH: <constant, 40>
// -------------------------------------
@ 40                                         // ROM[11161]
D = A                                        // ROM[11162]
// ---------------------------
// push D
@ SP                                         // ROM[11163]
AM = M+1                                     // ROM[11164]
A = A-1                                      // ROM[11165]
M = D                                        // ROM[11166]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[11167]
D = A                                        // ROM[11168]
// ---------------------------
// push D
@ SP                                         // ROM[11169]
AM = M+1                                     // ROM[11170]
A = A-1                                      // ROM[11171]
M = D                                        // ROM[11172]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11173]
D = A                                        // ROM[11174]
// ---------------------------
// push D
@ SP                                         // ROM[11175]
AM = M+1                                     // ROM[11176]
A = A-1                                      // ROM[11177]
M = D                                        // ROM[11178]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11179]
D = A                                        // ROM[11180]
// ---------------------------
// push D
@ SP                                         // ROM[11181]
AM = M+1                                     // ROM[11182]
A = A-1                                      // ROM[11183]
M = D                                        // ROM[11184]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11185]
D = A                                        // ROM[11186]
// ---------------------------
// push D
@ SP                                         // ROM[11187]
AM = M+1                                     // ROM[11188]
A = A-1                                      // ROM[11189]
M = D                                        // ROM[11190]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11191]
D = A                                        // ROM[11192]
// ---------------------------
// push D
@ SP                                         // ROM[11193]
AM = M+1                                     // ROM[11194]
A = A-1                                      // ROM[11195]
M = D                                        // ROM[11196]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11197]
D = A                                        // ROM[11198]
// ---------------------------
// push D
@ SP                                         // ROM[11199]
AM = M+1                                     // ROM[11200]
A = A-1                                      // ROM[11201]
M = D                                        // ROM[11202]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11203]
D = A                                        // ROM[11204]
// ---------------------------
// push D
@ SP                                         // ROM[11205]
AM = M+1                                     // ROM[11206]
A = A-1                                      // ROM[11207]
M = D                                        // ROM[11208]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11209]
D = A                                        // ROM[11210]
// ---------------------------
// push D
@ SP                                         // ROM[11211]
AM = M+1                                     // ROM[11212]
A = A-1                                      // ROM[11213]
M = D                                        // ROM[11214]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[11215]
D = A                                        // ROM[11216]
// ---------------------------
// push D
@ SP                                         // ROM[11217]
AM = M+1                                     // ROM[11218]
A = A-1                                      // ROM[11219]
M = D                                        // ROM[11220]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11221]
D = A                                        // ROM[11222]
// ---------------------------
// push D
@ SP                                         // ROM[11223]
AM = M+1                                     // ROM[11224]
A = A-1                                      // ROM[11225]
M = D                                        // ROM[11226]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11227]
D = A                                        // ROM[11228]
// ---------------------------
// push D
@ SP                                         // ROM[11229]
AM = M+1                                     // ROM[11230]
A = A-1                                      // ROM[11231]
M = D                                        // ROM[11232]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11233]
D = A                                        // ROM[11234]
@ R13                                        // ROM[11235]
M = D                                        // ROM[11236]
// ---------------------------
// Push RA
@ Output.initMap:27                          // ROM[11237]
D = A                                        // ROM[11238]
// ---------------------------
// push D
@ SP                                         // ROM[11239]
AM = M+1                                     // ROM[11240]
A = A-1                                      // ROM[11241]
M = D                                        // ROM[11242]
// ---------------------------
// call
@ Output.initMap:28                          // ROM[11243]
D = A                                        // ROM[11244]
@ R15                                        // ROM[11245]
M = D                                        // ROM[11246]
@ :call                                      // ROM[11247]
0; JMP                                       // ROM[11248]
( Output.initMap:28)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11249]
0; JMP                                       // ROM[11250]
// ---------------------------
// ( RA )
( Output.initMap:27) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11251]
AM = M-1                                     // ROM[11252]
D = M                                        // ROM[11253]
// ---------------------------
@ 5                                          // ROM[11254]
M = D                                        // ROM[11255]

// -------------------------------------
// PUSH: <constant, 41>
// -------------------------------------
@ 41                                         // ROM[11256]
D = A                                        // ROM[11257]
// ---------------------------
// push D
@ SP                                         // ROM[11258]
AM = M+1                                     // ROM[11259]
A = A-1                                      // ROM[11260]
M = D                                        // ROM[11261]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11262]
D = A                                        // ROM[11263]
// ---------------------------
// push D
@ SP                                         // ROM[11264]
AM = M+1                                     // ROM[11265]
A = A-1                                      // ROM[11266]
M = D                                        // ROM[11267]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11268]
D = A                                        // ROM[11269]
// ---------------------------
// push D
@ SP                                         // ROM[11270]
AM = M+1                                     // ROM[11271]
A = A-1                                      // ROM[11272]
M = D                                        // ROM[11273]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[11274]
D = A                                        // ROM[11275]
// ---------------------------
// push D
@ SP                                         // ROM[11276]
AM = M+1                                     // ROM[11277]
A = A-1                                      // ROM[11278]
M = D                                        // ROM[11279]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[11280]
D = A                                        // ROM[11281]
// ---------------------------
// push D
@ SP                                         // ROM[11282]
AM = M+1                                     // ROM[11283]
A = A-1                                      // ROM[11284]
M = D                                        // ROM[11285]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[11286]
D = A                                        // ROM[11287]
// ---------------------------
// push D
@ SP                                         // ROM[11288]
AM = M+1                                     // ROM[11289]
A = A-1                                      // ROM[11290]
M = D                                        // ROM[11291]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[11292]
D = A                                        // ROM[11293]
// ---------------------------
// push D
@ SP                                         // ROM[11294]
AM = M+1                                     // ROM[11295]
A = A-1                                      // ROM[11296]
M = D                                        // ROM[11297]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[11298]
D = A                                        // ROM[11299]
// ---------------------------
// push D
@ SP                                         // ROM[11300]
AM = M+1                                     // ROM[11301]
A = A-1                                      // ROM[11302]
M = D                                        // ROM[11303]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11304]
D = A                                        // ROM[11305]
// ---------------------------
// push D
@ SP                                         // ROM[11306]
AM = M+1                                     // ROM[11307]
A = A-1                                      // ROM[11308]
M = D                                        // ROM[11309]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11310]
D = A                                        // ROM[11311]
// ---------------------------
// push D
@ SP                                         // ROM[11312]
AM = M+1                                     // ROM[11313]
A = A-1                                      // ROM[11314]
M = D                                        // ROM[11315]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11316]
D = A                                        // ROM[11317]
// ---------------------------
// push D
@ SP                                         // ROM[11318]
AM = M+1                                     // ROM[11319]
A = A-1                                      // ROM[11320]
M = D                                        // ROM[11321]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11322]
D = A                                        // ROM[11323]
// ---------------------------
// push D
@ SP                                         // ROM[11324]
AM = M+1                                     // ROM[11325]
A = A-1                                      // ROM[11326]
M = D                                        // ROM[11327]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11328]
D = A                                        // ROM[11329]
@ R13                                        // ROM[11330]
M = D                                        // ROM[11331]
// ---------------------------
// Push RA
@ Output.initMap:29                          // ROM[11332]
D = A                                        // ROM[11333]
// ---------------------------
// push D
@ SP                                         // ROM[11334]
AM = M+1                                     // ROM[11335]
A = A-1                                      // ROM[11336]
M = D                                        // ROM[11337]
// ---------------------------
// call
@ Output.initMap:30                          // ROM[11338]
D = A                                        // ROM[11339]
@ R15                                        // ROM[11340]
M = D                                        // ROM[11341]
@ :call                                      // ROM[11342]
0; JMP                                       // ROM[11343]
( Output.initMap:30)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11344]
0; JMP                                       // ROM[11345]
// ---------------------------
// ( RA )
( Output.initMap:29) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11346]
AM = M-1                                     // ROM[11347]
D = M                                        // ROM[11348]
// ---------------------------
@ 5                                          // ROM[11349]
M = D                                        // ROM[11350]

// -------------------------------------
// PUSH: <constant, 42>
// -------------------------------------
@ 42                                         // ROM[11351]
D = A                                        // ROM[11352]
// ---------------------------
// push D
@ SP                                         // ROM[11353]
AM = M+1                                     // ROM[11354]
A = A-1                                      // ROM[11355]
M = D                                        // ROM[11356]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11357]
D = A                                        // ROM[11358]
// ---------------------------
// push D
@ SP                                         // ROM[11359]
AM = M+1                                     // ROM[11360]
A = A-1                                      // ROM[11361]
M = D                                        // ROM[11362]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11363]
D = A                                        // ROM[11364]
// ---------------------------
// push D
@ SP                                         // ROM[11365]
AM = M+1                                     // ROM[11366]
A = A-1                                      // ROM[11367]
M = D                                        // ROM[11368]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11369]
D = A                                        // ROM[11370]
// ---------------------------
// push D
@ SP                                         // ROM[11371]
AM = M+1                                     // ROM[11372]
A = A-1                                      // ROM[11373]
M = D                                        // ROM[11374]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[11375]
D = A                                        // ROM[11376]
// ---------------------------
// push D
@ SP                                         // ROM[11377]
AM = M+1                                     // ROM[11378]
A = A-1                                      // ROM[11379]
M = D                                        // ROM[11380]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[11381]
D = A                                        // ROM[11382]
// ---------------------------
// push D
@ SP                                         // ROM[11383]
AM = M+1                                     // ROM[11384]
A = A-1                                      // ROM[11385]
M = D                                        // ROM[11386]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[11387]
D = A                                        // ROM[11388]
// ---------------------------
// push D
@ SP                                         // ROM[11389]
AM = M+1                                     // ROM[11390]
A = A-1                                      // ROM[11391]
M = D                                        // ROM[11392]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[11393]
D = A                                        // ROM[11394]
// ---------------------------
// push D
@ SP                                         // ROM[11395]
AM = M+1                                     // ROM[11396]
A = A-1                                      // ROM[11397]
M = D                                        // ROM[11398]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[11399]
D = A                                        // ROM[11400]
// ---------------------------
// push D
@ SP                                         // ROM[11401]
AM = M+1                                     // ROM[11402]
A = A-1                                      // ROM[11403]
M = D                                        // ROM[11404]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11405]
D = A                                        // ROM[11406]
// ---------------------------
// push D
@ SP                                         // ROM[11407]
AM = M+1                                     // ROM[11408]
A = A-1                                      // ROM[11409]
M = D                                        // ROM[11410]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11411]
D = A                                        // ROM[11412]
// ---------------------------
// push D
@ SP                                         // ROM[11413]
AM = M+1                                     // ROM[11414]
A = A-1                                      // ROM[11415]
M = D                                        // ROM[11416]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11417]
D = A                                        // ROM[11418]
// ---------------------------
// push D
@ SP                                         // ROM[11419]
AM = M+1                                     // ROM[11420]
A = A-1                                      // ROM[11421]
M = D                                        // ROM[11422]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11423]
D = A                                        // ROM[11424]
@ R13                                        // ROM[11425]
M = D                                        // ROM[11426]
// ---------------------------
// Push RA
@ Output.initMap:31                          // ROM[11427]
D = A                                        // ROM[11428]
// ---------------------------
// push D
@ SP                                         // ROM[11429]
AM = M+1                                     // ROM[11430]
A = A-1                                      // ROM[11431]
M = D                                        // ROM[11432]
// ---------------------------
// call
@ Output.initMap:32                          // ROM[11433]
D = A                                        // ROM[11434]
@ R15                                        // ROM[11435]
M = D                                        // ROM[11436]
@ :call                                      // ROM[11437]
0; JMP                                       // ROM[11438]
( Output.initMap:32)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11439]
0; JMP                                       // ROM[11440]
// ---------------------------
// ( RA )
( Output.initMap:31) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11441]
AM = M-1                                     // ROM[11442]
D = M                                        // ROM[11443]
// ---------------------------
@ 5                                          // ROM[11444]
M = D                                        // ROM[11445]

// -------------------------------------
// PUSH: <constant, 43>
// -------------------------------------
@ 43                                         // ROM[11446]
D = A                                        // ROM[11447]
// ---------------------------
// push D
@ SP                                         // ROM[11448]
AM = M+1                                     // ROM[11449]
A = A-1                                      // ROM[11450]
M = D                                        // ROM[11451]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11452]
D = A                                        // ROM[11453]
// ---------------------------
// push D
@ SP                                         // ROM[11454]
AM = M+1                                     // ROM[11455]
A = A-1                                      // ROM[11456]
M = D                                        // ROM[11457]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11458]
D = A                                        // ROM[11459]
// ---------------------------
// push D
@ SP                                         // ROM[11460]
AM = M+1                                     // ROM[11461]
A = A-1                                      // ROM[11462]
M = D                                        // ROM[11463]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11464]
D = A                                        // ROM[11465]
// ---------------------------
// push D
@ SP                                         // ROM[11466]
AM = M+1                                     // ROM[11467]
A = A-1                                      // ROM[11468]
M = D                                        // ROM[11469]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11470]
D = A                                        // ROM[11471]
// ---------------------------
// push D
@ SP                                         // ROM[11472]
AM = M+1                                     // ROM[11473]
A = A-1                                      // ROM[11474]
M = D                                        // ROM[11475]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11476]
D = A                                        // ROM[11477]
// ---------------------------
// push D
@ SP                                         // ROM[11478]
AM = M+1                                     // ROM[11479]
A = A-1                                      // ROM[11480]
M = D                                        // ROM[11481]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[11482]
D = A                                        // ROM[11483]
// ---------------------------
// push D
@ SP                                         // ROM[11484]
AM = M+1                                     // ROM[11485]
A = A-1                                      // ROM[11486]
M = D                                        // ROM[11487]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11488]
D = A                                        // ROM[11489]
// ---------------------------
// push D
@ SP                                         // ROM[11490]
AM = M+1                                     // ROM[11491]
A = A-1                                      // ROM[11492]
M = D                                        // ROM[11493]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11494]
D = A                                        // ROM[11495]
// ---------------------------
// push D
@ SP                                         // ROM[11496]
AM = M+1                                     // ROM[11497]
A = A-1                                      // ROM[11498]
M = D                                        // ROM[11499]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11500]
D = A                                        // ROM[11501]
// ---------------------------
// push D
@ SP                                         // ROM[11502]
AM = M+1                                     // ROM[11503]
A = A-1                                      // ROM[11504]
M = D                                        // ROM[11505]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11506]
D = A                                        // ROM[11507]
// ---------------------------
// push D
@ SP                                         // ROM[11508]
AM = M+1                                     // ROM[11509]
A = A-1                                      // ROM[11510]
M = D                                        // ROM[11511]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11512]
D = A                                        // ROM[11513]
// ---------------------------
// push D
@ SP                                         // ROM[11514]
AM = M+1                                     // ROM[11515]
A = A-1                                      // ROM[11516]
M = D                                        // ROM[11517]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11518]
D = A                                        // ROM[11519]
@ R13                                        // ROM[11520]
M = D                                        // ROM[11521]
// ---------------------------
// Push RA
@ Output.initMap:33                          // ROM[11522]
D = A                                        // ROM[11523]
// ---------------------------
// push D
@ SP                                         // ROM[11524]
AM = M+1                                     // ROM[11525]
A = A-1                                      // ROM[11526]
M = D                                        // ROM[11527]
// ---------------------------
// call
@ Output.initMap:34                          // ROM[11528]
D = A                                        // ROM[11529]
@ R15                                        // ROM[11530]
M = D                                        // ROM[11531]
@ :call                                      // ROM[11532]
0; JMP                                       // ROM[11533]
( Output.initMap:34)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11534]
0; JMP                                       // ROM[11535]
// ---------------------------
// ( RA )
( Output.initMap:33) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11536]
AM = M-1                                     // ROM[11537]
D = M                                        // ROM[11538]
// ---------------------------
@ 5                                          // ROM[11539]
M = D                                        // ROM[11540]

// -------------------------------------
// PUSH: <constant, 44>
// -------------------------------------
@ 44                                         // ROM[11541]
D = A                                        // ROM[11542]
// ---------------------------
// push D
@ SP                                         // ROM[11543]
AM = M+1                                     // ROM[11544]
A = A-1                                      // ROM[11545]
M = D                                        // ROM[11546]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11547]
D = A                                        // ROM[11548]
// ---------------------------
// push D
@ SP                                         // ROM[11549]
AM = M+1                                     // ROM[11550]
A = A-1                                      // ROM[11551]
M = D                                        // ROM[11552]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11553]
D = A                                        // ROM[11554]
// ---------------------------
// push D
@ SP                                         // ROM[11555]
AM = M+1                                     // ROM[11556]
A = A-1                                      // ROM[11557]
M = D                                        // ROM[11558]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11559]
D = A                                        // ROM[11560]
// ---------------------------
// push D
@ SP                                         // ROM[11561]
AM = M+1                                     // ROM[11562]
A = A-1                                      // ROM[11563]
M = D                                        // ROM[11564]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11565]
D = A                                        // ROM[11566]
// ---------------------------
// push D
@ SP                                         // ROM[11567]
AM = M+1                                     // ROM[11568]
A = A-1                                      // ROM[11569]
M = D                                        // ROM[11570]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11571]
D = A                                        // ROM[11572]
// ---------------------------
// push D
@ SP                                         // ROM[11573]
AM = M+1                                     // ROM[11574]
A = A-1                                      // ROM[11575]
M = D                                        // ROM[11576]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11577]
D = A                                        // ROM[11578]
// ---------------------------
// push D
@ SP                                         // ROM[11579]
AM = M+1                                     // ROM[11580]
A = A-1                                      // ROM[11581]
M = D                                        // ROM[11582]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11583]
D = A                                        // ROM[11584]
// ---------------------------
// push D
@ SP                                         // ROM[11585]
AM = M+1                                     // ROM[11586]
A = A-1                                      // ROM[11587]
M = D                                        // ROM[11588]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11589]
D = A                                        // ROM[11590]
// ---------------------------
// push D
@ SP                                         // ROM[11591]
AM = M+1                                     // ROM[11592]
A = A-1                                      // ROM[11593]
M = D                                        // ROM[11594]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11595]
D = A                                        // ROM[11596]
// ---------------------------
// push D
@ SP                                         // ROM[11597]
AM = M+1                                     // ROM[11598]
A = A-1                                      // ROM[11599]
M = D                                        // ROM[11600]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11601]
D = A                                        // ROM[11602]
// ---------------------------
// push D
@ SP                                         // ROM[11603]
AM = M+1                                     // ROM[11604]
A = A-1                                      // ROM[11605]
M = D                                        // ROM[11606]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11607]
D = A                                        // ROM[11608]
// ---------------------------
// push D
@ SP                                         // ROM[11609]
AM = M+1                                     // ROM[11610]
A = A-1                                      // ROM[11611]
M = D                                        // ROM[11612]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11613]
D = A                                        // ROM[11614]
@ R13                                        // ROM[11615]
M = D                                        // ROM[11616]
// ---------------------------
// Push RA
@ Output.initMap:35                          // ROM[11617]
D = A                                        // ROM[11618]
// ---------------------------
// push D
@ SP                                         // ROM[11619]
AM = M+1                                     // ROM[11620]
A = A-1                                      // ROM[11621]
M = D                                        // ROM[11622]
// ---------------------------
// call
@ Output.initMap:36                          // ROM[11623]
D = A                                        // ROM[11624]
@ R15                                        // ROM[11625]
M = D                                        // ROM[11626]
@ :call                                      // ROM[11627]
0; JMP                                       // ROM[11628]
( Output.initMap:36)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11629]
0; JMP                                       // ROM[11630]
// ---------------------------
// ( RA )
( Output.initMap:35) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11631]
AM = M-1                                     // ROM[11632]
D = M                                        // ROM[11633]
// ---------------------------
@ 5                                          // ROM[11634]
M = D                                        // ROM[11635]

// -------------------------------------
// PUSH: <constant, 45>
// -------------------------------------
@ 45                                         // ROM[11636]
D = A                                        // ROM[11637]
// ---------------------------
// push D
@ SP                                         // ROM[11638]
AM = M+1                                     // ROM[11639]
A = A-1                                      // ROM[11640]
M = D                                        // ROM[11641]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11642]
D = A                                        // ROM[11643]
// ---------------------------
// push D
@ SP                                         // ROM[11644]
AM = M+1                                     // ROM[11645]
A = A-1                                      // ROM[11646]
M = D                                        // ROM[11647]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11648]
D = A                                        // ROM[11649]
// ---------------------------
// push D
@ SP                                         // ROM[11650]
AM = M+1                                     // ROM[11651]
A = A-1                                      // ROM[11652]
M = D                                        // ROM[11653]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11654]
D = A                                        // ROM[11655]
// ---------------------------
// push D
@ SP                                         // ROM[11656]
AM = M+1                                     // ROM[11657]
A = A-1                                      // ROM[11658]
M = D                                        // ROM[11659]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11660]
D = A                                        // ROM[11661]
// ---------------------------
// push D
@ SP                                         // ROM[11662]
AM = M+1                                     // ROM[11663]
A = A-1                                      // ROM[11664]
M = D                                        // ROM[11665]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11666]
D = A                                        // ROM[11667]
// ---------------------------
// push D
@ SP                                         // ROM[11668]
AM = M+1                                     // ROM[11669]
A = A-1                                      // ROM[11670]
M = D                                        // ROM[11671]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[11672]
D = A                                        // ROM[11673]
// ---------------------------
// push D
@ SP                                         // ROM[11674]
AM = M+1                                     // ROM[11675]
A = A-1                                      // ROM[11676]
M = D                                        // ROM[11677]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11678]
D = A                                        // ROM[11679]
// ---------------------------
// push D
@ SP                                         // ROM[11680]
AM = M+1                                     // ROM[11681]
A = A-1                                      // ROM[11682]
M = D                                        // ROM[11683]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11684]
D = A                                        // ROM[11685]
// ---------------------------
// push D
@ SP                                         // ROM[11686]
AM = M+1                                     // ROM[11687]
A = A-1                                      // ROM[11688]
M = D                                        // ROM[11689]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11690]
D = A                                        // ROM[11691]
// ---------------------------
// push D
@ SP                                         // ROM[11692]
AM = M+1                                     // ROM[11693]
A = A-1                                      // ROM[11694]
M = D                                        // ROM[11695]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11696]
D = A                                        // ROM[11697]
// ---------------------------
// push D
@ SP                                         // ROM[11698]
AM = M+1                                     // ROM[11699]
A = A-1                                      // ROM[11700]
M = D                                        // ROM[11701]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11702]
D = A                                        // ROM[11703]
// ---------------------------
// push D
@ SP                                         // ROM[11704]
AM = M+1                                     // ROM[11705]
A = A-1                                      // ROM[11706]
M = D                                        // ROM[11707]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11708]
D = A                                        // ROM[11709]
@ R13                                        // ROM[11710]
M = D                                        // ROM[11711]
// ---------------------------
// Push RA
@ Output.initMap:37                          // ROM[11712]
D = A                                        // ROM[11713]
// ---------------------------
// push D
@ SP                                         // ROM[11714]
AM = M+1                                     // ROM[11715]
A = A-1                                      // ROM[11716]
M = D                                        // ROM[11717]
// ---------------------------
// call
@ Output.initMap:38                          // ROM[11718]
D = A                                        // ROM[11719]
@ R15                                        // ROM[11720]
M = D                                        // ROM[11721]
@ :call                                      // ROM[11722]
0; JMP                                       // ROM[11723]
( Output.initMap:38)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11724]
0; JMP                                       // ROM[11725]
// ---------------------------
// ( RA )
( Output.initMap:37) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11726]
AM = M-1                                     // ROM[11727]
D = M                                        // ROM[11728]
// ---------------------------
@ 5                                          // ROM[11729]
M = D                                        // ROM[11730]

// -------------------------------------
// PUSH: <constant, 46>
// -------------------------------------
@ 46                                         // ROM[11731]
D = A                                        // ROM[11732]
// ---------------------------
// push D
@ SP                                         // ROM[11733]
AM = M+1                                     // ROM[11734]
A = A-1                                      // ROM[11735]
M = D                                        // ROM[11736]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11737]
D = A                                        // ROM[11738]
// ---------------------------
// push D
@ SP                                         // ROM[11739]
AM = M+1                                     // ROM[11740]
A = A-1                                      // ROM[11741]
M = D                                        // ROM[11742]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11743]
D = A                                        // ROM[11744]
// ---------------------------
// push D
@ SP                                         // ROM[11745]
AM = M+1                                     // ROM[11746]
A = A-1                                      // ROM[11747]
M = D                                        // ROM[11748]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11749]
D = A                                        // ROM[11750]
// ---------------------------
// push D
@ SP                                         // ROM[11751]
AM = M+1                                     // ROM[11752]
A = A-1                                      // ROM[11753]
M = D                                        // ROM[11754]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11755]
D = A                                        // ROM[11756]
// ---------------------------
// push D
@ SP                                         // ROM[11757]
AM = M+1                                     // ROM[11758]
A = A-1                                      // ROM[11759]
M = D                                        // ROM[11760]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11761]
D = A                                        // ROM[11762]
// ---------------------------
// push D
@ SP                                         // ROM[11763]
AM = M+1                                     // ROM[11764]
A = A-1                                      // ROM[11765]
M = D                                        // ROM[11766]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11767]
D = A                                        // ROM[11768]
// ---------------------------
// push D
@ SP                                         // ROM[11769]
AM = M+1                                     // ROM[11770]
A = A-1                                      // ROM[11771]
M = D                                        // ROM[11772]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11773]
D = A                                        // ROM[11774]
// ---------------------------
// push D
@ SP                                         // ROM[11775]
AM = M+1                                     // ROM[11776]
A = A-1                                      // ROM[11777]
M = D                                        // ROM[11778]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11779]
D = A                                        // ROM[11780]
// ---------------------------
// push D
@ SP                                         // ROM[11781]
AM = M+1                                     // ROM[11782]
A = A-1                                      // ROM[11783]
M = D                                        // ROM[11784]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11785]
D = A                                        // ROM[11786]
// ---------------------------
// push D
@ SP                                         // ROM[11787]
AM = M+1                                     // ROM[11788]
A = A-1                                      // ROM[11789]
M = D                                        // ROM[11790]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11791]
D = A                                        // ROM[11792]
// ---------------------------
// push D
@ SP                                         // ROM[11793]
AM = M+1                                     // ROM[11794]
A = A-1                                      // ROM[11795]
M = D                                        // ROM[11796]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11797]
D = A                                        // ROM[11798]
// ---------------------------
// push D
@ SP                                         // ROM[11799]
AM = M+1                                     // ROM[11800]
A = A-1                                      // ROM[11801]
M = D                                        // ROM[11802]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11803]
D = A                                        // ROM[11804]
@ R13                                        // ROM[11805]
M = D                                        // ROM[11806]
// ---------------------------
// Push RA
@ Output.initMap:39                          // ROM[11807]
D = A                                        // ROM[11808]
// ---------------------------
// push D
@ SP                                         // ROM[11809]
AM = M+1                                     // ROM[11810]
A = A-1                                      // ROM[11811]
M = D                                        // ROM[11812]
// ---------------------------
// call
@ Output.initMap:40                          // ROM[11813]
D = A                                        // ROM[11814]
@ R15                                        // ROM[11815]
M = D                                        // ROM[11816]
@ :call                                      // ROM[11817]
0; JMP                                       // ROM[11818]
( Output.initMap:40)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11819]
0; JMP                                       // ROM[11820]
// ---------------------------
// ( RA )
( Output.initMap:39) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11821]
AM = M-1                                     // ROM[11822]
D = M                                        // ROM[11823]
// ---------------------------
@ 5                                          // ROM[11824]
M = D                                        // ROM[11825]

// -------------------------------------
// PUSH: <constant, 47>
// -------------------------------------
@ 47                                         // ROM[11826]
D = A                                        // ROM[11827]
// ---------------------------
// push D
@ SP                                         // ROM[11828]
AM = M+1                                     // ROM[11829]
A = A-1                                      // ROM[11830]
M = D                                        // ROM[11831]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11832]
D = A                                        // ROM[11833]
// ---------------------------
// push D
@ SP                                         // ROM[11834]
AM = M+1                                     // ROM[11835]
A = A-1                                      // ROM[11836]
M = D                                        // ROM[11837]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11838]
D = A                                        // ROM[11839]
// ---------------------------
// push D
@ SP                                         // ROM[11840]
AM = M+1                                     // ROM[11841]
A = A-1                                      // ROM[11842]
M = D                                        // ROM[11843]

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[11844]
D = A                                        // ROM[11845]
// ---------------------------
// push D
@ SP                                         // ROM[11846]
AM = M+1                                     // ROM[11847]
A = A-1                                      // ROM[11848]
M = D                                        // ROM[11849]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[11850]
D = A                                        // ROM[11851]
// ---------------------------
// push D
@ SP                                         // ROM[11852]
AM = M+1                                     // ROM[11853]
A = A-1                                      // ROM[11854]
M = D                                        // ROM[11855]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[11856]
D = A                                        // ROM[11857]
// ---------------------------
// push D
@ SP                                         // ROM[11858]
AM = M+1                                     // ROM[11859]
A = A-1                                      // ROM[11860]
M = D                                        // ROM[11861]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11862]
D = A                                        // ROM[11863]
// ---------------------------
// push D
@ SP                                         // ROM[11864]
AM = M+1                                     // ROM[11865]
A = A-1                                      // ROM[11866]
M = D                                        // ROM[11867]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[11868]
D = A                                        // ROM[11869]
// ---------------------------
// push D
@ SP                                         // ROM[11870]
AM = M+1                                     // ROM[11871]
A = A-1                                      // ROM[11872]
M = D                                        // ROM[11873]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[11874]
D = A                                        // ROM[11875]
// ---------------------------
// push D
@ SP                                         // ROM[11876]
AM = M+1                                     // ROM[11877]
A = A-1                                      // ROM[11878]
M = D                                        // ROM[11879]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[11880]
D = A                                        // ROM[11881]
// ---------------------------
// push D
@ SP                                         // ROM[11882]
AM = M+1                                     // ROM[11883]
A = A-1                                      // ROM[11884]
M = D                                        // ROM[11885]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11886]
D = A                                        // ROM[11887]
// ---------------------------
// push D
@ SP                                         // ROM[11888]
AM = M+1                                     // ROM[11889]
A = A-1                                      // ROM[11890]
M = D                                        // ROM[11891]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11892]
D = A                                        // ROM[11893]
// ---------------------------
// push D
@ SP                                         // ROM[11894]
AM = M+1                                     // ROM[11895]
A = A-1                                      // ROM[11896]
M = D                                        // ROM[11897]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11898]
D = A                                        // ROM[11899]
@ R13                                        // ROM[11900]
M = D                                        // ROM[11901]
// ---------------------------
// Push RA
@ Output.initMap:41                          // ROM[11902]
D = A                                        // ROM[11903]
// ---------------------------
// push D
@ SP                                         // ROM[11904]
AM = M+1                                     // ROM[11905]
A = A-1                                      // ROM[11906]
M = D                                        // ROM[11907]
// ---------------------------
// call
@ Output.initMap:42                          // ROM[11908]
D = A                                        // ROM[11909]
@ R15                                        // ROM[11910]
M = D                                        // ROM[11911]
@ :call                                      // ROM[11912]
0; JMP                                       // ROM[11913]
( Output.initMap:42)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[11914]
0; JMP                                       // ROM[11915]
// ---------------------------
// ( RA )
( Output.initMap:41) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[11916]
AM = M-1                                     // ROM[11917]
D = M                                        // ROM[11918]
// ---------------------------
@ 5                                          // ROM[11919]
M = D                                        // ROM[11920]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[11921]
D = A                                        // ROM[11922]
// ---------------------------
// push D
@ SP                                         // ROM[11923]
AM = M+1                                     // ROM[11924]
A = A-1                                      // ROM[11925]
M = D                                        // ROM[11926]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11927]
D = A                                        // ROM[11928]
// ---------------------------
// push D
@ SP                                         // ROM[11929]
AM = M+1                                     // ROM[11930]
A = A-1                                      // ROM[11931]
M = D                                        // ROM[11932]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[11933]
D = A                                        // ROM[11934]
// ---------------------------
// push D
@ SP                                         // ROM[11935]
AM = M+1                                     // ROM[11936]
A = A-1                                      // ROM[11937]
M = D                                        // ROM[11938]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[11939]
D = A                                        // ROM[11940]
// ---------------------------
// push D
@ SP                                         // ROM[11941]
AM = M+1                                     // ROM[11942]
A = A-1                                      // ROM[11943]
M = D                                        // ROM[11944]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[11945]
D = A                                        // ROM[11946]
// ---------------------------
// push D
@ SP                                         // ROM[11947]
AM = M+1                                     // ROM[11948]
A = A-1                                      // ROM[11949]
M = D                                        // ROM[11950]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[11951]
D = A                                        // ROM[11952]
// ---------------------------
// push D
@ SP                                         // ROM[11953]
AM = M+1                                     // ROM[11954]
A = A-1                                      // ROM[11955]
M = D                                        // ROM[11956]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[11957]
D = A                                        // ROM[11958]
// ---------------------------
// push D
@ SP                                         // ROM[11959]
AM = M+1                                     // ROM[11960]
A = A-1                                      // ROM[11961]
M = D                                        // ROM[11962]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[11963]
D = A                                        // ROM[11964]
// ---------------------------
// push D
@ SP                                         // ROM[11965]
AM = M+1                                     // ROM[11966]
A = A-1                                      // ROM[11967]
M = D                                        // ROM[11968]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[11969]
D = A                                        // ROM[11970]
// ---------------------------
// push D
@ SP                                         // ROM[11971]
AM = M+1                                     // ROM[11972]
A = A-1                                      // ROM[11973]
M = D                                        // ROM[11974]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[11975]
D = A                                        // ROM[11976]
// ---------------------------
// push D
@ SP                                         // ROM[11977]
AM = M+1                                     // ROM[11978]
A = A-1                                      // ROM[11979]
M = D                                        // ROM[11980]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11981]
D = A                                        // ROM[11982]
// ---------------------------
// push D
@ SP                                         // ROM[11983]
AM = M+1                                     // ROM[11984]
A = A-1                                      // ROM[11985]
M = D                                        // ROM[11986]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[11987]
D = A                                        // ROM[11988]
// ---------------------------
// push D
@ SP                                         // ROM[11989]
AM = M+1                                     // ROM[11990]
A = A-1                                      // ROM[11991]
M = D                                        // ROM[11992]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[11993]
D = A                                        // ROM[11994]
@ R13                                        // ROM[11995]
M = D                                        // ROM[11996]
// ---------------------------
// Push RA
@ Output.initMap:43                          // ROM[11997]
D = A                                        // ROM[11998]
// ---------------------------
// push D
@ SP                                         // ROM[11999]
AM = M+1                                     // ROM[12000]
A = A-1                                      // ROM[12001]
M = D                                        // ROM[12002]
// ---------------------------
// call
@ Output.initMap:44                          // ROM[12003]
D = A                                        // ROM[12004]
@ R15                                        // ROM[12005]
M = D                                        // ROM[12006]
@ :call                                      // ROM[12007]
0; JMP                                       // ROM[12008]
( Output.initMap:44)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12009]
0; JMP                                       // ROM[12010]
// ---------------------------
// ( RA )
( Output.initMap:43) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12011]
AM = M-1                                     // ROM[12012]
D = M                                        // ROM[12013]
// ---------------------------
@ 5                                          // ROM[12014]
M = D                                        // ROM[12015]

// -------------------------------------
// PUSH: <constant, 49>
// -------------------------------------
@ 49                                         // ROM[12016]
D = A                                        // ROM[12017]
// ---------------------------
// push D
@ SP                                         // ROM[12018]
AM = M+1                                     // ROM[12019]
A = A-1                                      // ROM[12020]
M = D                                        // ROM[12021]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12022]
D = A                                        // ROM[12023]
// ---------------------------
// push D
@ SP                                         // ROM[12024]
AM = M+1                                     // ROM[12025]
A = A-1                                      // ROM[12026]
M = D                                        // ROM[12027]

// -------------------------------------
// PUSH: <constant, 14>
// -------------------------------------
@ 14                                         // ROM[12028]
D = A                                        // ROM[12029]
// ---------------------------
// push D
@ SP                                         // ROM[12030]
AM = M+1                                     // ROM[12031]
A = A-1                                      // ROM[12032]
M = D                                        // ROM[12033]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[12034]
D = A                                        // ROM[12035]
// ---------------------------
// push D
@ SP                                         // ROM[12036]
AM = M+1                                     // ROM[12037]
A = A-1                                      // ROM[12038]
M = D                                        // ROM[12039]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12040]
D = A                                        // ROM[12041]
// ---------------------------
// push D
@ SP                                         // ROM[12042]
AM = M+1                                     // ROM[12043]
A = A-1                                      // ROM[12044]
M = D                                        // ROM[12045]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12046]
D = A                                        // ROM[12047]
// ---------------------------
// push D
@ SP                                         // ROM[12048]
AM = M+1                                     // ROM[12049]
A = A-1                                      // ROM[12050]
M = D                                        // ROM[12051]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12052]
D = A                                        // ROM[12053]
// ---------------------------
// push D
@ SP                                         // ROM[12054]
AM = M+1                                     // ROM[12055]
A = A-1                                      // ROM[12056]
M = D                                        // ROM[12057]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12058]
D = A                                        // ROM[12059]
// ---------------------------
// push D
@ SP                                         // ROM[12060]
AM = M+1                                     // ROM[12061]
A = A-1                                      // ROM[12062]
M = D                                        // ROM[12063]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12064]
D = A                                        // ROM[12065]
// ---------------------------
// push D
@ SP                                         // ROM[12066]
AM = M+1                                     // ROM[12067]
A = A-1                                      // ROM[12068]
M = D                                        // ROM[12069]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[12070]
D = A                                        // ROM[12071]
// ---------------------------
// push D
@ SP                                         // ROM[12072]
AM = M+1                                     // ROM[12073]
A = A-1                                      // ROM[12074]
M = D                                        // ROM[12075]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12076]
D = A                                        // ROM[12077]
// ---------------------------
// push D
@ SP                                         // ROM[12078]
AM = M+1                                     // ROM[12079]
A = A-1                                      // ROM[12080]
M = D                                        // ROM[12081]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12082]
D = A                                        // ROM[12083]
// ---------------------------
// push D
@ SP                                         // ROM[12084]
AM = M+1                                     // ROM[12085]
A = A-1                                      // ROM[12086]
M = D                                        // ROM[12087]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12088]
D = A                                        // ROM[12089]
@ R13                                        // ROM[12090]
M = D                                        // ROM[12091]
// ---------------------------
// Push RA
@ Output.initMap:45                          // ROM[12092]
D = A                                        // ROM[12093]
// ---------------------------
// push D
@ SP                                         // ROM[12094]
AM = M+1                                     // ROM[12095]
A = A-1                                      // ROM[12096]
M = D                                        // ROM[12097]
// ---------------------------
// call
@ Output.initMap:46                          // ROM[12098]
D = A                                        // ROM[12099]
@ R15                                        // ROM[12100]
M = D                                        // ROM[12101]
@ :call                                      // ROM[12102]
0; JMP                                       // ROM[12103]
( Output.initMap:46)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12104]
0; JMP                                       // ROM[12105]
// ---------------------------
// ( RA )
( Output.initMap:45) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12106]
AM = M-1                                     // ROM[12107]
D = M                                        // ROM[12108]
// ---------------------------
@ 5                                          // ROM[12109]
M = D                                        // ROM[12110]

// -------------------------------------
// PUSH: <constant, 50>
// -------------------------------------
@ 50                                         // ROM[12111]
D = A                                        // ROM[12112]
// ---------------------------
// push D
@ SP                                         // ROM[12113]
AM = M+1                                     // ROM[12114]
A = A-1                                      // ROM[12115]
M = D                                        // ROM[12116]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12117]
D = A                                        // ROM[12118]
// ---------------------------
// push D
@ SP                                         // ROM[12119]
AM = M+1                                     // ROM[12120]
A = A-1                                      // ROM[12121]
M = D                                        // ROM[12122]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12123]
D = A                                        // ROM[12124]
// ---------------------------
// push D
@ SP                                         // ROM[12125]
AM = M+1                                     // ROM[12126]
A = A-1                                      // ROM[12127]
M = D                                        // ROM[12128]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12129]
D = A                                        // ROM[12130]
// ---------------------------
// push D
@ SP                                         // ROM[12131]
AM = M+1                                     // ROM[12132]
A = A-1                                      // ROM[12133]
M = D                                        // ROM[12134]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[12135]
D = A                                        // ROM[12136]
// ---------------------------
// push D
@ SP                                         // ROM[12137]
AM = M+1                                     // ROM[12138]
A = A-1                                      // ROM[12139]
M = D                                        // ROM[12140]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12141]
D = A                                        // ROM[12142]
// ---------------------------
// push D
@ SP                                         // ROM[12143]
AM = M+1                                     // ROM[12144]
A = A-1                                      // ROM[12145]
M = D                                        // ROM[12146]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[12147]
D = A                                        // ROM[12148]
// ---------------------------
// push D
@ SP                                         // ROM[12149]
AM = M+1                                     // ROM[12150]
A = A-1                                      // ROM[12151]
M = D                                        // ROM[12152]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[12153]
D = A                                        // ROM[12154]
// ---------------------------
// push D
@ SP                                         // ROM[12155]
AM = M+1                                     // ROM[12156]
A = A-1                                      // ROM[12157]
M = D                                        // ROM[12158]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12159]
D = A                                        // ROM[12160]
// ---------------------------
// push D
@ SP                                         // ROM[12161]
AM = M+1                                     // ROM[12162]
A = A-1                                      // ROM[12163]
M = D                                        // ROM[12164]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[12165]
D = A                                        // ROM[12166]
// ---------------------------
// push D
@ SP                                         // ROM[12167]
AM = M+1                                     // ROM[12168]
A = A-1                                      // ROM[12169]
M = D                                        // ROM[12170]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12171]
D = A                                        // ROM[12172]
// ---------------------------
// push D
@ SP                                         // ROM[12173]
AM = M+1                                     // ROM[12174]
A = A-1                                      // ROM[12175]
M = D                                        // ROM[12176]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12177]
D = A                                        // ROM[12178]
// ---------------------------
// push D
@ SP                                         // ROM[12179]
AM = M+1                                     // ROM[12180]
A = A-1                                      // ROM[12181]
M = D                                        // ROM[12182]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12183]
D = A                                        // ROM[12184]
@ R13                                        // ROM[12185]
M = D                                        // ROM[12186]
// ---------------------------
// Push RA
@ Output.initMap:47                          // ROM[12187]
D = A                                        // ROM[12188]
// ---------------------------
// push D
@ SP                                         // ROM[12189]
AM = M+1                                     // ROM[12190]
A = A-1                                      // ROM[12191]
M = D                                        // ROM[12192]
// ---------------------------
// call
@ Output.initMap:48                          // ROM[12193]
D = A                                        // ROM[12194]
@ R15                                        // ROM[12195]
M = D                                        // ROM[12196]
@ :call                                      // ROM[12197]
0; JMP                                       // ROM[12198]
( Output.initMap:48)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12199]
0; JMP                                       // ROM[12200]
// ---------------------------
// ( RA )
( Output.initMap:47) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12201]
AM = M-1                                     // ROM[12202]
D = M                                        // ROM[12203]
// ---------------------------
@ 5                                          // ROM[12204]
M = D                                        // ROM[12205]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12206]
D = A                                        // ROM[12207]
// ---------------------------
// push D
@ SP                                         // ROM[12208]
AM = M+1                                     // ROM[12209]
A = A-1                                      // ROM[12210]
M = D                                        // ROM[12211]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12212]
D = A                                        // ROM[12213]
// ---------------------------
// push D
@ SP                                         // ROM[12214]
AM = M+1                                     // ROM[12215]
A = A-1                                      // ROM[12216]
M = D                                        // ROM[12217]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12218]
D = A                                        // ROM[12219]
// ---------------------------
// push D
@ SP                                         // ROM[12220]
AM = M+1                                     // ROM[12221]
A = A-1                                      // ROM[12222]
M = D                                        // ROM[12223]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12224]
D = A                                        // ROM[12225]
// ---------------------------
// push D
@ SP                                         // ROM[12226]
AM = M+1                                     // ROM[12227]
A = A-1                                      // ROM[12228]
M = D                                        // ROM[12229]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12230]
D = A                                        // ROM[12231]
// ---------------------------
// push D
@ SP                                         // ROM[12232]
AM = M+1                                     // ROM[12233]
A = A-1                                      // ROM[12234]
M = D                                        // ROM[12235]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[12236]
D = A                                        // ROM[12237]
// ---------------------------
// push D
@ SP                                         // ROM[12238]
AM = M+1                                     // ROM[12239]
A = A-1                                      // ROM[12240]
M = D                                        // ROM[12241]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12242]
D = A                                        // ROM[12243]
// ---------------------------
// push D
@ SP                                         // ROM[12244]
AM = M+1                                     // ROM[12245]
A = A-1                                      // ROM[12246]
M = D                                        // ROM[12247]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12248]
D = A                                        // ROM[12249]
// ---------------------------
// push D
@ SP                                         // ROM[12250]
AM = M+1                                     // ROM[12251]
A = A-1                                      // ROM[12252]
M = D                                        // ROM[12253]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12254]
D = A                                        // ROM[12255]
// ---------------------------
// push D
@ SP                                         // ROM[12256]
AM = M+1                                     // ROM[12257]
A = A-1                                      // ROM[12258]
M = D                                        // ROM[12259]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12260]
D = A                                        // ROM[12261]
// ---------------------------
// push D
@ SP                                         // ROM[12262]
AM = M+1                                     // ROM[12263]
A = A-1                                      // ROM[12264]
M = D                                        // ROM[12265]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12266]
D = A                                        // ROM[12267]
// ---------------------------
// push D
@ SP                                         // ROM[12268]
AM = M+1                                     // ROM[12269]
A = A-1                                      // ROM[12270]
M = D                                        // ROM[12271]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12272]
D = A                                        // ROM[12273]
// ---------------------------
// push D
@ SP                                         // ROM[12274]
AM = M+1                                     // ROM[12275]
A = A-1                                      // ROM[12276]
M = D                                        // ROM[12277]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12278]
D = A                                        // ROM[12279]
@ R13                                        // ROM[12280]
M = D                                        // ROM[12281]
// ---------------------------
// Push RA
@ Output.initMap:49                          // ROM[12282]
D = A                                        // ROM[12283]
// ---------------------------
// push D
@ SP                                         // ROM[12284]
AM = M+1                                     // ROM[12285]
A = A-1                                      // ROM[12286]
M = D                                        // ROM[12287]
// ---------------------------
// call
@ Output.initMap:50                          // ROM[12288]
D = A                                        // ROM[12289]
@ R15                                        // ROM[12290]
M = D                                        // ROM[12291]
@ :call                                      // ROM[12292]
0; JMP                                       // ROM[12293]
( Output.initMap:50)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12294]
0; JMP                                       // ROM[12295]
// ---------------------------
// ( RA )
( Output.initMap:49) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12296]
AM = M-1                                     // ROM[12297]
D = M                                        // ROM[12298]
// ---------------------------
@ 5                                          // ROM[12299]
M = D                                        // ROM[12300]

// -------------------------------------
// PUSH: <constant, 52>
// -------------------------------------
@ 52                                         // ROM[12301]
D = A                                        // ROM[12302]
// ---------------------------
// push D
@ SP                                         // ROM[12303]
AM = M+1                                     // ROM[12304]
A = A-1                                      // ROM[12305]
M = D                                        // ROM[12306]

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[12307]
D = A                                        // ROM[12308]
// ---------------------------
// push D
@ SP                                         // ROM[12309]
AM = M+1                                     // ROM[12310]
A = A-1                                      // ROM[12311]
M = D                                        // ROM[12312]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[12313]
D = A                                        // ROM[12314]
// ---------------------------
// push D
@ SP                                         // ROM[12315]
AM = M+1                                     // ROM[12316]
A = A-1                                      // ROM[12317]
M = D                                        // ROM[12318]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[12319]
D = A                                        // ROM[12320]
// ---------------------------
// push D
@ SP                                         // ROM[12321]
AM = M+1                                     // ROM[12322]
A = A-1                                      // ROM[12323]
M = D                                        // ROM[12324]

// -------------------------------------
// PUSH: <constant, 26>
// -------------------------------------
@ 26                                         // ROM[12325]
D = A                                        // ROM[12326]
// ---------------------------
// push D
@ SP                                         // ROM[12327]
AM = M+1                                     // ROM[12328]
A = A-1                                      // ROM[12329]
M = D                                        // ROM[12330]

// -------------------------------------
// PUSH: <constant, 25>
// -------------------------------------
@ 25                                         // ROM[12331]
D = A                                        // ROM[12332]
// ---------------------------
// push D
@ SP                                         // ROM[12333]
AM = M+1                                     // ROM[12334]
A = A-1                                      // ROM[12335]
M = D                                        // ROM[12336]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[12337]
D = A                                        // ROM[12338]
// ---------------------------
// push D
@ SP                                         // ROM[12339]
AM = M+1                                     // ROM[12340]
A = A-1                                      // ROM[12341]
M = D                                        // ROM[12342]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[12343]
D = A                                        // ROM[12344]
// ---------------------------
// push D
@ SP                                         // ROM[12345]
AM = M+1                                     // ROM[12346]
A = A-1                                      // ROM[12347]
M = D                                        // ROM[12348]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[12349]
D = A                                        // ROM[12350]
// ---------------------------
// push D
@ SP                                         // ROM[12351]
AM = M+1                                     // ROM[12352]
A = A-1                                      // ROM[12353]
M = D                                        // ROM[12354]

// -------------------------------------
// PUSH: <constant, 60>
// -------------------------------------
@ 60                                         // ROM[12355]
D = A                                        // ROM[12356]
// ---------------------------
// push D
@ SP                                         // ROM[12357]
AM = M+1                                     // ROM[12358]
A = A-1                                      // ROM[12359]
M = D                                        // ROM[12360]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12361]
D = A                                        // ROM[12362]
// ---------------------------
// push D
@ SP                                         // ROM[12363]
AM = M+1                                     // ROM[12364]
A = A-1                                      // ROM[12365]
M = D                                        // ROM[12366]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12367]
D = A                                        // ROM[12368]
// ---------------------------
// push D
@ SP                                         // ROM[12369]
AM = M+1                                     // ROM[12370]
A = A-1                                      // ROM[12371]
M = D                                        // ROM[12372]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12373]
D = A                                        // ROM[12374]
@ R13                                        // ROM[12375]
M = D                                        // ROM[12376]
// ---------------------------
// Push RA
@ Output.initMap:51                          // ROM[12377]
D = A                                        // ROM[12378]
// ---------------------------
// push D
@ SP                                         // ROM[12379]
AM = M+1                                     // ROM[12380]
A = A-1                                      // ROM[12381]
M = D                                        // ROM[12382]
// ---------------------------
// call
@ Output.initMap:52                          // ROM[12383]
D = A                                        // ROM[12384]
@ R15                                        // ROM[12385]
M = D                                        // ROM[12386]
@ :call                                      // ROM[12387]
0; JMP                                       // ROM[12388]
( Output.initMap:52)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12389]
0; JMP                                       // ROM[12390]
// ---------------------------
// ( RA )
( Output.initMap:51) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12391]
AM = M-1                                     // ROM[12392]
D = M                                        // ROM[12393]
// ---------------------------
@ 5                                          // ROM[12394]
M = D                                        // ROM[12395]

// -------------------------------------
// PUSH: <constant, 53>
// -------------------------------------
@ 53                                         // ROM[12396]
D = A                                        // ROM[12397]
// ---------------------------
// push D
@ SP                                         // ROM[12398]
AM = M+1                                     // ROM[12399]
A = A-1                                      // ROM[12400]
M = D                                        // ROM[12401]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[12402]
D = A                                        // ROM[12403]
// ---------------------------
// push D
@ SP                                         // ROM[12404]
AM = M+1                                     // ROM[12405]
A = A-1                                      // ROM[12406]
M = D                                        // ROM[12407]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[12408]
D = A                                        // ROM[12409]
// ---------------------------
// push D
@ SP                                         // ROM[12410]
AM = M+1                                     // ROM[12411]
A = A-1                                      // ROM[12412]
M = D                                        // ROM[12413]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[12414]
D = A                                        // ROM[12415]
// ---------------------------
// push D
@ SP                                         // ROM[12416]
AM = M+1                                     // ROM[12417]
A = A-1                                      // ROM[12418]
M = D                                        // ROM[12419]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[12420]
D = A                                        // ROM[12421]
// ---------------------------
// push D
@ SP                                         // ROM[12422]
AM = M+1                                     // ROM[12423]
A = A-1                                      // ROM[12424]
M = D                                        // ROM[12425]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12426]
D = A                                        // ROM[12427]
// ---------------------------
// push D
@ SP                                         // ROM[12428]
AM = M+1                                     // ROM[12429]
A = A-1                                      // ROM[12430]
M = D                                        // ROM[12431]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12432]
D = A                                        // ROM[12433]
// ---------------------------
// push D
@ SP                                         // ROM[12434]
AM = M+1                                     // ROM[12435]
A = A-1                                      // ROM[12436]
M = D                                        // ROM[12437]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12438]
D = A                                        // ROM[12439]
// ---------------------------
// push D
@ SP                                         // ROM[12440]
AM = M+1                                     // ROM[12441]
A = A-1                                      // ROM[12442]
M = D                                        // ROM[12443]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12444]
D = A                                        // ROM[12445]
// ---------------------------
// push D
@ SP                                         // ROM[12446]
AM = M+1                                     // ROM[12447]
A = A-1                                      // ROM[12448]
M = D                                        // ROM[12449]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12450]
D = A                                        // ROM[12451]
// ---------------------------
// push D
@ SP                                         // ROM[12452]
AM = M+1                                     // ROM[12453]
A = A-1                                      // ROM[12454]
M = D                                        // ROM[12455]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12456]
D = A                                        // ROM[12457]
// ---------------------------
// push D
@ SP                                         // ROM[12458]
AM = M+1                                     // ROM[12459]
A = A-1                                      // ROM[12460]
M = D                                        // ROM[12461]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12462]
D = A                                        // ROM[12463]
// ---------------------------
// push D
@ SP                                         // ROM[12464]
AM = M+1                                     // ROM[12465]
A = A-1                                      // ROM[12466]
M = D                                        // ROM[12467]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12468]
D = A                                        // ROM[12469]
@ R13                                        // ROM[12470]
M = D                                        // ROM[12471]
// ---------------------------
// Push RA
@ Output.initMap:53                          // ROM[12472]
D = A                                        // ROM[12473]
// ---------------------------
// push D
@ SP                                         // ROM[12474]
AM = M+1                                     // ROM[12475]
A = A-1                                      // ROM[12476]
M = D                                        // ROM[12477]
// ---------------------------
// call
@ Output.initMap:54                          // ROM[12478]
D = A                                        // ROM[12479]
@ R15                                        // ROM[12480]
M = D                                        // ROM[12481]
@ :call                                      // ROM[12482]
0; JMP                                       // ROM[12483]
( Output.initMap:54)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12484]
0; JMP                                       // ROM[12485]
// ---------------------------
// ( RA )
( Output.initMap:53) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12486]
AM = M-1                                     // ROM[12487]
D = M                                        // ROM[12488]
// ---------------------------
@ 5                                          // ROM[12489]
M = D                                        // ROM[12490]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[12491]
D = A                                        // ROM[12492]
// ---------------------------
// push D
@ SP                                         // ROM[12493]
AM = M+1                                     // ROM[12494]
A = A-1                                      // ROM[12495]
M = D                                        // ROM[12496]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[12497]
D = A                                        // ROM[12498]
// ---------------------------
// push D
@ SP                                         // ROM[12499]
AM = M+1                                     // ROM[12500]
A = A-1                                      // ROM[12501]
M = D                                        // ROM[12502]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[12503]
D = A                                        // ROM[12504]
// ---------------------------
// push D
@ SP                                         // ROM[12505]
AM = M+1                                     // ROM[12506]
A = A-1                                      // ROM[12507]
M = D                                        // ROM[12508]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[12509]
D = A                                        // ROM[12510]
// ---------------------------
// push D
@ SP                                         // ROM[12511]
AM = M+1                                     // ROM[12512]
A = A-1                                      // ROM[12513]
M = D                                        // ROM[12514]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[12515]
D = A                                        // ROM[12516]
// ---------------------------
// push D
@ SP                                         // ROM[12517]
AM = M+1                                     // ROM[12518]
A = A-1                                      // ROM[12519]
M = D                                        // ROM[12520]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[12521]
D = A                                        // ROM[12522]
// ---------------------------
// push D
@ SP                                         // ROM[12523]
AM = M+1                                     // ROM[12524]
A = A-1                                      // ROM[12525]
M = D                                        // ROM[12526]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12527]
D = A                                        // ROM[12528]
// ---------------------------
// push D
@ SP                                         // ROM[12529]
AM = M+1                                     // ROM[12530]
A = A-1                                      // ROM[12531]
M = D                                        // ROM[12532]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12533]
D = A                                        // ROM[12534]
// ---------------------------
// push D
@ SP                                         // ROM[12535]
AM = M+1                                     // ROM[12536]
A = A-1                                      // ROM[12537]
M = D                                        // ROM[12538]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12539]
D = A                                        // ROM[12540]
// ---------------------------
// push D
@ SP                                         // ROM[12541]
AM = M+1                                     // ROM[12542]
A = A-1                                      // ROM[12543]
M = D                                        // ROM[12544]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12545]
D = A                                        // ROM[12546]
// ---------------------------
// push D
@ SP                                         // ROM[12547]
AM = M+1                                     // ROM[12548]
A = A-1                                      // ROM[12549]
M = D                                        // ROM[12550]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12551]
D = A                                        // ROM[12552]
// ---------------------------
// push D
@ SP                                         // ROM[12553]
AM = M+1                                     // ROM[12554]
A = A-1                                      // ROM[12555]
M = D                                        // ROM[12556]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12557]
D = A                                        // ROM[12558]
// ---------------------------
// push D
@ SP                                         // ROM[12559]
AM = M+1                                     // ROM[12560]
A = A-1                                      // ROM[12561]
M = D                                        // ROM[12562]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12563]
D = A                                        // ROM[12564]
@ R13                                        // ROM[12565]
M = D                                        // ROM[12566]
// ---------------------------
// Push RA
@ Output.initMap:55                          // ROM[12567]
D = A                                        // ROM[12568]
// ---------------------------
// push D
@ SP                                         // ROM[12569]
AM = M+1                                     // ROM[12570]
A = A-1                                      // ROM[12571]
M = D                                        // ROM[12572]
// ---------------------------
// call
@ Output.initMap:56                          // ROM[12573]
D = A                                        // ROM[12574]
@ R15                                        // ROM[12575]
M = D                                        // ROM[12576]
@ :call                                      // ROM[12577]
0; JMP                                       // ROM[12578]
( Output.initMap:56)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12579]
0; JMP                                       // ROM[12580]
// ---------------------------
// ( RA )
( Output.initMap:55) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12581]
AM = M-1                                     // ROM[12582]
D = M                                        // ROM[12583]
// ---------------------------
@ 5                                          // ROM[12584]
M = D                                        // ROM[12585]

// -------------------------------------
// PUSH: <constant, 55>
// -------------------------------------
@ 55                                         // ROM[12586]
D = A                                        // ROM[12587]
// ---------------------------
// push D
@ SP                                         // ROM[12588]
AM = M+1                                     // ROM[12589]
A = A-1                                      // ROM[12590]
M = D                                        // ROM[12591]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[12592]
D = A                                        // ROM[12593]
// ---------------------------
// push D
@ SP                                         // ROM[12594]
AM = M+1                                     // ROM[12595]
A = A-1                                      // ROM[12596]
M = D                                        // ROM[12597]

// -------------------------------------
// PUSH: <constant, 49>
// -------------------------------------
@ 49                                         // ROM[12598]
D = A                                        // ROM[12599]
// ---------------------------
// push D
@ SP                                         // ROM[12600]
AM = M+1                                     // ROM[12601]
A = A-1                                      // ROM[12602]
M = D                                        // ROM[12603]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12604]
D = A                                        // ROM[12605]
// ---------------------------
// push D
@ SP                                         // ROM[12606]
AM = M+1                                     // ROM[12607]
A = A-1                                      // ROM[12608]
M = D                                        // ROM[12609]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12610]
D = A                                        // ROM[12611]
// ---------------------------
// push D
@ SP                                         // ROM[12612]
AM = M+1                                     // ROM[12613]
A = A-1                                      // ROM[12614]
M = D                                        // ROM[12615]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[12616]
D = A                                        // ROM[12617]
// ---------------------------
// push D
@ SP                                         // ROM[12618]
AM = M+1                                     // ROM[12619]
A = A-1                                      // ROM[12620]
M = D                                        // ROM[12621]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12622]
D = A                                        // ROM[12623]
// ---------------------------
// push D
@ SP                                         // ROM[12624]
AM = M+1                                     // ROM[12625]
A = A-1                                      // ROM[12626]
M = D                                        // ROM[12627]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12628]
D = A                                        // ROM[12629]
// ---------------------------
// push D
@ SP                                         // ROM[12630]
AM = M+1                                     // ROM[12631]
A = A-1                                      // ROM[12632]
M = D                                        // ROM[12633]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12634]
D = A                                        // ROM[12635]
// ---------------------------
// push D
@ SP                                         // ROM[12636]
AM = M+1                                     // ROM[12637]
A = A-1                                      // ROM[12638]
M = D                                        // ROM[12639]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12640]
D = A                                        // ROM[12641]
// ---------------------------
// push D
@ SP                                         // ROM[12642]
AM = M+1                                     // ROM[12643]
A = A-1                                      // ROM[12644]
M = D                                        // ROM[12645]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12646]
D = A                                        // ROM[12647]
// ---------------------------
// push D
@ SP                                         // ROM[12648]
AM = M+1                                     // ROM[12649]
A = A-1                                      // ROM[12650]
M = D                                        // ROM[12651]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12652]
D = A                                        // ROM[12653]
// ---------------------------
// push D
@ SP                                         // ROM[12654]
AM = M+1                                     // ROM[12655]
A = A-1                                      // ROM[12656]
M = D                                        // ROM[12657]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12658]
D = A                                        // ROM[12659]
@ R13                                        // ROM[12660]
M = D                                        // ROM[12661]
// ---------------------------
// Push RA
@ Output.initMap:57                          // ROM[12662]
D = A                                        // ROM[12663]
// ---------------------------
// push D
@ SP                                         // ROM[12664]
AM = M+1                                     // ROM[12665]
A = A-1                                      // ROM[12666]
M = D                                        // ROM[12667]
// ---------------------------
// call
@ Output.initMap:58                          // ROM[12668]
D = A                                        // ROM[12669]
@ R15                                        // ROM[12670]
M = D                                        // ROM[12671]
@ :call                                      // ROM[12672]
0; JMP                                       // ROM[12673]
( Output.initMap:58)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12674]
0; JMP                                       // ROM[12675]
// ---------------------------
// ( RA )
( Output.initMap:57) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12676]
AM = M-1                                     // ROM[12677]
D = M                                        // ROM[12678]
// ---------------------------
@ 5                                          // ROM[12679]
M = D                                        // ROM[12680]

// -------------------------------------
// PUSH: <constant, 56>
// -------------------------------------
@ 56                                         // ROM[12681]
D = A                                        // ROM[12682]
// ---------------------------
// push D
@ SP                                         // ROM[12683]
AM = M+1                                     // ROM[12684]
A = A-1                                      // ROM[12685]
M = D                                        // ROM[12686]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12687]
D = A                                        // ROM[12688]
// ---------------------------
// push D
@ SP                                         // ROM[12689]
AM = M+1                                     // ROM[12690]
A = A-1                                      // ROM[12691]
M = D                                        // ROM[12692]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12693]
D = A                                        // ROM[12694]
// ---------------------------
// push D
@ SP                                         // ROM[12695]
AM = M+1                                     // ROM[12696]
A = A-1                                      // ROM[12697]
M = D                                        // ROM[12698]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12699]
D = A                                        // ROM[12700]
// ---------------------------
// push D
@ SP                                         // ROM[12701]
AM = M+1                                     // ROM[12702]
A = A-1                                      // ROM[12703]
M = D                                        // ROM[12704]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12705]
D = A                                        // ROM[12706]
// ---------------------------
// push D
@ SP                                         // ROM[12707]
AM = M+1                                     // ROM[12708]
A = A-1                                      // ROM[12709]
M = D                                        // ROM[12710]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12711]
D = A                                        // ROM[12712]
// ---------------------------
// push D
@ SP                                         // ROM[12713]
AM = M+1                                     // ROM[12714]
A = A-1                                      // ROM[12715]
M = D                                        // ROM[12716]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12717]
D = A                                        // ROM[12718]
// ---------------------------
// push D
@ SP                                         // ROM[12719]
AM = M+1                                     // ROM[12720]
A = A-1                                      // ROM[12721]
M = D                                        // ROM[12722]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12723]
D = A                                        // ROM[12724]
// ---------------------------
// push D
@ SP                                         // ROM[12725]
AM = M+1                                     // ROM[12726]
A = A-1                                      // ROM[12727]
M = D                                        // ROM[12728]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12729]
D = A                                        // ROM[12730]
// ---------------------------
// push D
@ SP                                         // ROM[12731]
AM = M+1                                     // ROM[12732]
A = A-1                                      // ROM[12733]
M = D                                        // ROM[12734]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12735]
D = A                                        // ROM[12736]
// ---------------------------
// push D
@ SP                                         // ROM[12737]
AM = M+1                                     // ROM[12738]
A = A-1                                      // ROM[12739]
M = D                                        // ROM[12740]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12741]
D = A                                        // ROM[12742]
// ---------------------------
// push D
@ SP                                         // ROM[12743]
AM = M+1                                     // ROM[12744]
A = A-1                                      // ROM[12745]
M = D                                        // ROM[12746]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12747]
D = A                                        // ROM[12748]
// ---------------------------
// push D
@ SP                                         // ROM[12749]
AM = M+1                                     // ROM[12750]
A = A-1                                      // ROM[12751]
M = D                                        // ROM[12752]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12753]
D = A                                        // ROM[12754]
@ R13                                        // ROM[12755]
M = D                                        // ROM[12756]
// ---------------------------
// Push RA
@ Output.initMap:59                          // ROM[12757]
D = A                                        // ROM[12758]
// ---------------------------
// push D
@ SP                                         // ROM[12759]
AM = M+1                                     // ROM[12760]
A = A-1                                      // ROM[12761]
M = D                                        // ROM[12762]
// ---------------------------
// call
@ Output.initMap:60                          // ROM[12763]
D = A                                        // ROM[12764]
@ R15                                        // ROM[12765]
M = D                                        // ROM[12766]
@ :call                                      // ROM[12767]
0; JMP                                       // ROM[12768]
( Output.initMap:60)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12769]
0; JMP                                       // ROM[12770]
// ---------------------------
// ( RA )
( Output.initMap:59) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12771]
AM = M-1                                     // ROM[12772]
D = M                                        // ROM[12773]
// ---------------------------
@ 5                                          // ROM[12774]
M = D                                        // ROM[12775]

// -------------------------------------
// PUSH: <constant, 57>
// -------------------------------------
@ 57                                         // ROM[12776]
D = A                                        // ROM[12777]
// ---------------------------
// push D
@ SP                                         // ROM[12778]
AM = M+1                                     // ROM[12779]
A = A-1                                      // ROM[12780]
M = D                                        // ROM[12781]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[12782]
D = A                                        // ROM[12783]
// ---------------------------
// push D
@ SP                                         // ROM[12784]
AM = M+1                                     // ROM[12785]
A = A-1                                      // ROM[12786]
M = D                                        // ROM[12787]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12788]
D = A                                        // ROM[12789]
// ---------------------------
// push D
@ SP                                         // ROM[12790]
AM = M+1                                     // ROM[12791]
A = A-1                                      // ROM[12792]
M = D                                        // ROM[12793]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12794]
D = A                                        // ROM[12795]
// ---------------------------
// push D
@ SP                                         // ROM[12796]
AM = M+1                                     // ROM[12797]
A = A-1                                      // ROM[12798]
M = D                                        // ROM[12799]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[12800]
D = A                                        // ROM[12801]
// ---------------------------
// push D
@ SP                                         // ROM[12802]
AM = M+1                                     // ROM[12803]
A = A-1                                      // ROM[12804]
M = D                                        // ROM[12805]

// -------------------------------------
// PUSH: <constant, 62>
// -------------------------------------
@ 62                                         // ROM[12806]
D = A                                        // ROM[12807]
// ---------------------------
// push D
@ SP                                         // ROM[12808]
AM = M+1                                     // ROM[12809]
A = A-1                                      // ROM[12810]
M = D                                        // ROM[12811]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12812]
D = A                                        // ROM[12813]
// ---------------------------
// push D
@ SP                                         // ROM[12814]
AM = M+1                                     // ROM[12815]
A = A-1                                      // ROM[12816]
M = D                                        // ROM[12817]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[12818]
D = A                                        // ROM[12819]
// ---------------------------
// push D
@ SP                                         // ROM[12820]
AM = M+1                                     // ROM[12821]
A = A-1                                      // ROM[12822]
M = D                                        // ROM[12823]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[12824]
D = A                                        // ROM[12825]
// ---------------------------
// push D
@ SP                                         // ROM[12826]
AM = M+1                                     // ROM[12827]
A = A-1                                      // ROM[12828]
M = D                                        // ROM[12829]

// -------------------------------------
// PUSH: <constant, 14>
// -------------------------------------
@ 14                                         // ROM[12830]
D = A                                        // ROM[12831]
// ---------------------------
// push D
@ SP                                         // ROM[12832]
AM = M+1                                     // ROM[12833]
A = A-1                                      // ROM[12834]
M = D                                        // ROM[12835]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12836]
D = A                                        // ROM[12837]
// ---------------------------
// push D
@ SP                                         // ROM[12838]
AM = M+1                                     // ROM[12839]
A = A-1                                      // ROM[12840]
M = D                                        // ROM[12841]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12842]
D = A                                        // ROM[12843]
// ---------------------------
// push D
@ SP                                         // ROM[12844]
AM = M+1                                     // ROM[12845]
A = A-1                                      // ROM[12846]
M = D                                        // ROM[12847]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12848]
D = A                                        // ROM[12849]
@ R13                                        // ROM[12850]
M = D                                        // ROM[12851]
// ---------------------------
// Push RA
@ Output.initMap:61                          // ROM[12852]
D = A                                        // ROM[12853]
// ---------------------------
// push D
@ SP                                         // ROM[12854]
AM = M+1                                     // ROM[12855]
A = A-1                                      // ROM[12856]
M = D                                        // ROM[12857]
// ---------------------------
// call
@ Output.initMap:62                          // ROM[12858]
D = A                                        // ROM[12859]
@ R15                                        // ROM[12860]
M = D                                        // ROM[12861]
@ :call                                      // ROM[12862]
0; JMP                                       // ROM[12863]
( Output.initMap:62)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12864]
0; JMP                                       // ROM[12865]
// ---------------------------
// ( RA )
( Output.initMap:61) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12866]
AM = M-1                                     // ROM[12867]
D = M                                        // ROM[12868]
// ---------------------------
@ 5                                          // ROM[12869]
M = D                                        // ROM[12870]

// -------------------------------------
// PUSH: <constant, 58>
// -------------------------------------
@ 58                                         // ROM[12871]
D = A                                        // ROM[12872]
// ---------------------------
// push D
@ SP                                         // ROM[12873]
AM = M+1                                     // ROM[12874]
A = A-1                                      // ROM[12875]
M = D                                        // ROM[12876]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12877]
D = A                                        // ROM[12878]
// ---------------------------
// push D
@ SP                                         // ROM[12879]
AM = M+1                                     // ROM[12880]
A = A-1                                      // ROM[12881]
M = D                                        // ROM[12882]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12883]
D = A                                        // ROM[12884]
// ---------------------------
// push D
@ SP                                         // ROM[12885]
AM = M+1                                     // ROM[12886]
A = A-1                                      // ROM[12887]
M = D                                        // ROM[12888]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12889]
D = A                                        // ROM[12890]
// ---------------------------
// push D
@ SP                                         // ROM[12891]
AM = M+1                                     // ROM[12892]
A = A-1                                      // ROM[12893]
M = D                                        // ROM[12894]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12895]
D = A                                        // ROM[12896]
// ---------------------------
// push D
@ SP                                         // ROM[12897]
AM = M+1                                     // ROM[12898]
A = A-1                                      // ROM[12899]
M = D                                        // ROM[12900]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12901]
D = A                                        // ROM[12902]
// ---------------------------
// push D
@ SP                                         // ROM[12903]
AM = M+1                                     // ROM[12904]
A = A-1                                      // ROM[12905]
M = D                                        // ROM[12906]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12907]
D = A                                        // ROM[12908]
// ---------------------------
// push D
@ SP                                         // ROM[12909]
AM = M+1                                     // ROM[12910]
A = A-1                                      // ROM[12911]
M = D                                        // ROM[12912]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12913]
D = A                                        // ROM[12914]
// ---------------------------
// push D
@ SP                                         // ROM[12915]
AM = M+1                                     // ROM[12916]
A = A-1                                      // ROM[12917]
M = D                                        // ROM[12918]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12919]
D = A                                        // ROM[12920]
// ---------------------------
// push D
@ SP                                         // ROM[12921]
AM = M+1                                     // ROM[12922]
A = A-1                                      // ROM[12923]
M = D                                        // ROM[12924]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12925]
D = A                                        // ROM[12926]
// ---------------------------
// push D
@ SP                                         // ROM[12927]
AM = M+1                                     // ROM[12928]
A = A-1                                      // ROM[12929]
M = D                                        // ROM[12930]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12931]
D = A                                        // ROM[12932]
// ---------------------------
// push D
@ SP                                         // ROM[12933]
AM = M+1                                     // ROM[12934]
A = A-1                                      // ROM[12935]
M = D                                        // ROM[12936]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12937]
D = A                                        // ROM[12938]
// ---------------------------
// push D
@ SP                                         // ROM[12939]
AM = M+1                                     // ROM[12940]
A = A-1                                      // ROM[12941]
M = D                                        // ROM[12942]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[12943]
D = A                                        // ROM[12944]
@ R13                                        // ROM[12945]
M = D                                        // ROM[12946]
// ---------------------------
// Push RA
@ Output.initMap:63                          // ROM[12947]
D = A                                        // ROM[12948]
// ---------------------------
// push D
@ SP                                         // ROM[12949]
AM = M+1                                     // ROM[12950]
A = A-1                                      // ROM[12951]
M = D                                        // ROM[12952]
// ---------------------------
// call
@ Output.initMap:64                          // ROM[12953]
D = A                                        // ROM[12954]
@ R15                                        // ROM[12955]
M = D                                        // ROM[12956]
@ :call                                      // ROM[12957]
0; JMP                                       // ROM[12958]
( Output.initMap:64)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[12959]
0; JMP                                       // ROM[12960]
// ---------------------------
// ( RA )
( Output.initMap:63) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[12961]
AM = M-1                                     // ROM[12962]
D = M                                        // ROM[12963]
// ---------------------------
@ 5                                          // ROM[12964]
M = D                                        // ROM[12965]

// -------------------------------------
// PUSH: <constant, 59>
// -------------------------------------
@ 59                                         // ROM[12966]
D = A                                        // ROM[12967]
// ---------------------------
// push D
@ SP                                         // ROM[12968]
AM = M+1                                     // ROM[12969]
A = A-1                                      // ROM[12970]
M = D                                        // ROM[12971]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12972]
D = A                                        // ROM[12973]
// ---------------------------
// push D
@ SP                                         // ROM[12974]
AM = M+1                                     // ROM[12975]
A = A-1                                      // ROM[12976]
M = D                                        // ROM[12977]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12978]
D = A                                        // ROM[12979]
// ---------------------------
// push D
@ SP                                         // ROM[12980]
AM = M+1                                     // ROM[12981]
A = A-1                                      // ROM[12982]
M = D                                        // ROM[12983]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12984]
D = A                                        // ROM[12985]
// ---------------------------
// push D
@ SP                                         // ROM[12986]
AM = M+1                                     // ROM[12987]
A = A-1                                      // ROM[12988]
M = D                                        // ROM[12989]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[12990]
D = A                                        // ROM[12991]
// ---------------------------
// push D
@ SP                                         // ROM[12992]
AM = M+1                                     // ROM[12993]
A = A-1                                      // ROM[12994]
M = D                                        // ROM[12995]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[12996]
D = A                                        // ROM[12997]
// ---------------------------
// push D
@ SP                                         // ROM[12998]
AM = M+1                                     // ROM[12999]
A = A-1                                      // ROM[13000]
M = D                                        // ROM[13001]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13002]
D = A                                        // ROM[13003]
// ---------------------------
// push D
@ SP                                         // ROM[13004]
AM = M+1                                     // ROM[13005]
A = A-1                                      // ROM[13006]
M = D                                        // ROM[13007]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13008]
D = A                                        // ROM[13009]
// ---------------------------
// push D
@ SP                                         // ROM[13010]
AM = M+1                                     // ROM[13011]
A = A-1                                      // ROM[13012]
M = D                                        // ROM[13013]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13014]
D = A                                        // ROM[13015]
// ---------------------------
// push D
@ SP                                         // ROM[13016]
AM = M+1                                     // ROM[13017]
A = A-1                                      // ROM[13018]
M = D                                        // ROM[13019]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[13020]
D = A                                        // ROM[13021]
// ---------------------------
// push D
@ SP                                         // ROM[13022]
AM = M+1                                     // ROM[13023]
A = A-1                                      // ROM[13024]
M = D                                        // ROM[13025]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13026]
D = A                                        // ROM[13027]
// ---------------------------
// push D
@ SP                                         // ROM[13028]
AM = M+1                                     // ROM[13029]
A = A-1                                      // ROM[13030]
M = D                                        // ROM[13031]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13032]
D = A                                        // ROM[13033]
// ---------------------------
// push D
@ SP                                         // ROM[13034]
AM = M+1                                     // ROM[13035]
A = A-1                                      // ROM[13036]
M = D                                        // ROM[13037]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13038]
D = A                                        // ROM[13039]
@ R13                                        // ROM[13040]
M = D                                        // ROM[13041]
// ---------------------------
// Push RA
@ Output.initMap:65                          // ROM[13042]
D = A                                        // ROM[13043]
// ---------------------------
// push D
@ SP                                         // ROM[13044]
AM = M+1                                     // ROM[13045]
A = A-1                                      // ROM[13046]
M = D                                        // ROM[13047]
// ---------------------------
// call
@ Output.initMap:66                          // ROM[13048]
D = A                                        // ROM[13049]
@ R15                                        // ROM[13050]
M = D                                        // ROM[13051]
@ :call                                      // ROM[13052]
0; JMP                                       // ROM[13053]
( Output.initMap:66)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13054]
0; JMP                                       // ROM[13055]
// ---------------------------
// ( RA )
( Output.initMap:65) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13056]
AM = M-1                                     // ROM[13057]
D = M                                        // ROM[13058]
// ---------------------------
@ 5                                          // ROM[13059]
M = D                                        // ROM[13060]

// -------------------------------------
// PUSH: <constant, 60>
// -------------------------------------
@ 60                                         // ROM[13061]
D = A                                        // ROM[13062]
// ---------------------------
// push D
@ SP                                         // ROM[13063]
AM = M+1                                     // ROM[13064]
A = A-1                                      // ROM[13065]
M = D                                        // ROM[13066]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13067]
D = A                                        // ROM[13068]
// ---------------------------
// push D
@ SP                                         // ROM[13069]
AM = M+1                                     // ROM[13070]
A = A-1                                      // ROM[13071]
M = D                                        // ROM[13072]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13073]
D = A                                        // ROM[13074]
// ---------------------------
// push D
@ SP                                         // ROM[13075]
AM = M+1                                     // ROM[13076]
A = A-1                                      // ROM[13077]
M = D                                        // ROM[13078]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[13079]
D = A                                        // ROM[13080]
// ---------------------------
// push D
@ SP                                         // ROM[13081]
AM = M+1                                     // ROM[13082]
A = A-1                                      // ROM[13083]
M = D                                        // ROM[13084]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13085]
D = A                                        // ROM[13086]
// ---------------------------
// push D
@ SP                                         // ROM[13087]
AM = M+1                                     // ROM[13088]
A = A-1                                      // ROM[13089]
M = D                                        // ROM[13090]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[13091]
D = A                                        // ROM[13092]
// ---------------------------
// push D
@ SP                                         // ROM[13093]
AM = M+1                                     // ROM[13094]
A = A-1                                      // ROM[13095]
M = D                                        // ROM[13096]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[13097]
D = A                                        // ROM[13098]
// ---------------------------
// push D
@ SP                                         // ROM[13099]
AM = M+1                                     // ROM[13100]
A = A-1                                      // ROM[13101]
M = D                                        // ROM[13102]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[13103]
D = A                                        // ROM[13104]
// ---------------------------
// push D
@ SP                                         // ROM[13105]
AM = M+1                                     // ROM[13106]
A = A-1                                      // ROM[13107]
M = D                                        // ROM[13108]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13109]
D = A                                        // ROM[13110]
// ---------------------------
// push D
@ SP                                         // ROM[13111]
AM = M+1                                     // ROM[13112]
A = A-1                                      // ROM[13113]
M = D                                        // ROM[13114]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[13115]
D = A                                        // ROM[13116]
// ---------------------------
// push D
@ SP                                         // ROM[13117]
AM = M+1                                     // ROM[13118]
A = A-1                                      // ROM[13119]
M = D                                        // ROM[13120]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13121]
D = A                                        // ROM[13122]
// ---------------------------
// push D
@ SP                                         // ROM[13123]
AM = M+1                                     // ROM[13124]
A = A-1                                      // ROM[13125]
M = D                                        // ROM[13126]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13127]
D = A                                        // ROM[13128]
// ---------------------------
// push D
@ SP                                         // ROM[13129]
AM = M+1                                     // ROM[13130]
A = A-1                                      // ROM[13131]
M = D                                        // ROM[13132]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13133]
D = A                                        // ROM[13134]
@ R13                                        // ROM[13135]
M = D                                        // ROM[13136]
// ---------------------------
// Push RA
@ Output.initMap:67                          // ROM[13137]
D = A                                        // ROM[13138]
// ---------------------------
// push D
@ SP                                         // ROM[13139]
AM = M+1                                     // ROM[13140]
A = A-1                                      // ROM[13141]
M = D                                        // ROM[13142]
// ---------------------------
// call
@ Output.initMap:68                          // ROM[13143]
D = A                                        // ROM[13144]
@ R15                                        // ROM[13145]
M = D                                        // ROM[13146]
@ :call                                      // ROM[13147]
0; JMP                                       // ROM[13148]
( Output.initMap:68)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13149]
0; JMP                                       // ROM[13150]
// ---------------------------
// ( RA )
( Output.initMap:67) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13151]
AM = M-1                                     // ROM[13152]
D = M                                        // ROM[13153]
// ---------------------------
@ 5                                          // ROM[13154]
M = D                                        // ROM[13155]

// -------------------------------------
// PUSH: <constant, 61>
// -------------------------------------
@ 61                                         // ROM[13156]
D = A                                        // ROM[13157]
// ---------------------------
// push D
@ SP                                         // ROM[13158]
AM = M+1                                     // ROM[13159]
A = A-1                                      // ROM[13160]
M = D                                        // ROM[13161]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13162]
D = A                                        // ROM[13163]
// ---------------------------
// push D
@ SP                                         // ROM[13164]
AM = M+1                                     // ROM[13165]
A = A-1                                      // ROM[13166]
M = D                                        // ROM[13167]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13168]
D = A                                        // ROM[13169]
// ---------------------------
// push D
@ SP                                         // ROM[13170]
AM = M+1                                     // ROM[13171]
A = A-1                                      // ROM[13172]
M = D                                        // ROM[13173]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13174]
D = A                                        // ROM[13175]
// ---------------------------
// push D
@ SP                                         // ROM[13176]
AM = M+1                                     // ROM[13177]
A = A-1                                      // ROM[13178]
M = D                                        // ROM[13179]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[13180]
D = A                                        // ROM[13181]
// ---------------------------
// push D
@ SP                                         // ROM[13182]
AM = M+1                                     // ROM[13183]
A = A-1                                      // ROM[13184]
M = D                                        // ROM[13185]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13186]
D = A                                        // ROM[13187]
// ---------------------------
// push D
@ SP                                         // ROM[13188]
AM = M+1                                     // ROM[13189]
A = A-1                                      // ROM[13190]
M = D                                        // ROM[13191]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13192]
D = A                                        // ROM[13193]
// ---------------------------
// push D
@ SP                                         // ROM[13194]
AM = M+1                                     // ROM[13195]
A = A-1                                      // ROM[13196]
M = D                                        // ROM[13197]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[13198]
D = A                                        // ROM[13199]
// ---------------------------
// push D
@ SP                                         // ROM[13200]
AM = M+1                                     // ROM[13201]
A = A-1                                      // ROM[13202]
M = D                                        // ROM[13203]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13204]
D = A                                        // ROM[13205]
// ---------------------------
// push D
@ SP                                         // ROM[13206]
AM = M+1                                     // ROM[13207]
A = A-1                                      // ROM[13208]
M = D                                        // ROM[13209]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13210]
D = A                                        // ROM[13211]
// ---------------------------
// push D
@ SP                                         // ROM[13212]
AM = M+1                                     // ROM[13213]
A = A-1                                      // ROM[13214]
M = D                                        // ROM[13215]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13216]
D = A                                        // ROM[13217]
// ---------------------------
// push D
@ SP                                         // ROM[13218]
AM = M+1                                     // ROM[13219]
A = A-1                                      // ROM[13220]
M = D                                        // ROM[13221]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13222]
D = A                                        // ROM[13223]
// ---------------------------
// push D
@ SP                                         // ROM[13224]
AM = M+1                                     // ROM[13225]
A = A-1                                      // ROM[13226]
M = D                                        // ROM[13227]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13228]
D = A                                        // ROM[13229]
@ R13                                        // ROM[13230]
M = D                                        // ROM[13231]
// ---------------------------
// Push RA
@ Output.initMap:69                          // ROM[13232]
D = A                                        // ROM[13233]
// ---------------------------
// push D
@ SP                                         // ROM[13234]
AM = M+1                                     // ROM[13235]
A = A-1                                      // ROM[13236]
M = D                                        // ROM[13237]
// ---------------------------
// call
@ Output.initMap:70                          // ROM[13238]
D = A                                        // ROM[13239]
@ R15                                        // ROM[13240]
M = D                                        // ROM[13241]
@ :call                                      // ROM[13242]
0; JMP                                       // ROM[13243]
( Output.initMap:70)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13244]
0; JMP                                       // ROM[13245]
// ---------------------------
// ( RA )
( Output.initMap:69) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13246]
AM = M-1                                     // ROM[13247]
D = M                                        // ROM[13248]
// ---------------------------
@ 5                                          // ROM[13249]
M = D                                        // ROM[13250]

// -------------------------------------
// PUSH: <constant, 62>
// -------------------------------------
@ 62                                         // ROM[13251]
D = A                                        // ROM[13252]
// ---------------------------
// push D
@ SP                                         // ROM[13253]
AM = M+1                                     // ROM[13254]
A = A-1                                      // ROM[13255]
M = D                                        // ROM[13256]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13257]
D = A                                        // ROM[13258]
// ---------------------------
// push D
@ SP                                         // ROM[13259]
AM = M+1                                     // ROM[13260]
A = A-1                                      // ROM[13261]
M = D                                        // ROM[13262]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13263]
D = A                                        // ROM[13264]
// ---------------------------
// push D
@ SP                                         // ROM[13265]
AM = M+1                                     // ROM[13266]
A = A-1                                      // ROM[13267]
M = D                                        // ROM[13268]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[13269]
D = A                                        // ROM[13270]
// ---------------------------
// push D
@ SP                                         // ROM[13271]
AM = M+1                                     // ROM[13272]
A = A-1                                      // ROM[13273]
M = D                                        // ROM[13274]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[13275]
D = A                                        // ROM[13276]
// ---------------------------
// push D
@ SP                                         // ROM[13277]
AM = M+1                                     // ROM[13278]
A = A-1                                      // ROM[13279]
M = D                                        // ROM[13280]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13281]
D = A                                        // ROM[13282]
// ---------------------------
// push D
@ SP                                         // ROM[13283]
AM = M+1                                     // ROM[13284]
A = A-1                                      // ROM[13285]
M = D                                        // ROM[13286]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[13287]
D = A                                        // ROM[13288]
// ---------------------------
// push D
@ SP                                         // ROM[13289]
AM = M+1                                     // ROM[13290]
A = A-1                                      // ROM[13291]
M = D                                        // ROM[13292]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13293]
D = A                                        // ROM[13294]
// ---------------------------
// push D
@ SP                                         // ROM[13295]
AM = M+1                                     // ROM[13296]
A = A-1                                      // ROM[13297]
M = D                                        // ROM[13298]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[13299]
D = A                                        // ROM[13300]
// ---------------------------
// push D
@ SP                                         // ROM[13301]
AM = M+1                                     // ROM[13302]
A = A-1                                      // ROM[13303]
M = D                                        // ROM[13304]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[13305]
D = A                                        // ROM[13306]
// ---------------------------
// push D
@ SP                                         // ROM[13307]
AM = M+1                                     // ROM[13308]
A = A-1                                      // ROM[13309]
M = D                                        // ROM[13310]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13311]
D = A                                        // ROM[13312]
// ---------------------------
// push D
@ SP                                         // ROM[13313]
AM = M+1                                     // ROM[13314]
A = A-1                                      // ROM[13315]
M = D                                        // ROM[13316]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13317]
D = A                                        // ROM[13318]
// ---------------------------
// push D
@ SP                                         // ROM[13319]
AM = M+1                                     // ROM[13320]
A = A-1                                      // ROM[13321]
M = D                                        // ROM[13322]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13323]
D = A                                        // ROM[13324]
@ R13                                        // ROM[13325]
M = D                                        // ROM[13326]
// ---------------------------
// Push RA
@ Output.initMap:71                          // ROM[13327]
D = A                                        // ROM[13328]
// ---------------------------
// push D
@ SP                                         // ROM[13329]
AM = M+1                                     // ROM[13330]
A = A-1                                      // ROM[13331]
M = D                                        // ROM[13332]
// ---------------------------
// call
@ Output.initMap:72                          // ROM[13333]
D = A                                        // ROM[13334]
@ R15                                        // ROM[13335]
M = D                                        // ROM[13336]
@ :call                                      // ROM[13337]
0; JMP                                       // ROM[13338]
( Output.initMap:72)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13339]
0; JMP                                       // ROM[13340]
// ---------------------------
// ( RA )
( Output.initMap:71) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13341]
AM = M-1                                     // ROM[13342]
D = M                                        // ROM[13343]
// ---------------------------
@ 5                                          // ROM[13344]
M = D                                        // ROM[13345]

// -------------------------------------
// PUSH: <constant, 64>
// -------------------------------------
@ 64                                         // ROM[13346]
D = A                                        // ROM[13347]
// ---------------------------
// push D
@ SP                                         // ROM[13348]
AM = M+1                                     // ROM[13349]
A = A-1                                      // ROM[13350]
M = D                                        // ROM[13351]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[13352]
D = A                                        // ROM[13353]
// ---------------------------
// push D
@ SP                                         // ROM[13354]
AM = M+1                                     // ROM[13355]
A = A-1                                      // ROM[13356]
M = D                                        // ROM[13357]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13358]
D = A                                        // ROM[13359]
// ---------------------------
// push D
@ SP                                         // ROM[13360]
AM = M+1                                     // ROM[13361]
A = A-1                                      // ROM[13362]
M = D                                        // ROM[13363]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13364]
D = A                                        // ROM[13365]
// ---------------------------
// push D
@ SP                                         // ROM[13366]
AM = M+1                                     // ROM[13367]
A = A-1                                      // ROM[13368]
M = D                                        // ROM[13369]

// -------------------------------------
// PUSH: <constant, 59>
// -------------------------------------
@ 59                                         // ROM[13370]
D = A                                        // ROM[13371]
// ---------------------------
// push D
@ SP                                         // ROM[13372]
AM = M+1                                     // ROM[13373]
A = A-1                                      // ROM[13374]
M = D                                        // ROM[13375]

// -------------------------------------
// PUSH: <constant, 59>
// -------------------------------------
@ 59                                         // ROM[13376]
D = A                                        // ROM[13377]
// ---------------------------
// push D
@ SP                                         // ROM[13378]
AM = M+1                                     // ROM[13379]
A = A-1                                      // ROM[13380]
M = D                                        // ROM[13381]

// -------------------------------------
// PUSH: <constant, 59>
// -------------------------------------
@ 59                                         // ROM[13382]
D = A                                        // ROM[13383]
// ---------------------------
// push D
@ SP                                         // ROM[13384]
AM = M+1                                     // ROM[13385]
A = A-1                                      // ROM[13386]
M = D                                        // ROM[13387]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[13388]
D = A                                        // ROM[13389]
// ---------------------------
// push D
@ SP                                         // ROM[13390]
AM = M+1                                     // ROM[13391]
A = A-1                                      // ROM[13392]
M = D                                        // ROM[13393]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[13394]
D = A                                        // ROM[13395]
// ---------------------------
// push D
@ SP                                         // ROM[13396]
AM = M+1                                     // ROM[13397]
A = A-1                                      // ROM[13398]
M = D                                        // ROM[13399]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[13400]
D = A                                        // ROM[13401]
// ---------------------------
// push D
@ SP                                         // ROM[13402]
AM = M+1                                     // ROM[13403]
A = A-1                                      // ROM[13404]
M = D                                        // ROM[13405]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13406]
D = A                                        // ROM[13407]
// ---------------------------
// push D
@ SP                                         // ROM[13408]
AM = M+1                                     // ROM[13409]
A = A-1                                      // ROM[13410]
M = D                                        // ROM[13411]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13412]
D = A                                        // ROM[13413]
// ---------------------------
// push D
@ SP                                         // ROM[13414]
AM = M+1                                     // ROM[13415]
A = A-1                                      // ROM[13416]
M = D                                        // ROM[13417]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13418]
D = A                                        // ROM[13419]
@ R13                                        // ROM[13420]
M = D                                        // ROM[13421]
// ---------------------------
// Push RA
@ Output.initMap:73                          // ROM[13422]
D = A                                        // ROM[13423]
// ---------------------------
// push D
@ SP                                         // ROM[13424]
AM = M+1                                     // ROM[13425]
A = A-1                                      // ROM[13426]
M = D                                        // ROM[13427]
// ---------------------------
// call
@ Output.initMap:74                          // ROM[13428]
D = A                                        // ROM[13429]
@ R15                                        // ROM[13430]
M = D                                        // ROM[13431]
@ :call                                      // ROM[13432]
0; JMP                                       // ROM[13433]
( Output.initMap:74)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13434]
0; JMP                                       // ROM[13435]
// ---------------------------
// ( RA )
( Output.initMap:73) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13436]
AM = M-1                                     // ROM[13437]
D = M                                        // ROM[13438]
// ---------------------------
@ 5                                          // ROM[13439]
M = D                                        // ROM[13440]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[13441]
D = A                                        // ROM[13442]
// ---------------------------
// push D
@ SP                                         // ROM[13443]
AM = M+1                                     // ROM[13444]
A = A-1                                      // ROM[13445]
M = D                                        // ROM[13446]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[13447]
D = A                                        // ROM[13448]
// ---------------------------
// push D
@ SP                                         // ROM[13449]
AM = M+1                                     // ROM[13450]
A = A-1                                      // ROM[13451]
M = D                                        // ROM[13452]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13453]
D = A                                        // ROM[13454]
// ---------------------------
// push D
@ SP                                         // ROM[13455]
AM = M+1                                     // ROM[13456]
A = A-1                                      // ROM[13457]
M = D                                        // ROM[13458]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13459]
D = A                                        // ROM[13460]
// ---------------------------
// push D
@ SP                                         // ROM[13461]
AM = M+1                                     // ROM[13462]
A = A-1                                      // ROM[13463]
M = D                                        // ROM[13464]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[13465]
D = A                                        // ROM[13466]
// ---------------------------
// push D
@ SP                                         // ROM[13467]
AM = M+1                                     // ROM[13468]
A = A-1                                      // ROM[13469]
M = D                                        // ROM[13470]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13471]
D = A                                        // ROM[13472]
// ---------------------------
// push D
@ SP                                         // ROM[13473]
AM = M+1                                     // ROM[13474]
A = A-1                                      // ROM[13475]
M = D                                        // ROM[13476]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13477]
D = A                                        // ROM[13478]
// ---------------------------
// push D
@ SP                                         // ROM[13479]
AM = M+1                                     // ROM[13480]
A = A-1                                      // ROM[13481]
M = D                                        // ROM[13482]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13483]
D = A                                        // ROM[13484]
// ---------------------------
// push D
@ SP                                         // ROM[13485]
AM = M+1                                     // ROM[13486]
A = A-1                                      // ROM[13487]
M = D                                        // ROM[13488]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13489]
D = A                                        // ROM[13490]
// ---------------------------
// push D
@ SP                                         // ROM[13491]
AM = M+1                                     // ROM[13492]
A = A-1                                      // ROM[13493]
M = D                                        // ROM[13494]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13495]
D = A                                        // ROM[13496]
// ---------------------------
// push D
@ SP                                         // ROM[13497]
AM = M+1                                     // ROM[13498]
A = A-1                                      // ROM[13499]
M = D                                        // ROM[13500]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13501]
D = A                                        // ROM[13502]
// ---------------------------
// push D
@ SP                                         // ROM[13503]
AM = M+1                                     // ROM[13504]
A = A-1                                      // ROM[13505]
M = D                                        // ROM[13506]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13507]
D = A                                        // ROM[13508]
// ---------------------------
// push D
@ SP                                         // ROM[13509]
AM = M+1                                     // ROM[13510]
A = A-1                                      // ROM[13511]
M = D                                        // ROM[13512]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13513]
D = A                                        // ROM[13514]
@ R13                                        // ROM[13515]
M = D                                        // ROM[13516]
// ---------------------------
// Push RA
@ Output.initMap:75                          // ROM[13517]
D = A                                        // ROM[13518]
// ---------------------------
// push D
@ SP                                         // ROM[13519]
AM = M+1                                     // ROM[13520]
A = A-1                                      // ROM[13521]
M = D                                        // ROM[13522]
// ---------------------------
// call
@ Output.initMap:76                          // ROM[13523]
D = A                                        // ROM[13524]
@ R15                                        // ROM[13525]
M = D                                        // ROM[13526]
@ :call                                      // ROM[13527]
0; JMP                                       // ROM[13528]
( Output.initMap:76)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13529]
0; JMP                                       // ROM[13530]
// ---------------------------
// ( RA )
( Output.initMap:75) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13531]
AM = M-1                                     // ROM[13532]
D = M                                        // ROM[13533]
// ---------------------------
@ 5                                          // ROM[13534]
M = D                                        // ROM[13535]

// -------------------------------------
// PUSH: <constant, 65>
// -------------------------------------
@ 65                                         // ROM[13536]
D = A                                        // ROM[13537]
// ---------------------------
// push D
@ SP                                         // ROM[13538]
AM = M+1                                     // ROM[13539]
A = A-1                                      // ROM[13540]
M = D                                        // ROM[13541]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[13542]
D = A                                        // ROM[13543]
// ---------------------------
// push D
@ SP                                         // ROM[13544]
AM = M+1                                     // ROM[13545]
A = A-1                                      // ROM[13546]
M = D                                        // ROM[13547]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[13548]
D = A                                        // ROM[13549]
// ---------------------------
// push D
@ SP                                         // ROM[13550]
AM = M+1                                     // ROM[13551]
A = A-1                                      // ROM[13552]
M = D                                        // ROM[13553]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13554]
D = A                                        // ROM[13555]
// ---------------------------
// push D
@ SP                                         // ROM[13556]
AM = M+1                                     // ROM[13557]
A = A-1                                      // ROM[13558]
M = D                                        // ROM[13559]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13560]
D = A                                        // ROM[13561]
// ---------------------------
// push D
@ SP                                         // ROM[13562]
AM = M+1                                     // ROM[13563]
A = A-1                                      // ROM[13564]
M = D                                        // ROM[13565]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[13566]
D = A                                        // ROM[13567]
// ---------------------------
// push D
@ SP                                         // ROM[13568]
AM = M+1                                     // ROM[13569]
A = A-1                                      // ROM[13570]
M = D                                        // ROM[13571]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13572]
D = A                                        // ROM[13573]
// ---------------------------
// push D
@ SP                                         // ROM[13574]
AM = M+1                                     // ROM[13575]
A = A-1                                      // ROM[13576]
M = D                                        // ROM[13577]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13578]
D = A                                        // ROM[13579]
// ---------------------------
// push D
@ SP                                         // ROM[13580]
AM = M+1                                     // ROM[13581]
A = A-1                                      // ROM[13582]
M = D                                        // ROM[13583]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13584]
D = A                                        // ROM[13585]
// ---------------------------
// push D
@ SP                                         // ROM[13586]
AM = M+1                                     // ROM[13587]
A = A-1                                      // ROM[13588]
M = D                                        // ROM[13589]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13590]
D = A                                        // ROM[13591]
// ---------------------------
// push D
@ SP                                         // ROM[13592]
AM = M+1                                     // ROM[13593]
A = A-1                                      // ROM[13594]
M = D                                        // ROM[13595]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13596]
D = A                                        // ROM[13597]
// ---------------------------
// push D
@ SP                                         // ROM[13598]
AM = M+1                                     // ROM[13599]
A = A-1                                      // ROM[13600]
M = D                                        // ROM[13601]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13602]
D = A                                        // ROM[13603]
// ---------------------------
// push D
@ SP                                         // ROM[13604]
AM = M+1                                     // ROM[13605]
A = A-1                                      // ROM[13606]
M = D                                        // ROM[13607]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13608]
D = A                                        // ROM[13609]
@ R13                                        // ROM[13610]
M = D                                        // ROM[13611]
// ---------------------------
// Push RA
@ Output.initMap:77                          // ROM[13612]
D = A                                        // ROM[13613]
// ---------------------------
// push D
@ SP                                         // ROM[13614]
AM = M+1                                     // ROM[13615]
A = A-1                                      // ROM[13616]
M = D                                        // ROM[13617]
// ---------------------------
// call
@ Output.initMap:78                          // ROM[13618]
D = A                                        // ROM[13619]
@ R15                                        // ROM[13620]
M = D                                        // ROM[13621]
@ :call                                      // ROM[13622]
0; JMP                                       // ROM[13623]
( Output.initMap:78)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13624]
0; JMP                                       // ROM[13625]
// ---------------------------
// ( RA )
( Output.initMap:77) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13626]
AM = M-1                                     // ROM[13627]
D = M                                        // ROM[13628]
// ---------------------------
@ 5                                          // ROM[13629]
M = D                                        // ROM[13630]

// -------------------------------------
// PUSH: <constant, 66>
// -------------------------------------
@ 66                                         // ROM[13631]
D = A                                        // ROM[13632]
// ---------------------------
// push D
@ SP                                         // ROM[13633]
AM = M+1                                     // ROM[13634]
A = A-1                                      // ROM[13635]
M = D                                        // ROM[13636]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[13637]
D = A                                        // ROM[13638]
// ---------------------------
// push D
@ SP                                         // ROM[13639]
AM = M+1                                     // ROM[13640]
A = A-1                                      // ROM[13641]
M = D                                        // ROM[13642]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13643]
D = A                                        // ROM[13644]
// ---------------------------
// push D
@ SP                                         // ROM[13645]
AM = M+1                                     // ROM[13646]
A = A-1                                      // ROM[13647]
M = D                                        // ROM[13648]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13649]
D = A                                        // ROM[13650]
// ---------------------------
// push D
@ SP                                         // ROM[13651]
AM = M+1                                     // ROM[13652]
A = A-1                                      // ROM[13653]
M = D                                        // ROM[13654]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13655]
D = A                                        // ROM[13656]
// ---------------------------
// push D
@ SP                                         // ROM[13657]
AM = M+1                                     // ROM[13658]
A = A-1                                      // ROM[13659]
M = D                                        // ROM[13660]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[13661]
D = A                                        // ROM[13662]
// ---------------------------
// push D
@ SP                                         // ROM[13663]
AM = M+1                                     // ROM[13664]
A = A-1                                      // ROM[13665]
M = D                                        // ROM[13666]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13667]
D = A                                        // ROM[13668]
// ---------------------------
// push D
@ SP                                         // ROM[13669]
AM = M+1                                     // ROM[13670]
A = A-1                                      // ROM[13671]
M = D                                        // ROM[13672]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13673]
D = A                                        // ROM[13674]
// ---------------------------
// push D
@ SP                                         // ROM[13675]
AM = M+1                                     // ROM[13676]
A = A-1                                      // ROM[13677]
M = D                                        // ROM[13678]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13679]
D = A                                        // ROM[13680]
// ---------------------------
// push D
@ SP                                         // ROM[13681]
AM = M+1                                     // ROM[13682]
A = A-1                                      // ROM[13683]
M = D                                        // ROM[13684]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[13685]
D = A                                        // ROM[13686]
// ---------------------------
// push D
@ SP                                         // ROM[13687]
AM = M+1                                     // ROM[13688]
A = A-1                                      // ROM[13689]
M = D                                        // ROM[13690]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13691]
D = A                                        // ROM[13692]
// ---------------------------
// push D
@ SP                                         // ROM[13693]
AM = M+1                                     // ROM[13694]
A = A-1                                      // ROM[13695]
M = D                                        // ROM[13696]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13697]
D = A                                        // ROM[13698]
// ---------------------------
// push D
@ SP                                         // ROM[13699]
AM = M+1                                     // ROM[13700]
A = A-1                                      // ROM[13701]
M = D                                        // ROM[13702]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13703]
D = A                                        // ROM[13704]
@ R13                                        // ROM[13705]
M = D                                        // ROM[13706]
// ---------------------------
// Push RA
@ Output.initMap:79                          // ROM[13707]
D = A                                        // ROM[13708]
// ---------------------------
// push D
@ SP                                         // ROM[13709]
AM = M+1                                     // ROM[13710]
A = A-1                                      // ROM[13711]
M = D                                        // ROM[13712]
// ---------------------------
// call
@ Output.initMap:80                          // ROM[13713]
D = A                                        // ROM[13714]
@ R15                                        // ROM[13715]
M = D                                        // ROM[13716]
@ :call                                      // ROM[13717]
0; JMP                                       // ROM[13718]
( Output.initMap:80)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13719]
0; JMP                                       // ROM[13720]
// ---------------------------
// ( RA )
( Output.initMap:79) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13721]
AM = M-1                                     // ROM[13722]
D = M                                        // ROM[13723]
// ---------------------------
@ 5                                          // ROM[13724]
M = D                                        // ROM[13725]

// -------------------------------------
// PUSH: <constant, 67>
// -------------------------------------
@ 67                                         // ROM[13726]
D = A                                        // ROM[13727]
// ---------------------------
// push D
@ SP                                         // ROM[13728]
AM = M+1                                     // ROM[13729]
A = A-1                                      // ROM[13730]
M = D                                        // ROM[13731]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[13732]
D = A                                        // ROM[13733]
// ---------------------------
// push D
@ SP                                         // ROM[13734]
AM = M+1                                     // ROM[13735]
A = A-1                                      // ROM[13736]
M = D                                        // ROM[13737]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[13738]
D = A                                        // ROM[13739]
// ---------------------------
// push D
@ SP                                         // ROM[13740]
AM = M+1                                     // ROM[13741]
A = A-1                                      // ROM[13742]
M = D                                        // ROM[13743]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[13744]
D = A                                        // ROM[13745]
// ---------------------------
// push D
@ SP                                         // ROM[13746]
AM = M+1                                     // ROM[13747]
A = A-1                                      // ROM[13748]
M = D                                        // ROM[13749]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[13750]
D = A                                        // ROM[13751]
// ---------------------------
// push D
@ SP                                         // ROM[13752]
AM = M+1                                     // ROM[13753]
A = A-1                                      // ROM[13754]
M = D                                        // ROM[13755]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[13756]
D = A                                        // ROM[13757]
// ---------------------------
// push D
@ SP                                         // ROM[13758]
AM = M+1                                     // ROM[13759]
A = A-1                                      // ROM[13760]
M = D                                        // ROM[13761]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[13762]
D = A                                        // ROM[13763]
// ---------------------------
// push D
@ SP                                         // ROM[13764]
AM = M+1                                     // ROM[13765]
A = A-1                                      // ROM[13766]
M = D                                        // ROM[13767]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[13768]
D = A                                        // ROM[13769]
// ---------------------------
// push D
@ SP                                         // ROM[13770]
AM = M+1                                     // ROM[13771]
A = A-1                                      // ROM[13772]
M = D                                        // ROM[13773]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[13774]
D = A                                        // ROM[13775]
// ---------------------------
// push D
@ SP                                         // ROM[13776]
AM = M+1                                     // ROM[13777]
A = A-1                                      // ROM[13778]
M = D                                        // ROM[13779]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[13780]
D = A                                        // ROM[13781]
// ---------------------------
// push D
@ SP                                         // ROM[13782]
AM = M+1                                     // ROM[13783]
A = A-1                                      // ROM[13784]
M = D                                        // ROM[13785]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13786]
D = A                                        // ROM[13787]
// ---------------------------
// push D
@ SP                                         // ROM[13788]
AM = M+1                                     // ROM[13789]
A = A-1                                      // ROM[13790]
M = D                                        // ROM[13791]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13792]
D = A                                        // ROM[13793]
// ---------------------------
// push D
@ SP                                         // ROM[13794]
AM = M+1                                     // ROM[13795]
A = A-1                                      // ROM[13796]
M = D                                        // ROM[13797]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13798]
D = A                                        // ROM[13799]
@ R13                                        // ROM[13800]
M = D                                        // ROM[13801]
// ---------------------------
// Push RA
@ Output.initMap:81                          // ROM[13802]
D = A                                        // ROM[13803]
// ---------------------------
// push D
@ SP                                         // ROM[13804]
AM = M+1                                     // ROM[13805]
A = A-1                                      // ROM[13806]
M = D                                        // ROM[13807]
// ---------------------------
// call
@ Output.initMap:82                          // ROM[13808]
D = A                                        // ROM[13809]
@ R15                                        // ROM[13810]
M = D                                        // ROM[13811]
@ :call                                      // ROM[13812]
0; JMP                                       // ROM[13813]
( Output.initMap:82)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13814]
0; JMP                                       // ROM[13815]
// ---------------------------
// ( RA )
( Output.initMap:81) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13816]
AM = M-1                                     // ROM[13817]
D = M                                        // ROM[13818]
// ---------------------------
@ 5                                          // ROM[13819]
M = D                                        // ROM[13820]

// -------------------------------------
// PUSH: <constant, 68>
// -------------------------------------
@ 68                                         // ROM[13821]
D = A                                        // ROM[13822]
// ---------------------------
// push D
@ SP                                         // ROM[13823]
AM = M+1                                     // ROM[13824]
A = A-1                                      // ROM[13825]
M = D                                        // ROM[13826]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[13827]
D = A                                        // ROM[13828]
// ---------------------------
// push D
@ SP                                         // ROM[13829]
AM = M+1                                     // ROM[13830]
A = A-1                                      // ROM[13831]
M = D                                        // ROM[13832]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[13833]
D = A                                        // ROM[13834]
// ---------------------------
// push D
@ SP                                         // ROM[13835]
AM = M+1                                     // ROM[13836]
A = A-1                                      // ROM[13837]
M = D                                        // ROM[13838]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13839]
D = A                                        // ROM[13840]
// ---------------------------
// push D
@ SP                                         // ROM[13841]
AM = M+1                                     // ROM[13842]
A = A-1                                      // ROM[13843]
M = D                                        // ROM[13844]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13845]
D = A                                        // ROM[13846]
// ---------------------------
// push D
@ SP                                         // ROM[13847]
AM = M+1                                     // ROM[13848]
A = A-1                                      // ROM[13849]
M = D                                        // ROM[13850]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13851]
D = A                                        // ROM[13852]
// ---------------------------
// push D
@ SP                                         // ROM[13853]
AM = M+1                                     // ROM[13854]
A = A-1                                      // ROM[13855]
M = D                                        // ROM[13856]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13857]
D = A                                        // ROM[13858]
// ---------------------------
// push D
@ SP                                         // ROM[13859]
AM = M+1                                     // ROM[13860]
A = A-1                                      // ROM[13861]
M = D                                        // ROM[13862]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13863]
D = A                                        // ROM[13864]
// ---------------------------
// push D
@ SP                                         // ROM[13865]
AM = M+1                                     // ROM[13866]
A = A-1                                      // ROM[13867]
M = D                                        // ROM[13868]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[13869]
D = A                                        // ROM[13870]
// ---------------------------
// push D
@ SP                                         // ROM[13871]
AM = M+1                                     // ROM[13872]
A = A-1                                      // ROM[13873]
M = D                                        // ROM[13874]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[13875]
D = A                                        // ROM[13876]
// ---------------------------
// push D
@ SP                                         // ROM[13877]
AM = M+1                                     // ROM[13878]
A = A-1                                      // ROM[13879]
M = D                                        // ROM[13880]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13881]
D = A                                        // ROM[13882]
// ---------------------------
// push D
@ SP                                         // ROM[13883]
AM = M+1                                     // ROM[13884]
A = A-1                                      // ROM[13885]
M = D                                        // ROM[13886]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13887]
D = A                                        // ROM[13888]
// ---------------------------
// push D
@ SP                                         // ROM[13889]
AM = M+1                                     // ROM[13890]
A = A-1                                      // ROM[13891]
M = D                                        // ROM[13892]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13893]
D = A                                        // ROM[13894]
@ R13                                        // ROM[13895]
M = D                                        // ROM[13896]
// ---------------------------
// Push RA
@ Output.initMap:83                          // ROM[13897]
D = A                                        // ROM[13898]
// ---------------------------
// push D
@ SP                                         // ROM[13899]
AM = M+1                                     // ROM[13900]
A = A-1                                      // ROM[13901]
M = D                                        // ROM[13902]
// ---------------------------
// call
@ Output.initMap:84                          // ROM[13903]
D = A                                        // ROM[13904]
@ R15                                        // ROM[13905]
M = D                                        // ROM[13906]
@ :call                                      // ROM[13907]
0; JMP                                       // ROM[13908]
( Output.initMap:84)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[13909]
0; JMP                                       // ROM[13910]
// ---------------------------
// ( RA )
( Output.initMap:83) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[13911]
AM = M-1                                     // ROM[13912]
D = M                                        // ROM[13913]
// ---------------------------
@ 5                                          // ROM[13914]
M = D                                        // ROM[13915]

// -------------------------------------
// PUSH: <constant, 69>
// -------------------------------------
@ 69                                         // ROM[13916]
D = A                                        // ROM[13917]
// ---------------------------
// push D
@ SP                                         // ROM[13918]
AM = M+1                                     // ROM[13919]
A = A-1                                      // ROM[13920]
M = D                                        // ROM[13921]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[13922]
D = A                                        // ROM[13923]
// ---------------------------
// push D
@ SP                                         // ROM[13924]
AM = M+1                                     // ROM[13925]
A = A-1                                      // ROM[13926]
M = D                                        // ROM[13927]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13928]
D = A                                        // ROM[13929]
// ---------------------------
// push D
@ SP                                         // ROM[13930]
AM = M+1                                     // ROM[13931]
A = A-1                                      // ROM[13932]
M = D                                        // ROM[13933]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[13934]
D = A                                        // ROM[13935]
// ---------------------------
// push D
@ SP                                         // ROM[13936]
AM = M+1                                     // ROM[13937]
A = A-1                                      // ROM[13938]
M = D                                        // ROM[13939]

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[13940]
D = A                                        // ROM[13941]
// ---------------------------
// push D
@ SP                                         // ROM[13942]
AM = M+1                                     // ROM[13943]
A = A-1                                      // ROM[13944]
M = D                                        // ROM[13945]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[13946]
D = A                                        // ROM[13947]
// ---------------------------
// push D
@ SP                                         // ROM[13948]
AM = M+1                                     // ROM[13949]
A = A-1                                      // ROM[13950]
M = D                                        // ROM[13951]

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[13952]
D = A                                        // ROM[13953]
// ---------------------------
// push D
@ SP                                         // ROM[13954]
AM = M+1                                     // ROM[13955]
A = A-1                                      // ROM[13956]
M = D                                        // ROM[13957]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[13958]
D = A                                        // ROM[13959]
// ---------------------------
// push D
@ SP                                         // ROM[13960]
AM = M+1                                     // ROM[13961]
A = A-1                                      // ROM[13962]
M = D                                        // ROM[13963]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[13964]
D = A                                        // ROM[13965]
// ---------------------------
// push D
@ SP                                         // ROM[13966]
AM = M+1                                     // ROM[13967]
A = A-1                                      // ROM[13968]
M = D                                        // ROM[13969]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[13970]
D = A                                        // ROM[13971]
// ---------------------------
// push D
@ SP                                         // ROM[13972]
AM = M+1                                     // ROM[13973]
A = A-1                                      // ROM[13974]
M = D                                        // ROM[13975]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13976]
D = A                                        // ROM[13977]
// ---------------------------
// push D
@ SP                                         // ROM[13978]
AM = M+1                                     // ROM[13979]
A = A-1                                      // ROM[13980]
M = D                                        // ROM[13981]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[13982]
D = A                                        // ROM[13983]
// ---------------------------
// push D
@ SP                                         // ROM[13984]
AM = M+1                                     // ROM[13985]
A = A-1                                      // ROM[13986]
M = D                                        // ROM[13987]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[13988]
D = A                                        // ROM[13989]
@ R13                                        // ROM[13990]
M = D                                        // ROM[13991]
// ---------------------------
// Push RA
@ Output.initMap:85                          // ROM[13992]
D = A                                        // ROM[13993]
// ---------------------------
// push D
@ SP                                         // ROM[13994]
AM = M+1                                     // ROM[13995]
A = A-1                                      // ROM[13996]
M = D                                        // ROM[13997]
// ---------------------------
// call
@ Output.initMap:86                          // ROM[13998]
D = A                                        // ROM[13999]
@ R15                                        // ROM[14000]
M = D                                        // ROM[14001]
@ :call                                      // ROM[14002]
0; JMP                                       // ROM[14003]
( Output.initMap:86)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14004]
0; JMP                                       // ROM[14005]
// ---------------------------
// ( RA )
( Output.initMap:85) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14006]
AM = M-1                                     // ROM[14007]
D = M                                        // ROM[14008]
// ---------------------------
@ 5                                          // ROM[14009]
M = D                                        // ROM[14010]

// -------------------------------------
// PUSH: <constant, 70>
// -------------------------------------
@ 70                                         // ROM[14011]
D = A                                        // ROM[14012]
// ---------------------------
// push D
@ SP                                         // ROM[14013]
AM = M+1                                     // ROM[14014]
A = A-1                                      // ROM[14015]
M = D                                        // ROM[14016]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[14017]
D = A                                        // ROM[14018]
// ---------------------------
// push D
@ SP                                         // ROM[14019]
AM = M+1                                     // ROM[14020]
A = A-1                                      // ROM[14021]
M = D                                        // ROM[14022]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14023]
D = A                                        // ROM[14024]
// ---------------------------
// push D
@ SP                                         // ROM[14025]
AM = M+1                                     // ROM[14026]
A = A-1                                      // ROM[14027]
M = D                                        // ROM[14028]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[14029]
D = A                                        // ROM[14030]
// ---------------------------
// push D
@ SP                                         // ROM[14031]
AM = M+1                                     // ROM[14032]
A = A-1                                      // ROM[14033]
M = D                                        // ROM[14034]

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[14035]
D = A                                        // ROM[14036]
// ---------------------------
// push D
@ SP                                         // ROM[14037]
AM = M+1                                     // ROM[14038]
A = A-1                                      // ROM[14039]
M = D                                        // ROM[14040]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[14041]
D = A                                        // ROM[14042]
// ---------------------------
// push D
@ SP                                         // ROM[14043]
AM = M+1                                     // ROM[14044]
A = A-1                                      // ROM[14045]
M = D                                        // ROM[14046]

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[14047]
D = A                                        // ROM[14048]
// ---------------------------
// push D
@ SP                                         // ROM[14049]
AM = M+1                                     // ROM[14050]
A = A-1                                      // ROM[14051]
M = D                                        // ROM[14052]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14053]
D = A                                        // ROM[14054]
// ---------------------------
// push D
@ SP                                         // ROM[14055]
AM = M+1                                     // ROM[14056]
A = A-1                                      // ROM[14057]
M = D                                        // ROM[14058]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14059]
D = A                                        // ROM[14060]
// ---------------------------
// push D
@ SP                                         // ROM[14061]
AM = M+1                                     // ROM[14062]
A = A-1                                      // ROM[14063]
M = D                                        // ROM[14064]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14065]
D = A                                        // ROM[14066]
// ---------------------------
// push D
@ SP                                         // ROM[14067]
AM = M+1                                     // ROM[14068]
A = A-1                                      // ROM[14069]
M = D                                        // ROM[14070]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14071]
D = A                                        // ROM[14072]
// ---------------------------
// push D
@ SP                                         // ROM[14073]
AM = M+1                                     // ROM[14074]
A = A-1                                      // ROM[14075]
M = D                                        // ROM[14076]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14077]
D = A                                        // ROM[14078]
// ---------------------------
// push D
@ SP                                         // ROM[14079]
AM = M+1                                     // ROM[14080]
A = A-1                                      // ROM[14081]
M = D                                        // ROM[14082]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14083]
D = A                                        // ROM[14084]
@ R13                                        // ROM[14085]
M = D                                        // ROM[14086]
// ---------------------------
// Push RA
@ Output.initMap:87                          // ROM[14087]
D = A                                        // ROM[14088]
// ---------------------------
// push D
@ SP                                         // ROM[14089]
AM = M+1                                     // ROM[14090]
A = A-1                                      // ROM[14091]
M = D                                        // ROM[14092]
// ---------------------------
// call
@ Output.initMap:88                          // ROM[14093]
D = A                                        // ROM[14094]
@ R15                                        // ROM[14095]
M = D                                        // ROM[14096]
@ :call                                      // ROM[14097]
0; JMP                                       // ROM[14098]
( Output.initMap:88)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14099]
0; JMP                                       // ROM[14100]
// ---------------------------
// ( RA )
( Output.initMap:87) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14101]
AM = M-1                                     // ROM[14102]
D = M                                        // ROM[14103]
// ---------------------------
@ 5                                          // ROM[14104]
M = D                                        // ROM[14105]

// -------------------------------------
// PUSH: <constant, 71>
// -------------------------------------
@ 71                                         // ROM[14106]
D = A                                        // ROM[14107]
// ---------------------------
// push D
@ SP                                         // ROM[14108]
AM = M+1                                     // ROM[14109]
A = A-1                                      // ROM[14110]
M = D                                        // ROM[14111]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[14112]
D = A                                        // ROM[14113]
// ---------------------------
// push D
@ SP                                         // ROM[14114]
AM = M+1                                     // ROM[14115]
A = A-1                                      // ROM[14116]
M = D                                        // ROM[14117]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[14118]
D = A                                        // ROM[14119]
// ---------------------------
// push D
@ SP                                         // ROM[14120]
AM = M+1                                     // ROM[14121]
A = A-1                                      // ROM[14122]
M = D                                        // ROM[14123]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[14124]
D = A                                        // ROM[14125]
// ---------------------------
// push D
@ SP                                         // ROM[14126]
AM = M+1                                     // ROM[14127]
A = A-1                                      // ROM[14128]
M = D                                        // ROM[14129]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14130]
D = A                                        // ROM[14131]
// ---------------------------
// push D
@ SP                                         // ROM[14132]
AM = M+1                                     // ROM[14133]
A = A-1                                      // ROM[14134]
M = D                                        // ROM[14135]

// -------------------------------------
// PUSH: <constant, 59>
// -------------------------------------
@ 59                                         // ROM[14136]
D = A                                        // ROM[14137]
// ---------------------------
// push D
@ SP                                         // ROM[14138]
AM = M+1                                     // ROM[14139]
A = A-1                                      // ROM[14140]
M = D                                        // ROM[14141]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14142]
D = A                                        // ROM[14143]
// ---------------------------
// push D
@ SP                                         // ROM[14144]
AM = M+1                                     // ROM[14145]
A = A-1                                      // ROM[14146]
M = D                                        // ROM[14147]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14148]
D = A                                        // ROM[14149]
// ---------------------------
// push D
@ SP                                         // ROM[14150]
AM = M+1                                     // ROM[14151]
A = A-1                                      // ROM[14152]
M = D                                        // ROM[14153]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[14154]
D = A                                        // ROM[14155]
// ---------------------------
// push D
@ SP                                         // ROM[14156]
AM = M+1                                     // ROM[14157]
A = A-1                                      // ROM[14158]
M = D                                        // ROM[14159]

// -------------------------------------
// PUSH: <constant, 44>
// -------------------------------------
@ 44                                         // ROM[14160]
D = A                                        // ROM[14161]
// ---------------------------
// push D
@ SP                                         // ROM[14162]
AM = M+1                                     // ROM[14163]
A = A-1                                      // ROM[14164]
M = D                                        // ROM[14165]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14166]
D = A                                        // ROM[14167]
// ---------------------------
// push D
@ SP                                         // ROM[14168]
AM = M+1                                     // ROM[14169]
A = A-1                                      // ROM[14170]
M = D                                        // ROM[14171]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14172]
D = A                                        // ROM[14173]
// ---------------------------
// push D
@ SP                                         // ROM[14174]
AM = M+1                                     // ROM[14175]
A = A-1                                      // ROM[14176]
M = D                                        // ROM[14177]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14178]
D = A                                        // ROM[14179]
@ R13                                        // ROM[14180]
M = D                                        // ROM[14181]
// ---------------------------
// Push RA
@ Output.initMap:89                          // ROM[14182]
D = A                                        // ROM[14183]
// ---------------------------
// push D
@ SP                                         // ROM[14184]
AM = M+1                                     // ROM[14185]
A = A-1                                      // ROM[14186]
M = D                                        // ROM[14187]
// ---------------------------
// call
@ Output.initMap:90                          // ROM[14188]
D = A                                        // ROM[14189]
@ R15                                        // ROM[14190]
M = D                                        // ROM[14191]
@ :call                                      // ROM[14192]
0; JMP                                       // ROM[14193]
( Output.initMap:90)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14194]
0; JMP                                       // ROM[14195]
// ---------------------------
// ( RA )
( Output.initMap:89) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14196]
AM = M-1                                     // ROM[14197]
D = M                                        // ROM[14198]
// ---------------------------
@ 5                                          // ROM[14199]
M = D                                        // ROM[14200]

// -------------------------------------
// PUSH: <constant, 72>
// -------------------------------------
@ 72                                         // ROM[14201]
D = A                                        // ROM[14202]
// ---------------------------
// push D
@ SP                                         // ROM[14203]
AM = M+1                                     // ROM[14204]
A = A-1                                      // ROM[14205]
M = D                                        // ROM[14206]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14207]
D = A                                        // ROM[14208]
// ---------------------------
// push D
@ SP                                         // ROM[14209]
AM = M+1                                     // ROM[14210]
A = A-1                                      // ROM[14211]
M = D                                        // ROM[14212]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14213]
D = A                                        // ROM[14214]
// ---------------------------
// push D
@ SP                                         // ROM[14215]
AM = M+1                                     // ROM[14216]
A = A-1                                      // ROM[14217]
M = D                                        // ROM[14218]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14219]
D = A                                        // ROM[14220]
// ---------------------------
// push D
@ SP                                         // ROM[14221]
AM = M+1                                     // ROM[14222]
A = A-1                                      // ROM[14223]
M = D                                        // ROM[14224]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14225]
D = A                                        // ROM[14226]
// ---------------------------
// push D
@ SP                                         // ROM[14227]
AM = M+1                                     // ROM[14228]
A = A-1                                      // ROM[14229]
M = D                                        // ROM[14230]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[14231]
D = A                                        // ROM[14232]
// ---------------------------
// push D
@ SP                                         // ROM[14233]
AM = M+1                                     // ROM[14234]
A = A-1                                      // ROM[14235]
M = D                                        // ROM[14236]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14237]
D = A                                        // ROM[14238]
// ---------------------------
// push D
@ SP                                         // ROM[14239]
AM = M+1                                     // ROM[14240]
A = A-1                                      // ROM[14241]
M = D                                        // ROM[14242]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14243]
D = A                                        // ROM[14244]
// ---------------------------
// push D
@ SP                                         // ROM[14245]
AM = M+1                                     // ROM[14246]
A = A-1                                      // ROM[14247]
M = D                                        // ROM[14248]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14249]
D = A                                        // ROM[14250]
// ---------------------------
// push D
@ SP                                         // ROM[14251]
AM = M+1                                     // ROM[14252]
A = A-1                                      // ROM[14253]
M = D                                        // ROM[14254]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14255]
D = A                                        // ROM[14256]
// ---------------------------
// push D
@ SP                                         // ROM[14257]
AM = M+1                                     // ROM[14258]
A = A-1                                      // ROM[14259]
M = D                                        // ROM[14260]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14261]
D = A                                        // ROM[14262]
// ---------------------------
// push D
@ SP                                         // ROM[14263]
AM = M+1                                     // ROM[14264]
A = A-1                                      // ROM[14265]
M = D                                        // ROM[14266]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14267]
D = A                                        // ROM[14268]
// ---------------------------
// push D
@ SP                                         // ROM[14269]
AM = M+1                                     // ROM[14270]
A = A-1                                      // ROM[14271]
M = D                                        // ROM[14272]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14273]
D = A                                        // ROM[14274]
@ R13                                        // ROM[14275]
M = D                                        // ROM[14276]
// ---------------------------
// Push RA
@ Output.initMap:91                          // ROM[14277]
D = A                                        // ROM[14278]
// ---------------------------
// push D
@ SP                                         // ROM[14279]
AM = M+1                                     // ROM[14280]
A = A-1                                      // ROM[14281]
M = D                                        // ROM[14282]
// ---------------------------
// call
@ Output.initMap:92                          // ROM[14283]
D = A                                        // ROM[14284]
@ R15                                        // ROM[14285]
M = D                                        // ROM[14286]
@ :call                                      // ROM[14287]
0; JMP                                       // ROM[14288]
( Output.initMap:92)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14289]
0; JMP                                       // ROM[14290]
// ---------------------------
// ( RA )
( Output.initMap:91) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14291]
AM = M-1                                     // ROM[14292]
D = M                                        // ROM[14293]
// ---------------------------
@ 5                                          // ROM[14294]
M = D                                        // ROM[14295]

// -------------------------------------
// PUSH: <constant, 73>
// -------------------------------------
@ 73                                         // ROM[14296]
D = A                                        // ROM[14297]
// ---------------------------
// push D
@ SP                                         // ROM[14298]
AM = M+1                                     // ROM[14299]
A = A-1                                      // ROM[14300]
M = D                                        // ROM[14301]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[14302]
D = A                                        // ROM[14303]
// ---------------------------
// push D
@ SP                                         // ROM[14304]
AM = M+1                                     // ROM[14305]
A = A-1                                      // ROM[14306]
M = D                                        // ROM[14307]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[14308]
D = A                                        // ROM[14309]
// ---------------------------
// push D
@ SP                                         // ROM[14310]
AM = M+1                                     // ROM[14311]
A = A-1                                      // ROM[14312]
M = D                                        // ROM[14313]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[14314]
D = A                                        // ROM[14315]
// ---------------------------
// push D
@ SP                                         // ROM[14316]
AM = M+1                                     // ROM[14317]
A = A-1                                      // ROM[14318]
M = D                                        // ROM[14319]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[14320]
D = A                                        // ROM[14321]
// ---------------------------
// push D
@ SP                                         // ROM[14322]
AM = M+1                                     // ROM[14323]
A = A-1                                      // ROM[14324]
M = D                                        // ROM[14325]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[14326]
D = A                                        // ROM[14327]
// ---------------------------
// push D
@ SP                                         // ROM[14328]
AM = M+1                                     // ROM[14329]
A = A-1                                      // ROM[14330]
M = D                                        // ROM[14331]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[14332]
D = A                                        // ROM[14333]
// ---------------------------
// push D
@ SP                                         // ROM[14334]
AM = M+1                                     // ROM[14335]
A = A-1                                      // ROM[14336]
M = D                                        // ROM[14337]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[14338]
D = A                                        // ROM[14339]
// ---------------------------
// push D
@ SP                                         // ROM[14340]
AM = M+1                                     // ROM[14341]
A = A-1                                      // ROM[14342]
M = D                                        // ROM[14343]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[14344]
D = A                                        // ROM[14345]
// ---------------------------
// push D
@ SP                                         // ROM[14346]
AM = M+1                                     // ROM[14347]
A = A-1                                      // ROM[14348]
M = D                                        // ROM[14349]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[14350]
D = A                                        // ROM[14351]
// ---------------------------
// push D
@ SP                                         // ROM[14352]
AM = M+1                                     // ROM[14353]
A = A-1                                      // ROM[14354]
M = D                                        // ROM[14355]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14356]
D = A                                        // ROM[14357]
// ---------------------------
// push D
@ SP                                         // ROM[14358]
AM = M+1                                     // ROM[14359]
A = A-1                                      // ROM[14360]
M = D                                        // ROM[14361]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14362]
D = A                                        // ROM[14363]
// ---------------------------
// push D
@ SP                                         // ROM[14364]
AM = M+1                                     // ROM[14365]
A = A-1                                      // ROM[14366]
M = D                                        // ROM[14367]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14368]
D = A                                        // ROM[14369]
@ R13                                        // ROM[14370]
M = D                                        // ROM[14371]
// ---------------------------
// Push RA
@ Output.initMap:93                          // ROM[14372]
D = A                                        // ROM[14373]
// ---------------------------
// push D
@ SP                                         // ROM[14374]
AM = M+1                                     // ROM[14375]
A = A-1                                      // ROM[14376]
M = D                                        // ROM[14377]
// ---------------------------
// call
@ Output.initMap:94                          // ROM[14378]
D = A                                        // ROM[14379]
@ R15                                        // ROM[14380]
M = D                                        // ROM[14381]
@ :call                                      // ROM[14382]
0; JMP                                       // ROM[14383]
( Output.initMap:94)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14384]
0; JMP                                       // ROM[14385]
// ---------------------------
// ( RA )
( Output.initMap:93) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14386]
AM = M-1                                     // ROM[14387]
D = M                                        // ROM[14388]
// ---------------------------
@ 5                                          // ROM[14389]
M = D                                        // ROM[14390]

// -------------------------------------
// PUSH: <constant, 74>
// -------------------------------------
@ 74                                         // ROM[14391]
D = A                                        // ROM[14392]
// ---------------------------
// push D
@ SP                                         // ROM[14393]
AM = M+1                                     // ROM[14394]
A = A-1                                      // ROM[14395]
M = D                                        // ROM[14396]

// -------------------------------------
// PUSH: <constant, 60>
// -------------------------------------
@ 60                                         // ROM[14397]
D = A                                        // ROM[14398]
// ---------------------------
// push D
@ SP                                         // ROM[14399]
AM = M+1                                     // ROM[14400]
A = A-1                                      // ROM[14401]
M = D                                        // ROM[14402]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[14403]
D = A                                        // ROM[14404]
// ---------------------------
// push D
@ SP                                         // ROM[14405]
AM = M+1                                     // ROM[14406]
A = A-1                                      // ROM[14407]
M = D                                        // ROM[14408]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[14409]
D = A                                        // ROM[14410]
// ---------------------------
// push D
@ SP                                         // ROM[14411]
AM = M+1                                     // ROM[14412]
A = A-1                                      // ROM[14413]
M = D                                        // ROM[14414]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[14415]
D = A                                        // ROM[14416]
// ---------------------------
// push D
@ SP                                         // ROM[14417]
AM = M+1                                     // ROM[14418]
A = A-1                                      // ROM[14419]
M = D                                        // ROM[14420]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[14421]
D = A                                        // ROM[14422]
// ---------------------------
// push D
@ SP                                         // ROM[14423]
AM = M+1                                     // ROM[14424]
A = A-1                                      // ROM[14425]
M = D                                        // ROM[14426]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[14427]
D = A                                        // ROM[14428]
// ---------------------------
// push D
@ SP                                         // ROM[14429]
AM = M+1                                     // ROM[14430]
A = A-1                                      // ROM[14431]
M = D                                        // ROM[14432]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[14433]
D = A                                        // ROM[14434]
// ---------------------------
// push D
@ SP                                         // ROM[14435]
AM = M+1                                     // ROM[14436]
A = A-1                                      // ROM[14437]
M = D                                        // ROM[14438]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[14439]
D = A                                        // ROM[14440]
// ---------------------------
// push D
@ SP                                         // ROM[14441]
AM = M+1                                     // ROM[14442]
A = A-1                                      // ROM[14443]
M = D                                        // ROM[14444]

// -------------------------------------
// PUSH: <constant, 14>
// -------------------------------------
@ 14                                         // ROM[14445]
D = A                                        // ROM[14446]
// ---------------------------
// push D
@ SP                                         // ROM[14447]
AM = M+1                                     // ROM[14448]
A = A-1                                      // ROM[14449]
M = D                                        // ROM[14450]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14451]
D = A                                        // ROM[14452]
// ---------------------------
// push D
@ SP                                         // ROM[14453]
AM = M+1                                     // ROM[14454]
A = A-1                                      // ROM[14455]
M = D                                        // ROM[14456]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14457]
D = A                                        // ROM[14458]
// ---------------------------
// push D
@ SP                                         // ROM[14459]
AM = M+1                                     // ROM[14460]
A = A-1                                      // ROM[14461]
M = D                                        // ROM[14462]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14463]
D = A                                        // ROM[14464]
@ R13                                        // ROM[14465]
M = D                                        // ROM[14466]
// ---------------------------
// Push RA
@ Output.initMap:95                          // ROM[14467]
D = A                                        // ROM[14468]
// ---------------------------
// push D
@ SP                                         // ROM[14469]
AM = M+1                                     // ROM[14470]
A = A-1                                      // ROM[14471]
M = D                                        // ROM[14472]
// ---------------------------
// call
@ Output.initMap:96                          // ROM[14473]
D = A                                        // ROM[14474]
@ R15                                        // ROM[14475]
M = D                                        // ROM[14476]
@ :call                                      // ROM[14477]
0; JMP                                       // ROM[14478]
( Output.initMap:96)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14479]
0; JMP                                       // ROM[14480]
// ---------------------------
// ( RA )
( Output.initMap:95) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14481]
AM = M-1                                     // ROM[14482]
D = M                                        // ROM[14483]
// ---------------------------
@ 5                                          // ROM[14484]
M = D                                        // ROM[14485]

// -------------------------------------
// PUSH: <constant, 75>
// -------------------------------------
@ 75                                         // ROM[14486]
D = A                                        // ROM[14487]
// ---------------------------
// push D
@ SP                                         // ROM[14488]
AM = M+1                                     // ROM[14489]
A = A-1                                      // ROM[14490]
M = D                                        // ROM[14491]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14492]
D = A                                        // ROM[14493]
// ---------------------------
// push D
@ SP                                         // ROM[14494]
AM = M+1                                     // ROM[14495]
A = A-1                                      // ROM[14496]
M = D                                        // ROM[14497]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14498]
D = A                                        // ROM[14499]
// ---------------------------
// push D
@ SP                                         // ROM[14500]
AM = M+1                                     // ROM[14501]
A = A-1                                      // ROM[14502]
M = D                                        // ROM[14503]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14504]
D = A                                        // ROM[14505]
// ---------------------------
// push D
@ SP                                         // ROM[14506]
AM = M+1                                     // ROM[14507]
A = A-1                                      // ROM[14508]
M = D                                        // ROM[14509]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[14510]
D = A                                        // ROM[14511]
// ---------------------------
// push D
@ SP                                         // ROM[14512]
AM = M+1                                     // ROM[14513]
A = A-1                                      // ROM[14514]
M = D                                        // ROM[14515]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[14516]
D = A                                        // ROM[14517]
// ---------------------------
// push D
@ SP                                         // ROM[14518]
AM = M+1                                     // ROM[14519]
A = A-1                                      // ROM[14520]
M = D                                        // ROM[14521]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[14522]
D = A                                        // ROM[14523]
// ---------------------------
// push D
@ SP                                         // ROM[14524]
AM = M+1                                     // ROM[14525]
A = A-1                                      // ROM[14526]
M = D                                        // ROM[14527]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14528]
D = A                                        // ROM[14529]
// ---------------------------
// push D
@ SP                                         // ROM[14530]
AM = M+1                                     // ROM[14531]
A = A-1                                      // ROM[14532]
M = D                                        // ROM[14533]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14534]
D = A                                        // ROM[14535]
// ---------------------------
// push D
@ SP                                         // ROM[14536]
AM = M+1                                     // ROM[14537]
A = A-1                                      // ROM[14538]
M = D                                        // ROM[14539]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14540]
D = A                                        // ROM[14541]
// ---------------------------
// push D
@ SP                                         // ROM[14542]
AM = M+1                                     // ROM[14543]
A = A-1                                      // ROM[14544]
M = D                                        // ROM[14545]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14546]
D = A                                        // ROM[14547]
// ---------------------------
// push D
@ SP                                         // ROM[14548]
AM = M+1                                     // ROM[14549]
A = A-1                                      // ROM[14550]
M = D                                        // ROM[14551]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14552]
D = A                                        // ROM[14553]
// ---------------------------
// push D
@ SP                                         // ROM[14554]
AM = M+1                                     // ROM[14555]
A = A-1                                      // ROM[14556]
M = D                                        // ROM[14557]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14558]
D = A                                        // ROM[14559]
@ R13                                        // ROM[14560]
M = D                                        // ROM[14561]
// ---------------------------
// Push RA
@ Output.initMap:97                          // ROM[14562]
D = A                                        // ROM[14563]
// ---------------------------
// push D
@ SP                                         // ROM[14564]
AM = M+1                                     // ROM[14565]
A = A-1                                      // ROM[14566]
M = D                                        // ROM[14567]
// ---------------------------
// call
@ Output.initMap:98                          // ROM[14568]
D = A                                        // ROM[14569]
@ R15                                        // ROM[14570]
M = D                                        // ROM[14571]
@ :call                                      // ROM[14572]
0; JMP                                       // ROM[14573]
( Output.initMap:98)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14574]
0; JMP                                       // ROM[14575]
// ---------------------------
// ( RA )
( Output.initMap:97) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14576]
AM = M-1                                     // ROM[14577]
D = M                                        // ROM[14578]
// ---------------------------
@ 5                                          // ROM[14579]
M = D                                        // ROM[14580]

// -------------------------------------
// PUSH: <constant, 76>
// -------------------------------------
@ 76                                         // ROM[14581]
D = A                                        // ROM[14582]
// ---------------------------
// push D
@ SP                                         // ROM[14583]
AM = M+1                                     // ROM[14584]
A = A-1                                      // ROM[14585]
M = D                                        // ROM[14586]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14587]
D = A                                        // ROM[14588]
// ---------------------------
// push D
@ SP                                         // ROM[14589]
AM = M+1                                     // ROM[14590]
A = A-1                                      // ROM[14591]
M = D                                        // ROM[14592]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14593]
D = A                                        // ROM[14594]
// ---------------------------
// push D
@ SP                                         // ROM[14595]
AM = M+1                                     // ROM[14596]
A = A-1                                      // ROM[14597]
M = D                                        // ROM[14598]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14599]
D = A                                        // ROM[14600]
// ---------------------------
// push D
@ SP                                         // ROM[14601]
AM = M+1                                     // ROM[14602]
A = A-1                                      // ROM[14603]
M = D                                        // ROM[14604]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14605]
D = A                                        // ROM[14606]
// ---------------------------
// push D
@ SP                                         // ROM[14607]
AM = M+1                                     // ROM[14608]
A = A-1                                      // ROM[14609]
M = D                                        // ROM[14610]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14611]
D = A                                        // ROM[14612]
// ---------------------------
// push D
@ SP                                         // ROM[14613]
AM = M+1                                     // ROM[14614]
A = A-1                                      // ROM[14615]
M = D                                        // ROM[14616]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14617]
D = A                                        // ROM[14618]
// ---------------------------
// push D
@ SP                                         // ROM[14619]
AM = M+1                                     // ROM[14620]
A = A-1                                      // ROM[14621]
M = D                                        // ROM[14622]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[14623]
D = A                                        // ROM[14624]
// ---------------------------
// push D
@ SP                                         // ROM[14625]
AM = M+1                                     // ROM[14626]
A = A-1                                      // ROM[14627]
M = D                                        // ROM[14628]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14629]
D = A                                        // ROM[14630]
// ---------------------------
// push D
@ SP                                         // ROM[14631]
AM = M+1                                     // ROM[14632]
A = A-1                                      // ROM[14633]
M = D                                        // ROM[14634]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[14635]
D = A                                        // ROM[14636]
// ---------------------------
// push D
@ SP                                         // ROM[14637]
AM = M+1                                     // ROM[14638]
A = A-1                                      // ROM[14639]
M = D                                        // ROM[14640]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14641]
D = A                                        // ROM[14642]
// ---------------------------
// push D
@ SP                                         // ROM[14643]
AM = M+1                                     // ROM[14644]
A = A-1                                      // ROM[14645]
M = D                                        // ROM[14646]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14647]
D = A                                        // ROM[14648]
// ---------------------------
// push D
@ SP                                         // ROM[14649]
AM = M+1                                     // ROM[14650]
A = A-1                                      // ROM[14651]
M = D                                        // ROM[14652]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14653]
D = A                                        // ROM[14654]
@ R13                                        // ROM[14655]
M = D                                        // ROM[14656]
// ---------------------------
// Push RA
@ Output.initMap:99                          // ROM[14657]
D = A                                        // ROM[14658]
// ---------------------------
// push D
@ SP                                         // ROM[14659]
AM = M+1                                     // ROM[14660]
A = A-1                                      // ROM[14661]
M = D                                        // ROM[14662]
// ---------------------------
// call
@ Output.initMap:100                         // ROM[14663]
D = A                                        // ROM[14664]
@ R15                                        // ROM[14665]
M = D                                        // ROM[14666]
@ :call                                      // ROM[14667]
0; JMP                                       // ROM[14668]
( Output.initMap:100)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14669]
0; JMP                                       // ROM[14670]
// ---------------------------
// ( RA )
( Output.initMap:99) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14671]
AM = M-1                                     // ROM[14672]
D = M                                        // ROM[14673]
// ---------------------------
@ 5                                          // ROM[14674]
M = D                                        // ROM[14675]

// -------------------------------------
// PUSH: <constant, 77>
// -------------------------------------
@ 77                                         // ROM[14676]
D = A                                        // ROM[14677]
// ---------------------------
// push D
@ SP                                         // ROM[14678]
AM = M+1                                     // ROM[14679]
A = A-1                                      // ROM[14680]
M = D                                        // ROM[14681]

// -------------------------------------
// PUSH: <constant, 33>
// -------------------------------------
@ 33                                         // ROM[14682]
D = A                                        // ROM[14683]
// ---------------------------
// push D
@ SP                                         // ROM[14684]
AM = M+1                                     // ROM[14685]
A = A-1                                      // ROM[14686]
M = D                                        // ROM[14687]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14688]
D = A                                        // ROM[14689]
// ---------------------------
// push D
@ SP                                         // ROM[14690]
AM = M+1                                     // ROM[14691]
A = A-1                                      // ROM[14692]
M = D                                        // ROM[14693]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[14694]
D = A                                        // ROM[14695]
// ---------------------------
// push D
@ SP                                         // ROM[14696]
AM = M+1                                     // ROM[14697]
A = A-1                                      // ROM[14698]
M = D                                        // ROM[14699]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[14700]
D = A                                        // ROM[14701]
// ---------------------------
// push D
@ SP                                         // ROM[14702]
AM = M+1                                     // ROM[14703]
A = A-1                                      // ROM[14704]
M = D                                        // ROM[14705]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14706]
D = A                                        // ROM[14707]
// ---------------------------
// push D
@ SP                                         // ROM[14708]
AM = M+1                                     // ROM[14709]
A = A-1                                      // ROM[14710]
M = D                                        // ROM[14711]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14712]
D = A                                        // ROM[14713]
// ---------------------------
// push D
@ SP                                         // ROM[14714]
AM = M+1                                     // ROM[14715]
A = A-1                                      // ROM[14716]
M = D                                        // ROM[14717]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14718]
D = A                                        // ROM[14719]
// ---------------------------
// push D
@ SP                                         // ROM[14720]
AM = M+1                                     // ROM[14721]
A = A-1                                      // ROM[14722]
M = D                                        // ROM[14723]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14724]
D = A                                        // ROM[14725]
// ---------------------------
// push D
@ SP                                         // ROM[14726]
AM = M+1                                     // ROM[14727]
A = A-1                                      // ROM[14728]
M = D                                        // ROM[14729]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14730]
D = A                                        // ROM[14731]
// ---------------------------
// push D
@ SP                                         // ROM[14732]
AM = M+1                                     // ROM[14733]
A = A-1                                      // ROM[14734]
M = D                                        // ROM[14735]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14736]
D = A                                        // ROM[14737]
// ---------------------------
// push D
@ SP                                         // ROM[14738]
AM = M+1                                     // ROM[14739]
A = A-1                                      // ROM[14740]
M = D                                        // ROM[14741]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14742]
D = A                                        // ROM[14743]
// ---------------------------
// push D
@ SP                                         // ROM[14744]
AM = M+1                                     // ROM[14745]
A = A-1                                      // ROM[14746]
M = D                                        // ROM[14747]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14748]
D = A                                        // ROM[14749]
@ R13                                        // ROM[14750]
M = D                                        // ROM[14751]
// ---------------------------
// Push RA
@ Output.initMap:101                         // ROM[14752]
D = A                                        // ROM[14753]
// ---------------------------
// push D
@ SP                                         // ROM[14754]
AM = M+1                                     // ROM[14755]
A = A-1                                      // ROM[14756]
M = D                                        // ROM[14757]
// ---------------------------
// call
@ Output.initMap:102                         // ROM[14758]
D = A                                        // ROM[14759]
@ R15                                        // ROM[14760]
M = D                                        // ROM[14761]
@ :call                                      // ROM[14762]
0; JMP                                       // ROM[14763]
( Output.initMap:102)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14764]
0; JMP                                       // ROM[14765]
// ---------------------------
// ( RA )
( Output.initMap:101) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14766]
AM = M-1                                     // ROM[14767]
D = M                                        // ROM[14768]
// ---------------------------
@ 5                                          // ROM[14769]
M = D                                        // ROM[14770]

// -------------------------------------
// PUSH: <constant, 78>
// -------------------------------------
@ 78                                         // ROM[14771]
D = A                                        // ROM[14772]
// ---------------------------
// push D
@ SP                                         // ROM[14773]
AM = M+1                                     // ROM[14774]
A = A-1                                      // ROM[14775]
M = D                                        // ROM[14776]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14777]
D = A                                        // ROM[14778]
// ---------------------------
// push D
@ SP                                         // ROM[14779]
AM = M+1                                     // ROM[14780]
A = A-1                                      // ROM[14781]
M = D                                        // ROM[14782]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14783]
D = A                                        // ROM[14784]
// ---------------------------
// push D
@ SP                                         // ROM[14785]
AM = M+1                                     // ROM[14786]
A = A-1                                      // ROM[14787]
M = D                                        // ROM[14788]

// -------------------------------------
// PUSH: <constant, 55>
// -------------------------------------
@ 55                                         // ROM[14789]
D = A                                        // ROM[14790]
// ---------------------------
// push D
@ SP                                         // ROM[14791]
AM = M+1                                     // ROM[14792]
A = A-1                                      // ROM[14793]
M = D                                        // ROM[14794]

// -------------------------------------
// PUSH: <constant, 55>
// -------------------------------------
@ 55                                         // ROM[14795]
D = A                                        // ROM[14796]
// ---------------------------
// push D
@ SP                                         // ROM[14797]
AM = M+1                                     // ROM[14798]
A = A-1                                      // ROM[14799]
M = D                                        // ROM[14800]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[14801]
D = A                                        // ROM[14802]
// ---------------------------
// push D
@ SP                                         // ROM[14803]
AM = M+1                                     // ROM[14804]
A = A-1                                      // ROM[14805]
M = D                                        // ROM[14806]

// -------------------------------------
// PUSH: <constant, 59>
// -------------------------------------
@ 59                                         // ROM[14807]
D = A                                        // ROM[14808]
// ---------------------------
// push D
@ SP                                         // ROM[14809]
AM = M+1                                     // ROM[14810]
A = A-1                                      // ROM[14811]
M = D                                        // ROM[14812]

// -------------------------------------
// PUSH: <constant, 59>
// -------------------------------------
@ 59                                         // ROM[14813]
D = A                                        // ROM[14814]
// ---------------------------
// push D
@ SP                                         // ROM[14815]
AM = M+1                                     // ROM[14816]
A = A-1                                      // ROM[14817]
M = D                                        // ROM[14818]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14819]
D = A                                        // ROM[14820]
// ---------------------------
// push D
@ SP                                         // ROM[14821]
AM = M+1                                     // ROM[14822]
A = A-1                                      // ROM[14823]
M = D                                        // ROM[14824]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14825]
D = A                                        // ROM[14826]
// ---------------------------
// push D
@ SP                                         // ROM[14827]
AM = M+1                                     // ROM[14828]
A = A-1                                      // ROM[14829]
M = D                                        // ROM[14830]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14831]
D = A                                        // ROM[14832]
// ---------------------------
// push D
@ SP                                         // ROM[14833]
AM = M+1                                     // ROM[14834]
A = A-1                                      // ROM[14835]
M = D                                        // ROM[14836]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14837]
D = A                                        // ROM[14838]
// ---------------------------
// push D
@ SP                                         // ROM[14839]
AM = M+1                                     // ROM[14840]
A = A-1                                      // ROM[14841]
M = D                                        // ROM[14842]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14843]
D = A                                        // ROM[14844]
@ R13                                        // ROM[14845]
M = D                                        // ROM[14846]
// ---------------------------
// Push RA
@ Output.initMap:103                         // ROM[14847]
D = A                                        // ROM[14848]
// ---------------------------
// push D
@ SP                                         // ROM[14849]
AM = M+1                                     // ROM[14850]
A = A-1                                      // ROM[14851]
M = D                                        // ROM[14852]
// ---------------------------
// call
@ Output.initMap:104                         // ROM[14853]
D = A                                        // ROM[14854]
@ R15                                        // ROM[14855]
M = D                                        // ROM[14856]
@ :call                                      // ROM[14857]
0; JMP                                       // ROM[14858]
( Output.initMap:104)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14859]
0; JMP                                       // ROM[14860]
// ---------------------------
// ( RA )
( Output.initMap:103) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14861]
AM = M-1                                     // ROM[14862]
D = M                                        // ROM[14863]
// ---------------------------
@ 5                                          // ROM[14864]
M = D                                        // ROM[14865]

// -------------------------------------
// PUSH: <constant, 79>
// -------------------------------------
@ 79                                         // ROM[14866]
D = A                                        // ROM[14867]
// ---------------------------
// push D
@ SP                                         // ROM[14868]
AM = M+1                                     // ROM[14869]
A = A-1                                      // ROM[14870]
M = D                                        // ROM[14871]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[14872]
D = A                                        // ROM[14873]
// ---------------------------
// push D
@ SP                                         // ROM[14874]
AM = M+1                                     // ROM[14875]
A = A-1                                      // ROM[14876]
M = D                                        // ROM[14877]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14878]
D = A                                        // ROM[14879]
// ---------------------------
// push D
@ SP                                         // ROM[14880]
AM = M+1                                     // ROM[14881]
A = A-1                                      // ROM[14882]
M = D                                        // ROM[14883]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14884]
D = A                                        // ROM[14885]
// ---------------------------
// push D
@ SP                                         // ROM[14886]
AM = M+1                                     // ROM[14887]
A = A-1                                      // ROM[14888]
M = D                                        // ROM[14889]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14890]
D = A                                        // ROM[14891]
// ---------------------------
// push D
@ SP                                         // ROM[14892]
AM = M+1                                     // ROM[14893]
A = A-1                                      // ROM[14894]
M = D                                        // ROM[14895]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14896]
D = A                                        // ROM[14897]
// ---------------------------
// push D
@ SP                                         // ROM[14898]
AM = M+1                                     // ROM[14899]
A = A-1                                      // ROM[14900]
M = D                                        // ROM[14901]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14902]
D = A                                        // ROM[14903]
// ---------------------------
// push D
@ SP                                         // ROM[14904]
AM = M+1                                     // ROM[14905]
A = A-1                                      // ROM[14906]
M = D                                        // ROM[14907]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14908]
D = A                                        // ROM[14909]
// ---------------------------
// push D
@ SP                                         // ROM[14910]
AM = M+1                                     // ROM[14911]
A = A-1                                      // ROM[14912]
M = D                                        // ROM[14913]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14914]
D = A                                        // ROM[14915]
// ---------------------------
// push D
@ SP                                         // ROM[14916]
AM = M+1                                     // ROM[14917]
A = A-1                                      // ROM[14918]
M = D                                        // ROM[14919]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[14920]
D = A                                        // ROM[14921]
// ---------------------------
// push D
@ SP                                         // ROM[14922]
AM = M+1                                     // ROM[14923]
A = A-1                                      // ROM[14924]
M = D                                        // ROM[14925]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14926]
D = A                                        // ROM[14927]
// ---------------------------
// push D
@ SP                                         // ROM[14928]
AM = M+1                                     // ROM[14929]
A = A-1                                      // ROM[14930]
M = D                                        // ROM[14931]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[14932]
D = A                                        // ROM[14933]
// ---------------------------
// push D
@ SP                                         // ROM[14934]
AM = M+1                                     // ROM[14935]
A = A-1                                      // ROM[14936]
M = D                                        // ROM[14937]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[14938]
D = A                                        // ROM[14939]
@ R13                                        // ROM[14940]
M = D                                        // ROM[14941]
// ---------------------------
// Push RA
@ Output.initMap:105                         // ROM[14942]
D = A                                        // ROM[14943]
// ---------------------------
// push D
@ SP                                         // ROM[14944]
AM = M+1                                     // ROM[14945]
A = A-1                                      // ROM[14946]
M = D                                        // ROM[14947]
// ---------------------------
// call
@ Output.initMap:106                         // ROM[14948]
D = A                                        // ROM[14949]
@ R15                                        // ROM[14950]
M = D                                        // ROM[14951]
@ :call                                      // ROM[14952]
0; JMP                                       // ROM[14953]
( Output.initMap:106)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[14954]
0; JMP                                       // ROM[14955]
// ---------------------------
// ( RA )
( Output.initMap:105) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[14956]
AM = M-1                                     // ROM[14957]
D = M                                        // ROM[14958]
// ---------------------------
@ 5                                          // ROM[14959]
M = D                                        // ROM[14960]

// -------------------------------------
// PUSH: <constant, 80>
// -------------------------------------
@ 80                                         // ROM[14961]
D = A                                        // ROM[14962]
// ---------------------------
// push D
@ SP                                         // ROM[14963]
AM = M+1                                     // ROM[14964]
A = A-1                                      // ROM[14965]
M = D                                        // ROM[14966]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[14967]
D = A                                        // ROM[14968]
// ---------------------------
// push D
@ SP                                         // ROM[14969]
AM = M+1                                     // ROM[14970]
A = A-1                                      // ROM[14971]
M = D                                        // ROM[14972]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14973]
D = A                                        // ROM[14974]
// ---------------------------
// push D
@ SP                                         // ROM[14975]
AM = M+1                                     // ROM[14976]
A = A-1                                      // ROM[14977]
M = D                                        // ROM[14978]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14979]
D = A                                        // ROM[14980]
// ---------------------------
// push D
@ SP                                         // ROM[14981]
AM = M+1                                     // ROM[14982]
A = A-1                                      // ROM[14983]
M = D                                        // ROM[14984]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[14985]
D = A                                        // ROM[14986]
// ---------------------------
// push D
@ SP                                         // ROM[14987]
AM = M+1                                     // ROM[14988]
A = A-1                                      // ROM[14989]
M = D                                        // ROM[14990]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[14991]
D = A                                        // ROM[14992]
// ---------------------------
// push D
@ SP                                         // ROM[14993]
AM = M+1                                     // ROM[14994]
A = A-1                                      // ROM[14995]
M = D                                        // ROM[14996]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[14997]
D = A                                        // ROM[14998]
// ---------------------------
// push D
@ SP                                         // ROM[14999]
AM = M+1                                     // ROM[15000]
A = A-1                                      // ROM[15001]
M = D                                        // ROM[15002]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[15003]
D = A                                        // ROM[15004]
// ---------------------------
// push D
@ SP                                         // ROM[15005]
AM = M+1                                     // ROM[15006]
A = A-1                                      // ROM[15007]
M = D                                        // ROM[15008]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[15009]
D = A                                        // ROM[15010]
// ---------------------------
// push D
@ SP                                         // ROM[15011]
AM = M+1                                     // ROM[15012]
A = A-1                                      // ROM[15013]
M = D                                        // ROM[15014]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[15015]
D = A                                        // ROM[15016]
// ---------------------------
// push D
@ SP                                         // ROM[15017]
AM = M+1                                     // ROM[15018]
A = A-1                                      // ROM[15019]
M = D                                        // ROM[15020]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15021]
D = A                                        // ROM[15022]
// ---------------------------
// push D
@ SP                                         // ROM[15023]
AM = M+1                                     // ROM[15024]
A = A-1                                      // ROM[15025]
M = D                                        // ROM[15026]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15027]
D = A                                        // ROM[15028]
// ---------------------------
// push D
@ SP                                         // ROM[15029]
AM = M+1                                     // ROM[15030]
A = A-1                                      // ROM[15031]
M = D                                        // ROM[15032]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15033]
D = A                                        // ROM[15034]
@ R13                                        // ROM[15035]
M = D                                        // ROM[15036]
// ---------------------------
// Push RA
@ Output.initMap:107                         // ROM[15037]
D = A                                        // ROM[15038]
// ---------------------------
// push D
@ SP                                         // ROM[15039]
AM = M+1                                     // ROM[15040]
A = A-1                                      // ROM[15041]
M = D                                        // ROM[15042]
// ---------------------------
// call
@ Output.initMap:108                         // ROM[15043]
D = A                                        // ROM[15044]
@ R15                                        // ROM[15045]
M = D                                        // ROM[15046]
@ :call                                      // ROM[15047]
0; JMP                                       // ROM[15048]
( Output.initMap:108)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15049]
0; JMP                                       // ROM[15050]
// ---------------------------
// ( RA )
( Output.initMap:107) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15051]
AM = M-1                                     // ROM[15052]
D = M                                        // ROM[15053]
// ---------------------------
@ 5                                          // ROM[15054]
M = D                                        // ROM[15055]

// -------------------------------------
// PUSH: <constant, 81>
// -------------------------------------
@ 81                                         // ROM[15056]
D = A                                        // ROM[15057]
// ---------------------------
// push D
@ SP                                         // ROM[15058]
AM = M+1                                     // ROM[15059]
A = A-1                                      // ROM[15060]
M = D                                        // ROM[15061]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15062]
D = A                                        // ROM[15063]
// ---------------------------
// push D
@ SP                                         // ROM[15064]
AM = M+1                                     // ROM[15065]
A = A-1                                      // ROM[15066]
M = D                                        // ROM[15067]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15068]
D = A                                        // ROM[15069]
// ---------------------------
// push D
@ SP                                         // ROM[15070]
AM = M+1                                     // ROM[15071]
A = A-1                                      // ROM[15072]
M = D                                        // ROM[15073]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15074]
D = A                                        // ROM[15075]
// ---------------------------
// push D
@ SP                                         // ROM[15076]
AM = M+1                                     // ROM[15077]
A = A-1                                      // ROM[15078]
M = D                                        // ROM[15079]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15080]
D = A                                        // ROM[15081]
// ---------------------------
// push D
@ SP                                         // ROM[15082]
AM = M+1                                     // ROM[15083]
A = A-1                                      // ROM[15084]
M = D                                        // ROM[15085]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15086]
D = A                                        // ROM[15087]
// ---------------------------
// push D
@ SP                                         // ROM[15088]
AM = M+1                                     // ROM[15089]
A = A-1                                      // ROM[15090]
M = D                                        // ROM[15091]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15092]
D = A                                        // ROM[15093]
// ---------------------------
// push D
@ SP                                         // ROM[15094]
AM = M+1                                     // ROM[15095]
A = A-1                                      // ROM[15096]
M = D                                        // ROM[15097]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[15098]
D = A                                        // ROM[15099]
// ---------------------------
// push D
@ SP                                         // ROM[15100]
AM = M+1                                     // ROM[15101]
A = A-1                                      // ROM[15102]
M = D                                        // ROM[15103]

// -------------------------------------
// PUSH: <constant, 59>
// -------------------------------------
@ 59                                         // ROM[15104]
D = A                                        // ROM[15105]
// ---------------------------
// push D
@ SP                                         // ROM[15106]
AM = M+1                                     // ROM[15107]
A = A-1                                      // ROM[15108]
M = D                                        // ROM[15109]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15110]
D = A                                        // ROM[15111]
// ---------------------------
// push D
@ SP                                         // ROM[15112]
AM = M+1                                     // ROM[15113]
A = A-1                                      // ROM[15114]
M = D                                        // ROM[15115]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[15116]
D = A                                        // ROM[15117]
// ---------------------------
// push D
@ SP                                         // ROM[15118]
AM = M+1                                     // ROM[15119]
A = A-1                                      // ROM[15120]
M = D                                        // ROM[15121]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15122]
D = A                                        // ROM[15123]
// ---------------------------
// push D
@ SP                                         // ROM[15124]
AM = M+1                                     // ROM[15125]
A = A-1                                      // ROM[15126]
M = D                                        // ROM[15127]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15128]
D = A                                        // ROM[15129]
@ R13                                        // ROM[15130]
M = D                                        // ROM[15131]
// ---------------------------
// Push RA
@ Output.initMap:109                         // ROM[15132]
D = A                                        // ROM[15133]
// ---------------------------
// push D
@ SP                                         // ROM[15134]
AM = M+1                                     // ROM[15135]
A = A-1                                      // ROM[15136]
M = D                                        // ROM[15137]
// ---------------------------
// call
@ Output.initMap:110                         // ROM[15138]
D = A                                        // ROM[15139]
@ R15                                        // ROM[15140]
M = D                                        // ROM[15141]
@ :call                                      // ROM[15142]
0; JMP                                       // ROM[15143]
( Output.initMap:110)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15144]
0; JMP                                       // ROM[15145]
// ---------------------------
// ( RA )
( Output.initMap:109) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15146]
AM = M-1                                     // ROM[15147]
D = M                                        // ROM[15148]
// ---------------------------
@ 5                                          // ROM[15149]
M = D                                        // ROM[15150]

// -------------------------------------
// PUSH: <constant, 82>
// -------------------------------------
@ 82                                         // ROM[15151]
D = A                                        // ROM[15152]
// ---------------------------
// push D
@ SP                                         // ROM[15153]
AM = M+1                                     // ROM[15154]
A = A-1                                      // ROM[15155]
M = D                                        // ROM[15156]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[15157]
D = A                                        // ROM[15158]
// ---------------------------
// push D
@ SP                                         // ROM[15159]
AM = M+1                                     // ROM[15160]
A = A-1                                      // ROM[15161]
M = D                                        // ROM[15162]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15163]
D = A                                        // ROM[15164]
// ---------------------------
// push D
@ SP                                         // ROM[15165]
AM = M+1                                     // ROM[15166]
A = A-1                                      // ROM[15167]
M = D                                        // ROM[15168]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15169]
D = A                                        // ROM[15170]
// ---------------------------
// push D
@ SP                                         // ROM[15171]
AM = M+1                                     // ROM[15172]
A = A-1                                      // ROM[15173]
M = D                                        // ROM[15174]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15175]
D = A                                        // ROM[15176]
// ---------------------------
// push D
@ SP                                         // ROM[15177]
AM = M+1                                     // ROM[15178]
A = A-1                                      // ROM[15179]
M = D                                        // ROM[15180]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[15181]
D = A                                        // ROM[15182]
// ---------------------------
// push D
@ SP                                         // ROM[15183]
AM = M+1                                     // ROM[15184]
A = A-1                                      // ROM[15185]
M = D                                        // ROM[15186]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[15187]
D = A                                        // ROM[15188]
// ---------------------------
// push D
@ SP                                         // ROM[15189]
AM = M+1                                     // ROM[15190]
A = A-1                                      // ROM[15191]
M = D                                        // ROM[15192]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15193]
D = A                                        // ROM[15194]
// ---------------------------
// push D
@ SP                                         // ROM[15195]
AM = M+1                                     // ROM[15196]
A = A-1                                      // ROM[15197]
M = D                                        // ROM[15198]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15199]
D = A                                        // ROM[15200]
// ---------------------------
// push D
@ SP                                         // ROM[15201]
AM = M+1                                     // ROM[15202]
A = A-1                                      // ROM[15203]
M = D                                        // ROM[15204]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15205]
D = A                                        // ROM[15206]
// ---------------------------
// push D
@ SP                                         // ROM[15207]
AM = M+1                                     // ROM[15208]
A = A-1                                      // ROM[15209]
M = D                                        // ROM[15210]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15211]
D = A                                        // ROM[15212]
// ---------------------------
// push D
@ SP                                         // ROM[15213]
AM = M+1                                     // ROM[15214]
A = A-1                                      // ROM[15215]
M = D                                        // ROM[15216]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15217]
D = A                                        // ROM[15218]
// ---------------------------
// push D
@ SP                                         // ROM[15219]
AM = M+1                                     // ROM[15220]
A = A-1                                      // ROM[15221]
M = D                                        // ROM[15222]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15223]
D = A                                        // ROM[15224]
@ R13                                        // ROM[15225]
M = D                                        // ROM[15226]
// ---------------------------
// Push RA
@ Output.initMap:111                         // ROM[15227]
D = A                                        // ROM[15228]
// ---------------------------
// push D
@ SP                                         // ROM[15229]
AM = M+1                                     // ROM[15230]
A = A-1                                      // ROM[15231]
M = D                                        // ROM[15232]
// ---------------------------
// call
@ Output.initMap:112                         // ROM[15233]
D = A                                        // ROM[15234]
@ R15                                        // ROM[15235]
M = D                                        // ROM[15236]
@ :call                                      // ROM[15237]
0; JMP                                       // ROM[15238]
( Output.initMap:112)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15239]
0; JMP                                       // ROM[15240]
// ---------------------------
// ( RA )
( Output.initMap:111) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15241]
AM = M-1                                     // ROM[15242]
D = M                                        // ROM[15243]
// ---------------------------
@ 5                                          // ROM[15244]
M = D                                        // ROM[15245]

// -------------------------------------
// PUSH: <constant, 83>
// -------------------------------------
@ 83                                         // ROM[15246]
D = A                                        // ROM[15247]
// ---------------------------
// push D
@ SP                                         // ROM[15248]
AM = M+1                                     // ROM[15249]
A = A-1                                      // ROM[15250]
M = D                                        // ROM[15251]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15252]
D = A                                        // ROM[15253]
// ---------------------------
// push D
@ SP                                         // ROM[15254]
AM = M+1                                     // ROM[15255]
A = A-1                                      // ROM[15256]
M = D                                        // ROM[15257]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15258]
D = A                                        // ROM[15259]
// ---------------------------
// push D
@ SP                                         // ROM[15260]
AM = M+1                                     // ROM[15261]
A = A-1                                      // ROM[15262]
M = D                                        // ROM[15263]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15264]
D = A                                        // ROM[15265]
// ---------------------------
// push D
@ SP                                         // ROM[15266]
AM = M+1                                     // ROM[15267]
A = A-1                                      // ROM[15268]
M = D                                        // ROM[15269]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[15270]
D = A                                        // ROM[15271]
// ---------------------------
// push D
@ SP                                         // ROM[15272]
AM = M+1                                     // ROM[15273]
A = A-1                                      // ROM[15274]
M = D                                        // ROM[15275]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[15276]
D = A                                        // ROM[15277]
// ---------------------------
// push D
@ SP                                         // ROM[15278]
AM = M+1                                     // ROM[15279]
A = A-1                                      // ROM[15280]
M = D                                        // ROM[15281]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[15282]
D = A                                        // ROM[15283]
// ---------------------------
// push D
@ SP                                         // ROM[15284]
AM = M+1                                     // ROM[15285]
A = A-1                                      // ROM[15286]
M = D                                        // ROM[15287]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15288]
D = A                                        // ROM[15289]
// ---------------------------
// push D
@ SP                                         // ROM[15290]
AM = M+1                                     // ROM[15291]
A = A-1                                      // ROM[15292]
M = D                                        // ROM[15293]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15294]
D = A                                        // ROM[15295]
// ---------------------------
// push D
@ SP                                         // ROM[15296]
AM = M+1                                     // ROM[15297]
A = A-1                                      // ROM[15298]
M = D                                        // ROM[15299]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15300]
D = A                                        // ROM[15301]
// ---------------------------
// push D
@ SP                                         // ROM[15302]
AM = M+1                                     // ROM[15303]
A = A-1                                      // ROM[15304]
M = D                                        // ROM[15305]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15306]
D = A                                        // ROM[15307]
// ---------------------------
// push D
@ SP                                         // ROM[15308]
AM = M+1                                     // ROM[15309]
A = A-1                                      // ROM[15310]
M = D                                        // ROM[15311]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15312]
D = A                                        // ROM[15313]
// ---------------------------
// push D
@ SP                                         // ROM[15314]
AM = M+1                                     // ROM[15315]
A = A-1                                      // ROM[15316]
M = D                                        // ROM[15317]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15318]
D = A                                        // ROM[15319]
@ R13                                        // ROM[15320]
M = D                                        // ROM[15321]
// ---------------------------
// Push RA
@ Output.initMap:113                         // ROM[15322]
D = A                                        // ROM[15323]
// ---------------------------
// push D
@ SP                                         // ROM[15324]
AM = M+1                                     // ROM[15325]
A = A-1                                      // ROM[15326]
M = D                                        // ROM[15327]
// ---------------------------
// call
@ Output.initMap:114                         // ROM[15328]
D = A                                        // ROM[15329]
@ R15                                        // ROM[15330]
M = D                                        // ROM[15331]
@ :call                                      // ROM[15332]
0; JMP                                       // ROM[15333]
( Output.initMap:114)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15334]
0; JMP                                       // ROM[15335]
// ---------------------------
// ( RA )
( Output.initMap:113) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15336]
AM = M-1                                     // ROM[15337]
D = M                                        // ROM[15338]
// ---------------------------
@ 5                                          // ROM[15339]
M = D                                        // ROM[15340]

// -------------------------------------
// PUSH: <constant, 84>
// -------------------------------------
@ 84                                         // ROM[15341]
D = A                                        // ROM[15342]
// ---------------------------
// push D
@ SP                                         // ROM[15343]
AM = M+1                                     // ROM[15344]
A = A-1                                      // ROM[15345]
M = D                                        // ROM[15346]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[15347]
D = A                                        // ROM[15348]
// ---------------------------
// push D
@ SP                                         // ROM[15349]
AM = M+1                                     // ROM[15350]
A = A-1                                      // ROM[15351]
M = D                                        // ROM[15352]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[15353]
D = A                                        // ROM[15354]
// ---------------------------
// push D
@ SP                                         // ROM[15355]
AM = M+1                                     // ROM[15356]
A = A-1                                      // ROM[15357]
M = D                                        // ROM[15358]

// -------------------------------------
// PUSH: <constant, 45>
// -------------------------------------
@ 45                                         // ROM[15359]
D = A                                        // ROM[15360]
// ---------------------------
// push D
@ SP                                         // ROM[15361]
AM = M+1                                     // ROM[15362]
A = A-1                                      // ROM[15363]
M = D                                        // ROM[15364]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15365]
D = A                                        // ROM[15366]
// ---------------------------
// push D
@ SP                                         // ROM[15367]
AM = M+1                                     // ROM[15368]
A = A-1                                      // ROM[15369]
M = D                                        // ROM[15370]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15371]
D = A                                        // ROM[15372]
// ---------------------------
// push D
@ SP                                         // ROM[15373]
AM = M+1                                     // ROM[15374]
A = A-1                                      // ROM[15375]
M = D                                        // ROM[15376]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15377]
D = A                                        // ROM[15378]
// ---------------------------
// push D
@ SP                                         // ROM[15379]
AM = M+1                                     // ROM[15380]
A = A-1                                      // ROM[15381]
M = D                                        // ROM[15382]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15383]
D = A                                        // ROM[15384]
// ---------------------------
// push D
@ SP                                         // ROM[15385]
AM = M+1                                     // ROM[15386]
A = A-1                                      // ROM[15387]
M = D                                        // ROM[15388]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15389]
D = A                                        // ROM[15390]
// ---------------------------
// push D
@ SP                                         // ROM[15391]
AM = M+1                                     // ROM[15392]
A = A-1                                      // ROM[15393]
M = D                                        // ROM[15394]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15395]
D = A                                        // ROM[15396]
// ---------------------------
// push D
@ SP                                         // ROM[15397]
AM = M+1                                     // ROM[15398]
A = A-1                                      // ROM[15399]
M = D                                        // ROM[15400]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15401]
D = A                                        // ROM[15402]
// ---------------------------
// push D
@ SP                                         // ROM[15403]
AM = M+1                                     // ROM[15404]
A = A-1                                      // ROM[15405]
M = D                                        // ROM[15406]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15407]
D = A                                        // ROM[15408]
// ---------------------------
// push D
@ SP                                         // ROM[15409]
AM = M+1                                     // ROM[15410]
A = A-1                                      // ROM[15411]
M = D                                        // ROM[15412]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15413]
D = A                                        // ROM[15414]
@ R13                                        // ROM[15415]
M = D                                        // ROM[15416]
// ---------------------------
// Push RA
@ Output.initMap:115                         // ROM[15417]
D = A                                        // ROM[15418]
// ---------------------------
// push D
@ SP                                         // ROM[15419]
AM = M+1                                     // ROM[15420]
A = A-1                                      // ROM[15421]
M = D                                        // ROM[15422]
// ---------------------------
// call
@ Output.initMap:116                         // ROM[15423]
D = A                                        // ROM[15424]
@ R15                                        // ROM[15425]
M = D                                        // ROM[15426]
@ :call                                      // ROM[15427]
0; JMP                                       // ROM[15428]
( Output.initMap:116)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15429]
0; JMP                                       // ROM[15430]
// ---------------------------
// ( RA )
( Output.initMap:115) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15431]
AM = M-1                                     // ROM[15432]
D = M                                        // ROM[15433]
// ---------------------------
@ 5                                          // ROM[15434]
M = D                                        // ROM[15435]

// -------------------------------------
// PUSH: <constant, 85>
// -------------------------------------
@ 85                                         // ROM[15436]
D = A                                        // ROM[15437]
// ---------------------------
// push D
@ SP                                         // ROM[15438]
AM = M+1                                     // ROM[15439]
A = A-1                                      // ROM[15440]
M = D                                        // ROM[15441]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15442]
D = A                                        // ROM[15443]
// ---------------------------
// push D
@ SP                                         // ROM[15444]
AM = M+1                                     // ROM[15445]
A = A-1                                      // ROM[15446]
M = D                                        // ROM[15447]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15448]
D = A                                        // ROM[15449]
// ---------------------------
// push D
@ SP                                         // ROM[15450]
AM = M+1                                     // ROM[15451]
A = A-1                                      // ROM[15452]
M = D                                        // ROM[15453]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15454]
D = A                                        // ROM[15455]
// ---------------------------
// push D
@ SP                                         // ROM[15456]
AM = M+1                                     // ROM[15457]
A = A-1                                      // ROM[15458]
M = D                                        // ROM[15459]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15460]
D = A                                        // ROM[15461]
// ---------------------------
// push D
@ SP                                         // ROM[15462]
AM = M+1                                     // ROM[15463]
A = A-1                                      // ROM[15464]
M = D                                        // ROM[15465]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15466]
D = A                                        // ROM[15467]
// ---------------------------
// push D
@ SP                                         // ROM[15468]
AM = M+1                                     // ROM[15469]
A = A-1                                      // ROM[15470]
M = D                                        // ROM[15471]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15472]
D = A                                        // ROM[15473]
// ---------------------------
// push D
@ SP                                         // ROM[15474]
AM = M+1                                     // ROM[15475]
A = A-1                                      // ROM[15476]
M = D                                        // ROM[15477]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15478]
D = A                                        // ROM[15479]
// ---------------------------
// push D
@ SP                                         // ROM[15480]
AM = M+1                                     // ROM[15481]
A = A-1                                      // ROM[15482]
M = D                                        // ROM[15483]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15484]
D = A                                        // ROM[15485]
// ---------------------------
// push D
@ SP                                         // ROM[15486]
AM = M+1                                     // ROM[15487]
A = A-1                                      // ROM[15488]
M = D                                        // ROM[15489]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15490]
D = A                                        // ROM[15491]
// ---------------------------
// push D
@ SP                                         // ROM[15492]
AM = M+1                                     // ROM[15493]
A = A-1                                      // ROM[15494]
M = D                                        // ROM[15495]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15496]
D = A                                        // ROM[15497]
// ---------------------------
// push D
@ SP                                         // ROM[15498]
AM = M+1                                     // ROM[15499]
A = A-1                                      // ROM[15500]
M = D                                        // ROM[15501]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15502]
D = A                                        // ROM[15503]
// ---------------------------
// push D
@ SP                                         // ROM[15504]
AM = M+1                                     // ROM[15505]
A = A-1                                      // ROM[15506]
M = D                                        // ROM[15507]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15508]
D = A                                        // ROM[15509]
@ R13                                        // ROM[15510]
M = D                                        // ROM[15511]
// ---------------------------
// Push RA
@ Output.initMap:117                         // ROM[15512]
D = A                                        // ROM[15513]
// ---------------------------
// push D
@ SP                                         // ROM[15514]
AM = M+1                                     // ROM[15515]
A = A-1                                      // ROM[15516]
M = D                                        // ROM[15517]
// ---------------------------
// call
@ Output.initMap:118                         // ROM[15518]
D = A                                        // ROM[15519]
@ R15                                        // ROM[15520]
M = D                                        // ROM[15521]
@ :call                                      // ROM[15522]
0; JMP                                       // ROM[15523]
( Output.initMap:118)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15524]
0; JMP                                       // ROM[15525]
// ---------------------------
// ( RA )
( Output.initMap:117) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15526]
AM = M-1                                     // ROM[15527]
D = M                                        // ROM[15528]
// ---------------------------
@ 5                                          // ROM[15529]
M = D                                        // ROM[15530]

// -------------------------------------
// PUSH: <constant, 86>
// -------------------------------------
@ 86                                         // ROM[15531]
D = A                                        // ROM[15532]
// ---------------------------
// push D
@ SP                                         // ROM[15533]
AM = M+1                                     // ROM[15534]
A = A-1                                      // ROM[15535]
M = D                                        // ROM[15536]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15537]
D = A                                        // ROM[15538]
// ---------------------------
// push D
@ SP                                         // ROM[15539]
AM = M+1                                     // ROM[15540]
A = A-1                                      // ROM[15541]
M = D                                        // ROM[15542]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15543]
D = A                                        // ROM[15544]
// ---------------------------
// push D
@ SP                                         // ROM[15545]
AM = M+1                                     // ROM[15546]
A = A-1                                      // ROM[15547]
M = D                                        // ROM[15548]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15549]
D = A                                        // ROM[15550]
// ---------------------------
// push D
@ SP                                         // ROM[15551]
AM = M+1                                     // ROM[15552]
A = A-1                                      // ROM[15553]
M = D                                        // ROM[15554]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15555]
D = A                                        // ROM[15556]
// ---------------------------
// push D
@ SP                                         // ROM[15557]
AM = M+1                                     // ROM[15558]
A = A-1                                      // ROM[15559]
M = D                                        // ROM[15560]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15561]
D = A                                        // ROM[15562]
// ---------------------------
// push D
@ SP                                         // ROM[15563]
AM = M+1                                     // ROM[15564]
A = A-1                                      // ROM[15565]
M = D                                        // ROM[15566]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15567]
D = A                                        // ROM[15568]
// ---------------------------
// push D
@ SP                                         // ROM[15569]
AM = M+1                                     // ROM[15570]
A = A-1                                      // ROM[15571]
M = D                                        // ROM[15572]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15573]
D = A                                        // ROM[15574]
// ---------------------------
// push D
@ SP                                         // ROM[15575]
AM = M+1                                     // ROM[15576]
A = A-1                                      // ROM[15577]
M = D                                        // ROM[15578]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15579]
D = A                                        // ROM[15580]
// ---------------------------
// push D
@ SP                                         // ROM[15581]
AM = M+1                                     // ROM[15582]
A = A-1                                      // ROM[15583]
M = D                                        // ROM[15584]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15585]
D = A                                        // ROM[15586]
// ---------------------------
// push D
@ SP                                         // ROM[15587]
AM = M+1                                     // ROM[15588]
A = A-1                                      // ROM[15589]
M = D                                        // ROM[15590]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15591]
D = A                                        // ROM[15592]
// ---------------------------
// push D
@ SP                                         // ROM[15593]
AM = M+1                                     // ROM[15594]
A = A-1                                      // ROM[15595]
M = D                                        // ROM[15596]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15597]
D = A                                        // ROM[15598]
// ---------------------------
// push D
@ SP                                         // ROM[15599]
AM = M+1                                     // ROM[15600]
A = A-1                                      // ROM[15601]
M = D                                        // ROM[15602]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15603]
D = A                                        // ROM[15604]
@ R13                                        // ROM[15605]
M = D                                        // ROM[15606]
// ---------------------------
// Push RA
@ Output.initMap:119                         // ROM[15607]
D = A                                        // ROM[15608]
// ---------------------------
// push D
@ SP                                         // ROM[15609]
AM = M+1                                     // ROM[15610]
A = A-1                                      // ROM[15611]
M = D                                        // ROM[15612]
// ---------------------------
// call
@ Output.initMap:120                         // ROM[15613]
D = A                                        // ROM[15614]
@ R15                                        // ROM[15615]
M = D                                        // ROM[15616]
@ :call                                      // ROM[15617]
0; JMP                                       // ROM[15618]
( Output.initMap:120)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15619]
0; JMP                                       // ROM[15620]
// ---------------------------
// ( RA )
( Output.initMap:119) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15621]
AM = M-1                                     // ROM[15622]
D = M                                        // ROM[15623]
// ---------------------------
@ 5                                          // ROM[15624]
M = D                                        // ROM[15625]

// -------------------------------------
// PUSH: <constant, 87>
// -------------------------------------
@ 87                                         // ROM[15626]
D = A                                        // ROM[15627]
// ---------------------------
// push D
@ SP                                         // ROM[15628]
AM = M+1                                     // ROM[15629]
A = A-1                                      // ROM[15630]
M = D                                        // ROM[15631]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15632]
D = A                                        // ROM[15633]
// ---------------------------
// push D
@ SP                                         // ROM[15634]
AM = M+1                                     // ROM[15635]
A = A-1                                      // ROM[15636]
M = D                                        // ROM[15637]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15638]
D = A                                        // ROM[15639]
// ---------------------------
// push D
@ SP                                         // ROM[15640]
AM = M+1                                     // ROM[15641]
A = A-1                                      // ROM[15642]
M = D                                        // ROM[15643]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15644]
D = A                                        // ROM[15645]
// ---------------------------
// push D
@ SP                                         // ROM[15646]
AM = M+1                                     // ROM[15647]
A = A-1                                      // ROM[15648]
M = D                                        // ROM[15649]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15650]
D = A                                        // ROM[15651]
// ---------------------------
// push D
@ SP                                         // ROM[15652]
AM = M+1                                     // ROM[15653]
A = A-1                                      // ROM[15654]
M = D                                        // ROM[15655]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15656]
D = A                                        // ROM[15657]
// ---------------------------
// push D
@ SP                                         // ROM[15658]
AM = M+1                                     // ROM[15659]
A = A-1                                      // ROM[15660]
M = D                                        // ROM[15661]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[15662]
D = A                                        // ROM[15663]
// ---------------------------
// push D
@ SP                                         // ROM[15664]
AM = M+1                                     // ROM[15665]
A = A-1                                      // ROM[15666]
M = D                                        // ROM[15667]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[15668]
D = A                                        // ROM[15669]
// ---------------------------
// push D
@ SP                                         // ROM[15670]
AM = M+1                                     // ROM[15671]
A = A-1                                      // ROM[15672]
M = D                                        // ROM[15673]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[15674]
D = A                                        // ROM[15675]
// ---------------------------
// push D
@ SP                                         // ROM[15676]
AM = M+1                                     // ROM[15677]
A = A-1                                      // ROM[15678]
M = D                                        // ROM[15679]

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[15680]
D = A                                        // ROM[15681]
// ---------------------------
// push D
@ SP                                         // ROM[15682]
AM = M+1                                     // ROM[15683]
A = A-1                                      // ROM[15684]
M = D                                        // ROM[15685]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15686]
D = A                                        // ROM[15687]
// ---------------------------
// push D
@ SP                                         // ROM[15688]
AM = M+1                                     // ROM[15689]
A = A-1                                      // ROM[15690]
M = D                                        // ROM[15691]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15692]
D = A                                        // ROM[15693]
// ---------------------------
// push D
@ SP                                         // ROM[15694]
AM = M+1                                     // ROM[15695]
A = A-1                                      // ROM[15696]
M = D                                        // ROM[15697]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15698]
D = A                                        // ROM[15699]
@ R13                                        // ROM[15700]
M = D                                        // ROM[15701]
// ---------------------------
// Push RA
@ Output.initMap:121                         // ROM[15702]
D = A                                        // ROM[15703]
// ---------------------------
// push D
@ SP                                         // ROM[15704]
AM = M+1                                     // ROM[15705]
A = A-1                                      // ROM[15706]
M = D                                        // ROM[15707]
// ---------------------------
// call
@ Output.initMap:122                         // ROM[15708]
D = A                                        // ROM[15709]
@ R15                                        // ROM[15710]
M = D                                        // ROM[15711]
@ :call                                      // ROM[15712]
0; JMP                                       // ROM[15713]
( Output.initMap:122)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15714]
0; JMP                                       // ROM[15715]
// ---------------------------
// ( RA )
( Output.initMap:121) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15716]
AM = M-1                                     // ROM[15717]
D = M                                        // ROM[15718]
// ---------------------------
@ 5                                          // ROM[15719]
M = D                                        // ROM[15720]

// -------------------------------------
// PUSH: <constant, 88>
// -------------------------------------
@ 88                                         // ROM[15721]
D = A                                        // ROM[15722]
// ---------------------------
// push D
@ SP                                         // ROM[15723]
AM = M+1                                     // ROM[15724]
A = A-1                                      // ROM[15725]
M = D                                        // ROM[15726]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15727]
D = A                                        // ROM[15728]
// ---------------------------
// push D
@ SP                                         // ROM[15729]
AM = M+1                                     // ROM[15730]
A = A-1                                      // ROM[15731]
M = D                                        // ROM[15732]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15733]
D = A                                        // ROM[15734]
// ---------------------------
// push D
@ SP                                         // ROM[15735]
AM = M+1                                     // ROM[15736]
A = A-1                                      // ROM[15737]
M = D                                        // ROM[15738]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15739]
D = A                                        // ROM[15740]
// ---------------------------
// push D
@ SP                                         // ROM[15741]
AM = M+1                                     // ROM[15742]
A = A-1                                      // ROM[15743]
M = D                                        // ROM[15744]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15745]
D = A                                        // ROM[15746]
// ---------------------------
// push D
@ SP                                         // ROM[15747]
AM = M+1                                     // ROM[15748]
A = A-1                                      // ROM[15749]
M = D                                        // ROM[15750]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15751]
D = A                                        // ROM[15752]
// ---------------------------
// push D
@ SP                                         // ROM[15753]
AM = M+1                                     // ROM[15754]
A = A-1                                      // ROM[15755]
M = D                                        // ROM[15756]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15757]
D = A                                        // ROM[15758]
// ---------------------------
// push D
@ SP                                         // ROM[15759]
AM = M+1                                     // ROM[15760]
A = A-1                                      // ROM[15761]
M = D                                        // ROM[15762]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15763]
D = A                                        // ROM[15764]
// ---------------------------
// push D
@ SP                                         // ROM[15765]
AM = M+1                                     // ROM[15766]
A = A-1                                      // ROM[15767]
M = D                                        // ROM[15768]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15769]
D = A                                        // ROM[15770]
// ---------------------------
// push D
@ SP                                         // ROM[15771]
AM = M+1                                     // ROM[15772]
A = A-1                                      // ROM[15773]
M = D                                        // ROM[15774]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15775]
D = A                                        // ROM[15776]
// ---------------------------
// push D
@ SP                                         // ROM[15777]
AM = M+1                                     // ROM[15778]
A = A-1                                      // ROM[15779]
M = D                                        // ROM[15780]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15781]
D = A                                        // ROM[15782]
// ---------------------------
// push D
@ SP                                         // ROM[15783]
AM = M+1                                     // ROM[15784]
A = A-1                                      // ROM[15785]
M = D                                        // ROM[15786]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15787]
D = A                                        // ROM[15788]
// ---------------------------
// push D
@ SP                                         // ROM[15789]
AM = M+1                                     // ROM[15790]
A = A-1                                      // ROM[15791]
M = D                                        // ROM[15792]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15793]
D = A                                        // ROM[15794]
@ R13                                        // ROM[15795]
M = D                                        // ROM[15796]
// ---------------------------
// Push RA
@ Output.initMap:123                         // ROM[15797]
D = A                                        // ROM[15798]
// ---------------------------
// push D
@ SP                                         // ROM[15799]
AM = M+1                                     // ROM[15800]
A = A-1                                      // ROM[15801]
M = D                                        // ROM[15802]
// ---------------------------
// call
@ Output.initMap:124                         // ROM[15803]
D = A                                        // ROM[15804]
@ R15                                        // ROM[15805]
M = D                                        // ROM[15806]
@ :call                                      // ROM[15807]
0; JMP                                       // ROM[15808]
( Output.initMap:124)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15809]
0; JMP                                       // ROM[15810]
// ---------------------------
// ( RA )
( Output.initMap:123) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15811]
AM = M-1                                     // ROM[15812]
D = M                                        // ROM[15813]
// ---------------------------
@ 5                                          // ROM[15814]
M = D                                        // ROM[15815]

// -------------------------------------
// PUSH: <constant, 89>
// -------------------------------------
@ 89                                         // ROM[15816]
D = A                                        // ROM[15817]
// ---------------------------
// push D
@ SP                                         // ROM[15818]
AM = M+1                                     // ROM[15819]
A = A-1                                      // ROM[15820]
M = D                                        // ROM[15821]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15822]
D = A                                        // ROM[15823]
// ---------------------------
// push D
@ SP                                         // ROM[15824]
AM = M+1                                     // ROM[15825]
A = A-1                                      // ROM[15826]
M = D                                        // ROM[15827]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15828]
D = A                                        // ROM[15829]
// ---------------------------
// push D
@ SP                                         // ROM[15830]
AM = M+1                                     // ROM[15831]
A = A-1                                      // ROM[15832]
M = D                                        // ROM[15833]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15834]
D = A                                        // ROM[15835]
// ---------------------------
// push D
@ SP                                         // ROM[15836]
AM = M+1                                     // ROM[15837]
A = A-1                                      // ROM[15838]
M = D                                        // ROM[15839]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15840]
D = A                                        // ROM[15841]
// ---------------------------
// push D
@ SP                                         // ROM[15842]
AM = M+1                                     // ROM[15843]
A = A-1                                      // ROM[15844]
M = D                                        // ROM[15845]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15846]
D = A                                        // ROM[15847]
// ---------------------------
// push D
@ SP                                         // ROM[15848]
AM = M+1                                     // ROM[15849]
A = A-1                                      // ROM[15850]
M = D                                        // ROM[15851]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15852]
D = A                                        // ROM[15853]
// ---------------------------
// push D
@ SP                                         // ROM[15854]
AM = M+1                                     // ROM[15855]
A = A-1                                      // ROM[15856]
M = D                                        // ROM[15857]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15858]
D = A                                        // ROM[15859]
// ---------------------------
// push D
@ SP                                         // ROM[15860]
AM = M+1                                     // ROM[15861]
A = A-1                                      // ROM[15862]
M = D                                        // ROM[15863]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15864]
D = A                                        // ROM[15865]
// ---------------------------
// push D
@ SP                                         // ROM[15866]
AM = M+1                                     // ROM[15867]
A = A-1                                      // ROM[15868]
M = D                                        // ROM[15869]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[15870]
D = A                                        // ROM[15871]
// ---------------------------
// push D
@ SP                                         // ROM[15872]
AM = M+1                                     // ROM[15873]
A = A-1                                      // ROM[15874]
M = D                                        // ROM[15875]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15876]
D = A                                        // ROM[15877]
// ---------------------------
// push D
@ SP                                         // ROM[15878]
AM = M+1                                     // ROM[15879]
A = A-1                                      // ROM[15880]
M = D                                        // ROM[15881]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15882]
D = A                                        // ROM[15883]
// ---------------------------
// push D
@ SP                                         // ROM[15884]
AM = M+1                                     // ROM[15885]
A = A-1                                      // ROM[15886]
M = D                                        // ROM[15887]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15888]
D = A                                        // ROM[15889]
@ R13                                        // ROM[15890]
M = D                                        // ROM[15891]
// ---------------------------
// Push RA
@ Output.initMap:125                         // ROM[15892]
D = A                                        // ROM[15893]
// ---------------------------
// push D
@ SP                                         // ROM[15894]
AM = M+1                                     // ROM[15895]
A = A-1                                      // ROM[15896]
M = D                                        // ROM[15897]
// ---------------------------
// call
@ Output.initMap:126                         // ROM[15898]
D = A                                        // ROM[15899]
@ R15                                        // ROM[15900]
M = D                                        // ROM[15901]
@ :call                                      // ROM[15902]
0; JMP                                       // ROM[15903]
( Output.initMap:126)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15904]
0; JMP                                       // ROM[15905]
// ---------------------------
// ( RA )
( Output.initMap:125) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[15906]
AM = M-1                                     // ROM[15907]
D = M                                        // ROM[15908]
// ---------------------------
@ 5                                          // ROM[15909]
M = D                                        // ROM[15910]

// -------------------------------------
// PUSH: <constant, 90>
// -------------------------------------
@ 90                                         // ROM[15911]
D = A                                        // ROM[15912]
// ---------------------------
// push D
@ SP                                         // ROM[15913]
AM = M+1                                     // ROM[15914]
A = A-1                                      // ROM[15915]
M = D                                        // ROM[15916]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[15917]
D = A                                        // ROM[15918]
// ---------------------------
// push D
@ SP                                         // ROM[15919]
AM = M+1                                     // ROM[15920]
A = A-1                                      // ROM[15921]
M = D                                        // ROM[15922]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15923]
D = A                                        // ROM[15924]
// ---------------------------
// push D
@ SP                                         // ROM[15925]
AM = M+1                                     // ROM[15926]
A = A-1                                      // ROM[15927]
M = D                                        // ROM[15928]

// -------------------------------------
// PUSH: <constant, 49>
// -------------------------------------
@ 49                                         // ROM[15929]
D = A                                        // ROM[15930]
// ---------------------------
// push D
@ SP                                         // ROM[15931]
AM = M+1                                     // ROM[15932]
A = A-1                                      // ROM[15933]
M = D                                        // ROM[15934]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[15935]
D = A                                        // ROM[15936]
// ---------------------------
// push D
@ SP                                         // ROM[15937]
AM = M+1                                     // ROM[15938]
A = A-1                                      // ROM[15939]
M = D                                        // ROM[15940]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[15941]
D = A                                        // ROM[15942]
// ---------------------------
// push D
@ SP                                         // ROM[15943]
AM = M+1                                     // ROM[15944]
A = A-1                                      // ROM[15945]
M = D                                        // ROM[15946]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[15947]
D = A                                        // ROM[15948]
// ---------------------------
// push D
@ SP                                         // ROM[15949]
AM = M+1                                     // ROM[15950]
A = A-1                                      // ROM[15951]
M = D                                        // ROM[15952]

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[15953]
D = A                                        // ROM[15954]
// ---------------------------
// push D
@ SP                                         // ROM[15955]
AM = M+1                                     // ROM[15956]
A = A-1                                      // ROM[15957]
M = D                                        // ROM[15958]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[15959]
D = A                                        // ROM[15960]
// ---------------------------
// push D
@ SP                                         // ROM[15961]
AM = M+1                                     // ROM[15962]
A = A-1                                      // ROM[15963]
M = D                                        // ROM[15964]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[15965]
D = A                                        // ROM[15966]
// ---------------------------
// push D
@ SP                                         // ROM[15967]
AM = M+1                                     // ROM[15968]
A = A-1                                      // ROM[15969]
M = D                                        // ROM[15970]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15971]
D = A                                        // ROM[15972]
// ---------------------------
// push D
@ SP                                         // ROM[15973]
AM = M+1                                     // ROM[15974]
A = A-1                                      // ROM[15975]
M = D                                        // ROM[15976]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[15977]
D = A                                        // ROM[15978]
// ---------------------------
// push D
@ SP                                         // ROM[15979]
AM = M+1                                     // ROM[15980]
A = A-1                                      // ROM[15981]
M = D                                        // ROM[15982]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[15983]
D = A                                        // ROM[15984]
@ R13                                        // ROM[15985]
M = D                                        // ROM[15986]
// ---------------------------
// Push RA
@ Output.initMap:127                         // ROM[15987]
D = A                                        // ROM[15988]
// ---------------------------
// push D
@ SP                                         // ROM[15989]
AM = M+1                                     // ROM[15990]
A = A-1                                      // ROM[15991]
M = D                                        // ROM[15992]
// ---------------------------
// call
@ Output.initMap:128                         // ROM[15993]
D = A                                        // ROM[15994]
@ R15                                        // ROM[15995]
M = D                                        // ROM[15996]
@ :call                                      // ROM[15997]
0; JMP                                       // ROM[15998]
( Output.initMap:128)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[15999]
0; JMP                                       // ROM[16000]
// ---------------------------
// ( RA )
( Output.initMap:127) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16001]
AM = M-1                                     // ROM[16002]
D = M                                        // ROM[16003]
// ---------------------------
@ 5                                          // ROM[16004]
M = D                                        // ROM[16005]

// -------------------------------------
// PUSH: <constant, 91>
// -------------------------------------
@ 91                                         // ROM[16006]
D = A                                        // ROM[16007]
// ---------------------------
// push D
@ SP                                         // ROM[16008]
AM = M+1                                     // ROM[16009]
A = A-1                                      // ROM[16010]
M = D                                        // ROM[16011]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16012]
D = A                                        // ROM[16013]
// ---------------------------
// push D
@ SP                                         // ROM[16014]
AM = M+1                                     // ROM[16015]
A = A-1                                      // ROM[16016]
M = D                                        // ROM[16017]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16018]
D = A                                        // ROM[16019]
// ---------------------------
// push D
@ SP                                         // ROM[16020]
AM = M+1                                     // ROM[16021]
A = A-1                                      // ROM[16022]
M = D                                        // ROM[16023]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16024]
D = A                                        // ROM[16025]
// ---------------------------
// push D
@ SP                                         // ROM[16026]
AM = M+1                                     // ROM[16027]
A = A-1                                      // ROM[16028]
M = D                                        // ROM[16029]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16030]
D = A                                        // ROM[16031]
// ---------------------------
// push D
@ SP                                         // ROM[16032]
AM = M+1                                     // ROM[16033]
A = A-1                                      // ROM[16034]
M = D                                        // ROM[16035]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16036]
D = A                                        // ROM[16037]
// ---------------------------
// push D
@ SP                                         // ROM[16038]
AM = M+1                                     // ROM[16039]
A = A-1                                      // ROM[16040]
M = D                                        // ROM[16041]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16042]
D = A                                        // ROM[16043]
// ---------------------------
// push D
@ SP                                         // ROM[16044]
AM = M+1                                     // ROM[16045]
A = A-1                                      // ROM[16046]
M = D                                        // ROM[16047]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16048]
D = A                                        // ROM[16049]
// ---------------------------
// push D
@ SP                                         // ROM[16050]
AM = M+1                                     // ROM[16051]
A = A-1                                      // ROM[16052]
M = D                                        // ROM[16053]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16054]
D = A                                        // ROM[16055]
// ---------------------------
// push D
@ SP                                         // ROM[16056]
AM = M+1                                     // ROM[16057]
A = A-1                                      // ROM[16058]
M = D                                        // ROM[16059]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16060]
D = A                                        // ROM[16061]
// ---------------------------
// push D
@ SP                                         // ROM[16062]
AM = M+1                                     // ROM[16063]
A = A-1                                      // ROM[16064]
M = D                                        // ROM[16065]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16066]
D = A                                        // ROM[16067]
// ---------------------------
// push D
@ SP                                         // ROM[16068]
AM = M+1                                     // ROM[16069]
A = A-1                                      // ROM[16070]
M = D                                        // ROM[16071]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16072]
D = A                                        // ROM[16073]
// ---------------------------
// push D
@ SP                                         // ROM[16074]
AM = M+1                                     // ROM[16075]
A = A-1                                      // ROM[16076]
M = D                                        // ROM[16077]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16078]
D = A                                        // ROM[16079]
@ R13                                        // ROM[16080]
M = D                                        // ROM[16081]
// ---------------------------
// Push RA
@ Output.initMap:129                         // ROM[16082]
D = A                                        // ROM[16083]
// ---------------------------
// push D
@ SP                                         // ROM[16084]
AM = M+1                                     // ROM[16085]
A = A-1                                      // ROM[16086]
M = D                                        // ROM[16087]
// ---------------------------
// call
@ Output.initMap:130                         // ROM[16088]
D = A                                        // ROM[16089]
@ R15                                        // ROM[16090]
M = D                                        // ROM[16091]
@ :call                                      // ROM[16092]
0; JMP                                       // ROM[16093]
( Output.initMap:130)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16094]
0; JMP                                       // ROM[16095]
// ---------------------------
// ( RA )
( Output.initMap:129) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16096]
AM = M-1                                     // ROM[16097]
D = M                                        // ROM[16098]
// ---------------------------
@ 5                                          // ROM[16099]
M = D                                        // ROM[16100]

// -------------------------------------
// PUSH: <constant, 92>
// -------------------------------------
@ 92                                         // ROM[16101]
D = A                                        // ROM[16102]
// ---------------------------
// push D
@ SP                                         // ROM[16103]
AM = M+1                                     // ROM[16104]
A = A-1                                      // ROM[16105]
M = D                                        // ROM[16106]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16107]
D = A                                        // ROM[16108]
// ---------------------------
// push D
@ SP                                         // ROM[16109]
AM = M+1                                     // ROM[16110]
A = A-1                                      // ROM[16111]
M = D                                        // ROM[16112]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16113]
D = A                                        // ROM[16114]
// ---------------------------
// push D
@ SP                                         // ROM[16115]
AM = M+1                                     // ROM[16116]
A = A-1                                      // ROM[16117]
M = D                                        // ROM[16118]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[16119]
D = A                                        // ROM[16120]
// ---------------------------
// push D
@ SP                                         // ROM[16121]
AM = M+1                                     // ROM[16122]
A = A-1                                      // ROM[16123]
M = D                                        // ROM[16124]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[16125]
D = A                                        // ROM[16126]
// ---------------------------
// push D
@ SP                                         // ROM[16127]
AM = M+1                                     // ROM[16128]
A = A-1                                      // ROM[16129]
M = D                                        // ROM[16130]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16131]
D = A                                        // ROM[16132]
// ---------------------------
// push D
@ SP                                         // ROM[16133]
AM = M+1                                     // ROM[16134]
A = A-1                                      // ROM[16135]
M = D                                        // ROM[16136]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[16137]
D = A                                        // ROM[16138]
// ---------------------------
// push D
@ SP                                         // ROM[16139]
AM = M+1                                     // ROM[16140]
A = A-1                                      // ROM[16141]
M = D                                        // ROM[16142]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16143]
D = A                                        // ROM[16144]
// ---------------------------
// push D
@ SP                                         // ROM[16145]
AM = M+1                                     // ROM[16146]
A = A-1                                      // ROM[16147]
M = D                                        // ROM[16148]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[16149]
D = A                                        // ROM[16150]
// ---------------------------
// push D
@ SP                                         // ROM[16151]
AM = M+1                                     // ROM[16152]
A = A-1                                      // ROM[16153]
M = D                                        // ROM[16154]

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[16155]
D = A                                        // ROM[16156]
// ---------------------------
// push D
@ SP                                         // ROM[16157]
AM = M+1                                     // ROM[16158]
A = A-1                                      // ROM[16159]
M = D                                        // ROM[16160]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16161]
D = A                                        // ROM[16162]
// ---------------------------
// push D
@ SP                                         // ROM[16163]
AM = M+1                                     // ROM[16164]
A = A-1                                      // ROM[16165]
M = D                                        // ROM[16166]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16167]
D = A                                        // ROM[16168]
// ---------------------------
// push D
@ SP                                         // ROM[16169]
AM = M+1                                     // ROM[16170]
A = A-1                                      // ROM[16171]
M = D                                        // ROM[16172]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16173]
D = A                                        // ROM[16174]
@ R13                                        // ROM[16175]
M = D                                        // ROM[16176]
// ---------------------------
// Push RA
@ Output.initMap:131                         // ROM[16177]
D = A                                        // ROM[16178]
// ---------------------------
// push D
@ SP                                         // ROM[16179]
AM = M+1                                     // ROM[16180]
A = A-1                                      // ROM[16181]
M = D                                        // ROM[16182]
// ---------------------------
// call
@ Output.initMap:132                         // ROM[16183]
D = A                                        // ROM[16184]
@ R15                                        // ROM[16185]
M = D                                        // ROM[16186]
@ :call                                      // ROM[16187]
0; JMP                                       // ROM[16188]
( Output.initMap:132)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16189]
0; JMP                                       // ROM[16190]
// ---------------------------
// ( RA )
( Output.initMap:131) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16191]
AM = M-1                                     // ROM[16192]
D = M                                        // ROM[16193]
// ---------------------------
@ 5                                          // ROM[16194]
M = D                                        // ROM[16195]

// -------------------------------------
// PUSH: <constant, 93>
// -------------------------------------
@ 93                                         // ROM[16196]
D = A                                        // ROM[16197]
// ---------------------------
// push D
@ SP                                         // ROM[16198]
AM = M+1                                     // ROM[16199]
A = A-1                                      // ROM[16200]
M = D                                        // ROM[16201]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16202]
D = A                                        // ROM[16203]
// ---------------------------
// push D
@ SP                                         // ROM[16204]
AM = M+1                                     // ROM[16205]
A = A-1                                      // ROM[16206]
M = D                                        // ROM[16207]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16208]
D = A                                        // ROM[16209]
// ---------------------------
// push D
@ SP                                         // ROM[16210]
AM = M+1                                     // ROM[16211]
A = A-1                                      // ROM[16212]
M = D                                        // ROM[16213]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16214]
D = A                                        // ROM[16215]
// ---------------------------
// push D
@ SP                                         // ROM[16216]
AM = M+1                                     // ROM[16217]
A = A-1                                      // ROM[16218]
M = D                                        // ROM[16219]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16220]
D = A                                        // ROM[16221]
// ---------------------------
// push D
@ SP                                         // ROM[16222]
AM = M+1                                     // ROM[16223]
A = A-1                                      // ROM[16224]
M = D                                        // ROM[16225]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16226]
D = A                                        // ROM[16227]
// ---------------------------
// push D
@ SP                                         // ROM[16228]
AM = M+1                                     // ROM[16229]
A = A-1                                      // ROM[16230]
M = D                                        // ROM[16231]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16232]
D = A                                        // ROM[16233]
// ---------------------------
// push D
@ SP                                         // ROM[16234]
AM = M+1                                     // ROM[16235]
A = A-1                                      // ROM[16236]
M = D                                        // ROM[16237]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16238]
D = A                                        // ROM[16239]
// ---------------------------
// push D
@ SP                                         // ROM[16240]
AM = M+1                                     // ROM[16241]
A = A-1                                      // ROM[16242]
M = D                                        // ROM[16243]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16244]
D = A                                        // ROM[16245]
// ---------------------------
// push D
@ SP                                         // ROM[16246]
AM = M+1                                     // ROM[16247]
A = A-1                                      // ROM[16248]
M = D                                        // ROM[16249]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16250]
D = A                                        // ROM[16251]
// ---------------------------
// push D
@ SP                                         // ROM[16252]
AM = M+1                                     // ROM[16253]
A = A-1                                      // ROM[16254]
M = D                                        // ROM[16255]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16256]
D = A                                        // ROM[16257]
// ---------------------------
// push D
@ SP                                         // ROM[16258]
AM = M+1                                     // ROM[16259]
A = A-1                                      // ROM[16260]
M = D                                        // ROM[16261]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16262]
D = A                                        // ROM[16263]
// ---------------------------
// push D
@ SP                                         // ROM[16264]
AM = M+1                                     // ROM[16265]
A = A-1                                      // ROM[16266]
M = D                                        // ROM[16267]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16268]
D = A                                        // ROM[16269]
@ R13                                        // ROM[16270]
M = D                                        // ROM[16271]
// ---------------------------
// Push RA
@ Output.initMap:133                         // ROM[16272]
D = A                                        // ROM[16273]
// ---------------------------
// push D
@ SP                                         // ROM[16274]
AM = M+1                                     // ROM[16275]
A = A-1                                      // ROM[16276]
M = D                                        // ROM[16277]
// ---------------------------
// call
@ Output.initMap:134                         // ROM[16278]
D = A                                        // ROM[16279]
@ R15                                        // ROM[16280]
M = D                                        // ROM[16281]
@ :call                                      // ROM[16282]
0; JMP                                       // ROM[16283]
( Output.initMap:134)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16284]
0; JMP                                       // ROM[16285]
// ---------------------------
// ( RA )
( Output.initMap:133) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16286]
AM = M-1                                     // ROM[16287]
D = M                                        // ROM[16288]
// ---------------------------
@ 5                                          // ROM[16289]
M = D                                        // ROM[16290]

// -------------------------------------
// PUSH: <constant, 94>
// -------------------------------------
@ 94                                         // ROM[16291]
D = A                                        // ROM[16292]
// ---------------------------
// push D
@ SP                                         // ROM[16293]
AM = M+1                                     // ROM[16294]
A = A-1                                      // ROM[16295]
M = D                                        // ROM[16296]

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[16297]
D = A                                        // ROM[16298]
// ---------------------------
// push D
@ SP                                         // ROM[16299]
AM = M+1                                     // ROM[16300]
A = A-1                                      // ROM[16301]
M = D                                        // ROM[16302]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[16303]
D = A                                        // ROM[16304]
// ---------------------------
// push D
@ SP                                         // ROM[16305]
AM = M+1                                     // ROM[16306]
A = A-1                                      // ROM[16307]
M = D                                        // ROM[16308]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[16309]
D = A                                        // ROM[16310]
// ---------------------------
// push D
@ SP                                         // ROM[16311]
AM = M+1                                     // ROM[16312]
A = A-1                                      // ROM[16313]
M = D                                        // ROM[16314]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16315]
D = A                                        // ROM[16316]
// ---------------------------
// push D
@ SP                                         // ROM[16317]
AM = M+1                                     // ROM[16318]
A = A-1                                      // ROM[16319]
M = D                                        // ROM[16320]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16321]
D = A                                        // ROM[16322]
// ---------------------------
// push D
@ SP                                         // ROM[16323]
AM = M+1                                     // ROM[16324]
A = A-1                                      // ROM[16325]
M = D                                        // ROM[16326]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16327]
D = A                                        // ROM[16328]
// ---------------------------
// push D
@ SP                                         // ROM[16329]
AM = M+1                                     // ROM[16330]
A = A-1                                      // ROM[16331]
M = D                                        // ROM[16332]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16333]
D = A                                        // ROM[16334]
// ---------------------------
// push D
@ SP                                         // ROM[16335]
AM = M+1                                     // ROM[16336]
A = A-1                                      // ROM[16337]
M = D                                        // ROM[16338]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16339]
D = A                                        // ROM[16340]
// ---------------------------
// push D
@ SP                                         // ROM[16341]
AM = M+1                                     // ROM[16342]
A = A-1                                      // ROM[16343]
M = D                                        // ROM[16344]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16345]
D = A                                        // ROM[16346]
// ---------------------------
// push D
@ SP                                         // ROM[16347]
AM = M+1                                     // ROM[16348]
A = A-1                                      // ROM[16349]
M = D                                        // ROM[16350]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16351]
D = A                                        // ROM[16352]
// ---------------------------
// push D
@ SP                                         // ROM[16353]
AM = M+1                                     // ROM[16354]
A = A-1                                      // ROM[16355]
M = D                                        // ROM[16356]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16357]
D = A                                        // ROM[16358]
// ---------------------------
// push D
@ SP                                         // ROM[16359]
AM = M+1                                     // ROM[16360]
A = A-1                                      // ROM[16361]
M = D                                        // ROM[16362]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16363]
D = A                                        // ROM[16364]
@ R13                                        // ROM[16365]
M = D                                        // ROM[16366]
// ---------------------------
// Push RA
@ Output.initMap:135                         // ROM[16367]
D = A                                        // ROM[16368]
// ---------------------------
// push D
@ SP                                         // ROM[16369]
AM = M+1                                     // ROM[16370]
A = A-1                                      // ROM[16371]
M = D                                        // ROM[16372]
// ---------------------------
// call
@ Output.initMap:136                         // ROM[16373]
D = A                                        // ROM[16374]
@ R15                                        // ROM[16375]
M = D                                        // ROM[16376]
@ :call                                      // ROM[16377]
0; JMP                                       // ROM[16378]
( Output.initMap:136)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16379]
0; JMP                                       // ROM[16380]
// ---------------------------
// ( RA )
( Output.initMap:135) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16381]
AM = M-1                                     // ROM[16382]
D = M                                        // ROM[16383]
// ---------------------------
@ 5                                          // ROM[16384]
M = D                                        // ROM[16385]

// -------------------------------------
// PUSH: <constant, 95>
// -------------------------------------
@ 95                                         // ROM[16386]
D = A                                        // ROM[16387]
// ---------------------------
// push D
@ SP                                         // ROM[16388]
AM = M+1                                     // ROM[16389]
A = A-1                                      // ROM[16390]
M = D                                        // ROM[16391]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16392]
D = A                                        // ROM[16393]
// ---------------------------
// push D
@ SP                                         // ROM[16394]
AM = M+1                                     // ROM[16395]
A = A-1                                      // ROM[16396]
M = D                                        // ROM[16397]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16398]
D = A                                        // ROM[16399]
// ---------------------------
// push D
@ SP                                         // ROM[16400]
AM = M+1                                     // ROM[16401]
A = A-1                                      // ROM[16402]
M = D                                        // ROM[16403]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16404]
D = A                                        // ROM[16405]
// ---------------------------
// push D
@ SP                                         // ROM[16406]
AM = M+1                                     // ROM[16407]
A = A-1                                      // ROM[16408]
M = D                                        // ROM[16409]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16410]
D = A                                        // ROM[16411]
// ---------------------------
// push D
@ SP                                         // ROM[16412]
AM = M+1                                     // ROM[16413]
A = A-1                                      // ROM[16414]
M = D                                        // ROM[16415]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16416]
D = A                                        // ROM[16417]
// ---------------------------
// push D
@ SP                                         // ROM[16418]
AM = M+1                                     // ROM[16419]
A = A-1                                      // ROM[16420]
M = D                                        // ROM[16421]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16422]
D = A                                        // ROM[16423]
// ---------------------------
// push D
@ SP                                         // ROM[16424]
AM = M+1                                     // ROM[16425]
A = A-1                                      // ROM[16426]
M = D                                        // ROM[16427]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16428]
D = A                                        // ROM[16429]
// ---------------------------
// push D
@ SP                                         // ROM[16430]
AM = M+1                                     // ROM[16431]
A = A-1                                      // ROM[16432]
M = D                                        // ROM[16433]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16434]
D = A                                        // ROM[16435]
// ---------------------------
// push D
@ SP                                         // ROM[16436]
AM = M+1                                     // ROM[16437]
A = A-1                                      // ROM[16438]
M = D                                        // ROM[16439]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16440]
D = A                                        // ROM[16441]
// ---------------------------
// push D
@ SP                                         // ROM[16442]
AM = M+1                                     // ROM[16443]
A = A-1                                      // ROM[16444]
M = D                                        // ROM[16445]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[16446]
D = A                                        // ROM[16447]
// ---------------------------
// push D
@ SP                                         // ROM[16448]
AM = M+1                                     // ROM[16449]
A = A-1                                      // ROM[16450]
M = D                                        // ROM[16451]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16452]
D = A                                        // ROM[16453]
// ---------------------------
// push D
@ SP                                         // ROM[16454]
AM = M+1                                     // ROM[16455]
A = A-1                                      // ROM[16456]
M = D                                        // ROM[16457]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16458]
D = A                                        // ROM[16459]
@ R13                                        // ROM[16460]
M = D                                        // ROM[16461]
// ---------------------------
// Push RA
@ Output.initMap:137                         // ROM[16462]
D = A                                        // ROM[16463]
// ---------------------------
// push D
@ SP                                         // ROM[16464]
AM = M+1                                     // ROM[16465]
A = A-1                                      // ROM[16466]
M = D                                        // ROM[16467]
// ---------------------------
// call
@ Output.initMap:138                         // ROM[16468]
D = A                                        // ROM[16469]
@ R15                                        // ROM[16470]
M = D                                        // ROM[16471]
@ :call                                      // ROM[16472]
0; JMP                                       // ROM[16473]
( Output.initMap:138)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16474]
0; JMP                                       // ROM[16475]
// ---------------------------
// ( RA )
( Output.initMap:137) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16476]
AM = M-1                                     // ROM[16477]
D = M                                        // ROM[16478]
// ---------------------------
@ 5                                          // ROM[16479]
M = D                                        // ROM[16480]

// -------------------------------------
// PUSH: <constant, 96>
// -------------------------------------
@ 96                                         // ROM[16481]
D = A                                        // ROM[16482]
// ---------------------------
// push D
@ SP                                         // ROM[16483]
AM = M+1                                     // ROM[16484]
A = A-1                                      // ROM[16485]
M = D                                        // ROM[16486]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[16487]
D = A                                        // ROM[16488]
// ---------------------------
// push D
@ SP                                         // ROM[16489]
AM = M+1                                     // ROM[16490]
A = A-1                                      // ROM[16491]
M = D                                        // ROM[16492]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[16493]
D = A                                        // ROM[16494]
// ---------------------------
// push D
@ SP                                         // ROM[16495]
AM = M+1                                     // ROM[16496]
A = A-1                                      // ROM[16497]
M = D                                        // ROM[16498]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16499]
D = A                                        // ROM[16500]
// ---------------------------
// push D
@ SP                                         // ROM[16501]
AM = M+1                                     // ROM[16502]
A = A-1                                      // ROM[16503]
M = D                                        // ROM[16504]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16505]
D = A                                        // ROM[16506]
// ---------------------------
// push D
@ SP                                         // ROM[16507]
AM = M+1                                     // ROM[16508]
A = A-1                                      // ROM[16509]
M = D                                        // ROM[16510]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16511]
D = A                                        // ROM[16512]
// ---------------------------
// push D
@ SP                                         // ROM[16513]
AM = M+1                                     // ROM[16514]
A = A-1                                      // ROM[16515]
M = D                                        // ROM[16516]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16517]
D = A                                        // ROM[16518]
// ---------------------------
// push D
@ SP                                         // ROM[16519]
AM = M+1                                     // ROM[16520]
A = A-1                                      // ROM[16521]
M = D                                        // ROM[16522]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16523]
D = A                                        // ROM[16524]
// ---------------------------
// push D
@ SP                                         // ROM[16525]
AM = M+1                                     // ROM[16526]
A = A-1                                      // ROM[16527]
M = D                                        // ROM[16528]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16529]
D = A                                        // ROM[16530]
// ---------------------------
// push D
@ SP                                         // ROM[16531]
AM = M+1                                     // ROM[16532]
A = A-1                                      // ROM[16533]
M = D                                        // ROM[16534]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16535]
D = A                                        // ROM[16536]
// ---------------------------
// push D
@ SP                                         // ROM[16537]
AM = M+1                                     // ROM[16538]
A = A-1                                      // ROM[16539]
M = D                                        // ROM[16540]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16541]
D = A                                        // ROM[16542]
// ---------------------------
// push D
@ SP                                         // ROM[16543]
AM = M+1                                     // ROM[16544]
A = A-1                                      // ROM[16545]
M = D                                        // ROM[16546]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16547]
D = A                                        // ROM[16548]
// ---------------------------
// push D
@ SP                                         // ROM[16549]
AM = M+1                                     // ROM[16550]
A = A-1                                      // ROM[16551]
M = D                                        // ROM[16552]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16553]
D = A                                        // ROM[16554]
@ R13                                        // ROM[16555]
M = D                                        // ROM[16556]
// ---------------------------
// Push RA
@ Output.initMap:139                         // ROM[16557]
D = A                                        // ROM[16558]
// ---------------------------
// push D
@ SP                                         // ROM[16559]
AM = M+1                                     // ROM[16560]
A = A-1                                      // ROM[16561]
M = D                                        // ROM[16562]
// ---------------------------
// call
@ Output.initMap:140                         // ROM[16563]
D = A                                        // ROM[16564]
@ R15                                        // ROM[16565]
M = D                                        // ROM[16566]
@ :call                                      // ROM[16567]
0; JMP                                       // ROM[16568]
( Output.initMap:140)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16569]
0; JMP                                       // ROM[16570]
// ---------------------------
// ( RA )
( Output.initMap:139) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16571]
AM = M-1                                     // ROM[16572]
D = M                                        // ROM[16573]
// ---------------------------
@ 5                                          // ROM[16574]
M = D                                        // ROM[16575]

// -------------------------------------
// PUSH: <constant, 97>
// -------------------------------------
@ 97                                         // ROM[16576]
D = A                                        // ROM[16577]
// ---------------------------
// push D
@ SP                                         // ROM[16578]
AM = M+1                                     // ROM[16579]
A = A-1                                      // ROM[16580]
M = D                                        // ROM[16581]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16582]
D = A                                        // ROM[16583]
// ---------------------------
// push D
@ SP                                         // ROM[16584]
AM = M+1                                     // ROM[16585]
A = A-1                                      // ROM[16586]
M = D                                        // ROM[16587]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16588]
D = A                                        // ROM[16589]
// ---------------------------
// push D
@ SP                                         // ROM[16590]
AM = M+1                                     // ROM[16591]
A = A-1                                      // ROM[16592]
M = D                                        // ROM[16593]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16594]
D = A                                        // ROM[16595]
// ---------------------------
// push D
@ SP                                         // ROM[16596]
AM = M+1                                     // ROM[16597]
A = A-1                                      // ROM[16598]
M = D                                        // ROM[16599]

// -------------------------------------
// PUSH: <constant, 14>
// -------------------------------------
@ 14                                         // ROM[16600]
D = A                                        // ROM[16601]
// ---------------------------
// push D
@ SP                                         // ROM[16602]
AM = M+1                                     // ROM[16603]
A = A-1                                      // ROM[16604]
M = D                                        // ROM[16605]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[16606]
D = A                                        // ROM[16607]
// ---------------------------
// push D
@ SP                                         // ROM[16608]
AM = M+1                                     // ROM[16609]
A = A-1                                      // ROM[16610]
M = D                                        // ROM[16611]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16612]
D = A                                        // ROM[16613]
// ---------------------------
// push D
@ SP                                         // ROM[16614]
AM = M+1                                     // ROM[16615]
A = A-1                                      // ROM[16616]
M = D                                        // ROM[16617]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[16618]
D = A                                        // ROM[16619]
// ---------------------------
// push D
@ SP                                         // ROM[16620]
AM = M+1                                     // ROM[16621]
A = A-1                                      // ROM[16622]
M = D                                        // ROM[16623]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[16624]
D = A                                        // ROM[16625]
// ---------------------------
// push D
@ SP                                         // ROM[16626]
AM = M+1                                     // ROM[16627]
A = A-1                                      // ROM[16628]
M = D                                        // ROM[16629]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[16630]
D = A                                        // ROM[16631]
// ---------------------------
// push D
@ SP                                         // ROM[16632]
AM = M+1                                     // ROM[16633]
A = A-1                                      // ROM[16634]
M = D                                        // ROM[16635]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16636]
D = A                                        // ROM[16637]
// ---------------------------
// push D
@ SP                                         // ROM[16638]
AM = M+1                                     // ROM[16639]
A = A-1                                      // ROM[16640]
M = D                                        // ROM[16641]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16642]
D = A                                        // ROM[16643]
// ---------------------------
// push D
@ SP                                         // ROM[16644]
AM = M+1                                     // ROM[16645]
A = A-1                                      // ROM[16646]
M = D                                        // ROM[16647]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16648]
D = A                                        // ROM[16649]
@ R13                                        // ROM[16650]
M = D                                        // ROM[16651]
// ---------------------------
// Push RA
@ Output.initMap:141                         // ROM[16652]
D = A                                        // ROM[16653]
// ---------------------------
// push D
@ SP                                         // ROM[16654]
AM = M+1                                     // ROM[16655]
A = A-1                                      // ROM[16656]
M = D                                        // ROM[16657]
// ---------------------------
// call
@ Output.initMap:142                         // ROM[16658]
D = A                                        // ROM[16659]
@ R15                                        // ROM[16660]
M = D                                        // ROM[16661]
@ :call                                      // ROM[16662]
0; JMP                                       // ROM[16663]
( Output.initMap:142)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16664]
0; JMP                                       // ROM[16665]
// ---------------------------
// ( RA )
( Output.initMap:141) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16666]
AM = M-1                                     // ROM[16667]
D = M                                        // ROM[16668]
// ---------------------------
@ 5                                          // ROM[16669]
M = D                                        // ROM[16670]

// -------------------------------------
// PUSH: <constant, 98>
// -------------------------------------
@ 98                                         // ROM[16671]
D = A                                        // ROM[16672]
// ---------------------------
// push D
@ SP                                         // ROM[16673]
AM = M+1                                     // ROM[16674]
A = A-1                                      // ROM[16675]
M = D                                        // ROM[16676]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[16677]
D = A                                        // ROM[16678]
// ---------------------------
// push D
@ SP                                         // ROM[16679]
AM = M+1                                     // ROM[16680]
A = A-1                                      // ROM[16681]
M = D                                        // ROM[16682]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[16683]
D = A                                        // ROM[16684]
// ---------------------------
// push D
@ SP                                         // ROM[16685]
AM = M+1                                     // ROM[16686]
A = A-1                                      // ROM[16687]
M = D                                        // ROM[16688]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[16689]
D = A                                        // ROM[16690]
// ---------------------------
// push D
@ SP                                         // ROM[16691]
AM = M+1                                     // ROM[16692]
A = A-1                                      // ROM[16693]
M = D                                        // ROM[16694]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[16695]
D = A                                        // ROM[16696]
// ---------------------------
// push D
@ SP                                         // ROM[16697]
AM = M+1                                     // ROM[16698]
A = A-1                                      // ROM[16699]
M = D                                        // ROM[16700]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[16701]
D = A                                        // ROM[16702]
// ---------------------------
// push D
@ SP                                         // ROM[16703]
AM = M+1                                     // ROM[16704]
A = A-1                                      // ROM[16705]
M = D                                        // ROM[16706]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16707]
D = A                                        // ROM[16708]
// ---------------------------
// push D
@ SP                                         // ROM[16709]
AM = M+1                                     // ROM[16710]
A = A-1                                      // ROM[16711]
M = D                                        // ROM[16712]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16713]
D = A                                        // ROM[16714]
// ---------------------------
// push D
@ SP                                         // ROM[16715]
AM = M+1                                     // ROM[16716]
A = A-1                                      // ROM[16717]
M = D                                        // ROM[16718]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16719]
D = A                                        // ROM[16720]
// ---------------------------
// push D
@ SP                                         // ROM[16721]
AM = M+1                                     // ROM[16722]
A = A-1                                      // ROM[16723]
M = D                                        // ROM[16724]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16725]
D = A                                        // ROM[16726]
// ---------------------------
// push D
@ SP                                         // ROM[16727]
AM = M+1                                     // ROM[16728]
A = A-1                                      // ROM[16729]
M = D                                        // ROM[16730]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16731]
D = A                                        // ROM[16732]
// ---------------------------
// push D
@ SP                                         // ROM[16733]
AM = M+1                                     // ROM[16734]
A = A-1                                      // ROM[16735]
M = D                                        // ROM[16736]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16737]
D = A                                        // ROM[16738]
// ---------------------------
// push D
@ SP                                         // ROM[16739]
AM = M+1                                     // ROM[16740]
A = A-1                                      // ROM[16741]
M = D                                        // ROM[16742]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16743]
D = A                                        // ROM[16744]
@ R13                                        // ROM[16745]
M = D                                        // ROM[16746]
// ---------------------------
// Push RA
@ Output.initMap:143                         // ROM[16747]
D = A                                        // ROM[16748]
// ---------------------------
// push D
@ SP                                         // ROM[16749]
AM = M+1                                     // ROM[16750]
A = A-1                                      // ROM[16751]
M = D                                        // ROM[16752]
// ---------------------------
// call
@ Output.initMap:144                         // ROM[16753]
D = A                                        // ROM[16754]
@ R15                                        // ROM[16755]
M = D                                        // ROM[16756]
@ :call                                      // ROM[16757]
0; JMP                                       // ROM[16758]
( Output.initMap:144)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16759]
0; JMP                                       // ROM[16760]
// ---------------------------
// ( RA )
( Output.initMap:143) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16761]
AM = M-1                                     // ROM[16762]
D = M                                        // ROM[16763]
// ---------------------------
@ 5                                          // ROM[16764]
M = D                                        // ROM[16765]

// -------------------------------------
// PUSH: <constant, 99>
// -------------------------------------
@ 99                                         // ROM[16766]
D = A                                        // ROM[16767]
// ---------------------------
// push D
@ SP                                         // ROM[16768]
AM = M+1                                     // ROM[16769]
A = A-1                                      // ROM[16770]
M = D                                        // ROM[16771]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16772]
D = A                                        // ROM[16773]
// ---------------------------
// push D
@ SP                                         // ROM[16774]
AM = M+1                                     // ROM[16775]
A = A-1                                      // ROM[16776]
M = D                                        // ROM[16777]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16778]
D = A                                        // ROM[16779]
// ---------------------------
// push D
@ SP                                         // ROM[16780]
AM = M+1                                     // ROM[16781]
A = A-1                                      // ROM[16782]
M = D                                        // ROM[16783]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16784]
D = A                                        // ROM[16785]
// ---------------------------
// push D
@ SP                                         // ROM[16786]
AM = M+1                                     // ROM[16787]
A = A-1                                      // ROM[16788]
M = D                                        // ROM[16789]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16790]
D = A                                        // ROM[16791]
// ---------------------------
// push D
@ SP                                         // ROM[16792]
AM = M+1                                     // ROM[16793]
A = A-1                                      // ROM[16794]
M = D                                        // ROM[16795]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16796]
D = A                                        // ROM[16797]
// ---------------------------
// push D
@ SP                                         // ROM[16798]
AM = M+1                                     // ROM[16799]
A = A-1                                      // ROM[16800]
M = D                                        // ROM[16801]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[16802]
D = A                                        // ROM[16803]
// ---------------------------
// push D
@ SP                                         // ROM[16804]
AM = M+1                                     // ROM[16805]
A = A-1                                      // ROM[16806]
M = D                                        // ROM[16807]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[16808]
D = A                                        // ROM[16809]
// ---------------------------
// push D
@ SP                                         // ROM[16810]
AM = M+1                                     // ROM[16811]
A = A-1                                      // ROM[16812]
M = D                                        // ROM[16813]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16814]
D = A                                        // ROM[16815]
// ---------------------------
// push D
@ SP                                         // ROM[16816]
AM = M+1                                     // ROM[16817]
A = A-1                                      // ROM[16818]
M = D                                        // ROM[16819]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16820]
D = A                                        // ROM[16821]
// ---------------------------
// push D
@ SP                                         // ROM[16822]
AM = M+1                                     // ROM[16823]
A = A-1                                      // ROM[16824]
M = D                                        // ROM[16825]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16826]
D = A                                        // ROM[16827]
// ---------------------------
// push D
@ SP                                         // ROM[16828]
AM = M+1                                     // ROM[16829]
A = A-1                                      // ROM[16830]
M = D                                        // ROM[16831]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16832]
D = A                                        // ROM[16833]
// ---------------------------
// push D
@ SP                                         // ROM[16834]
AM = M+1                                     // ROM[16835]
A = A-1                                      // ROM[16836]
M = D                                        // ROM[16837]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16838]
D = A                                        // ROM[16839]
@ R13                                        // ROM[16840]
M = D                                        // ROM[16841]
// ---------------------------
// Push RA
@ Output.initMap:145                         // ROM[16842]
D = A                                        // ROM[16843]
// ---------------------------
// push D
@ SP                                         // ROM[16844]
AM = M+1                                     // ROM[16845]
A = A-1                                      // ROM[16846]
M = D                                        // ROM[16847]
// ---------------------------
// call
@ Output.initMap:146                         // ROM[16848]
D = A                                        // ROM[16849]
@ R15                                        // ROM[16850]
M = D                                        // ROM[16851]
@ :call                                      // ROM[16852]
0; JMP                                       // ROM[16853]
( Output.initMap:146)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16854]
0; JMP                                       // ROM[16855]
// ---------------------------
// ( RA )
( Output.initMap:145) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16856]
AM = M-1                                     // ROM[16857]
D = M                                        // ROM[16858]
// ---------------------------
@ 5                                          // ROM[16859]
M = D                                        // ROM[16860]

// -------------------------------------
// PUSH: <constant, 100>
// -------------------------------------
@ 100                                        // ROM[16861]
D = A                                        // ROM[16862]
// ---------------------------
// push D
@ SP                                         // ROM[16863]
AM = M+1                                     // ROM[16864]
A = A-1                                      // ROM[16865]
M = D                                        // ROM[16866]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[16867]
D = A                                        // ROM[16868]
// ---------------------------
// push D
@ SP                                         // ROM[16869]
AM = M+1                                     // ROM[16870]
A = A-1                                      // ROM[16871]
M = D                                        // ROM[16872]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[16873]
D = A                                        // ROM[16874]
// ---------------------------
// push D
@ SP                                         // ROM[16875]
AM = M+1                                     // ROM[16876]
A = A-1                                      // ROM[16877]
M = D                                        // ROM[16878]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[16879]
D = A                                        // ROM[16880]
// ---------------------------
// push D
@ SP                                         // ROM[16881]
AM = M+1                                     // ROM[16882]
A = A-1                                      // ROM[16883]
M = D                                        // ROM[16884]

// -------------------------------------
// PUSH: <constant, 60>
// -------------------------------------
@ 60                                         // ROM[16885]
D = A                                        // ROM[16886]
// ---------------------------
// push D
@ SP                                         // ROM[16887]
AM = M+1                                     // ROM[16888]
A = A-1                                      // ROM[16889]
M = D                                        // ROM[16890]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[16891]
D = A                                        // ROM[16892]
// ---------------------------
// push D
@ SP                                         // ROM[16893]
AM = M+1                                     // ROM[16894]
A = A-1                                      // ROM[16895]
M = D                                        // ROM[16896]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16897]
D = A                                        // ROM[16898]
// ---------------------------
// push D
@ SP                                         // ROM[16899]
AM = M+1                                     // ROM[16900]
A = A-1                                      // ROM[16901]
M = D                                        // ROM[16902]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16903]
D = A                                        // ROM[16904]
// ---------------------------
// push D
@ SP                                         // ROM[16905]
AM = M+1                                     // ROM[16906]
A = A-1                                      // ROM[16907]
M = D                                        // ROM[16908]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16909]
D = A                                        // ROM[16910]
// ---------------------------
// push D
@ SP                                         // ROM[16911]
AM = M+1                                     // ROM[16912]
A = A-1                                      // ROM[16913]
M = D                                        // ROM[16914]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16915]
D = A                                        // ROM[16916]
// ---------------------------
// push D
@ SP                                         // ROM[16917]
AM = M+1                                     // ROM[16918]
A = A-1                                      // ROM[16919]
M = D                                        // ROM[16920]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16921]
D = A                                        // ROM[16922]
// ---------------------------
// push D
@ SP                                         // ROM[16923]
AM = M+1                                     // ROM[16924]
A = A-1                                      // ROM[16925]
M = D                                        // ROM[16926]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16927]
D = A                                        // ROM[16928]
// ---------------------------
// push D
@ SP                                         // ROM[16929]
AM = M+1                                     // ROM[16930]
A = A-1                                      // ROM[16931]
M = D                                        // ROM[16932]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[16933]
D = A                                        // ROM[16934]
@ R13                                        // ROM[16935]
M = D                                        // ROM[16936]
// ---------------------------
// Push RA
@ Output.initMap:147                         // ROM[16937]
D = A                                        // ROM[16938]
// ---------------------------
// push D
@ SP                                         // ROM[16939]
AM = M+1                                     // ROM[16940]
A = A-1                                      // ROM[16941]
M = D                                        // ROM[16942]
// ---------------------------
// call
@ Output.initMap:148                         // ROM[16943]
D = A                                        // ROM[16944]
@ R15                                        // ROM[16945]
M = D                                        // ROM[16946]
@ :call                                      // ROM[16947]
0; JMP                                       // ROM[16948]
( Output.initMap:148)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[16949]
0; JMP                                       // ROM[16950]
// ---------------------------
// ( RA )
( Output.initMap:147) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[16951]
AM = M-1                                     // ROM[16952]
D = M                                        // ROM[16953]
// ---------------------------
@ 5                                          // ROM[16954]
M = D                                        // ROM[16955]

// -------------------------------------
// PUSH: <constant, 101>
// -------------------------------------
@ 101                                        // ROM[16956]
D = A                                        // ROM[16957]
// ---------------------------
// push D
@ SP                                         // ROM[16958]
AM = M+1                                     // ROM[16959]
A = A-1                                      // ROM[16960]
M = D                                        // ROM[16961]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16962]
D = A                                        // ROM[16963]
// ---------------------------
// push D
@ SP                                         // ROM[16964]
AM = M+1                                     // ROM[16965]
A = A-1                                      // ROM[16966]
M = D                                        // ROM[16967]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16968]
D = A                                        // ROM[16969]
// ---------------------------
// push D
@ SP                                         // ROM[16970]
AM = M+1                                     // ROM[16971]
A = A-1                                      // ROM[16972]
M = D                                        // ROM[16973]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[16974]
D = A                                        // ROM[16975]
// ---------------------------
// push D
@ SP                                         // ROM[16976]
AM = M+1                                     // ROM[16977]
A = A-1                                      // ROM[16978]
M = D                                        // ROM[16979]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[16980]
D = A                                        // ROM[16981]
// ---------------------------
// push D
@ SP                                         // ROM[16982]
AM = M+1                                     // ROM[16983]
A = A-1                                      // ROM[16984]
M = D                                        // ROM[16985]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[16986]
D = A                                        // ROM[16987]
// ---------------------------
// push D
@ SP                                         // ROM[16988]
AM = M+1                                     // ROM[16989]
A = A-1                                      // ROM[16990]
M = D                                        // ROM[16991]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[16992]
D = A                                        // ROM[16993]
// ---------------------------
// push D
@ SP                                         // ROM[16994]
AM = M+1                                     // ROM[16995]
A = A-1                                      // ROM[16996]
M = D                                        // ROM[16997]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[16998]
D = A                                        // ROM[16999]
// ---------------------------
// push D
@ SP                                         // ROM[17000]
AM = M+1                                     // ROM[17001]
A = A-1                                      // ROM[17002]
M = D                                        // ROM[17003]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17004]
D = A                                        // ROM[17005]
// ---------------------------
// push D
@ SP                                         // ROM[17006]
AM = M+1                                     // ROM[17007]
A = A-1                                      // ROM[17008]
M = D                                        // ROM[17009]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[17010]
D = A                                        // ROM[17011]
// ---------------------------
// push D
@ SP                                         // ROM[17012]
AM = M+1                                     // ROM[17013]
A = A-1                                      // ROM[17014]
M = D                                        // ROM[17015]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17016]
D = A                                        // ROM[17017]
// ---------------------------
// push D
@ SP                                         // ROM[17018]
AM = M+1                                     // ROM[17019]
A = A-1                                      // ROM[17020]
M = D                                        // ROM[17021]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17022]
D = A                                        // ROM[17023]
// ---------------------------
// push D
@ SP                                         // ROM[17024]
AM = M+1                                     // ROM[17025]
A = A-1                                      // ROM[17026]
M = D                                        // ROM[17027]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17028]
D = A                                        // ROM[17029]
@ R13                                        // ROM[17030]
M = D                                        // ROM[17031]
// ---------------------------
// Push RA
@ Output.initMap:149                         // ROM[17032]
D = A                                        // ROM[17033]
// ---------------------------
// push D
@ SP                                         // ROM[17034]
AM = M+1                                     // ROM[17035]
A = A-1                                      // ROM[17036]
M = D                                        // ROM[17037]
// ---------------------------
// call
@ Output.initMap:150                         // ROM[17038]
D = A                                        // ROM[17039]
@ R15                                        // ROM[17040]
M = D                                        // ROM[17041]
@ :call                                      // ROM[17042]
0; JMP                                       // ROM[17043]
( Output.initMap:150)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17044]
0; JMP                                       // ROM[17045]
// ---------------------------
// ( RA )
( Output.initMap:149) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17046]
AM = M-1                                     // ROM[17047]
D = M                                        // ROM[17048]
// ---------------------------
@ 5                                          // ROM[17049]
M = D                                        // ROM[17050]

// -------------------------------------
// PUSH: <constant, 102>
// -------------------------------------
@ 102                                        // ROM[17051]
D = A                                        // ROM[17052]
// ---------------------------
// push D
@ SP                                         // ROM[17053]
AM = M+1                                     // ROM[17054]
A = A-1                                      // ROM[17055]
M = D                                        // ROM[17056]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[17057]
D = A                                        // ROM[17058]
// ---------------------------
// push D
@ SP                                         // ROM[17059]
AM = M+1                                     // ROM[17060]
A = A-1                                      // ROM[17061]
M = D                                        // ROM[17062]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[17063]
D = A                                        // ROM[17064]
// ---------------------------
// push D
@ SP                                         // ROM[17065]
AM = M+1                                     // ROM[17066]
A = A-1                                      // ROM[17067]
M = D                                        // ROM[17068]

// -------------------------------------
// PUSH: <constant, 38>
// -------------------------------------
@ 38                                         // ROM[17069]
D = A                                        // ROM[17070]
// ---------------------------
// push D
@ SP                                         // ROM[17071]
AM = M+1                                     // ROM[17072]
A = A-1                                      // ROM[17073]
M = D                                        // ROM[17074]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[17075]
D = A                                        // ROM[17076]
// ---------------------------
// push D
@ SP                                         // ROM[17077]
AM = M+1                                     // ROM[17078]
A = A-1                                      // ROM[17079]
M = D                                        // ROM[17080]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[17081]
D = A                                        // ROM[17082]
// ---------------------------
// push D
@ SP                                         // ROM[17083]
AM = M+1                                     // ROM[17084]
A = A-1                                      // ROM[17085]
M = D                                        // ROM[17086]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[17087]
D = A                                        // ROM[17088]
// ---------------------------
// push D
@ SP                                         // ROM[17089]
AM = M+1                                     // ROM[17090]
A = A-1                                      // ROM[17091]
M = D                                        // ROM[17092]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[17093]
D = A                                        // ROM[17094]
// ---------------------------
// push D
@ SP                                         // ROM[17095]
AM = M+1                                     // ROM[17096]
A = A-1                                      // ROM[17097]
M = D                                        // ROM[17098]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[17099]
D = A                                        // ROM[17100]
// ---------------------------
// push D
@ SP                                         // ROM[17101]
AM = M+1                                     // ROM[17102]
A = A-1                                      // ROM[17103]
M = D                                        // ROM[17104]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[17105]
D = A                                        // ROM[17106]
// ---------------------------
// push D
@ SP                                         // ROM[17107]
AM = M+1                                     // ROM[17108]
A = A-1                                      // ROM[17109]
M = D                                        // ROM[17110]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17111]
D = A                                        // ROM[17112]
// ---------------------------
// push D
@ SP                                         // ROM[17113]
AM = M+1                                     // ROM[17114]
A = A-1                                      // ROM[17115]
M = D                                        // ROM[17116]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17117]
D = A                                        // ROM[17118]
// ---------------------------
// push D
@ SP                                         // ROM[17119]
AM = M+1                                     // ROM[17120]
A = A-1                                      // ROM[17121]
M = D                                        // ROM[17122]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17123]
D = A                                        // ROM[17124]
@ R13                                        // ROM[17125]
M = D                                        // ROM[17126]
// ---------------------------
// Push RA
@ Output.initMap:151                         // ROM[17127]
D = A                                        // ROM[17128]
// ---------------------------
// push D
@ SP                                         // ROM[17129]
AM = M+1                                     // ROM[17130]
A = A-1                                      // ROM[17131]
M = D                                        // ROM[17132]
// ---------------------------
// call
@ Output.initMap:152                         // ROM[17133]
D = A                                        // ROM[17134]
@ R15                                        // ROM[17135]
M = D                                        // ROM[17136]
@ :call                                      // ROM[17137]
0; JMP                                       // ROM[17138]
( Output.initMap:152)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17139]
0; JMP                                       // ROM[17140]
// ---------------------------
// ( RA )
( Output.initMap:151) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17141]
AM = M-1                                     // ROM[17142]
D = M                                        // ROM[17143]
// ---------------------------
@ 5                                          // ROM[17144]
M = D                                        // ROM[17145]

// -------------------------------------
// PUSH: <constant, 103>
// -------------------------------------
@ 103                                        // ROM[17146]
D = A                                        // ROM[17147]
// ---------------------------
// push D
@ SP                                         // ROM[17148]
AM = M+1                                     // ROM[17149]
A = A-1                                      // ROM[17150]
M = D                                        // ROM[17151]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17152]
D = A                                        // ROM[17153]
// ---------------------------
// push D
@ SP                                         // ROM[17154]
AM = M+1                                     // ROM[17155]
A = A-1                                      // ROM[17156]
M = D                                        // ROM[17157]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17158]
D = A                                        // ROM[17159]
// ---------------------------
// push D
@ SP                                         // ROM[17160]
AM = M+1                                     // ROM[17161]
A = A-1                                      // ROM[17162]
M = D                                        // ROM[17163]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[17164]
D = A                                        // ROM[17165]
// ---------------------------
// push D
@ SP                                         // ROM[17166]
AM = M+1                                     // ROM[17167]
A = A-1                                      // ROM[17168]
M = D                                        // ROM[17169]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17170]
D = A                                        // ROM[17171]
// ---------------------------
// push D
@ SP                                         // ROM[17172]
AM = M+1                                     // ROM[17173]
A = A-1                                      // ROM[17174]
M = D                                        // ROM[17175]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17176]
D = A                                        // ROM[17177]
// ---------------------------
// push D
@ SP                                         // ROM[17178]
AM = M+1                                     // ROM[17179]
A = A-1                                      // ROM[17180]
M = D                                        // ROM[17181]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17182]
D = A                                        // ROM[17183]
// ---------------------------
// push D
@ SP                                         // ROM[17184]
AM = M+1                                     // ROM[17185]
A = A-1                                      // ROM[17186]
M = D                                        // ROM[17187]

// -------------------------------------
// PUSH: <constant, 62>
// -------------------------------------
@ 62                                         // ROM[17188]
D = A                                        // ROM[17189]
// ---------------------------
// push D
@ SP                                         // ROM[17190]
AM = M+1                                     // ROM[17191]
A = A-1                                      // ROM[17192]
M = D                                        // ROM[17193]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[17194]
D = A                                        // ROM[17195]
// ---------------------------
// push D
@ SP                                         // ROM[17196]
AM = M+1                                     // ROM[17197]
A = A-1                                      // ROM[17198]
M = D                                        // ROM[17199]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17200]
D = A                                        // ROM[17201]
// ---------------------------
// push D
@ SP                                         // ROM[17202]
AM = M+1                                     // ROM[17203]
A = A-1                                      // ROM[17204]
M = D                                        // ROM[17205]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[17206]
D = A                                        // ROM[17207]
// ---------------------------
// push D
@ SP                                         // ROM[17208]
AM = M+1                                     // ROM[17209]
A = A-1                                      // ROM[17210]
M = D                                        // ROM[17211]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17212]
D = A                                        // ROM[17213]
// ---------------------------
// push D
@ SP                                         // ROM[17214]
AM = M+1                                     // ROM[17215]
A = A-1                                      // ROM[17216]
M = D                                        // ROM[17217]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17218]
D = A                                        // ROM[17219]
@ R13                                        // ROM[17220]
M = D                                        // ROM[17221]
// ---------------------------
// Push RA
@ Output.initMap:153                         // ROM[17222]
D = A                                        // ROM[17223]
// ---------------------------
// push D
@ SP                                         // ROM[17224]
AM = M+1                                     // ROM[17225]
A = A-1                                      // ROM[17226]
M = D                                        // ROM[17227]
// ---------------------------
// call
@ Output.initMap:154                         // ROM[17228]
D = A                                        // ROM[17229]
@ R15                                        // ROM[17230]
M = D                                        // ROM[17231]
@ :call                                      // ROM[17232]
0; JMP                                       // ROM[17233]
( Output.initMap:154)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17234]
0; JMP                                       // ROM[17235]
// ---------------------------
// ( RA )
( Output.initMap:153) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17236]
AM = M-1                                     // ROM[17237]
D = M                                        // ROM[17238]
// ---------------------------
@ 5                                          // ROM[17239]
M = D                                        // ROM[17240]

// -------------------------------------
// PUSH: <constant, 104>
// -------------------------------------
@ 104                                        // ROM[17241]
D = A                                        // ROM[17242]
// ---------------------------
// push D
@ SP                                         // ROM[17243]
AM = M+1                                     // ROM[17244]
A = A-1                                      // ROM[17245]
M = D                                        // ROM[17246]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[17247]
D = A                                        // ROM[17248]
// ---------------------------
// push D
@ SP                                         // ROM[17249]
AM = M+1                                     // ROM[17250]
A = A-1                                      // ROM[17251]
M = D                                        // ROM[17252]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[17253]
D = A                                        // ROM[17254]
// ---------------------------
// push D
@ SP                                         // ROM[17255]
AM = M+1                                     // ROM[17256]
A = A-1                                      // ROM[17257]
M = D                                        // ROM[17258]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[17259]
D = A                                        // ROM[17260]
// ---------------------------
// push D
@ SP                                         // ROM[17261]
AM = M+1                                     // ROM[17262]
A = A-1                                      // ROM[17263]
M = D                                        // ROM[17264]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[17265]
D = A                                        // ROM[17266]
// ---------------------------
// push D
@ SP                                         // ROM[17267]
AM = M+1                                     // ROM[17268]
A = A-1                                      // ROM[17269]
M = D                                        // ROM[17270]

// -------------------------------------
// PUSH: <constant, 55>
// -------------------------------------
@ 55                                         // ROM[17271]
D = A                                        // ROM[17272]
// ---------------------------
// push D
@ SP                                         // ROM[17273]
AM = M+1                                     // ROM[17274]
A = A-1                                      // ROM[17275]
M = D                                        // ROM[17276]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17277]
D = A                                        // ROM[17278]
// ---------------------------
// push D
@ SP                                         // ROM[17279]
AM = M+1                                     // ROM[17280]
A = A-1                                      // ROM[17281]
M = D                                        // ROM[17282]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17283]
D = A                                        // ROM[17284]
// ---------------------------
// push D
@ SP                                         // ROM[17285]
AM = M+1                                     // ROM[17286]
A = A-1                                      // ROM[17287]
M = D                                        // ROM[17288]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17289]
D = A                                        // ROM[17290]
// ---------------------------
// push D
@ SP                                         // ROM[17291]
AM = M+1                                     // ROM[17292]
A = A-1                                      // ROM[17293]
M = D                                        // ROM[17294]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17295]
D = A                                        // ROM[17296]
// ---------------------------
// push D
@ SP                                         // ROM[17297]
AM = M+1                                     // ROM[17298]
A = A-1                                      // ROM[17299]
M = D                                        // ROM[17300]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17301]
D = A                                        // ROM[17302]
// ---------------------------
// push D
@ SP                                         // ROM[17303]
AM = M+1                                     // ROM[17304]
A = A-1                                      // ROM[17305]
M = D                                        // ROM[17306]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17307]
D = A                                        // ROM[17308]
// ---------------------------
// push D
@ SP                                         // ROM[17309]
AM = M+1                                     // ROM[17310]
A = A-1                                      // ROM[17311]
M = D                                        // ROM[17312]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17313]
D = A                                        // ROM[17314]
@ R13                                        // ROM[17315]
M = D                                        // ROM[17316]
// ---------------------------
// Push RA
@ Output.initMap:155                         // ROM[17317]
D = A                                        // ROM[17318]
// ---------------------------
// push D
@ SP                                         // ROM[17319]
AM = M+1                                     // ROM[17320]
A = A-1                                      // ROM[17321]
M = D                                        // ROM[17322]
// ---------------------------
// call
@ Output.initMap:156                         // ROM[17323]
D = A                                        // ROM[17324]
@ R15                                        // ROM[17325]
M = D                                        // ROM[17326]
@ :call                                      // ROM[17327]
0; JMP                                       // ROM[17328]
( Output.initMap:156)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17329]
0; JMP                                       // ROM[17330]
// ---------------------------
// ( RA )
( Output.initMap:155) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17331]
AM = M-1                                     // ROM[17332]
D = M                                        // ROM[17333]
// ---------------------------
@ 5                                          // ROM[17334]
M = D                                        // ROM[17335]

// -------------------------------------
// PUSH: <constant, 105>
// -------------------------------------
@ 105                                        // ROM[17336]
D = A                                        // ROM[17337]
// ---------------------------
// push D
@ SP                                         // ROM[17338]
AM = M+1                                     // ROM[17339]
A = A-1                                      // ROM[17340]
M = D                                        // ROM[17341]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17342]
D = A                                        // ROM[17343]
// ---------------------------
// push D
@ SP                                         // ROM[17344]
AM = M+1                                     // ROM[17345]
A = A-1                                      // ROM[17346]
M = D                                        // ROM[17347]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17348]
D = A                                        // ROM[17349]
// ---------------------------
// push D
@ SP                                         // ROM[17350]
AM = M+1                                     // ROM[17351]
A = A-1                                      // ROM[17352]
M = D                                        // ROM[17353]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17354]
D = A                                        // ROM[17355]
// ---------------------------
// push D
@ SP                                         // ROM[17356]
AM = M+1                                     // ROM[17357]
A = A-1                                      // ROM[17358]
M = D                                        // ROM[17359]

// -------------------------------------
// PUSH: <constant, 14>
// -------------------------------------
@ 14                                         // ROM[17360]
D = A                                        // ROM[17361]
// ---------------------------
// push D
@ SP                                         // ROM[17362]
AM = M+1                                     // ROM[17363]
A = A-1                                      // ROM[17364]
M = D                                        // ROM[17365]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17366]
D = A                                        // ROM[17367]
// ---------------------------
// push D
@ SP                                         // ROM[17368]
AM = M+1                                     // ROM[17369]
A = A-1                                      // ROM[17370]
M = D                                        // ROM[17371]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17372]
D = A                                        // ROM[17373]
// ---------------------------
// push D
@ SP                                         // ROM[17374]
AM = M+1                                     // ROM[17375]
A = A-1                                      // ROM[17376]
M = D                                        // ROM[17377]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17378]
D = A                                        // ROM[17379]
// ---------------------------
// push D
@ SP                                         // ROM[17380]
AM = M+1                                     // ROM[17381]
A = A-1                                      // ROM[17382]
M = D                                        // ROM[17383]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17384]
D = A                                        // ROM[17385]
// ---------------------------
// push D
@ SP                                         // ROM[17386]
AM = M+1                                     // ROM[17387]
A = A-1                                      // ROM[17388]
M = D                                        // ROM[17389]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[17390]
D = A                                        // ROM[17391]
// ---------------------------
// push D
@ SP                                         // ROM[17392]
AM = M+1                                     // ROM[17393]
A = A-1                                      // ROM[17394]
M = D                                        // ROM[17395]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17396]
D = A                                        // ROM[17397]
// ---------------------------
// push D
@ SP                                         // ROM[17398]
AM = M+1                                     // ROM[17399]
A = A-1                                      // ROM[17400]
M = D                                        // ROM[17401]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17402]
D = A                                        // ROM[17403]
// ---------------------------
// push D
@ SP                                         // ROM[17404]
AM = M+1                                     // ROM[17405]
A = A-1                                      // ROM[17406]
M = D                                        // ROM[17407]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17408]
D = A                                        // ROM[17409]
@ R13                                        // ROM[17410]
M = D                                        // ROM[17411]
// ---------------------------
// Push RA
@ Output.initMap:157                         // ROM[17412]
D = A                                        // ROM[17413]
// ---------------------------
// push D
@ SP                                         // ROM[17414]
AM = M+1                                     // ROM[17415]
A = A-1                                      // ROM[17416]
M = D                                        // ROM[17417]
// ---------------------------
// call
@ Output.initMap:158                         // ROM[17418]
D = A                                        // ROM[17419]
@ R15                                        // ROM[17420]
M = D                                        // ROM[17421]
@ :call                                      // ROM[17422]
0; JMP                                       // ROM[17423]
( Output.initMap:158)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17424]
0; JMP                                       // ROM[17425]
// ---------------------------
// ( RA )
( Output.initMap:157) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17426]
AM = M-1                                     // ROM[17427]
D = M                                        // ROM[17428]
// ---------------------------
@ 5                                          // ROM[17429]
M = D                                        // ROM[17430]

// -------------------------------------
// PUSH: <constant, 106>
// -------------------------------------
@ 106                                        // ROM[17431]
D = A                                        // ROM[17432]
// ---------------------------
// push D
@ SP                                         // ROM[17433]
AM = M+1                                     // ROM[17434]
A = A-1                                      // ROM[17435]
M = D                                        // ROM[17436]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[17437]
D = A                                        // ROM[17438]
// ---------------------------
// push D
@ SP                                         // ROM[17439]
AM = M+1                                     // ROM[17440]
A = A-1                                      // ROM[17441]
M = D                                        // ROM[17442]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[17443]
D = A                                        // ROM[17444]
// ---------------------------
// push D
@ SP                                         // ROM[17445]
AM = M+1                                     // ROM[17446]
A = A-1                                      // ROM[17447]
M = D                                        // ROM[17448]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17449]
D = A                                        // ROM[17450]
// ---------------------------
// push D
@ SP                                         // ROM[17451]
AM = M+1                                     // ROM[17452]
A = A-1                                      // ROM[17453]
M = D                                        // ROM[17454]

// -------------------------------------
// PUSH: <constant, 56>
// -------------------------------------
@ 56                                         // ROM[17455]
D = A                                        // ROM[17456]
// ---------------------------
// push D
@ SP                                         // ROM[17457]
AM = M+1                                     // ROM[17458]
A = A-1                                      // ROM[17459]
M = D                                        // ROM[17460]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[17461]
D = A                                        // ROM[17462]
// ---------------------------
// push D
@ SP                                         // ROM[17463]
AM = M+1                                     // ROM[17464]
A = A-1                                      // ROM[17465]
M = D                                        // ROM[17466]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[17467]
D = A                                        // ROM[17468]
// ---------------------------
// push D
@ SP                                         // ROM[17469]
AM = M+1                                     // ROM[17470]
A = A-1                                      // ROM[17471]
M = D                                        // ROM[17472]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[17473]
D = A                                        // ROM[17474]
// ---------------------------
// push D
@ SP                                         // ROM[17475]
AM = M+1                                     // ROM[17476]
A = A-1                                      // ROM[17477]
M = D                                        // ROM[17478]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[17479]
D = A                                        // ROM[17480]
// ---------------------------
// push D
@ SP                                         // ROM[17481]
AM = M+1                                     // ROM[17482]
A = A-1                                      // ROM[17483]
M = D                                        // ROM[17484]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17485]
D = A                                        // ROM[17486]
// ---------------------------
// push D
@ SP                                         // ROM[17487]
AM = M+1                                     // ROM[17488]
A = A-1                                      // ROM[17489]
M = D                                        // ROM[17490]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[17491]
D = A                                        // ROM[17492]
// ---------------------------
// push D
@ SP                                         // ROM[17493]
AM = M+1                                     // ROM[17494]
A = A-1                                      // ROM[17495]
M = D                                        // ROM[17496]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17497]
D = A                                        // ROM[17498]
// ---------------------------
// push D
@ SP                                         // ROM[17499]
AM = M+1                                     // ROM[17500]
A = A-1                                      // ROM[17501]
M = D                                        // ROM[17502]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17503]
D = A                                        // ROM[17504]
@ R13                                        // ROM[17505]
M = D                                        // ROM[17506]
// ---------------------------
// Push RA
@ Output.initMap:159                         // ROM[17507]
D = A                                        // ROM[17508]
// ---------------------------
// push D
@ SP                                         // ROM[17509]
AM = M+1                                     // ROM[17510]
A = A-1                                      // ROM[17511]
M = D                                        // ROM[17512]
// ---------------------------
// call
@ Output.initMap:160                         // ROM[17513]
D = A                                        // ROM[17514]
@ R15                                        // ROM[17515]
M = D                                        // ROM[17516]
@ :call                                      // ROM[17517]
0; JMP                                       // ROM[17518]
( Output.initMap:160)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17519]
0; JMP                                       // ROM[17520]
// ---------------------------
// ( RA )
( Output.initMap:159) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17521]
AM = M-1                                     // ROM[17522]
D = M                                        // ROM[17523]
// ---------------------------
@ 5                                          // ROM[17524]
M = D                                        // ROM[17525]

// -------------------------------------
// PUSH: <constant, 107>
// -------------------------------------
@ 107                                        // ROM[17526]
D = A                                        // ROM[17527]
// ---------------------------
// push D
@ SP                                         // ROM[17528]
AM = M+1                                     // ROM[17529]
A = A-1                                      // ROM[17530]
M = D                                        // ROM[17531]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[17532]
D = A                                        // ROM[17533]
// ---------------------------
// push D
@ SP                                         // ROM[17534]
AM = M+1                                     // ROM[17535]
A = A-1                                      // ROM[17536]
M = D                                        // ROM[17537]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[17538]
D = A                                        // ROM[17539]
// ---------------------------
// push D
@ SP                                         // ROM[17540]
AM = M+1                                     // ROM[17541]
A = A-1                                      // ROM[17542]
M = D                                        // ROM[17543]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[17544]
D = A                                        // ROM[17545]
// ---------------------------
// push D
@ SP                                         // ROM[17546]
AM = M+1                                     // ROM[17547]
A = A-1                                      // ROM[17548]
M = D                                        // ROM[17549]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17550]
D = A                                        // ROM[17551]
// ---------------------------
// push D
@ SP                                         // ROM[17552]
AM = M+1                                     // ROM[17553]
A = A-1                                      // ROM[17554]
M = D                                        // ROM[17555]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[17556]
D = A                                        // ROM[17557]
// ---------------------------
// push D
@ SP                                         // ROM[17558]
AM = M+1                                     // ROM[17559]
A = A-1                                      // ROM[17560]
M = D                                        // ROM[17561]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[17562]
D = A                                        // ROM[17563]
// ---------------------------
// push D
@ SP                                         // ROM[17564]
AM = M+1                                     // ROM[17565]
A = A-1                                      // ROM[17566]
M = D                                        // ROM[17567]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[17568]
D = A                                        // ROM[17569]
// ---------------------------
// push D
@ SP                                         // ROM[17570]
AM = M+1                                     // ROM[17571]
A = A-1                                      // ROM[17572]
M = D                                        // ROM[17573]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[17574]
D = A                                        // ROM[17575]
// ---------------------------
// push D
@ SP                                         // ROM[17576]
AM = M+1                                     // ROM[17577]
A = A-1                                      // ROM[17578]
M = D                                        // ROM[17579]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17580]
D = A                                        // ROM[17581]
// ---------------------------
// push D
@ SP                                         // ROM[17582]
AM = M+1                                     // ROM[17583]
A = A-1                                      // ROM[17584]
M = D                                        // ROM[17585]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17586]
D = A                                        // ROM[17587]
// ---------------------------
// push D
@ SP                                         // ROM[17588]
AM = M+1                                     // ROM[17589]
A = A-1                                      // ROM[17590]
M = D                                        // ROM[17591]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17592]
D = A                                        // ROM[17593]
// ---------------------------
// push D
@ SP                                         // ROM[17594]
AM = M+1                                     // ROM[17595]
A = A-1                                      // ROM[17596]
M = D                                        // ROM[17597]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17598]
D = A                                        // ROM[17599]
@ R13                                        // ROM[17600]
M = D                                        // ROM[17601]
// ---------------------------
// Push RA
@ Output.initMap:161                         // ROM[17602]
D = A                                        // ROM[17603]
// ---------------------------
// push D
@ SP                                         // ROM[17604]
AM = M+1                                     // ROM[17605]
A = A-1                                      // ROM[17606]
M = D                                        // ROM[17607]
// ---------------------------
// call
@ Output.initMap:162                         // ROM[17608]
D = A                                        // ROM[17609]
@ R15                                        // ROM[17610]
M = D                                        // ROM[17611]
@ :call                                      // ROM[17612]
0; JMP                                       // ROM[17613]
( Output.initMap:162)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17614]
0; JMP                                       // ROM[17615]
// ---------------------------
// ( RA )
( Output.initMap:161) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17616]
AM = M-1                                     // ROM[17617]
D = M                                        // ROM[17618]
// ---------------------------
@ 5                                          // ROM[17619]
M = D                                        // ROM[17620]

// -------------------------------------
// PUSH: <constant, 108>
// -------------------------------------
@ 108                                        // ROM[17621]
D = A                                        // ROM[17622]
// ---------------------------
// push D
@ SP                                         // ROM[17623]
AM = M+1                                     // ROM[17624]
A = A-1                                      // ROM[17625]
M = D                                        // ROM[17626]

// -------------------------------------
// PUSH: <constant, 14>
// -------------------------------------
@ 14                                         // ROM[17627]
D = A                                        // ROM[17628]
// ---------------------------
// push D
@ SP                                         // ROM[17629]
AM = M+1                                     // ROM[17630]
A = A-1                                      // ROM[17631]
M = D                                        // ROM[17632]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17633]
D = A                                        // ROM[17634]
// ---------------------------
// push D
@ SP                                         // ROM[17635]
AM = M+1                                     // ROM[17636]
A = A-1                                      // ROM[17637]
M = D                                        // ROM[17638]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17639]
D = A                                        // ROM[17640]
// ---------------------------
// push D
@ SP                                         // ROM[17641]
AM = M+1                                     // ROM[17642]
A = A-1                                      // ROM[17643]
M = D                                        // ROM[17644]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17645]
D = A                                        // ROM[17646]
// ---------------------------
// push D
@ SP                                         // ROM[17647]
AM = M+1                                     // ROM[17648]
A = A-1                                      // ROM[17649]
M = D                                        // ROM[17650]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17651]
D = A                                        // ROM[17652]
// ---------------------------
// push D
@ SP                                         // ROM[17653]
AM = M+1                                     // ROM[17654]
A = A-1                                      // ROM[17655]
M = D                                        // ROM[17656]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17657]
D = A                                        // ROM[17658]
// ---------------------------
// push D
@ SP                                         // ROM[17659]
AM = M+1                                     // ROM[17660]
A = A-1                                      // ROM[17661]
M = D                                        // ROM[17662]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17663]
D = A                                        // ROM[17664]
// ---------------------------
// push D
@ SP                                         // ROM[17665]
AM = M+1                                     // ROM[17666]
A = A-1                                      // ROM[17667]
M = D                                        // ROM[17668]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[17669]
D = A                                        // ROM[17670]
// ---------------------------
// push D
@ SP                                         // ROM[17671]
AM = M+1                                     // ROM[17672]
A = A-1                                      // ROM[17673]
M = D                                        // ROM[17674]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[17675]
D = A                                        // ROM[17676]
// ---------------------------
// push D
@ SP                                         // ROM[17677]
AM = M+1                                     // ROM[17678]
A = A-1                                      // ROM[17679]
M = D                                        // ROM[17680]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17681]
D = A                                        // ROM[17682]
// ---------------------------
// push D
@ SP                                         // ROM[17683]
AM = M+1                                     // ROM[17684]
A = A-1                                      // ROM[17685]
M = D                                        // ROM[17686]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17687]
D = A                                        // ROM[17688]
// ---------------------------
// push D
@ SP                                         // ROM[17689]
AM = M+1                                     // ROM[17690]
A = A-1                                      // ROM[17691]
M = D                                        // ROM[17692]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17693]
D = A                                        // ROM[17694]
@ R13                                        // ROM[17695]
M = D                                        // ROM[17696]
// ---------------------------
// Push RA
@ Output.initMap:163                         // ROM[17697]
D = A                                        // ROM[17698]
// ---------------------------
// push D
@ SP                                         // ROM[17699]
AM = M+1                                     // ROM[17700]
A = A-1                                      // ROM[17701]
M = D                                        // ROM[17702]
// ---------------------------
// call
@ Output.initMap:164                         // ROM[17703]
D = A                                        // ROM[17704]
@ R15                                        // ROM[17705]
M = D                                        // ROM[17706]
@ :call                                      // ROM[17707]
0; JMP                                       // ROM[17708]
( Output.initMap:164)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17709]
0; JMP                                       // ROM[17710]
// ---------------------------
// ( RA )
( Output.initMap:163) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17711]
AM = M-1                                     // ROM[17712]
D = M                                        // ROM[17713]
// ---------------------------
@ 5                                          // ROM[17714]
M = D                                        // ROM[17715]

// -------------------------------------
// PUSH: <constant, 109>
// -------------------------------------
@ 109                                        // ROM[17716]
D = A                                        // ROM[17717]
// ---------------------------
// push D
@ SP                                         // ROM[17718]
AM = M+1                                     // ROM[17719]
A = A-1                                      // ROM[17720]
M = D                                        // ROM[17721]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17722]
D = A                                        // ROM[17723]
// ---------------------------
// push D
@ SP                                         // ROM[17724]
AM = M+1                                     // ROM[17725]
A = A-1                                      // ROM[17726]
M = D                                        // ROM[17727]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17728]
D = A                                        // ROM[17729]
// ---------------------------
// push D
@ SP                                         // ROM[17730]
AM = M+1                                     // ROM[17731]
A = A-1                                      // ROM[17732]
M = D                                        // ROM[17733]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17734]
D = A                                        // ROM[17735]
// ---------------------------
// push D
@ SP                                         // ROM[17736]
AM = M+1                                     // ROM[17737]
A = A-1                                      // ROM[17738]
M = D                                        // ROM[17739]

// -------------------------------------
// PUSH: <constant, 29>
// -------------------------------------
@ 29                                         // ROM[17740]
D = A                                        // ROM[17741]
// ---------------------------
// push D
@ SP                                         // ROM[17742]
AM = M+1                                     // ROM[17743]
A = A-1                                      // ROM[17744]
M = D                                        // ROM[17745]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[17746]
D = A                                        // ROM[17747]
// ---------------------------
// push D
@ SP                                         // ROM[17748]
AM = M+1                                     // ROM[17749]
A = A-1                                      // ROM[17750]
M = D                                        // ROM[17751]

// -------------------------------------
// PUSH: <constant, 43>
// -------------------------------------
@ 43                                         // ROM[17752]
D = A                                        // ROM[17753]
// ---------------------------
// push D
@ SP                                         // ROM[17754]
AM = M+1                                     // ROM[17755]
A = A-1                                      // ROM[17756]
M = D                                        // ROM[17757]

// -------------------------------------
// PUSH: <constant, 43>
// -------------------------------------
@ 43                                         // ROM[17758]
D = A                                        // ROM[17759]
// ---------------------------
// push D
@ SP                                         // ROM[17760]
AM = M+1                                     // ROM[17761]
A = A-1                                      // ROM[17762]
M = D                                        // ROM[17763]

// -------------------------------------
// PUSH: <constant, 43>
// -------------------------------------
@ 43                                         // ROM[17764]
D = A                                        // ROM[17765]
// ---------------------------
// push D
@ SP                                         // ROM[17766]
AM = M+1                                     // ROM[17767]
A = A-1                                      // ROM[17768]
M = D                                        // ROM[17769]

// -------------------------------------
// PUSH: <constant, 43>
// -------------------------------------
@ 43                                         // ROM[17770]
D = A                                        // ROM[17771]
// ---------------------------
// push D
@ SP                                         // ROM[17772]
AM = M+1                                     // ROM[17773]
A = A-1                                      // ROM[17774]
M = D                                        // ROM[17775]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17776]
D = A                                        // ROM[17777]
// ---------------------------
// push D
@ SP                                         // ROM[17778]
AM = M+1                                     // ROM[17779]
A = A-1                                      // ROM[17780]
M = D                                        // ROM[17781]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17782]
D = A                                        // ROM[17783]
// ---------------------------
// push D
@ SP                                         // ROM[17784]
AM = M+1                                     // ROM[17785]
A = A-1                                      // ROM[17786]
M = D                                        // ROM[17787]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17788]
D = A                                        // ROM[17789]
@ R13                                        // ROM[17790]
M = D                                        // ROM[17791]
// ---------------------------
// Push RA
@ Output.initMap:165                         // ROM[17792]
D = A                                        // ROM[17793]
// ---------------------------
// push D
@ SP                                         // ROM[17794]
AM = M+1                                     // ROM[17795]
A = A-1                                      // ROM[17796]
M = D                                        // ROM[17797]
// ---------------------------
// call
@ Output.initMap:166                         // ROM[17798]
D = A                                        // ROM[17799]
@ R15                                        // ROM[17800]
M = D                                        // ROM[17801]
@ :call                                      // ROM[17802]
0; JMP                                       // ROM[17803]
( Output.initMap:166)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17804]
0; JMP                                       // ROM[17805]
// ---------------------------
// ( RA )
( Output.initMap:165) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17806]
AM = M-1                                     // ROM[17807]
D = M                                        // ROM[17808]
// ---------------------------
@ 5                                          // ROM[17809]
M = D                                        // ROM[17810]

// -------------------------------------
// PUSH: <constant, 110>
// -------------------------------------
@ 110                                        // ROM[17811]
D = A                                        // ROM[17812]
// ---------------------------
// push D
@ SP                                         // ROM[17813]
AM = M+1                                     // ROM[17814]
A = A-1                                      // ROM[17815]
M = D                                        // ROM[17816]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17817]
D = A                                        // ROM[17818]
// ---------------------------
// push D
@ SP                                         // ROM[17819]
AM = M+1                                     // ROM[17820]
A = A-1                                      // ROM[17821]
M = D                                        // ROM[17822]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17823]
D = A                                        // ROM[17824]
// ---------------------------
// push D
@ SP                                         // ROM[17825]
AM = M+1                                     // ROM[17826]
A = A-1                                      // ROM[17827]
M = D                                        // ROM[17828]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17829]
D = A                                        // ROM[17830]
// ---------------------------
// push D
@ SP                                         // ROM[17831]
AM = M+1                                     // ROM[17832]
A = A-1                                      // ROM[17833]
M = D                                        // ROM[17834]

// -------------------------------------
// PUSH: <constant, 29>
// -------------------------------------
@ 29                                         // ROM[17835]
D = A                                        // ROM[17836]
// ---------------------------
// push D
@ SP                                         // ROM[17837]
AM = M+1                                     // ROM[17838]
A = A-1                                      // ROM[17839]
M = D                                        // ROM[17840]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17841]
D = A                                        // ROM[17842]
// ---------------------------
// push D
@ SP                                         // ROM[17843]
AM = M+1                                     // ROM[17844]
A = A-1                                      // ROM[17845]
M = D                                        // ROM[17846]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17847]
D = A                                        // ROM[17848]
// ---------------------------
// push D
@ SP                                         // ROM[17849]
AM = M+1                                     // ROM[17850]
A = A-1                                      // ROM[17851]
M = D                                        // ROM[17852]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17853]
D = A                                        // ROM[17854]
// ---------------------------
// push D
@ SP                                         // ROM[17855]
AM = M+1                                     // ROM[17856]
A = A-1                                      // ROM[17857]
M = D                                        // ROM[17858]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17859]
D = A                                        // ROM[17860]
// ---------------------------
// push D
@ SP                                         // ROM[17861]
AM = M+1                                     // ROM[17862]
A = A-1                                      // ROM[17863]
M = D                                        // ROM[17864]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17865]
D = A                                        // ROM[17866]
// ---------------------------
// push D
@ SP                                         // ROM[17867]
AM = M+1                                     // ROM[17868]
A = A-1                                      // ROM[17869]
M = D                                        // ROM[17870]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17871]
D = A                                        // ROM[17872]
// ---------------------------
// push D
@ SP                                         // ROM[17873]
AM = M+1                                     // ROM[17874]
A = A-1                                      // ROM[17875]
M = D                                        // ROM[17876]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17877]
D = A                                        // ROM[17878]
// ---------------------------
// push D
@ SP                                         // ROM[17879]
AM = M+1                                     // ROM[17880]
A = A-1                                      // ROM[17881]
M = D                                        // ROM[17882]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17883]
D = A                                        // ROM[17884]
@ R13                                        // ROM[17885]
M = D                                        // ROM[17886]
// ---------------------------
// Push RA
@ Output.initMap:167                         // ROM[17887]
D = A                                        // ROM[17888]
// ---------------------------
// push D
@ SP                                         // ROM[17889]
AM = M+1                                     // ROM[17890]
A = A-1                                      // ROM[17891]
M = D                                        // ROM[17892]
// ---------------------------
// call
@ Output.initMap:168                         // ROM[17893]
D = A                                        // ROM[17894]
@ R15                                        // ROM[17895]
M = D                                        // ROM[17896]
@ :call                                      // ROM[17897]
0; JMP                                       // ROM[17898]
( Output.initMap:168)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17899]
0; JMP                                       // ROM[17900]
// ---------------------------
// ( RA )
( Output.initMap:167) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17901]
AM = M-1                                     // ROM[17902]
D = M                                        // ROM[17903]
// ---------------------------
@ 5                                          // ROM[17904]
M = D                                        // ROM[17905]

// -------------------------------------
// PUSH: <constant, 111>
// -------------------------------------
@ 111                                        // ROM[17906]
D = A                                        // ROM[17907]
// ---------------------------
// push D
@ SP                                         // ROM[17908]
AM = M+1                                     // ROM[17909]
A = A-1                                      // ROM[17910]
M = D                                        // ROM[17911]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17912]
D = A                                        // ROM[17913]
// ---------------------------
// push D
@ SP                                         // ROM[17914]
AM = M+1                                     // ROM[17915]
A = A-1                                      // ROM[17916]
M = D                                        // ROM[17917]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17918]
D = A                                        // ROM[17919]
// ---------------------------
// push D
@ SP                                         // ROM[17920]
AM = M+1                                     // ROM[17921]
A = A-1                                      // ROM[17922]
M = D                                        // ROM[17923]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17924]
D = A                                        // ROM[17925]
// ---------------------------
// push D
@ SP                                         // ROM[17926]
AM = M+1                                     // ROM[17927]
A = A-1                                      // ROM[17928]
M = D                                        // ROM[17929]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[17930]
D = A                                        // ROM[17931]
// ---------------------------
// push D
@ SP                                         // ROM[17932]
AM = M+1                                     // ROM[17933]
A = A-1                                      // ROM[17934]
M = D                                        // ROM[17935]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17936]
D = A                                        // ROM[17937]
// ---------------------------
// push D
@ SP                                         // ROM[17938]
AM = M+1                                     // ROM[17939]
A = A-1                                      // ROM[17940]
M = D                                        // ROM[17941]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17942]
D = A                                        // ROM[17943]
// ---------------------------
// push D
@ SP                                         // ROM[17944]
AM = M+1                                     // ROM[17945]
A = A-1                                      // ROM[17946]
M = D                                        // ROM[17947]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17948]
D = A                                        // ROM[17949]
// ---------------------------
// push D
@ SP                                         // ROM[17950]
AM = M+1                                     // ROM[17951]
A = A-1                                      // ROM[17952]
M = D                                        // ROM[17953]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[17954]
D = A                                        // ROM[17955]
// ---------------------------
// push D
@ SP                                         // ROM[17956]
AM = M+1                                     // ROM[17957]
A = A-1                                      // ROM[17958]
M = D                                        // ROM[17959]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[17960]
D = A                                        // ROM[17961]
// ---------------------------
// push D
@ SP                                         // ROM[17962]
AM = M+1                                     // ROM[17963]
A = A-1                                      // ROM[17964]
M = D                                        // ROM[17965]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17966]
D = A                                        // ROM[17967]
// ---------------------------
// push D
@ SP                                         // ROM[17968]
AM = M+1                                     // ROM[17969]
A = A-1                                      // ROM[17970]
M = D                                        // ROM[17971]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[17972]
D = A                                        // ROM[17973]
// ---------------------------
// push D
@ SP                                         // ROM[17974]
AM = M+1                                     // ROM[17975]
A = A-1                                      // ROM[17976]
M = D                                        // ROM[17977]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[17978]
D = A                                        // ROM[17979]
@ R13                                        // ROM[17980]
M = D                                        // ROM[17981]
// ---------------------------
// Push RA
@ Output.initMap:169                         // ROM[17982]
D = A                                        // ROM[17983]
// ---------------------------
// push D
@ SP                                         // ROM[17984]
AM = M+1                                     // ROM[17985]
A = A-1                                      // ROM[17986]
M = D                                        // ROM[17987]
// ---------------------------
// call
@ Output.initMap:170                         // ROM[17988]
D = A                                        // ROM[17989]
@ R15                                        // ROM[17990]
M = D                                        // ROM[17991]
@ :call                                      // ROM[17992]
0; JMP                                       // ROM[17993]
( Output.initMap:170)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[17994]
0; JMP                                       // ROM[17995]
// ---------------------------
// ( RA )
( Output.initMap:169) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[17996]
AM = M-1                                     // ROM[17997]
D = M                                        // ROM[17998]
// ---------------------------
@ 5                                          // ROM[17999]
M = D                                        // ROM[18000]

// -------------------------------------
// PUSH: <constant, 112>
// -------------------------------------
@ 112                                        // ROM[18001]
D = A                                        // ROM[18002]
// ---------------------------
// push D
@ SP                                         // ROM[18003]
AM = M+1                                     // ROM[18004]
A = A-1                                      // ROM[18005]
M = D                                        // ROM[18006]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18007]
D = A                                        // ROM[18008]
// ---------------------------
// push D
@ SP                                         // ROM[18009]
AM = M+1                                     // ROM[18010]
A = A-1                                      // ROM[18011]
M = D                                        // ROM[18012]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18013]
D = A                                        // ROM[18014]
// ---------------------------
// push D
@ SP                                         // ROM[18015]
AM = M+1                                     // ROM[18016]
A = A-1                                      // ROM[18017]
M = D                                        // ROM[18018]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18019]
D = A                                        // ROM[18020]
// ---------------------------
// push D
@ SP                                         // ROM[18021]
AM = M+1                                     // ROM[18022]
A = A-1                                      // ROM[18023]
M = D                                        // ROM[18024]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[18025]
D = A                                        // ROM[18026]
// ---------------------------
// push D
@ SP                                         // ROM[18027]
AM = M+1                                     // ROM[18028]
A = A-1                                      // ROM[18029]
M = D                                        // ROM[18030]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18031]
D = A                                        // ROM[18032]
// ---------------------------
// push D
@ SP                                         // ROM[18033]
AM = M+1                                     // ROM[18034]
A = A-1                                      // ROM[18035]
M = D                                        // ROM[18036]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18037]
D = A                                        // ROM[18038]
// ---------------------------
// push D
@ SP                                         // ROM[18039]
AM = M+1                                     // ROM[18040]
A = A-1                                      // ROM[18041]
M = D                                        // ROM[18042]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18043]
D = A                                        // ROM[18044]
// ---------------------------
// push D
@ SP                                         // ROM[18045]
AM = M+1                                     // ROM[18046]
A = A-1                                      // ROM[18047]
M = D                                        // ROM[18048]

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[18049]
D = A                                        // ROM[18050]
// ---------------------------
// push D
@ SP                                         // ROM[18051]
AM = M+1                                     // ROM[18052]
A = A-1                                      // ROM[18053]
M = D                                        // ROM[18054]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[18055]
D = A                                        // ROM[18056]
// ---------------------------
// push D
@ SP                                         // ROM[18057]
AM = M+1                                     // ROM[18058]
A = A-1                                      // ROM[18059]
M = D                                        // ROM[18060]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[18061]
D = A                                        // ROM[18062]
// ---------------------------
// push D
@ SP                                         // ROM[18063]
AM = M+1                                     // ROM[18064]
A = A-1                                      // ROM[18065]
M = D                                        // ROM[18066]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18067]
D = A                                        // ROM[18068]
// ---------------------------
// push D
@ SP                                         // ROM[18069]
AM = M+1                                     // ROM[18070]
A = A-1                                      // ROM[18071]
M = D                                        // ROM[18072]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18073]
D = A                                        // ROM[18074]
@ R13                                        // ROM[18075]
M = D                                        // ROM[18076]
// ---------------------------
// Push RA
@ Output.initMap:171                         // ROM[18077]
D = A                                        // ROM[18078]
// ---------------------------
// push D
@ SP                                         // ROM[18079]
AM = M+1                                     // ROM[18080]
A = A-1                                      // ROM[18081]
M = D                                        // ROM[18082]
// ---------------------------
// call
@ Output.initMap:172                         // ROM[18083]
D = A                                        // ROM[18084]
@ R15                                        // ROM[18085]
M = D                                        // ROM[18086]
@ :call                                      // ROM[18087]
0; JMP                                       // ROM[18088]
( Output.initMap:172)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18089]
0; JMP                                       // ROM[18090]
// ---------------------------
// ( RA )
( Output.initMap:171) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18091]
AM = M-1                                     // ROM[18092]
D = M                                        // ROM[18093]
// ---------------------------
@ 5                                          // ROM[18094]
M = D                                        // ROM[18095]

// -------------------------------------
// PUSH: <constant, 113>
// -------------------------------------
@ 113                                        // ROM[18096]
D = A                                        // ROM[18097]
// ---------------------------
// push D
@ SP                                         // ROM[18098]
AM = M+1                                     // ROM[18099]
A = A-1                                      // ROM[18100]
M = D                                        // ROM[18101]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18102]
D = A                                        // ROM[18103]
// ---------------------------
// push D
@ SP                                         // ROM[18104]
AM = M+1                                     // ROM[18105]
A = A-1                                      // ROM[18106]
M = D                                        // ROM[18107]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18108]
D = A                                        // ROM[18109]
// ---------------------------
// push D
@ SP                                         // ROM[18110]
AM = M+1                                     // ROM[18111]
A = A-1                                      // ROM[18112]
M = D                                        // ROM[18113]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18114]
D = A                                        // ROM[18115]
// ---------------------------
// push D
@ SP                                         // ROM[18116]
AM = M+1                                     // ROM[18117]
A = A-1                                      // ROM[18118]
M = D                                        // ROM[18119]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[18120]
D = A                                        // ROM[18121]
// ---------------------------
// push D
@ SP                                         // ROM[18122]
AM = M+1                                     // ROM[18123]
A = A-1                                      // ROM[18124]
M = D                                        // ROM[18125]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18126]
D = A                                        // ROM[18127]
// ---------------------------
// push D
@ SP                                         // ROM[18128]
AM = M+1                                     // ROM[18129]
A = A-1                                      // ROM[18130]
M = D                                        // ROM[18131]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18132]
D = A                                        // ROM[18133]
// ---------------------------
// push D
@ SP                                         // ROM[18134]
AM = M+1                                     // ROM[18135]
A = A-1                                      // ROM[18136]
M = D                                        // ROM[18137]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18138]
D = A                                        // ROM[18139]
// ---------------------------
// push D
@ SP                                         // ROM[18140]
AM = M+1                                     // ROM[18141]
A = A-1                                      // ROM[18142]
M = D                                        // ROM[18143]

// -------------------------------------
// PUSH: <constant, 62>
// -------------------------------------
@ 62                                         // ROM[18144]
D = A                                        // ROM[18145]
// ---------------------------
// push D
@ SP                                         // ROM[18146]
AM = M+1                                     // ROM[18147]
A = A-1                                      // ROM[18148]
M = D                                        // ROM[18149]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[18150]
D = A                                        // ROM[18151]
// ---------------------------
// push D
@ SP                                         // ROM[18152]
AM = M+1                                     // ROM[18153]
A = A-1                                      // ROM[18154]
M = D                                        // ROM[18155]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[18156]
D = A                                        // ROM[18157]
// ---------------------------
// push D
@ SP                                         // ROM[18158]
AM = M+1                                     // ROM[18159]
A = A-1                                      // ROM[18160]
M = D                                        // ROM[18161]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18162]
D = A                                        // ROM[18163]
// ---------------------------
// push D
@ SP                                         // ROM[18164]
AM = M+1                                     // ROM[18165]
A = A-1                                      // ROM[18166]
M = D                                        // ROM[18167]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18168]
D = A                                        // ROM[18169]
@ R13                                        // ROM[18170]
M = D                                        // ROM[18171]
// ---------------------------
// Push RA
@ Output.initMap:173                         // ROM[18172]
D = A                                        // ROM[18173]
// ---------------------------
// push D
@ SP                                         // ROM[18174]
AM = M+1                                     // ROM[18175]
A = A-1                                      // ROM[18176]
M = D                                        // ROM[18177]
// ---------------------------
// call
@ Output.initMap:174                         // ROM[18178]
D = A                                        // ROM[18179]
@ R15                                        // ROM[18180]
M = D                                        // ROM[18181]
@ :call                                      // ROM[18182]
0; JMP                                       // ROM[18183]
( Output.initMap:174)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18184]
0; JMP                                       // ROM[18185]
// ---------------------------
// ( RA )
( Output.initMap:173) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18186]
AM = M-1                                     // ROM[18187]
D = M                                        // ROM[18188]
// ---------------------------
@ 5                                          // ROM[18189]
M = D                                        // ROM[18190]

// -------------------------------------
// PUSH: <constant, 114>
// -------------------------------------
@ 114                                        // ROM[18191]
D = A                                        // ROM[18192]
// ---------------------------
// push D
@ SP                                         // ROM[18193]
AM = M+1                                     // ROM[18194]
A = A-1                                      // ROM[18195]
M = D                                        // ROM[18196]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18197]
D = A                                        // ROM[18198]
// ---------------------------
// push D
@ SP                                         // ROM[18199]
AM = M+1                                     // ROM[18200]
A = A-1                                      // ROM[18201]
M = D                                        // ROM[18202]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18203]
D = A                                        // ROM[18204]
// ---------------------------
// push D
@ SP                                         // ROM[18205]
AM = M+1                                     // ROM[18206]
A = A-1                                      // ROM[18207]
M = D                                        // ROM[18208]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18209]
D = A                                        // ROM[18210]
// ---------------------------
// push D
@ SP                                         // ROM[18211]
AM = M+1                                     // ROM[18212]
A = A-1                                      // ROM[18213]
M = D                                        // ROM[18214]

// -------------------------------------
// PUSH: <constant, 29>
// -------------------------------------
@ 29                                         // ROM[18215]
D = A                                        // ROM[18216]
// ---------------------------
// push D
@ SP                                         // ROM[18217]
AM = M+1                                     // ROM[18218]
A = A-1                                      // ROM[18219]
M = D                                        // ROM[18220]

// -------------------------------------
// PUSH: <constant, 55>
// -------------------------------------
@ 55                                         // ROM[18221]
D = A                                        // ROM[18222]
// ---------------------------
// push D
@ SP                                         // ROM[18223]
AM = M+1                                     // ROM[18224]
A = A-1                                      // ROM[18225]
M = D                                        // ROM[18226]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18227]
D = A                                        // ROM[18228]
// ---------------------------
// push D
@ SP                                         // ROM[18229]
AM = M+1                                     // ROM[18230]
A = A-1                                      // ROM[18231]
M = D                                        // ROM[18232]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[18233]
D = A                                        // ROM[18234]
// ---------------------------
// push D
@ SP                                         // ROM[18235]
AM = M+1                                     // ROM[18236]
A = A-1                                      // ROM[18237]
M = D                                        // ROM[18238]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[18239]
D = A                                        // ROM[18240]
// ---------------------------
// push D
@ SP                                         // ROM[18241]
AM = M+1                                     // ROM[18242]
A = A-1                                      // ROM[18243]
M = D                                        // ROM[18244]

// -------------------------------------
// PUSH: <constant, 7>
// -------------------------------------
@ 7                                          // ROM[18245]
D = A                                        // ROM[18246]
// ---------------------------
// push D
@ SP                                         // ROM[18247]
AM = M+1                                     // ROM[18248]
A = A-1                                      // ROM[18249]
M = D                                        // ROM[18250]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18251]
D = A                                        // ROM[18252]
// ---------------------------
// push D
@ SP                                         // ROM[18253]
AM = M+1                                     // ROM[18254]
A = A-1                                      // ROM[18255]
M = D                                        // ROM[18256]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18257]
D = A                                        // ROM[18258]
// ---------------------------
// push D
@ SP                                         // ROM[18259]
AM = M+1                                     // ROM[18260]
A = A-1                                      // ROM[18261]
M = D                                        // ROM[18262]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18263]
D = A                                        // ROM[18264]
@ R13                                        // ROM[18265]
M = D                                        // ROM[18266]
// ---------------------------
// Push RA
@ Output.initMap:175                         // ROM[18267]
D = A                                        // ROM[18268]
// ---------------------------
// push D
@ SP                                         // ROM[18269]
AM = M+1                                     // ROM[18270]
A = A-1                                      // ROM[18271]
M = D                                        // ROM[18272]
// ---------------------------
// call
@ Output.initMap:176                         // ROM[18273]
D = A                                        // ROM[18274]
@ R15                                        // ROM[18275]
M = D                                        // ROM[18276]
@ :call                                      // ROM[18277]
0; JMP                                       // ROM[18278]
( Output.initMap:176)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18279]
0; JMP                                       // ROM[18280]
// ---------------------------
// ( RA )
( Output.initMap:175) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18281]
AM = M-1                                     // ROM[18282]
D = M                                        // ROM[18283]
// ---------------------------
@ 5                                          // ROM[18284]
M = D                                        // ROM[18285]

// -------------------------------------
// PUSH: <constant, 115>
// -------------------------------------
@ 115                                        // ROM[18286]
D = A                                        // ROM[18287]
// ---------------------------
// push D
@ SP                                         // ROM[18288]
AM = M+1                                     // ROM[18289]
A = A-1                                      // ROM[18290]
M = D                                        // ROM[18291]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18292]
D = A                                        // ROM[18293]
// ---------------------------
// push D
@ SP                                         // ROM[18294]
AM = M+1                                     // ROM[18295]
A = A-1                                      // ROM[18296]
M = D                                        // ROM[18297]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18298]
D = A                                        // ROM[18299]
// ---------------------------
// push D
@ SP                                         // ROM[18300]
AM = M+1                                     // ROM[18301]
A = A-1                                      // ROM[18302]
M = D                                        // ROM[18303]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18304]
D = A                                        // ROM[18305]
// ---------------------------
// push D
@ SP                                         // ROM[18306]
AM = M+1                                     // ROM[18307]
A = A-1                                      // ROM[18308]
M = D                                        // ROM[18309]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[18310]
D = A                                        // ROM[18311]
// ---------------------------
// push D
@ SP                                         // ROM[18312]
AM = M+1                                     // ROM[18313]
A = A-1                                      // ROM[18314]
M = D                                        // ROM[18315]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18316]
D = A                                        // ROM[18317]
// ---------------------------
// push D
@ SP                                         // ROM[18318]
AM = M+1                                     // ROM[18319]
A = A-1                                      // ROM[18320]
M = D                                        // ROM[18321]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[18322]
D = A                                        // ROM[18323]
// ---------------------------
// push D
@ SP                                         // ROM[18324]
AM = M+1                                     // ROM[18325]
A = A-1                                      // ROM[18326]
M = D                                        // ROM[18327]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[18328]
D = A                                        // ROM[18329]
// ---------------------------
// push D
@ SP                                         // ROM[18330]
AM = M+1                                     // ROM[18331]
A = A-1                                      // ROM[18332]
M = D                                        // ROM[18333]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18334]
D = A                                        // ROM[18335]
// ---------------------------
// push D
@ SP                                         // ROM[18336]
AM = M+1                                     // ROM[18337]
A = A-1                                      // ROM[18338]
M = D                                        // ROM[18339]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[18340]
D = A                                        // ROM[18341]
// ---------------------------
// push D
@ SP                                         // ROM[18342]
AM = M+1                                     // ROM[18343]
A = A-1                                      // ROM[18344]
M = D                                        // ROM[18345]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18346]
D = A                                        // ROM[18347]
// ---------------------------
// push D
@ SP                                         // ROM[18348]
AM = M+1                                     // ROM[18349]
A = A-1                                      // ROM[18350]
M = D                                        // ROM[18351]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18352]
D = A                                        // ROM[18353]
// ---------------------------
// push D
@ SP                                         // ROM[18354]
AM = M+1                                     // ROM[18355]
A = A-1                                      // ROM[18356]
M = D                                        // ROM[18357]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18358]
D = A                                        // ROM[18359]
@ R13                                        // ROM[18360]
M = D                                        // ROM[18361]
// ---------------------------
// Push RA
@ Output.initMap:177                         // ROM[18362]
D = A                                        // ROM[18363]
// ---------------------------
// push D
@ SP                                         // ROM[18364]
AM = M+1                                     // ROM[18365]
A = A-1                                      // ROM[18366]
M = D                                        // ROM[18367]
// ---------------------------
// call
@ Output.initMap:178                         // ROM[18368]
D = A                                        // ROM[18369]
@ R15                                        // ROM[18370]
M = D                                        // ROM[18371]
@ :call                                      // ROM[18372]
0; JMP                                       // ROM[18373]
( Output.initMap:178)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18374]
0; JMP                                       // ROM[18375]
// ---------------------------
// ( RA )
( Output.initMap:177) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18376]
AM = M-1                                     // ROM[18377]
D = M                                        // ROM[18378]
// ---------------------------
@ 5                                          // ROM[18379]
M = D                                        // ROM[18380]

// -------------------------------------
// PUSH: <constant, 116>
// -------------------------------------
@ 116                                        // ROM[18381]
D = A                                        // ROM[18382]
// ---------------------------
// push D
@ SP                                         // ROM[18383]
AM = M+1                                     // ROM[18384]
A = A-1                                      // ROM[18385]
M = D                                        // ROM[18386]

// -------------------------------------
// PUSH: <constant, 4>
// -------------------------------------
@ 4                                          // ROM[18387]
D = A                                        // ROM[18388]
// ---------------------------
// push D
@ SP                                         // ROM[18389]
AM = M+1                                     // ROM[18390]
A = A-1                                      // ROM[18391]
M = D                                        // ROM[18392]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[18393]
D = A                                        // ROM[18394]
// ---------------------------
// push D
@ SP                                         // ROM[18395]
AM = M+1                                     // ROM[18396]
A = A-1                                      // ROM[18397]
M = D                                        // ROM[18398]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[18399]
D = A                                        // ROM[18400]
// ---------------------------
// push D
@ SP                                         // ROM[18401]
AM = M+1                                     // ROM[18402]
A = A-1                                      // ROM[18403]
M = D                                        // ROM[18404]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[18405]
D = A                                        // ROM[18406]
// ---------------------------
// push D
@ SP                                         // ROM[18407]
AM = M+1                                     // ROM[18408]
A = A-1                                      // ROM[18409]
M = D                                        // ROM[18410]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[18411]
D = A                                        // ROM[18412]
// ---------------------------
// push D
@ SP                                         // ROM[18413]
AM = M+1                                     // ROM[18414]
A = A-1                                      // ROM[18415]
M = D                                        // ROM[18416]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[18417]
D = A                                        // ROM[18418]
// ---------------------------
// push D
@ SP                                         // ROM[18419]
AM = M+1                                     // ROM[18420]
A = A-1                                      // ROM[18421]
M = D                                        // ROM[18422]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[18423]
D = A                                        // ROM[18424]
// ---------------------------
// push D
@ SP                                         // ROM[18425]
AM = M+1                                     // ROM[18426]
A = A-1                                      // ROM[18427]
M = D                                        // ROM[18428]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[18429]
D = A                                        // ROM[18430]
// ---------------------------
// push D
@ SP                                         // ROM[18431]
AM = M+1                                     // ROM[18432]
A = A-1                                      // ROM[18433]
M = D                                        // ROM[18434]

// -------------------------------------
// PUSH: <constant, 28>
// -------------------------------------
@ 28                                         // ROM[18435]
D = A                                        // ROM[18436]
// ---------------------------
// push D
@ SP                                         // ROM[18437]
AM = M+1                                     // ROM[18438]
A = A-1                                      // ROM[18439]
M = D                                        // ROM[18440]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18441]
D = A                                        // ROM[18442]
// ---------------------------
// push D
@ SP                                         // ROM[18443]
AM = M+1                                     // ROM[18444]
A = A-1                                      // ROM[18445]
M = D                                        // ROM[18446]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18447]
D = A                                        // ROM[18448]
// ---------------------------
// push D
@ SP                                         // ROM[18449]
AM = M+1                                     // ROM[18450]
A = A-1                                      // ROM[18451]
M = D                                        // ROM[18452]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18453]
D = A                                        // ROM[18454]
@ R13                                        // ROM[18455]
M = D                                        // ROM[18456]
// ---------------------------
// Push RA
@ Output.initMap:179                         // ROM[18457]
D = A                                        // ROM[18458]
// ---------------------------
// push D
@ SP                                         // ROM[18459]
AM = M+1                                     // ROM[18460]
A = A-1                                      // ROM[18461]
M = D                                        // ROM[18462]
// ---------------------------
// call
@ Output.initMap:180                         // ROM[18463]
D = A                                        // ROM[18464]
@ R15                                        // ROM[18465]
M = D                                        // ROM[18466]
@ :call                                      // ROM[18467]
0; JMP                                       // ROM[18468]
( Output.initMap:180)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18469]
0; JMP                                       // ROM[18470]
// ---------------------------
// ( RA )
( Output.initMap:179) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18471]
AM = M-1                                     // ROM[18472]
D = M                                        // ROM[18473]
// ---------------------------
@ 5                                          // ROM[18474]
M = D                                        // ROM[18475]

// -------------------------------------
// PUSH: <constant, 117>
// -------------------------------------
@ 117                                        // ROM[18476]
D = A                                        // ROM[18477]
// ---------------------------
// push D
@ SP                                         // ROM[18478]
AM = M+1                                     // ROM[18479]
A = A-1                                      // ROM[18480]
M = D                                        // ROM[18481]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18482]
D = A                                        // ROM[18483]
// ---------------------------
// push D
@ SP                                         // ROM[18484]
AM = M+1                                     // ROM[18485]
A = A-1                                      // ROM[18486]
M = D                                        // ROM[18487]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18488]
D = A                                        // ROM[18489]
// ---------------------------
// push D
@ SP                                         // ROM[18490]
AM = M+1                                     // ROM[18491]
A = A-1                                      // ROM[18492]
M = D                                        // ROM[18493]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18494]
D = A                                        // ROM[18495]
// ---------------------------
// push D
@ SP                                         // ROM[18496]
AM = M+1                                     // ROM[18497]
A = A-1                                      // ROM[18498]
M = D                                        // ROM[18499]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[18500]
D = A                                        // ROM[18501]
// ---------------------------
// push D
@ SP                                         // ROM[18502]
AM = M+1                                     // ROM[18503]
A = A-1                                      // ROM[18504]
M = D                                        // ROM[18505]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[18506]
D = A                                        // ROM[18507]
// ---------------------------
// push D
@ SP                                         // ROM[18508]
AM = M+1                                     // ROM[18509]
A = A-1                                      // ROM[18510]
M = D                                        // ROM[18511]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[18512]
D = A                                        // ROM[18513]
// ---------------------------
// push D
@ SP                                         // ROM[18514]
AM = M+1                                     // ROM[18515]
A = A-1                                      // ROM[18516]
M = D                                        // ROM[18517]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[18518]
D = A                                        // ROM[18519]
// ---------------------------
// push D
@ SP                                         // ROM[18520]
AM = M+1                                     // ROM[18521]
A = A-1                                      // ROM[18522]
M = D                                        // ROM[18523]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[18524]
D = A                                        // ROM[18525]
// ---------------------------
// push D
@ SP                                         // ROM[18526]
AM = M+1                                     // ROM[18527]
A = A-1                                      // ROM[18528]
M = D                                        // ROM[18529]

// -------------------------------------
// PUSH: <constant, 54>
// -------------------------------------
@ 54                                         // ROM[18530]
D = A                                        // ROM[18531]
// ---------------------------
// push D
@ SP                                         // ROM[18532]
AM = M+1                                     // ROM[18533]
A = A-1                                      // ROM[18534]
M = D                                        // ROM[18535]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18536]
D = A                                        // ROM[18537]
// ---------------------------
// push D
@ SP                                         // ROM[18538]
AM = M+1                                     // ROM[18539]
A = A-1                                      // ROM[18540]
M = D                                        // ROM[18541]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18542]
D = A                                        // ROM[18543]
// ---------------------------
// push D
@ SP                                         // ROM[18544]
AM = M+1                                     // ROM[18545]
A = A-1                                      // ROM[18546]
M = D                                        // ROM[18547]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18548]
D = A                                        // ROM[18549]
@ R13                                        // ROM[18550]
M = D                                        // ROM[18551]
// ---------------------------
// Push RA
@ Output.initMap:181                         // ROM[18552]
D = A                                        // ROM[18553]
// ---------------------------
// push D
@ SP                                         // ROM[18554]
AM = M+1                                     // ROM[18555]
A = A-1                                      // ROM[18556]
M = D                                        // ROM[18557]
// ---------------------------
// call
@ Output.initMap:182                         // ROM[18558]
D = A                                        // ROM[18559]
@ R15                                        // ROM[18560]
M = D                                        // ROM[18561]
@ :call                                      // ROM[18562]
0; JMP                                       // ROM[18563]
( Output.initMap:182)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18564]
0; JMP                                       // ROM[18565]
// ---------------------------
// ( RA )
( Output.initMap:181) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18566]
AM = M-1                                     // ROM[18567]
D = M                                        // ROM[18568]
// ---------------------------
@ 5                                          // ROM[18569]
M = D                                        // ROM[18570]

// -------------------------------------
// PUSH: <constant, 118>
// -------------------------------------
@ 118                                        // ROM[18571]
D = A                                        // ROM[18572]
// ---------------------------
// push D
@ SP                                         // ROM[18573]
AM = M+1                                     // ROM[18574]
A = A-1                                      // ROM[18575]
M = D                                        // ROM[18576]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18577]
D = A                                        // ROM[18578]
// ---------------------------
// push D
@ SP                                         // ROM[18579]
AM = M+1                                     // ROM[18580]
A = A-1                                      // ROM[18581]
M = D                                        // ROM[18582]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18583]
D = A                                        // ROM[18584]
// ---------------------------
// push D
@ SP                                         // ROM[18585]
AM = M+1                                     // ROM[18586]
A = A-1                                      // ROM[18587]
M = D                                        // ROM[18588]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18589]
D = A                                        // ROM[18590]
// ---------------------------
// push D
@ SP                                         // ROM[18591]
AM = M+1                                     // ROM[18592]
A = A-1                                      // ROM[18593]
M = D                                        // ROM[18594]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18595]
D = A                                        // ROM[18596]
// ---------------------------
// push D
@ SP                                         // ROM[18597]
AM = M+1                                     // ROM[18598]
A = A-1                                      // ROM[18599]
M = D                                        // ROM[18600]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18601]
D = A                                        // ROM[18602]
// ---------------------------
// push D
@ SP                                         // ROM[18603]
AM = M+1                                     // ROM[18604]
A = A-1                                      // ROM[18605]
M = D                                        // ROM[18606]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18607]
D = A                                        // ROM[18608]
// ---------------------------
// push D
@ SP                                         // ROM[18609]
AM = M+1                                     // ROM[18610]
A = A-1                                      // ROM[18611]
M = D                                        // ROM[18612]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18613]
D = A                                        // ROM[18614]
// ---------------------------
// push D
@ SP                                         // ROM[18615]
AM = M+1                                     // ROM[18616]
A = A-1                                      // ROM[18617]
M = D                                        // ROM[18618]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[18619]
D = A                                        // ROM[18620]
// ---------------------------
// push D
@ SP                                         // ROM[18621]
AM = M+1                                     // ROM[18622]
A = A-1                                      // ROM[18623]
M = D                                        // ROM[18624]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[18625]
D = A                                        // ROM[18626]
// ---------------------------
// push D
@ SP                                         // ROM[18627]
AM = M+1                                     // ROM[18628]
A = A-1                                      // ROM[18629]
M = D                                        // ROM[18630]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18631]
D = A                                        // ROM[18632]
// ---------------------------
// push D
@ SP                                         // ROM[18633]
AM = M+1                                     // ROM[18634]
A = A-1                                      // ROM[18635]
M = D                                        // ROM[18636]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18637]
D = A                                        // ROM[18638]
// ---------------------------
// push D
@ SP                                         // ROM[18639]
AM = M+1                                     // ROM[18640]
A = A-1                                      // ROM[18641]
M = D                                        // ROM[18642]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18643]
D = A                                        // ROM[18644]
@ R13                                        // ROM[18645]
M = D                                        // ROM[18646]
// ---------------------------
// Push RA
@ Output.initMap:183                         // ROM[18647]
D = A                                        // ROM[18648]
// ---------------------------
// push D
@ SP                                         // ROM[18649]
AM = M+1                                     // ROM[18650]
A = A-1                                      // ROM[18651]
M = D                                        // ROM[18652]
// ---------------------------
// call
@ Output.initMap:184                         // ROM[18653]
D = A                                        // ROM[18654]
@ R15                                        // ROM[18655]
M = D                                        // ROM[18656]
@ :call                                      // ROM[18657]
0; JMP                                       // ROM[18658]
( Output.initMap:184)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18659]
0; JMP                                       // ROM[18660]
// ---------------------------
// ( RA )
( Output.initMap:183) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18661]
AM = M-1                                     // ROM[18662]
D = M                                        // ROM[18663]
// ---------------------------
@ 5                                          // ROM[18664]
M = D                                        // ROM[18665]

// -------------------------------------
// PUSH: <constant, 119>
// -------------------------------------
@ 119                                        // ROM[18666]
D = A                                        // ROM[18667]
// ---------------------------
// push D
@ SP                                         // ROM[18668]
AM = M+1                                     // ROM[18669]
A = A-1                                      // ROM[18670]
M = D                                        // ROM[18671]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18672]
D = A                                        // ROM[18673]
// ---------------------------
// push D
@ SP                                         // ROM[18674]
AM = M+1                                     // ROM[18675]
A = A-1                                      // ROM[18676]
M = D                                        // ROM[18677]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18678]
D = A                                        // ROM[18679]
// ---------------------------
// push D
@ SP                                         // ROM[18680]
AM = M+1                                     // ROM[18681]
A = A-1                                      // ROM[18682]
M = D                                        // ROM[18683]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18684]
D = A                                        // ROM[18685]
// ---------------------------
// push D
@ SP                                         // ROM[18686]
AM = M+1                                     // ROM[18687]
A = A-1                                      // ROM[18688]
M = D                                        // ROM[18689]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18690]
D = A                                        // ROM[18691]
// ---------------------------
// push D
@ SP                                         // ROM[18692]
AM = M+1                                     // ROM[18693]
A = A-1                                      // ROM[18694]
M = D                                        // ROM[18695]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18696]
D = A                                        // ROM[18697]
// ---------------------------
// push D
@ SP                                         // ROM[18698]
AM = M+1                                     // ROM[18699]
A = A-1                                      // ROM[18700]
M = D                                        // ROM[18701]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18702]
D = A                                        // ROM[18703]
// ---------------------------
// push D
@ SP                                         // ROM[18704]
AM = M+1                                     // ROM[18705]
A = A-1                                      // ROM[18706]
M = D                                        // ROM[18707]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[18708]
D = A                                        // ROM[18709]
// ---------------------------
// push D
@ SP                                         // ROM[18710]
AM = M+1                                     // ROM[18711]
A = A-1                                      // ROM[18712]
M = D                                        // ROM[18713]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[18714]
D = A                                        // ROM[18715]
// ---------------------------
// push D
@ SP                                         // ROM[18716]
AM = M+1                                     // ROM[18717]
A = A-1                                      // ROM[18718]
M = D                                        // ROM[18719]

// -------------------------------------
// PUSH: <constant, 18>
// -------------------------------------
@ 18                                         // ROM[18720]
D = A                                        // ROM[18721]
// ---------------------------
// push D
@ SP                                         // ROM[18722]
AM = M+1                                     // ROM[18723]
A = A-1                                      // ROM[18724]
M = D                                        // ROM[18725]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18726]
D = A                                        // ROM[18727]
// ---------------------------
// push D
@ SP                                         // ROM[18728]
AM = M+1                                     // ROM[18729]
A = A-1                                      // ROM[18730]
M = D                                        // ROM[18731]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18732]
D = A                                        // ROM[18733]
// ---------------------------
// push D
@ SP                                         // ROM[18734]
AM = M+1                                     // ROM[18735]
A = A-1                                      // ROM[18736]
M = D                                        // ROM[18737]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18738]
D = A                                        // ROM[18739]
@ R13                                        // ROM[18740]
M = D                                        // ROM[18741]
// ---------------------------
// Push RA
@ Output.initMap:185                         // ROM[18742]
D = A                                        // ROM[18743]
// ---------------------------
// push D
@ SP                                         // ROM[18744]
AM = M+1                                     // ROM[18745]
A = A-1                                      // ROM[18746]
M = D                                        // ROM[18747]
// ---------------------------
// call
@ Output.initMap:186                         // ROM[18748]
D = A                                        // ROM[18749]
@ R15                                        // ROM[18750]
M = D                                        // ROM[18751]
@ :call                                      // ROM[18752]
0; JMP                                       // ROM[18753]
( Output.initMap:186)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18754]
0; JMP                                       // ROM[18755]
// ---------------------------
// ( RA )
( Output.initMap:185) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18756]
AM = M-1                                     // ROM[18757]
D = M                                        // ROM[18758]
// ---------------------------
@ 5                                          // ROM[18759]
M = D                                        // ROM[18760]

// -------------------------------------
// PUSH: <constant, 120>
// -------------------------------------
@ 120                                        // ROM[18761]
D = A                                        // ROM[18762]
// ---------------------------
// push D
@ SP                                         // ROM[18763]
AM = M+1                                     // ROM[18764]
A = A-1                                      // ROM[18765]
M = D                                        // ROM[18766]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18767]
D = A                                        // ROM[18768]
// ---------------------------
// push D
@ SP                                         // ROM[18769]
AM = M+1                                     // ROM[18770]
A = A-1                                      // ROM[18771]
M = D                                        // ROM[18772]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18773]
D = A                                        // ROM[18774]
// ---------------------------
// push D
@ SP                                         // ROM[18775]
AM = M+1                                     // ROM[18776]
A = A-1                                      // ROM[18777]
M = D                                        // ROM[18778]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18779]
D = A                                        // ROM[18780]
// ---------------------------
// push D
@ SP                                         // ROM[18781]
AM = M+1                                     // ROM[18782]
A = A-1                                      // ROM[18783]
M = D                                        // ROM[18784]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18785]
D = A                                        // ROM[18786]
// ---------------------------
// push D
@ SP                                         // ROM[18787]
AM = M+1                                     // ROM[18788]
A = A-1                                      // ROM[18789]
M = D                                        // ROM[18790]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[18791]
D = A                                        // ROM[18792]
// ---------------------------
// push D
@ SP                                         // ROM[18793]
AM = M+1                                     // ROM[18794]
A = A-1                                      // ROM[18795]
M = D                                        // ROM[18796]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[18797]
D = A                                        // ROM[18798]
// ---------------------------
// push D
@ SP                                         // ROM[18799]
AM = M+1                                     // ROM[18800]
A = A-1                                      // ROM[18801]
M = D                                        // ROM[18802]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[18803]
D = A                                        // ROM[18804]
// ---------------------------
// push D
@ SP                                         // ROM[18805]
AM = M+1                                     // ROM[18806]
A = A-1                                      // ROM[18807]
M = D                                        // ROM[18808]

// -------------------------------------
// PUSH: <constant, 30>
// -------------------------------------
@ 30                                         // ROM[18809]
D = A                                        // ROM[18810]
// ---------------------------
// push D
@ SP                                         // ROM[18811]
AM = M+1                                     // ROM[18812]
A = A-1                                      // ROM[18813]
M = D                                        // ROM[18814]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18815]
D = A                                        // ROM[18816]
// ---------------------------
// push D
@ SP                                         // ROM[18817]
AM = M+1                                     // ROM[18818]
A = A-1                                      // ROM[18819]
M = D                                        // ROM[18820]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18821]
D = A                                        // ROM[18822]
// ---------------------------
// push D
@ SP                                         // ROM[18823]
AM = M+1                                     // ROM[18824]
A = A-1                                      // ROM[18825]
M = D                                        // ROM[18826]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18827]
D = A                                        // ROM[18828]
// ---------------------------
// push D
@ SP                                         // ROM[18829]
AM = M+1                                     // ROM[18830]
A = A-1                                      // ROM[18831]
M = D                                        // ROM[18832]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18833]
D = A                                        // ROM[18834]
@ R13                                        // ROM[18835]
M = D                                        // ROM[18836]
// ---------------------------
// Push RA
@ Output.initMap:187                         // ROM[18837]
D = A                                        // ROM[18838]
// ---------------------------
// push D
@ SP                                         // ROM[18839]
AM = M+1                                     // ROM[18840]
A = A-1                                      // ROM[18841]
M = D                                        // ROM[18842]
// ---------------------------
// call
@ Output.initMap:188                         // ROM[18843]
D = A                                        // ROM[18844]
@ R15                                        // ROM[18845]
M = D                                        // ROM[18846]
@ :call                                      // ROM[18847]
0; JMP                                       // ROM[18848]
( Output.initMap:188)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18849]
0; JMP                                       // ROM[18850]
// ---------------------------
// ( RA )
( Output.initMap:187) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18851]
AM = M-1                                     // ROM[18852]
D = M                                        // ROM[18853]
// ---------------------------
@ 5                                          // ROM[18854]
M = D                                        // ROM[18855]

// -------------------------------------
// PUSH: <constant, 121>
// -------------------------------------
@ 121                                        // ROM[18856]
D = A                                        // ROM[18857]
// ---------------------------
// push D
@ SP                                         // ROM[18858]
AM = M+1                                     // ROM[18859]
A = A-1                                      // ROM[18860]
M = D                                        // ROM[18861]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18862]
D = A                                        // ROM[18863]
// ---------------------------
// push D
@ SP                                         // ROM[18864]
AM = M+1                                     // ROM[18865]
A = A-1                                      // ROM[18866]
M = D                                        // ROM[18867]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18868]
D = A                                        // ROM[18869]
// ---------------------------
// push D
@ SP                                         // ROM[18870]
AM = M+1                                     // ROM[18871]
A = A-1                                      // ROM[18872]
M = D                                        // ROM[18873]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18874]
D = A                                        // ROM[18875]
// ---------------------------
// push D
@ SP                                         // ROM[18876]
AM = M+1                                     // ROM[18877]
A = A-1                                      // ROM[18878]
M = D                                        // ROM[18879]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18880]
D = A                                        // ROM[18881]
// ---------------------------
// push D
@ SP                                         // ROM[18882]
AM = M+1                                     // ROM[18883]
A = A-1                                      // ROM[18884]
M = D                                        // ROM[18885]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18886]
D = A                                        // ROM[18887]
// ---------------------------
// push D
@ SP                                         // ROM[18888]
AM = M+1                                     // ROM[18889]
A = A-1                                      // ROM[18890]
M = D                                        // ROM[18891]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18892]
D = A                                        // ROM[18893]
// ---------------------------
// push D
@ SP                                         // ROM[18894]
AM = M+1                                     // ROM[18895]
A = A-1                                      // ROM[18896]
M = D                                        // ROM[18897]

// -------------------------------------
// PUSH: <constant, 62>
// -------------------------------------
@ 62                                         // ROM[18898]
D = A                                        // ROM[18899]
// ---------------------------
// push D
@ SP                                         // ROM[18900]
AM = M+1                                     // ROM[18901]
A = A-1                                      // ROM[18902]
M = D                                        // ROM[18903]

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[18904]
D = A                                        // ROM[18905]
// ---------------------------
// push D
@ SP                                         // ROM[18906]
AM = M+1                                     // ROM[18907]
A = A-1                                      // ROM[18908]
M = D                                        // ROM[18909]

// -------------------------------------
// PUSH: <constant, 24>
// -------------------------------------
@ 24                                         // ROM[18910]
D = A                                        // ROM[18911]
// ---------------------------
// push D
@ SP                                         // ROM[18912]
AM = M+1                                     // ROM[18913]
A = A-1                                      // ROM[18914]
M = D                                        // ROM[18915]

// -------------------------------------
// PUSH: <constant, 15>
// -------------------------------------
@ 15                                         // ROM[18916]
D = A                                        // ROM[18917]
// ---------------------------
// push D
@ SP                                         // ROM[18918]
AM = M+1                                     // ROM[18919]
A = A-1                                      // ROM[18920]
M = D                                        // ROM[18921]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18922]
D = A                                        // ROM[18923]
// ---------------------------
// push D
@ SP                                         // ROM[18924]
AM = M+1                                     // ROM[18925]
A = A-1                                      // ROM[18926]
M = D                                        // ROM[18927]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[18928]
D = A                                        // ROM[18929]
@ R13                                        // ROM[18930]
M = D                                        // ROM[18931]
// ---------------------------
// Push RA
@ Output.initMap:189                         // ROM[18932]
D = A                                        // ROM[18933]
// ---------------------------
// push D
@ SP                                         // ROM[18934]
AM = M+1                                     // ROM[18935]
A = A-1                                      // ROM[18936]
M = D                                        // ROM[18937]
// ---------------------------
// call
@ Output.initMap:190                         // ROM[18938]
D = A                                        // ROM[18939]
@ R15                                        // ROM[18940]
M = D                                        // ROM[18941]
@ :call                                      // ROM[18942]
0; JMP                                       // ROM[18943]
( Output.initMap:190)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[18944]
0; JMP                                       // ROM[18945]
// ---------------------------
// ( RA )
( Output.initMap:189) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[18946]
AM = M-1                                     // ROM[18947]
D = M                                        // ROM[18948]
// ---------------------------
@ 5                                          // ROM[18949]
M = D                                        // ROM[18950]

// -------------------------------------
// PUSH: <constant, 122>
// -------------------------------------
@ 122                                        // ROM[18951]
D = A                                        // ROM[18952]
// ---------------------------
// push D
@ SP                                         // ROM[18953]
AM = M+1                                     // ROM[18954]
A = A-1                                      // ROM[18955]
M = D                                        // ROM[18956]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18957]
D = A                                        // ROM[18958]
// ---------------------------
// push D
@ SP                                         // ROM[18959]
AM = M+1                                     // ROM[18960]
A = A-1                                      // ROM[18961]
M = D                                        // ROM[18962]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18963]
D = A                                        // ROM[18964]
// ---------------------------
// push D
@ SP                                         // ROM[18965]
AM = M+1                                     // ROM[18966]
A = A-1                                      // ROM[18967]
M = D                                        // ROM[18968]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[18969]
D = A                                        // ROM[18970]
// ---------------------------
// push D
@ SP                                         // ROM[18971]
AM = M+1                                     // ROM[18972]
A = A-1                                      // ROM[18973]
M = D                                        // ROM[18974]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[18975]
D = A                                        // ROM[18976]
// ---------------------------
// push D
@ SP                                         // ROM[18977]
AM = M+1                                     // ROM[18978]
A = A-1                                      // ROM[18979]
M = D                                        // ROM[18980]

// -------------------------------------
// PUSH: <constant, 27>
// -------------------------------------
@ 27                                         // ROM[18981]
D = A                                        // ROM[18982]
// ---------------------------
// push D
@ SP                                         // ROM[18983]
AM = M+1                                     // ROM[18984]
A = A-1                                      // ROM[18985]
M = D                                        // ROM[18986]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[18987]
D = A                                        // ROM[18988]
// ---------------------------
// push D
@ SP                                         // ROM[18989]
AM = M+1                                     // ROM[18990]
A = A-1                                      // ROM[18991]
M = D                                        // ROM[18992]

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[18993]
D = A                                        // ROM[18994]
// ---------------------------
// push D
@ SP                                         // ROM[18995]
AM = M+1                                     // ROM[18996]
A = A-1                                      // ROM[18997]
M = D                                        // ROM[18998]

// -------------------------------------
// PUSH: <constant, 51>
// -------------------------------------
@ 51                                         // ROM[18999]
D = A                                        // ROM[19000]
// ---------------------------
// push D
@ SP                                         // ROM[19001]
AM = M+1                                     // ROM[19002]
A = A-1                                      // ROM[19003]
M = D                                        // ROM[19004]

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[19005]
D = A                                        // ROM[19006]
// ---------------------------
// push D
@ SP                                         // ROM[19007]
AM = M+1                                     // ROM[19008]
A = A-1                                      // ROM[19009]
M = D                                        // ROM[19010]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19011]
D = A                                        // ROM[19012]
// ---------------------------
// push D
@ SP                                         // ROM[19013]
AM = M+1                                     // ROM[19014]
A = A-1                                      // ROM[19015]
M = D                                        // ROM[19016]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19017]
D = A                                        // ROM[19018]
// ---------------------------
// push D
@ SP                                         // ROM[19019]
AM = M+1                                     // ROM[19020]
A = A-1                                      // ROM[19021]
M = D                                        // ROM[19022]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[19023]
D = A                                        // ROM[19024]
@ R13                                        // ROM[19025]
M = D                                        // ROM[19026]
// ---------------------------
// Push RA
@ Output.initMap:191                         // ROM[19027]
D = A                                        // ROM[19028]
// ---------------------------
// push D
@ SP                                         // ROM[19029]
AM = M+1                                     // ROM[19030]
A = A-1                                      // ROM[19031]
M = D                                        // ROM[19032]
// ---------------------------
// call
@ Output.initMap:192                         // ROM[19033]
D = A                                        // ROM[19034]
@ R15                                        // ROM[19035]
M = D                                        // ROM[19036]
@ :call                                      // ROM[19037]
0; JMP                                       // ROM[19038]
( Output.initMap:192)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[19039]
0; JMP                                       // ROM[19040]
// ---------------------------
// ( RA )
( Output.initMap:191) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19041]
AM = M-1                                     // ROM[19042]
D = M                                        // ROM[19043]
// ---------------------------
@ 5                                          // ROM[19044]
M = D                                        // ROM[19045]

// -------------------------------------
// PUSH: <constant, 123>
// -------------------------------------
@ 123                                        // ROM[19046]
D = A                                        // ROM[19047]
// ---------------------------
// push D
@ SP                                         // ROM[19048]
AM = M+1                                     // ROM[19049]
A = A-1                                      // ROM[19050]
M = D                                        // ROM[19051]

// -------------------------------------
// PUSH: <constant, 56>
// -------------------------------------
@ 56                                         // ROM[19052]
D = A                                        // ROM[19053]
// ---------------------------
// push D
@ SP                                         // ROM[19054]
AM = M+1                                     // ROM[19055]
A = A-1                                      // ROM[19056]
M = D                                        // ROM[19057]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19058]
D = A                                        // ROM[19059]
// ---------------------------
// push D
@ SP                                         // ROM[19060]
AM = M+1                                     // ROM[19061]
A = A-1                                      // ROM[19062]
M = D                                        // ROM[19063]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19064]
D = A                                        // ROM[19065]
// ---------------------------
// push D
@ SP                                         // ROM[19066]
AM = M+1                                     // ROM[19067]
A = A-1                                      // ROM[19068]
M = D                                        // ROM[19069]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19070]
D = A                                        // ROM[19071]
// ---------------------------
// push D
@ SP                                         // ROM[19072]
AM = M+1                                     // ROM[19073]
A = A-1                                      // ROM[19074]
M = D                                        // ROM[19075]

// -------------------------------------
// PUSH: <constant, 7>
// -------------------------------------
@ 7                                          // ROM[19076]
D = A                                        // ROM[19077]
// ---------------------------
// push D
@ SP                                         // ROM[19078]
AM = M+1                                     // ROM[19079]
A = A-1                                      // ROM[19080]
M = D                                        // ROM[19081]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19082]
D = A                                        // ROM[19083]
// ---------------------------
// push D
@ SP                                         // ROM[19084]
AM = M+1                                     // ROM[19085]
A = A-1                                      // ROM[19086]
M = D                                        // ROM[19087]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19088]
D = A                                        // ROM[19089]
// ---------------------------
// push D
@ SP                                         // ROM[19090]
AM = M+1                                     // ROM[19091]
A = A-1                                      // ROM[19092]
M = D                                        // ROM[19093]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19094]
D = A                                        // ROM[19095]
// ---------------------------
// push D
@ SP                                         // ROM[19096]
AM = M+1                                     // ROM[19097]
A = A-1                                      // ROM[19098]
M = D                                        // ROM[19099]

// -------------------------------------
// PUSH: <constant, 56>
// -------------------------------------
@ 56                                         // ROM[19100]
D = A                                        // ROM[19101]
// ---------------------------
// push D
@ SP                                         // ROM[19102]
AM = M+1                                     // ROM[19103]
A = A-1                                      // ROM[19104]
M = D                                        // ROM[19105]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19106]
D = A                                        // ROM[19107]
// ---------------------------
// push D
@ SP                                         // ROM[19108]
AM = M+1                                     // ROM[19109]
A = A-1                                      // ROM[19110]
M = D                                        // ROM[19111]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19112]
D = A                                        // ROM[19113]
// ---------------------------
// push D
@ SP                                         // ROM[19114]
AM = M+1                                     // ROM[19115]
A = A-1                                      // ROM[19116]
M = D                                        // ROM[19117]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[19118]
D = A                                        // ROM[19119]
@ R13                                        // ROM[19120]
M = D                                        // ROM[19121]
// ---------------------------
// Push RA
@ Output.initMap:193                         // ROM[19122]
D = A                                        // ROM[19123]
// ---------------------------
// push D
@ SP                                         // ROM[19124]
AM = M+1                                     // ROM[19125]
A = A-1                                      // ROM[19126]
M = D                                        // ROM[19127]
// ---------------------------
// call
@ Output.initMap:194                         // ROM[19128]
D = A                                        // ROM[19129]
@ R15                                        // ROM[19130]
M = D                                        // ROM[19131]
@ :call                                      // ROM[19132]
0; JMP                                       // ROM[19133]
( Output.initMap:194)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[19134]
0; JMP                                       // ROM[19135]
// ---------------------------
// ( RA )
( Output.initMap:193) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19136]
AM = M-1                                     // ROM[19137]
D = M                                        // ROM[19138]
// ---------------------------
@ 5                                          // ROM[19139]
M = D                                        // ROM[19140]

// -------------------------------------
// PUSH: <constant, 124>
// -------------------------------------
@ 124                                        // ROM[19141]
D = A                                        // ROM[19142]
// ---------------------------
// push D
@ SP                                         // ROM[19143]
AM = M+1                                     // ROM[19144]
A = A-1                                      // ROM[19145]
M = D                                        // ROM[19146]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19147]
D = A                                        // ROM[19148]
// ---------------------------
// push D
@ SP                                         // ROM[19149]
AM = M+1                                     // ROM[19150]
A = A-1                                      // ROM[19151]
M = D                                        // ROM[19152]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19153]
D = A                                        // ROM[19154]
// ---------------------------
// push D
@ SP                                         // ROM[19155]
AM = M+1                                     // ROM[19156]
A = A-1                                      // ROM[19157]
M = D                                        // ROM[19158]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19159]
D = A                                        // ROM[19160]
// ---------------------------
// push D
@ SP                                         // ROM[19161]
AM = M+1                                     // ROM[19162]
A = A-1                                      // ROM[19163]
M = D                                        // ROM[19164]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19165]
D = A                                        // ROM[19166]
// ---------------------------
// push D
@ SP                                         // ROM[19167]
AM = M+1                                     // ROM[19168]
A = A-1                                      // ROM[19169]
M = D                                        // ROM[19170]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19171]
D = A                                        // ROM[19172]
// ---------------------------
// push D
@ SP                                         // ROM[19173]
AM = M+1                                     // ROM[19174]
A = A-1                                      // ROM[19175]
M = D                                        // ROM[19176]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19177]
D = A                                        // ROM[19178]
// ---------------------------
// push D
@ SP                                         // ROM[19179]
AM = M+1                                     // ROM[19180]
A = A-1                                      // ROM[19181]
M = D                                        // ROM[19182]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19183]
D = A                                        // ROM[19184]
// ---------------------------
// push D
@ SP                                         // ROM[19185]
AM = M+1                                     // ROM[19186]
A = A-1                                      // ROM[19187]
M = D                                        // ROM[19188]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19189]
D = A                                        // ROM[19190]
// ---------------------------
// push D
@ SP                                         // ROM[19191]
AM = M+1                                     // ROM[19192]
A = A-1                                      // ROM[19193]
M = D                                        // ROM[19194]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19195]
D = A                                        // ROM[19196]
// ---------------------------
// push D
@ SP                                         // ROM[19197]
AM = M+1                                     // ROM[19198]
A = A-1                                      // ROM[19199]
M = D                                        // ROM[19200]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19201]
D = A                                        // ROM[19202]
// ---------------------------
// push D
@ SP                                         // ROM[19203]
AM = M+1                                     // ROM[19204]
A = A-1                                      // ROM[19205]
M = D                                        // ROM[19206]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19207]
D = A                                        // ROM[19208]
// ---------------------------
// push D
@ SP                                         // ROM[19209]
AM = M+1                                     // ROM[19210]
A = A-1                                      // ROM[19211]
M = D                                        // ROM[19212]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[19213]
D = A                                        // ROM[19214]
@ R13                                        // ROM[19215]
M = D                                        // ROM[19216]
// ---------------------------
// Push RA
@ Output.initMap:195                         // ROM[19217]
D = A                                        // ROM[19218]
// ---------------------------
// push D
@ SP                                         // ROM[19219]
AM = M+1                                     // ROM[19220]
A = A-1                                      // ROM[19221]
M = D                                        // ROM[19222]
// ---------------------------
// call
@ Output.initMap:196                         // ROM[19223]
D = A                                        // ROM[19224]
@ R15                                        // ROM[19225]
M = D                                        // ROM[19226]
@ :call                                      // ROM[19227]
0; JMP                                       // ROM[19228]
( Output.initMap:196)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[19229]
0; JMP                                       // ROM[19230]
// ---------------------------
// ( RA )
( Output.initMap:195) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19231]
AM = M-1                                     // ROM[19232]
D = M                                        // ROM[19233]
// ---------------------------
@ 5                                          // ROM[19234]
M = D                                        // ROM[19235]

// -------------------------------------
// PUSH: <constant, 125>
// -------------------------------------
@ 125                                        // ROM[19236]
D = A                                        // ROM[19237]
// ---------------------------
// push D
@ SP                                         // ROM[19238]
AM = M+1                                     // ROM[19239]
A = A-1                                      // ROM[19240]
M = D                                        // ROM[19241]

// -------------------------------------
// PUSH: <constant, 7>
// -------------------------------------
@ 7                                          // ROM[19242]
D = A                                        // ROM[19243]
// ---------------------------
// push D
@ SP                                         // ROM[19244]
AM = M+1                                     // ROM[19245]
A = A-1                                      // ROM[19246]
M = D                                        // ROM[19247]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19248]
D = A                                        // ROM[19249]
// ---------------------------
// push D
@ SP                                         // ROM[19250]
AM = M+1                                     // ROM[19251]
A = A-1                                      // ROM[19252]
M = D                                        // ROM[19253]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19254]
D = A                                        // ROM[19255]
// ---------------------------
// push D
@ SP                                         // ROM[19256]
AM = M+1                                     // ROM[19257]
A = A-1                                      // ROM[19258]
M = D                                        // ROM[19259]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19260]
D = A                                        // ROM[19261]
// ---------------------------
// push D
@ SP                                         // ROM[19262]
AM = M+1                                     // ROM[19263]
A = A-1                                      // ROM[19264]
M = D                                        // ROM[19265]

// -------------------------------------
// PUSH: <constant, 56>
// -------------------------------------
@ 56                                         // ROM[19266]
D = A                                        // ROM[19267]
// ---------------------------
// push D
@ SP                                         // ROM[19268]
AM = M+1                                     // ROM[19269]
A = A-1                                      // ROM[19270]
M = D                                        // ROM[19271]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19272]
D = A                                        // ROM[19273]
// ---------------------------
// push D
@ SP                                         // ROM[19274]
AM = M+1                                     // ROM[19275]
A = A-1                                      // ROM[19276]
M = D                                        // ROM[19277]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19278]
D = A                                        // ROM[19279]
// ---------------------------
// push D
@ SP                                         // ROM[19280]
AM = M+1                                     // ROM[19281]
A = A-1                                      // ROM[19282]
M = D                                        // ROM[19283]

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[19284]
D = A                                        // ROM[19285]
// ---------------------------
// push D
@ SP                                         // ROM[19286]
AM = M+1                                     // ROM[19287]
A = A-1                                      // ROM[19288]
M = D                                        // ROM[19289]

// -------------------------------------
// PUSH: <constant, 7>
// -------------------------------------
@ 7                                          // ROM[19290]
D = A                                        // ROM[19291]
// ---------------------------
// push D
@ SP                                         // ROM[19292]
AM = M+1                                     // ROM[19293]
A = A-1                                      // ROM[19294]
M = D                                        // ROM[19295]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19296]
D = A                                        // ROM[19297]
// ---------------------------
// push D
@ SP                                         // ROM[19298]
AM = M+1                                     // ROM[19299]
A = A-1                                      // ROM[19300]
M = D                                        // ROM[19301]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19302]
D = A                                        // ROM[19303]
// ---------------------------
// push D
@ SP                                         // ROM[19304]
AM = M+1                                     // ROM[19305]
A = A-1                                      // ROM[19306]
M = D                                        // ROM[19307]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[19308]
D = A                                        // ROM[19309]
@ R13                                        // ROM[19310]
M = D                                        // ROM[19311]
// ---------------------------
// Push RA
@ Output.initMap:197                         // ROM[19312]
D = A                                        // ROM[19313]
// ---------------------------
// push D
@ SP                                         // ROM[19314]
AM = M+1                                     // ROM[19315]
A = A-1                                      // ROM[19316]
M = D                                        // ROM[19317]
// ---------------------------
// call
@ Output.initMap:198                         // ROM[19318]
D = A                                        // ROM[19319]
@ R15                                        // ROM[19320]
M = D                                        // ROM[19321]
@ :call                                      // ROM[19322]
0; JMP                                       // ROM[19323]
( Output.initMap:198)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[19324]
0; JMP                                       // ROM[19325]
// ---------------------------
// ( RA )
( Output.initMap:197) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19326]
AM = M-1                                     // ROM[19327]
D = M                                        // ROM[19328]
// ---------------------------
@ 5                                          // ROM[19329]
M = D                                        // ROM[19330]

// -------------------------------------
// PUSH: <constant, 126>
// -------------------------------------
@ 126                                        // ROM[19331]
D = A                                        // ROM[19332]
// ---------------------------
// push D
@ SP                                         // ROM[19333]
AM = M+1                                     // ROM[19334]
A = A-1                                      // ROM[19335]
M = D                                        // ROM[19336]

// -------------------------------------
// PUSH: <constant, 38>
// -------------------------------------
@ 38                                         // ROM[19337]
D = A                                        // ROM[19338]
// ---------------------------
// push D
@ SP                                         // ROM[19339]
AM = M+1                                     // ROM[19340]
A = A-1                                      // ROM[19341]
M = D                                        // ROM[19342]

// -------------------------------------
// PUSH: <constant, 45>
// -------------------------------------
@ 45                                         // ROM[19343]
D = A                                        // ROM[19344]
// ---------------------------
// push D
@ SP                                         // ROM[19345]
AM = M+1                                     // ROM[19346]
A = A-1                                      // ROM[19347]
M = D                                        // ROM[19348]

// -------------------------------------
// PUSH: <constant, 25>
// -------------------------------------
@ 25                                         // ROM[19349]
D = A                                        // ROM[19350]
// ---------------------------
// push D
@ SP                                         // ROM[19351]
AM = M+1                                     // ROM[19352]
A = A-1                                      // ROM[19353]
M = D                                        // ROM[19354]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19355]
D = A                                        // ROM[19356]
// ---------------------------
// push D
@ SP                                         // ROM[19357]
AM = M+1                                     // ROM[19358]
A = A-1                                      // ROM[19359]
M = D                                        // ROM[19360]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19361]
D = A                                        // ROM[19362]
// ---------------------------
// push D
@ SP                                         // ROM[19363]
AM = M+1                                     // ROM[19364]
A = A-1                                      // ROM[19365]
M = D                                        // ROM[19366]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19367]
D = A                                        // ROM[19368]
// ---------------------------
// push D
@ SP                                         // ROM[19369]
AM = M+1                                     // ROM[19370]
A = A-1                                      // ROM[19371]
M = D                                        // ROM[19372]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19373]
D = A                                        // ROM[19374]
// ---------------------------
// push D
@ SP                                         // ROM[19375]
AM = M+1                                     // ROM[19376]
A = A-1                                      // ROM[19377]
M = D                                        // ROM[19378]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19379]
D = A                                        // ROM[19380]
// ---------------------------
// push D
@ SP                                         // ROM[19381]
AM = M+1                                     // ROM[19382]
A = A-1                                      // ROM[19383]
M = D                                        // ROM[19384]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19385]
D = A                                        // ROM[19386]
// ---------------------------
// push D
@ SP                                         // ROM[19387]
AM = M+1                                     // ROM[19388]
A = A-1                                      // ROM[19389]
M = D                                        // ROM[19390]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19391]
D = A                                        // ROM[19392]
// ---------------------------
// push D
@ SP                                         // ROM[19393]
AM = M+1                                     // ROM[19394]
A = A-1                                      // ROM[19395]
M = D                                        // ROM[19396]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19397]
D = A                                        // ROM[19398]
// ---------------------------
// push D
@ SP                                         // ROM[19399]
AM = M+1                                     // ROM[19400]
A = A-1                                      // ROM[19401]
M = D                                        // ROM[19402]

// -------------------------------------
// CALL: Output.create(12 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 12                                         // ROM[19403]
D = A                                        // ROM[19404]
@ R13                                        // ROM[19405]
M = D                                        // ROM[19406]
// ---------------------------
// Push RA
@ Output.initMap:199                         // ROM[19407]
D = A                                        // ROM[19408]
// ---------------------------
// push D
@ SP                                         // ROM[19409]
AM = M+1                                     // ROM[19410]
A = A-1                                      // ROM[19411]
M = D                                        // ROM[19412]
// ---------------------------
// call
@ Output.initMap:200                         // ROM[19413]
D = A                                        // ROM[19414]
@ R15                                        // ROM[19415]
M = D                                        // ROM[19416]
@ :call                                      // ROM[19417]
0; JMP                                       // ROM[19418]
( Output.initMap:200)
// ---------------------------
// goto functionName
@ Output.create                              // ROM[19419]
0; JMP                                       // ROM[19420]
// ---------------------------
// ( RA )
( Output.initMap:199) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19421]
AM = M-1                                     // ROM[19422]
D = M                                        // ROM[19423]
// ---------------------------
@ 5                                          // ROM[19424]
M = D                                        // ROM[19425]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19426]
D = A                                        // ROM[19427]
// ---------------------------
// push D
@ SP                                         // ROM[19428]
AM = M+1                                     // ROM[19429]
A = A-1                                      // ROM[19430]
M = D                                        // ROM[19431]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.initMap:201                         // ROM[19432]
D = A                                        // ROM[19433]
@ R15                                        // ROM[19434]
M = D                                        // ROM[19435]
@ :return                                    // ROM[19436]
0; JMP                                       // ROM[19437]
( Output.initMap:201)

// =========================================================
// FUNCTION: Output.create(1 locals)
// =========================================================

( Output.create )
// ---------------------------
// clear local segment
D = 0                                        // ROM[19438]
// ---------------------------
// push D
@ SP                                         // ROM[19439]
AM = M+1                                     // ROM[19440]
A = A-1                                      // ROM[19441]
M = D                                        // ROM[19442]

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[19443]
D = A                                        // ROM[19444]
// ---------------------------
// push D
@ SP                                         // ROM[19445]
AM = M+1                                     // ROM[19446]
A = A-1                                      // ROM[19447]
M = D                                        // ROM[19448]

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[19449]
D = A                                        // ROM[19450]
@ R13                                        // ROM[19451]
M = D                                        // ROM[19452]
// ---------------------------
// Push RA
@ Output.create:202                          // ROM[19453]
D = A                                        // ROM[19454]
// ---------------------------
// push D
@ SP                                         // ROM[19455]
AM = M+1                                     // ROM[19456]
A = A-1                                      // ROM[19457]
M = D                                        // ROM[19458]
// ---------------------------
// call
@ Output.create:203                          // ROM[19459]
D = A                                        // ROM[19460]
@ R15                                        // ROM[19461]
M = D                                        // ROM[19462]
@ :call                                      // ROM[19463]
0; JMP                                       // ROM[19464]
( Output.create:203)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[19465]
0; JMP                                       // ROM[19466]
// ---------------------------
// ( RA )
( Output.create:202) 

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19467]
D = A                                        // ROM[19468]
@ R13                                        // ROM[19469]
M = D                                        // ROM[19470]
// ---------------------------
// call
@ Output.create:204                          // ROM[19471]
D = A                                        // ROM[19472]
@ R15                                        // ROM[19473]
M = D                                        // ROM[19474]
@ :pop_local                                 // ROM[19475]
0; JMP                                       // ROM[19476]
( Output.create:204)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19477]
D = A                                        // ROM[19478]
@ R13                                        // ROM[19479]
M = D                                        // ROM[19480]
// ---------------------------
// call
@ Output.create:205                          // ROM[19481]
D = A                                        // ROM[19482]
@ R15                                        // ROM[19483]
M = D                                        // ROM[19484]
@ :push_argument                             // ROM[19485]
0; JMP                                       // ROM[19486]
( Output.create:205)

// -------------------------------------
// PUSH: <static, 5>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.5                                   // ROM[19487]
D = M                                        // ROM[19488]
// ---------------------------
// push D
@ SP                                         // ROM[19489]
AM = M+1                                     // ROM[19490]
A = A-1                                      // ROM[19491]
M = D                                        // ROM[19492]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:206                          // ROM[19493]
D = A                                        // ROM[19494]
@ R15                                        // ROM[19495]
M = D                                        // ROM[19496]
@ :add                                       // ROM[19497]
0; JMP                                       // ROM[19498]
( Output.create:206)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19499]
D = A                                        // ROM[19500]
@ R13                                        // ROM[19501]
M = D                                        // ROM[19502]
// ---------------------------
// call
@ Output.create:207                          // ROM[19503]
D = A                                        // ROM[19504]
@ R15                                        // ROM[19505]
M = D                                        // ROM[19506]
@ :push_local                                // ROM[19507]
0; JMP                                       // ROM[19508]
( Output.create:207)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19509]
AM = M-1                                     // ROM[19510]
D = M                                        // ROM[19511]
// ---------------------------
@ 5                                          // ROM[19512]
M = D                                        // ROM[19513]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19514]
AM = M-1                                     // ROM[19515]
D = M                                        // ROM[19516]
// ---------------------------
@ 4                                          // ROM[19517]
M = D                                        // ROM[19518]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19519]
D = M                                        // ROM[19520]
// ---------------------------
// push D
@ SP                                         // ROM[19521]
AM = M+1                                     // ROM[19522]
A = A-1                                      // ROM[19523]
M = D                                        // ROM[19524]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19525]
D = A                                        // ROM[19526]
@ R13                                        // ROM[19527]
M = D                                        // ROM[19528]
// ---------------------------
// call
@ Output.create:208                          // ROM[19529]
D = A                                        // ROM[19530]
@ R15                                        // ROM[19531]
M = D                                        // ROM[19532]
@ :pop_that                                  // ROM[19533]
0; JMP                                       // ROM[19534]
( Output.create:208)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[19535]
D = A                                        // ROM[19536]
// ---------------------------
// push D
@ SP                                         // ROM[19537]
AM = M+1                                     // ROM[19538]
A = A-1                                      // ROM[19539]
M = D                                        // ROM[19540]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19541]
D = A                                        // ROM[19542]
@ R13                                        // ROM[19543]
M = D                                        // ROM[19544]
// ---------------------------
// call
@ Output.create:209                          // ROM[19545]
D = A                                        // ROM[19546]
@ R15                                        // ROM[19547]
M = D                                        // ROM[19548]
@ :push_local                                // ROM[19549]
0; JMP                                       // ROM[19550]
( Output.create:209)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:210                          // ROM[19551]
D = A                                        // ROM[19552]
@ R15                                        // ROM[19553]
M = D                                        // ROM[19554]
@ :add                                       // ROM[19555]
0; JMP                                       // ROM[19556]
( Output.create:210)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[19557]
D = A                                        // ROM[19558]
@ R13                                        // ROM[19559]
M = D                                        // ROM[19560]
// ---------------------------
// call
@ Output.create:211                          // ROM[19561]
D = A                                        // ROM[19562]
@ R15                                        // ROM[19563]
M = D                                        // ROM[19564]
@ :push_argument                             // ROM[19565]
0; JMP                                       // ROM[19566]
( Output.create:211)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19567]
AM = M-1                                     // ROM[19568]
D = M                                        // ROM[19569]
// ---------------------------
@ 5                                          // ROM[19570]
M = D                                        // ROM[19571]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19572]
AM = M-1                                     // ROM[19573]
D = M                                        // ROM[19574]
// ---------------------------
@ 4                                          // ROM[19575]
M = D                                        // ROM[19576]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19577]
D = M                                        // ROM[19578]
// ---------------------------
// push D
@ SP                                         // ROM[19579]
AM = M+1                                     // ROM[19580]
A = A-1                                      // ROM[19581]
M = D                                        // ROM[19582]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19583]
D = A                                        // ROM[19584]
@ R13                                        // ROM[19585]
M = D                                        // ROM[19586]
// ---------------------------
// call
@ Output.create:212                          // ROM[19587]
D = A                                        // ROM[19588]
@ R15                                        // ROM[19589]
M = D                                        // ROM[19590]
@ :pop_that                                  // ROM[19591]
0; JMP                                       // ROM[19592]
( Output.create:212)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[19593]
D = A                                        // ROM[19594]
// ---------------------------
// push D
@ SP                                         // ROM[19595]
AM = M+1                                     // ROM[19596]
A = A-1                                      // ROM[19597]
M = D                                        // ROM[19598]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19599]
D = A                                        // ROM[19600]
@ R13                                        // ROM[19601]
M = D                                        // ROM[19602]
// ---------------------------
// call
@ Output.create:213                          // ROM[19603]
D = A                                        // ROM[19604]
@ R15                                        // ROM[19605]
M = D                                        // ROM[19606]
@ :push_local                                // ROM[19607]
0; JMP                                       // ROM[19608]
( Output.create:213)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:214                          // ROM[19609]
D = A                                        // ROM[19610]
@ R15                                        // ROM[19611]
M = D                                        // ROM[19612]
@ :add                                       // ROM[19613]
0; JMP                                       // ROM[19614]
( Output.create:214)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[19615]
D = A                                        // ROM[19616]
@ R13                                        // ROM[19617]
M = D                                        // ROM[19618]
// ---------------------------
// call
@ Output.create:215                          // ROM[19619]
D = A                                        // ROM[19620]
@ R15                                        // ROM[19621]
M = D                                        // ROM[19622]
@ :push_argument                             // ROM[19623]
0; JMP                                       // ROM[19624]
( Output.create:215)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19625]
AM = M-1                                     // ROM[19626]
D = M                                        // ROM[19627]
// ---------------------------
@ 5                                          // ROM[19628]
M = D                                        // ROM[19629]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19630]
AM = M-1                                     // ROM[19631]
D = M                                        // ROM[19632]
// ---------------------------
@ 4                                          // ROM[19633]
M = D                                        // ROM[19634]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19635]
D = M                                        // ROM[19636]
// ---------------------------
// push D
@ SP                                         // ROM[19637]
AM = M+1                                     // ROM[19638]
A = A-1                                      // ROM[19639]
M = D                                        // ROM[19640]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19641]
D = A                                        // ROM[19642]
@ R13                                        // ROM[19643]
M = D                                        // ROM[19644]
// ---------------------------
// call
@ Output.create:216                          // ROM[19645]
D = A                                        // ROM[19646]
@ R15                                        // ROM[19647]
M = D                                        // ROM[19648]
@ :pop_that                                  // ROM[19649]
0; JMP                                       // ROM[19650]
( Output.create:216)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[19651]
D = A                                        // ROM[19652]
// ---------------------------
// push D
@ SP                                         // ROM[19653]
AM = M+1                                     // ROM[19654]
A = A-1                                      // ROM[19655]
M = D                                        // ROM[19656]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19657]
D = A                                        // ROM[19658]
@ R13                                        // ROM[19659]
M = D                                        // ROM[19660]
// ---------------------------
// call
@ Output.create:217                          // ROM[19661]
D = A                                        // ROM[19662]
@ R15                                        // ROM[19663]
M = D                                        // ROM[19664]
@ :push_local                                // ROM[19665]
0; JMP                                       // ROM[19666]
( Output.create:217)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:218                          // ROM[19667]
D = A                                        // ROM[19668]
@ R15                                        // ROM[19669]
M = D                                        // ROM[19670]
@ :add                                       // ROM[19671]
0; JMP                                       // ROM[19672]
( Output.create:218)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[19673]
D = A                                        // ROM[19674]
@ R13                                        // ROM[19675]
M = D                                        // ROM[19676]
// ---------------------------
// call
@ Output.create:219                          // ROM[19677]
D = A                                        // ROM[19678]
@ R15                                        // ROM[19679]
M = D                                        // ROM[19680]
@ :push_argument                             // ROM[19681]
0; JMP                                       // ROM[19682]
( Output.create:219)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19683]
AM = M-1                                     // ROM[19684]
D = M                                        // ROM[19685]
// ---------------------------
@ 5                                          // ROM[19686]
M = D                                        // ROM[19687]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19688]
AM = M-1                                     // ROM[19689]
D = M                                        // ROM[19690]
// ---------------------------
@ 4                                          // ROM[19691]
M = D                                        // ROM[19692]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19693]
D = M                                        // ROM[19694]
// ---------------------------
// push D
@ SP                                         // ROM[19695]
AM = M+1                                     // ROM[19696]
A = A-1                                      // ROM[19697]
M = D                                        // ROM[19698]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19699]
D = A                                        // ROM[19700]
@ R13                                        // ROM[19701]
M = D                                        // ROM[19702]
// ---------------------------
// call
@ Output.create:220                          // ROM[19703]
D = A                                        // ROM[19704]
@ R15                                        // ROM[19705]
M = D                                        // ROM[19706]
@ :pop_that                                  // ROM[19707]
0; JMP                                       // ROM[19708]
( Output.create:220)

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[19709]
D = A                                        // ROM[19710]
// ---------------------------
// push D
@ SP                                         // ROM[19711]
AM = M+1                                     // ROM[19712]
A = A-1                                      // ROM[19713]
M = D                                        // ROM[19714]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19715]
D = A                                        // ROM[19716]
@ R13                                        // ROM[19717]
M = D                                        // ROM[19718]
// ---------------------------
// call
@ Output.create:221                          // ROM[19719]
D = A                                        // ROM[19720]
@ R15                                        // ROM[19721]
M = D                                        // ROM[19722]
@ :push_local                                // ROM[19723]
0; JMP                                       // ROM[19724]
( Output.create:221)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:222                          // ROM[19725]
D = A                                        // ROM[19726]
@ R15                                        // ROM[19727]
M = D                                        // ROM[19728]
@ :add                                       // ROM[19729]
0; JMP                                       // ROM[19730]
( Output.create:222)

// -------------------------------------
// PUSH: <argument, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[19731]
D = A                                        // ROM[19732]
@ R13                                        // ROM[19733]
M = D                                        // ROM[19734]
// ---------------------------
// call
@ Output.create:223                          // ROM[19735]
D = A                                        // ROM[19736]
@ R15                                        // ROM[19737]
M = D                                        // ROM[19738]
@ :push_argument                             // ROM[19739]
0; JMP                                       // ROM[19740]
( Output.create:223)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19741]
AM = M-1                                     // ROM[19742]
D = M                                        // ROM[19743]
// ---------------------------
@ 5                                          // ROM[19744]
M = D                                        // ROM[19745]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19746]
AM = M-1                                     // ROM[19747]
D = M                                        // ROM[19748]
// ---------------------------
@ 4                                          // ROM[19749]
M = D                                        // ROM[19750]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19751]
D = M                                        // ROM[19752]
// ---------------------------
// push D
@ SP                                         // ROM[19753]
AM = M+1                                     // ROM[19754]
A = A-1                                      // ROM[19755]
M = D                                        // ROM[19756]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19757]
D = A                                        // ROM[19758]
@ R13                                        // ROM[19759]
M = D                                        // ROM[19760]
// ---------------------------
// call
@ Output.create:224                          // ROM[19761]
D = A                                        // ROM[19762]
@ R15                                        // ROM[19763]
M = D                                        // ROM[19764]
@ :pop_that                                  // ROM[19765]
0; JMP                                       // ROM[19766]
( Output.create:224)

// -------------------------------------
// PUSH: <constant, 4>
// -------------------------------------
@ 4                                          // ROM[19767]
D = A                                        // ROM[19768]
// ---------------------------
// push D
@ SP                                         // ROM[19769]
AM = M+1                                     // ROM[19770]
A = A-1                                      // ROM[19771]
M = D                                        // ROM[19772]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19773]
D = A                                        // ROM[19774]
@ R13                                        // ROM[19775]
M = D                                        // ROM[19776]
// ---------------------------
// call
@ Output.create:225                          // ROM[19777]
D = A                                        // ROM[19778]
@ R15                                        // ROM[19779]
M = D                                        // ROM[19780]
@ :push_local                                // ROM[19781]
0; JMP                                       // ROM[19782]
( Output.create:225)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:226                          // ROM[19783]
D = A                                        // ROM[19784]
@ R15                                        // ROM[19785]
M = D                                        // ROM[19786]
@ :add                                       // ROM[19787]
0; JMP                                       // ROM[19788]
( Output.create:226)

// -------------------------------------
// PUSH: <argument, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[19789]
D = A                                        // ROM[19790]
@ R13                                        // ROM[19791]
M = D                                        // ROM[19792]
// ---------------------------
// call
@ Output.create:227                          // ROM[19793]
D = A                                        // ROM[19794]
@ R15                                        // ROM[19795]
M = D                                        // ROM[19796]
@ :push_argument                             // ROM[19797]
0; JMP                                       // ROM[19798]
( Output.create:227)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19799]
AM = M-1                                     // ROM[19800]
D = M                                        // ROM[19801]
// ---------------------------
@ 5                                          // ROM[19802]
M = D                                        // ROM[19803]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19804]
AM = M-1                                     // ROM[19805]
D = M                                        // ROM[19806]
// ---------------------------
@ 4                                          // ROM[19807]
M = D                                        // ROM[19808]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19809]
D = M                                        // ROM[19810]
// ---------------------------
// push D
@ SP                                         // ROM[19811]
AM = M+1                                     // ROM[19812]
A = A-1                                      // ROM[19813]
M = D                                        // ROM[19814]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19815]
D = A                                        // ROM[19816]
@ R13                                        // ROM[19817]
M = D                                        // ROM[19818]
// ---------------------------
// call
@ Output.create:228                          // ROM[19819]
D = A                                        // ROM[19820]
@ R15                                        // ROM[19821]
M = D                                        // ROM[19822]
@ :pop_that                                  // ROM[19823]
0; JMP                                       // ROM[19824]
( Output.create:228)

// -------------------------------------
// PUSH: <constant, 5>
// -------------------------------------
@ 5                                          // ROM[19825]
D = A                                        // ROM[19826]
// ---------------------------
// push D
@ SP                                         // ROM[19827]
AM = M+1                                     // ROM[19828]
A = A-1                                      // ROM[19829]
M = D                                        // ROM[19830]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19831]
D = A                                        // ROM[19832]
@ R13                                        // ROM[19833]
M = D                                        // ROM[19834]
// ---------------------------
// call
@ Output.create:229                          // ROM[19835]
D = A                                        // ROM[19836]
@ R15                                        // ROM[19837]
M = D                                        // ROM[19838]
@ :push_local                                // ROM[19839]
0; JMP                                       // ROM[19840]
( Output.create:229)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:230                          // ROM[19841]
D = A                                        // ROM[19842]
@ R15                                        // ROM[19843]
M = D                                        // ROM[19844]
@ :add                                       // ROM[19845]
0; JMP                                       // ROM[19846]
( Output.create:230)

// -------------------------------------
// PUSH: <argument, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[19847]
D = A                                        // ROM[19848]
@ R13                                        // ROM[19849]
M = D                                        // ROM[19850]
// ---------------------------
// call
@ Output.create:231                          // ROM[19851]
D = A                                        // ROM[19852]
@ R15                                        // ROM[19853]
M = D                                        // ROM[19854]
@ :push_argument                             // ROM[19855]
0; JMP                                       // ROM[19856]
( Output.create:231)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19857]
AM = M-1                                     // ROM[19858]
D = M                                        // ROM[19859]
// ---------------------------
@ 5                                          // ROM[19860]
M = D                                        // ROM[19861]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19862]
AM = M-1                                     // ROM[19863]
D = M                                        // ROM[19864]
// ---------------------------
@ 4                                          // ROM[19865]
M = D                                        // ROM[19866]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19867]
D = M                                        // ROM[19868]
// ---------------------------
// push D
@ SP                                         // ROM[19869]
AM = M+1                                     // ROM[19870]
A = A-1                                      // ROM[19871]
M = D                                        // ROM[19872]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19873]
D = A                                        // ROM[19874]
@ R13                                        // ROM[19875]
M = D                                        // ROM[19876]
// ---------------------------
// call
@ Output.create:232                          // ROM[19877]
D = A                                        // ROM[19878]
@ R15                                        // ROM[19879]
M = D                                        // ROM[19880]
@ :pop_that                                  // ROM[19881]
0; JMP                                       // ROM[19882]
( Output.create:232)

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[19883]
D = A                                        // ROM[19884]
// ---------------------------
// push D
@ SP                                         // ROM[19885]
AM = M+1                                     // ROM[19886]
A = A-1                                      // ROM[19887]
M = D                                        // ROM[19888]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19889]
D = A                                        // ROM[19890]
@ R13                                        // ROM[19891]
M = D                                        // ROM[19892]
// ---------------------------
// call
@ Output.create:233                          // ROM[19893]
D = A                                        // ROM[19894]
@ R15                                        // ROM[19895]
M = D                                        // ROM[19896]
@ :push_local                                // ROM[19897]
0; JMP                                       // ROM[19898]
( Output.create:233)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:234                          // ROM[19899]
D = A                                        // ROM[19900]
@ R15                                        // ROM[19901]
M = D                                        // ROM[19902]
@ :add                                       // ROM[19903]
0; JMP                                       // ROM[19904]
( Output.create:234)

// -------------------------------------
// PUSH: <argument, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[19905]
D = A                                        // ROM[19906]
@ R13                                        // ROM[19907]
M = D                                        // ROM[19908]
// ---------------------------
// call
@ Output.create:235                          // ROM[19909]
D = A                                        // ROM[19910]
@ R15                                        // ROM[19911]
M = D                                        // ROM[19912]
@ :push_argument                             // ROM[19913]
0; JMP                                       // ROM[19914]
( Output.create:235)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19915]
AM = M-1                                     // ROM[19916]
D = M                                        // ROM[19917]
// ---------------------------
@ 5                                          // ROM[19918]
M = D                                        // ROM[19919]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19920]
AM = M-1                                     // ROM[19921]
D = M                                        // ROM[19922]
// ---------------------------
@ 4                                          // ROM[19923]
M = D                                        // ROM[19924]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19925]
D = M                                        // ROM[19926]
// ---------------------------
// push D
@ SP                                         // ROM[19927]
AM = M+1                                     // ROM[19928]
A = A-1                                      // ROM[19929]
M = D                                        // ROM[19930]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19931]
D = A                                        // ROM[19932]
@ R13                                        // ROM[19933]
M = D                                        // ROM[19934]
// ---------------------------
// call
@ Output.create:236                          // ROM[19935]
D = A                                        // ROM[19936]
@ R15                                        // ROM[19937]
M = D                                        // ROM[19938]
@ :pop_that                                  // ROM[19939]
0; JMP                                       // ROM[19940]
( Output.create:236)

// -------------------------------------
// PUSH: <constant, 7>
// -------------------------------------
@ 7                                          // ROM[19941]
D = A                                        // ROM[19942]
// ---------------------------
// push D
@ SP                                         // ROM[19943]
AM = M+1                                     // ROM[19944]
A = A-1                                      // ROM[19945]
M = D                                        // ROM[19946]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19947]
D = A                                        // ROM[19948]
@ R13                                        // ROM[19949]
M = D                                        // ROM[19950]
// ---------------------------
// call
@ Output.create:237                          // ROM[19951]
D = A                                        // ROM[19952]
@ R15                                        // ROM[19953]
M = D                                        // ROM[19954]
@ :push_local                                // ROM[19955]
0; JMP                                       // ROM[19956]
( Output.create:237)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:238                          // ROM[19957]
D = A                                        // ROM[19958]
@ R15                                        // ROM[19959]
M = D                                        // ROM[19960]
@ :add                                       // ROM[19961]
0; JMP                                       // ROM[19962]
( Output.create:238)

// -------------------------------------
// PUSH: <argument, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[19963]
D = A                                        // ROM[19964]
@ R13                                        // ROM[19965]
M = D                                        // ROM[19966]
// ---------------------------
// call
@ Output.create:239                          // ROM[19967]
D = A                                        // ROM[19968]
@ R15                                        // ROM[19969]
M = D                                        // ROM[19970]
@ :push_argument                             // ROM[19971]
0; JMP                                       // ROM[19972]
( Output.create:239)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19973]
AM = M-1                                     // ROM[19974]
D = M                                        // ROM[19975]
// ---------------------------
@ 5                                          // ROM[19976]
M = D                                        // ROM[19977]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[19978]
AM = M-1                                     // ROM[19979]
D = M                                        // ROM[19980]
// ---------------------------
@ 4                                          // ROM[19981]
M = D                                        // ROM[19982]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[19983]
D = M                                        // ROM[19984]
// ---------------------------
// push D
@ SP                                         // ROM[19985]
AM = M+1                                     // ROM[19986]
A = A-1                                      // ROM[19987]
M = D                                        // ROM[19988]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[19989]
D = A                                        // ROM[19990]
@ R13                                        // ROM[19991]
M = D                                        // ROM[19992]
// ---------------------------
// call
@ Output.create:240                          // ROM[19993]
D = A                                        // ROM[19994]
@ R15                                        // ROM[19995]
M = D                                        // ROM[19996]
@ :pop_that                                  // ROM[19997]
0; JMP                                       // ROM[19998]
( Output.create:240)

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[19999]
D = A                                        // ROM[20000]
// ---------------------------
// push D
@ SP                                         // ROM[20001]
AM = M+1                                     // ROM[20002]
A = A-1                                      // ROM[20003]
M = D                                        // ROM[20004]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20005]
D = A                                        // ROM[20006]
@ R13                                        // ROM[20007]
M = D                                        // ROM[20008]
// ---------------------------
// call
@ Output.create:241                          // ROM[20009]
D = A                                        // ROM[20010]
@ R15                                        // ROM[20011]
M = D                                        // ROM[20012]
@ :push_local                                // ROM[20013]
0; JMP                                       // ROM[20014]
( Output.create:241)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:242                          // ROM[20015]
D = A                                        // ROM[20016]
@ R15                                        // ROM[20017]
M = D                                        // ROM[20018]
@ :add                                       // ROM[20019]
0; JMP                                       // ROM[20020]
( Output.create:242)

// -------------------------------------
// PUSH: <argument, 9>
// -------------------------------------
// ---------------------------
// R13 = index
@ 9                                          // ROM[20021]
D = A                                        // ROM[20022]
@ R13                                        // ROM[20023]
M = D                                        // ROM[20024]
// ---------------------------
// call
@ Output.create:243                          // ROM[20025]
D = A                                        // ROM[20026]
@ R15                                        // ROM[20027]
M = D                                        // ROM[20028]
@ :push_argument                             // ROM[20029]
0; JMP                                       // ROM[20030]
( Output.create:243)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20031]
AM = M-1                                     // ROM[20032]
D = M                                        // ROM[20033]
// ---------------------------
@ 5                                          // ROM[20034]
M = D                                        // ROM[20035]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20036]
AM = M-1                                     // ROM[20037]
D = M                                        // ROM[20038]
// ---------------------------
@ 4                                          // ROM[20039]
M = D                                        // ROM[20040]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[20041]
D = M                                        // ROM[20042]
// ---------------------------
// push D
@ SP                                         // ROM[20043]
AM = M+1                                     // ROM[20044]
A = A-1                                      // ROM[20045]
M = D                                        // ROM[20046]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20047]
D = A                                        // ROM[20048]
@ R13                                        // ROM[20049]
M = D                                        // ROM[20050]
// ---------------------------
// call
@ Output.create:244                          // ROM[20051]
D = A                                        // ROM[20052]
@ R15                                        // ROM[20053]
M = D                                        // ROM[20054]
@ :pop_that                                  // ROM[20055]
0; JMP                                       // ROM[20056]
( Output.create:244)

// -------------------------------------
// PUSH: <constant, 9>
// -------------------------------------
@ 9                                          // ROM[20057]
D = A                                        // ROM[20058]
// ---------------------------
// push D
@ SP                                         // ROM[20059]
AM = M+1                                     // ROM[20060]
A = A-1                                      // ROM[20061]
M = D                                        // ROM[20062]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20063]
D = A                                        // ROM[20064]
@ R13                                        // ROM[20065]
M = D                                        // ROM[20066]
// ---------------------------
// call
@ Output.create:245                          // ROM[20067]
D = A                                        // ROM[20068]
@ R15                                        // ROM[20069]
M = D                                        // ROM[20070]
@ :push_local                                // ROM[20071]
0; JMP                                       // ROM[20072]
( Output.create:245)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:246                          // ROM[20073]
D = A                                        // ROM[20074]
@ R15                                        // ROM[20075]
M = D                                        // ROM[20076]
@ :add                                       // ROM[20077]
0; JMP                                       // ROM[20078]
( Output.create:246)

// -------------------------------------
// PUSH: <argument, 10>
// -------------------------------------
// ---------------------------
// R13 = index
@ 10                                         // ROM[20079]
D = A                                        // ROM[20080]
@ R13                                        // ROM[20081]
M = D                                        // ROM[20082]
// ---------------------------
// call
@ Output.create:247                          // ROM[20083]
D = A                                        // ROM[20084]
@ R15                                        // ROM[20085]
M = D                                        // ROM[20086]
@ :push_argument                             // ROM[20087]
0; JMP                                       // ROM[20088]
( Output.create:247)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20089]
AM = M-1                                     // ROM[20090]
D = M                                        // ROM[20091]
// ---------------------------
@ 5                                          // ROM[20092]
M = D                                        // ROM[20093]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20094]
AM = M-1                                     // ROM[20095]
D = M                                        // ROM[20096]
// ---------------------------
@ 4                                          // ROM[20097]
M = D                                        // ROM[20098]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[20099]
D = M                                        // ROM[20100]
// ---------------------------
// push D
@ SP                                         // ROM[20101]
AM = M+1                                     // ROM[20102]
A = A-1                                      // ROM[20103]
M = D                                        // ROM[20104]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20105]
D = A                                        // ROM[20106]
@ R13                                        // ROM[20107]
M = D                                        // ROM[20108]
// ---------------------------
// call
@ Output.create:248                          // ROM[20109]
D = A                                        // ROM[20110]
@ R15                                        // ROM[20111]
M = D                                        // ROM[20112]
@ :pop_that                                  // ROM[20113]
0; JMP                                       // ROM[20114]
( Output.create:248)

// -------------------------------------
// PUSH: <constant, 10>
// -------------------------------------
@ 10                                         // ROM[20115]
D = A                                        // ROM[20116]
// ---------------------------
// push D
@ SP                                         // ROM[20117]
AM = M+1                                     // ROM[20118]
A = A-1                                      // ROM[20119]
M = D                                        // ROM[20120]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20121]
D = A                                        // ROM[20122]
@ R13                                        // ROM[20123]
M = D                                        // ROM[20124]
// ---------------------------
// call
@ Output.create:249                          // ROM[20125]
D = A                                        // ROM[20126]
@ R15                                        // ROM[20127]
M = D                                        // ROM[20128]
@ :push_local                                // ROM[20129]
0; JMP                                       // ROM[20130]
( Output.create:249)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.create:250                          // ROM[20131]
D = A                                        // ROM[20132]
@ R15                                        // ROM[20133]
M = D                                        // ROM[20134]
@ :add                                       // ROM[20135]
0; JMP                                       // ROM[20136]
( Output.create:250)

// -------------------------------------
// PUSH: <argument, 11>
// -------------------------------------
// ---------------------------
// R13 = index
@ 11                                         // ROM[20137]
D = A                                        // ROM[20138]
@ R13                                        // ROM[20139]
M = D                                        // ROM[20140]
// ---------------------------
// call
@ Output.create:251                          // ROM[20141]
D = A                                        // ROM[20142]
@ R15                                        // ROM[20143]
M = D                                        // ROM[20144]
@ :push_argument                             // ROM[20145]
0; JMP                                       // ROM[20146]
( Output.create:251)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20147]
AM = M-1                                     // ROM[20148]
D = M                                        // ROM[20149]
// ---------------------------
@ 5                                          // ROM[20150]
M = D                                        // ROM[20151]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20152]
AM = M-1                                     // ROM[20153]
D = M                                        // ROM[20154]
// ---------------------------
@ 4                                          // ROM[20155]
M = D                                        // ROM[20156]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[20157]
D = M                                        // ROM[20158]
// ---------------------------
// push D
@ SP                                         // ROM[20159]
AM = M+1                                     // ROM[20160]
A = A-1                                      // ROM[20161]
M = D                                        // ROM[20162]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20163]
D = A                                        // ROM[20164]
@ R13                                        // ROM[20165]
M = D                                        // ROM[20166]
// ---------------------------
// call
@ Output.create:252                          // ROM[20167]
D = A                                        // ROM[20168]
@ R15                                        // ROM[20169]
M = D                                        // ROM[20170]
@ :pop_that                                  // ROM[20171]
0; JMP                                       // ROM[20172]
( Output.create:252)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[20173]
D = A                                        // ROM[20174]
// ---------------------------
// push D
@ SP                                         // ROM[20175]
AM = M+1                                     // ROM[20176]
A = A-1                                      // ROM[20177]
M = D                                        // ROM[20178]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.create:253                          // ROM[20179]
D = A                                        // ROM[20180]
@ R15                                        // ROM[20181]
M = D                                        // ROM[20182]
@ :return                                    // ROM[20183]
0; JMP                                       // ROM[20184]
( Output.create:253)

// =========================================================
// FUNCTION: Output.createShiftedMap(4 locals)
// =========================================================

( Output.createShiftedMap )
// ---------------------------
// clear local segment
D = 0                                        // ROM[20185]
// ---------------------------
// push D
@ SP                                         // ROM[20186]
AM = M+1                                     // ROM[20187]
A = A-1                                      // ROM[20188]
M = D                                        // ROM[20189]
// ---------------------------
// push D
@ SP                                         // ROM[20190]
AM = M+1                                     // ROM[20191]
A = A-1                                      // ROM[20192]
M = D                                        // ROM[20193]
// ---------------------------
// push D
@ SP                                         // ROM[20194]
AM = M+1                                     // ROM[20195]
A = A-1                                      // ROM[20196]
M = D                                        // ROM[20197]
// ---------------------------
// push D
@ SP                                         // ROM[20198]
AM = M+1                                     // ROM[20199]
A = A-1                                      // ROM[20200]
M = D                                        // ROM[20201]

// -------------------------------------
// PUSH: <constant, 127>
// -------------------------------------
@ 127                                        // ROM[20202]
D = A                                        // ROM[20203]
// ---------------------------
// push D
@ SP                                         // ROM[20204]
AM = M+1                                     // ROM[20205]
A = A-1                                      // ROM[20206]
M = D                                        // ROM[20207]

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[20208]
D = A                                        // ROM[20209]
@ R13                                        // ROM[20210]
M = D                                        // ROM[20211]
// ---------------------------
// Push RA
@ Output.createShiftedMap:254                // ROM[20212]
D = A                                        // ROM[20213]
// ---------------------------
// push D
@ SP                                         // ROM[20214]
AM = M+1                                     // ROM[20215]
A = A-1                                      // ROM[20216]
M = D                                        // ROM[20217]
// ---------------------------
// call
@ Output.createShiftedMap:255                // ROM[20218]
D = A                                        // ROM[20219]
@ R15                                        // ROM[20220]
M = D                                        // ROM[20221]
@ :call                                      // ROM[20222]
0; JMP                                       // ROM[20223]
( Output.createShiftedMap:255)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[20224]
0; JMP                                       // ROM[20225]
// ---------------------------
// ( RA )
( Output.createShiftedMap:254) 

// -------------------------------------
// POP: <static, 6>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20226]
AM = M-1                                     // ROM[20227]
D = M                                        // ROM[20228]
// ---------------------------
// static[index] = D
@ Output.6                                   // ROM[20229]
M = D                                        // ROM[20230]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[20231]
D = A                                        // ROM[20232]
// ---------------------------
// push D
@ SP                                         // ROM[20233]
AM = M+1                                     // ROM[20234]
A = A-1                                      // ROM[20235]
M = D                                        // ROM[20236]

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20237]
D = A                                        // ROM[20238]
@ R13                                        // ROM[20239]
M = D                                        // ROM[20240]
// ---------------------------
// call
@ Output.createShiftedMap:256                // ROM[20241]
D = A                                        // ROM[20242]
@ R15                                        // ROM[20243]
M = D                                        // ROM[20244]
@ :pop_local                                 // ROM[20245]
0; JMP                                       // ROM[20246]
( Output.createShiftedMap:256)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Output.createShiftedMap$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20247]
D = A                                        // ROM[20248]
@ R13                                        // ROM[20249]
M = D                                        // ROM[20250]
// ---------------------------
// call
@ Output.createShiftedMap:257                // ROM[20251]
D = A                                        // ROM[20252]
@ R15                                        // ROM[20253]
M = D                                        // ROM[20254]
@ :push_local                                // ROM[20255]
0; JMP                                       // ROM[20256]
( Output.createShiftedMap:257)

// -------------------------------------
// PUSH: <constant, 127>
// -------------------------------------
@ 127                                        // ROM[20257]
D = A                                        // ROM[20258]
// ---------------------------
// push D
@ SP                                         // ROM[20259]
AM = M+1                                     // ROM[20260]
A = A-1                                      // ROM[20261]
M = D                                        // ROM[20262]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:258                // ROM[20263]
D = A                                        // ROM[20264]
@ R15                                        // ROM[20265]
M = D                                        // ROM[20266]
@ :lt                                        // ROM[20267]
0; JMP                                       // ROM[20268]
( Output.createShiftedMap:258)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[20269]
A = M-1                                      // ROM[20270]
M = !M                                       // ROM[20271]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20272]
AM = M-1                                     // ROM[20273]
D = M                                        // ROM[20274]
// ---------------------------
@ Output.createShiftedMap$WHILE_END0         // ROM[20275]
D; JNE                                       // ROM[20276]

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20277]
D = A                                        // ROM[20278]
@ R13                                        // ROM[20279]
M = D                                        // ROM[20280]
// ---------------------------
// call
@ Output.createShiftedMap:259                // ROM[20281]
D = A                                        // ROM[20282]
@ R15                                        // ROM[20283]
M = D                                        // ROM[20284]
@ :push_local                                // ROM[20285]
0; JMP                                       // ROM[20286]
( Output.createShiftedMap:259)

// -------------------------------------
// PUSH: <static, 5>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.5                                   // ROM[20287]
D = M                                        // ROM[20288]
// ---------------------------
// push D
@ SP                                         // ROM[20289]
AM = M+1                                     // ROM[20290]
A = A-1                                      // ROM[20291]
M = D                                        // ROM[20292]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:260                // ROM[20293]
D = A                                        // ROM[20294]
@ R15                                        // ROM[20295]
M = D                                        // ROM[20296]
@ :add                                       // ROM[20297]
0; JMP                                       // ROM[20298]
( Output.createShiftedMap:260)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20299]
AM = M-1                                     // ROM[20300]
D = M                                        // ROM[20301]
// ---------------------------
@ 4                                          // ROM[20302]
M = D                                        // ROM[20303]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20304]
D = A                                        // ROM[20305]
@ R13                                        // ROM[20306]
M = D                                        // ROM[20307]
// ---------------------------
// call
@ Output.createShiftedMap:261                // ROM[20308]
D = A                                        // ROM[20309]
@ R15                                        // ROM[20310]
M = D                                        // ROM[20311]
@ :push_that                                 // ROM[20312]
0; JMP                                       // ROM[20313]
( Output.createShiftedMap:261)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20314]
D = A                                        // ROM[20315]
@ R13                                        // ROM[20316]
M = D                                        // ROM[20317]
// ---------------------------
// call
@ Output.createShiftedMap:262                // ROM[20318]
D = A                                        // ROM[20319]
@ R15                                        // ROM[20320]
M = D                                        // ROM[20321]
@ :pop_local                                 // ROM[20322]
0; JMP                                       // ROM[20323]
( Output.createShiftedMap:262)

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[20324]
D = A                                        // ROM[20325]
// ---------------------------
// push D
@ SP                                         // ROM[20326]
AM = M+1                                     // ROM[20327]
A = A-1                                      // ROM[20328]
M = D                                        // ROM[20329]

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[20330]
D = A                                        // ROM[20331]
@ R13                                        // ROM[20332]
M = D                                        // ROM[20333]
// ---------------------------
// Push RA
@ Output.createShiftedMap:263                // ROM[20334]
D = A                                        // ROM[20335]
// ---------------------------
// push D
@ SP                                         // ROM[20336]
AM = M+1                                     // ROM[20337]
A = A-1                                      // ROM[20338]
M = D                                        // ROM[20339]
// ---------------------------
// call
@ Output.createShiftedMap:264                // ROM[20340]
D = A                                        // ROM[20341]
@ R15                                        // ROM[20342]
M = D                                        // ROM[20343]
@ :call                                      // ROM[20344]
0; JMP                                       // ROM[20345]
( Output.createShiftedMap:264)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[20346]
0; JMP                                       // ROM[20347]
// ---------------------------
// ( RA )
( Output.createShiftedMap:263) 

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[20348]
D = A                                        // ROM[20349]
@ R13                                        // ROM[20350]
M = D                                        // ROM[20351]
// ---------------------------
// call
@ Output.createShiftedMap:265                // ROM[20352]
D = A                                        // ROM[20353]
@ R15                                        // ROM[20354]
M = D                                        // ROM[20355]
@ :pop_local                                 // ROM[20356]
0; JMP                                       // ROM[20357]
( Output.createShiftedMap:265)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20358]
D = A                                        // ROM[20359]
@ R13                                        // ROM[20360]
M = D                                        // ROM[20361]
// ---------------------------
// call
@ Output.createShiftedMap:266                // ROM[20362]
D = A                                        // ROM[20363]
@ R15                                        // ROM[20364]
M = D                                        // ROM[20365]
@ :push_local                                // ROM[20366]
0; JMP                                       // ROM[20367]
( Output.createShiftedMap:266)

// -------------------------------------
// PUSH: <static, 6>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.6                                   // ROM[20368]
D = M                                        // ROM[20369]
// ---------------------------
// push D
@ SP                                         // ROM[20370]
AM = M+1                                     // ROM[20371]
A = A-1                                      // ROM[20372]
M = D                                        // ROM[20373]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:267                // ROM[20374]
D = A                                        // ROM[20375]
@ R15                                        // ROM[20376]
M = D                                        // ROM[20377]
@ :add                                       // ROM[20378]
0; JMP                                       // ROM[20379]
( Output.createShiftedMap:267)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[20380]
D = A                                        // ROM[20381]
@ R13                                        // ROM[20382]
M = D                                        // ROM[20383]
// ---------------------------
// call
@ Output.createShiftedMap:268                // ROM[20384]
D = A                                        // ROM[20385]
@ R15                                        // ROM[20386]
M = D                                        // ROM[20387]
@ :push_local                                // ROM[20388]
0; JMP                                       // ROM[20389]
( Output.createShiftedMap:268)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20390]
AM = M-1                                     // ROM[20391]
D = M                                        // ROM[20392]
// ---------------------------
@ 5                                          // ROM[20393]
M = D                                        // ROM[20394]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20395]
AM = M-1                                     // ROM[20396]
D = M                                        // ROM[20397]
// ---------------------------
@ 4                                          // ROM[20398]
M = D                                        // ROM[20399]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[20400]
D = M                                        // ROM[20401]
// ---------------------------
// push D
@ SP                                         // ROM[20402]
AM = M+1                                     // ROM[20403]
A = A-1                                      // ROM[20404]
M = D                                        // ROM[20405]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20406]
D = A                                        // ROM[20407]
@ R13                                        // ROM[20408]
M = D                                        // ROM[20409]
// ---------------------------
// call
@ Output.createShiftedMap:269                // ROM[20410]
D = A                                        // ROM[20411]
@ R15                                        // ROM[20412]
M = D                                        // ROM[20413]
@ :pop_that                                  // ROM[20414]
0; JMP                                       // ROM[20415]
( Output.createShiftedMap:269)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[20416]
D = A                                        // ROM[20417]
// ---------------------------
// push D
@ SP                                         // ROM[20418]
AM = M+1                                     // ROM[20419]
A = A-1                                      // ROM[20420]
M = D                                        // ROM[20421]

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[20422]
D = A                                        // ROM[20423]
@ R13                                        // ROM[20424]
M = D                                        // ROM[20425]
// ---------------------------
// call
@ Output.createShiftedMap:270                // ROM[20426]
D = A                                        // ROM[20427]
@ R15                                        // ROM[20428]
M = D                                        // ROM[20429]
@ :pop_local                                 // ROM[20430]
0; JMP                                       // ROM[20431]
( Output.createShiftedMap:270)

// -------------------------------------
// LABEL: WHILE_EXP1
// -------------------------------------
( Output.createShiftedMap$WHILE_EXP1 )

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[20432]
D = A                                        // ROM[20433]
@ R13                                        // ROM[20434]
M = D                                        // ROM[20435]
// ---------------------------
// call
@ Output.createShiftedMap:271                // ROM[20436]
D = A                                        // ROM[20437]
@ R15                                        // ROM[20438]
M = D                                        // ROM[20439]
@ :push_local                                // ROM[20440]
0; JMP                                       // ROM[20441]
( Output.createShiftedMap:271)

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[20442]
D = A                                        // ROM[20443]
// ---------------------------
// push D
@ SP                                         // ROM[20444]
AM = M+1                                     // ROM[20445]
A = A-1                                      // ROM[20446]
M = D                                        // ROM[20447]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:272                // ROM[20448]
D = A                                        // ROM[20449]
@ R15                                        // ROM[20450]
M = D                                        // ROM[20451]
@ :lt                                        // ROM[20452]
0; JMP                                       // ROM[20453]
( Output.createShiftedMap:272)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[20454]
A = M-1                                      // ROM[20455]
M = !M                                       // ROM[20456]

// -------------------------------------
// IF-GOTO: WHILE_END1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20457]
AM = M-1                                     // ROM[20458]
D = M                                        // ROM[20459]
// ---------------------------
@ Output.createShiftedMap$WHILE_END1         // ROM[20460]
D; JNE                                       // ROM[20461]

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[20462]
D = A                                        // ROM[20463]
@ R13                                        // ROM[20464]
M = D                                        // ROM[20465]
// ---------------------------
// call
@ Output.createShiftedMap:273                // ROM[20466]
D = A                                        // ROM[20467]
@ R15                                        // ROM[20468]
M = D                                        // ROM[20469]
@ :push_local                                // ROM[20470]
0; JMP                                       // ROM[20471]
( Output.createShiftedMap:273)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[20472]
D = A                                        // ROM[20473]
@ R13                                        // ROM[20474]
M = D                                        // ROM[20475]
// ---------------------------
// call
@ Output.createShiftedMap:274                // ROM[20476]
D = A                                        // ROM[20477]
@ R15                                        // ROM[20478]
M = D                                        // ROM[20479]
@ :push_local                                // ROM[20480]
0; JMP                                       // ROM[20481]
( Output.createShiftedMap:274)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:275                // ROM[20482]
D = A                                        // ROM[20483]
@ R15                                        // ROM[20484]
M = D                                        // ROM[20485]
@ :add                                       // ROM[20486]
0; JMP                                       // ROM[20487]
( Output.createShiftedMap:275)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[20488]
D = A                                        // ROM[20489]
@ R13                                        // ROM[20490]
M = D                                        // ROM[20491]
// ---------------------------
// call
@ Output.createShiftedMap:276                // ROM[20492]
D = A                                        // ROM[20493]
@ R15                                        // ROM[20494]
M = D                                        // ROM[20495]
@ :push_local                                // ROM[20496]
0; JMP                                       // ROM[20497]
( Output.createShiftedMap:276)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20498]
D = A                                        // ROM[20499]
@ R13                                        // ROM[20500]
M = D                                        // ROM[20501]
// ---------------------------
// call
@ Output.createShiftedMap:277                // ROM[20502]
D = A                                        // ROM[20503]
@ R15                                        // ROM[20504]
M = D                                        // ROM[20505]
@ :push_local                                // ROM[20506]
0; JMP                                       // ROM[20507]
( Output.createShiftedMap:277)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:278                // ROM[20508]
D = A                                        // ROM[20509]
@ R15                                        // ROM[20510]
M = D                                        // ROM[20511]
@ :add                                       // ROM[20512]
0; JMP                                       // ROM[20513]
( Output.createShiftedMap:278)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20514]
AM = M-1                                     // ROM[20515]
D = M                                        // ROM[20516]
// ---------------------------
@ 4                                          // ROM[20517]
M = D                                        // ROM[20518]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20519]
D = A                                        // ROM[20520]
@ R13                                        // ROM[20521]
M = D                                        // ROM[20522]
// ---------------------------
// call
@ Output.createShiftedMap:279                // ROM[20523]
D = A                                        // ROM[20524]
@ R15                                        // ROM[20525]
M = D                                        // ROM[20526]
@ :push_that                                 // ROM[20527]
0; JMP                                       // ROM[20528]
( Output.createShiftedMap:279)

// -------------------------------------
// PUSH: <constant, 256>
// -------------------------------------
@ 256                                        // ROM[20529]
D = A                                        // ROM[20530]
// ---------------------------
// push D
@ SP                                         // ROM[20531]
AM = M+1                                     // ROM[20532]
A = A-1                                      // ROM[20533]
M = D                                        // ROM[20534]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[20535]
D = A                                        // ROM[20536]
@ R13                                        // ROM[20537]
M = D                                        // ROM[20538]
// ---------------------------
// Push RA
@ Output.createShiftedMap:280                // ROM[20539]
D = A                                        // ROM[20540]
// ---------------------------
// push D
@ SP                                         // ROM[20541]
AM = M+1                                     // ROM[20542]
A = A-1                                      // ROM[20543]
M = D                                        // ROM[20544]
// ---------------------------
// call
@ Output.createShiftedMap:281                // ROM[20545]
D = A                                        // ROM[20546]
@ R15                                        // ROM[20547]
M = D                                        // ROM[20548]
@ :call                                      // ROM[20549]
0; JMP                                       // ROM[20550]
( Output.createShiftedMap:281)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[20551]
0; JMP                                       // ROM[20552]
// ---------------------------
// ( RA )
( Output.createShiftedMap:280) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20553]
AM = M-1                                     // ROM[20554]
D = M                                        // ROM[20555]
// ---------------------------
@ 5                                          // ROM[20556]
M = D                                        // ROM[20557]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20558]
AM = M-1                                     // ROM[20559]
D = M                                        // ROM[20560]
// ---------------------------
@ 4                                          // ROM[20561]
M = D                                        // ROM[20562]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[20563]
D = M                                        // ROM[20564]
// ---------------------------
// push D
@ SP                                         // ROM[20565]
AM = M+1                                     // ROM[20566]
A = A-1                                      // ROM[20567]
M = D                                        // ROM[20568]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20569]
D = A                                        // ROM[20570]
@ R13                                        // ROM[20571]
M = D                                        // ROM[20572]
// ---------------------------
// call
@ Output.createShiftedMap:282                // ROM[20573]
D = A                                        // ROM[20574]
@ R15                                        // ROM[20575]
M = D                                        // ROM[20576]
@ :pop_that                                  // ROM[20577]
0; JMP                                       // ROM[20578]
( Output.createShiftedMap:282)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[20579]
D = A                                        // ROM[20580]
@ R13                                        // ROM[20581]
M = D                                        // ROM[20582]
// ---------------------------
// call
@ Output.createShiftedMap:283                // ROM[20583]
D = A                                        // ROM[20584]
@ R15                                        // ROM[20585]
M = D                                        // ROM[20586]
@ :push_local                                // ROM[20587]
0; JMP                                       // ROM[20588]
( Output.createShiftedMap:283)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[20589]
D = A                                        // ROM[20590]
// ---------------------------
// push D
@ SP                                         // ROM[20591]
AM = M+1                                     // ROM[20592]
A = A-1                                      // ROM[20593]
M = D                                        // ROM[20594]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:284                // ROM[20595]
D = A                                        // ROM[20596]
@ R15                                        // ROM[20597]
M = D                                        // ROM[20598]
@ :add                                       // ROM[20599]
0; JMP                                       // ROM[20600]
( Output.createShiftedMap:284)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[20601]
D = A                                        // ROM[20602]
@ R13                                        // ROM[20603]
M = D                                        // ROM[20604]
// ---------------------------
// call
@ Output.createShiftedMap:285                // ROM[20605]
D = A                                        // ROM[20606]
@ R15                                        // ROM[20607]
M = D                                        // ROM[20608]
@ :pop_local                                 // ROM[20609]
0; JMP                                       // ROM[20610]
( Output.createShiftedMap:285)

// -------------------------------------
// GOTO: WHILE_EXP1
// -------------------------------------
@ Output.createShiftedMap$WHILE_EXP1         // ROM[20611]
0; JMP                                       // ROM[20612]

// -------------------------------------
// LABEL: WHILE_END1
// -------------------------------------
( Output.createShiftedMap$WHILE_END1 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20613]
D = A                                        // ROM[20614]
@ R13                                        // ROM[20615]
M = D                                        // ROM[20616]
// ---------------------------
// call
@ Output.createShiftedMap:286                // ROM[20617]
D = A                                        // ROM[20618]
@ R15                                        // ROM[20619]
M = D                                        // ROM[20620]
@ :push_local                                // ROM[20621]
0; JMP                                       // ROM[20622]
( Output.createShiftedMap:286)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[20623]
D = A                                        // ROM[20624]
// ---------------------------
// push D
@ SP                                         // ROM[20625]
AM = M+1                                     // ROM[20626]
A = A-1                                      // ROM[20627]
M = D                                        // ROM[20628]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:287                // ROM[20629]
D = A                                        // ROM[20630]
@ R15                                        // ROM[20631]
M = D                                        // ROM[20632]
@ :eq                                        // ROM[20633]
0; JMP                                       // ROM[20634]
( Output.createShiftedMap:287)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20635]
AM = M-1                                     // ROM[20636]
D = M                                        // ROM[20637]
// ---------------------------
@ Output.createShiftedMap$IF_TRUE0           // ROM[20638]
D; JNE                                       // ROM[20639]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Output.createShiftedMap$IF_FALSE0          // ROM[20640]
0; JMP                                       // ROM[20641]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Output.createShiftedMap$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[20642]
D = A                                        // ROM[20643]
// ---------------------------
// push D
@ SP                                         // ROM[20644]
AM = M+1                                     // ROM[20645]
A = A-1                                      // ROM[20646]
M = D                                        // ROM[20647]

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20648]
D = A                                        // ROM[20649]
@ R13                                        // ROM[20650]
M = D                                        // ROM[20651]
// ---------------------------
// call
@ Output.createShiftedMap:288                // ROM[20652]
D = A                                        // ROM[20653]
@ R15                                        // ROM[20654]
M = D                                        // ROM[20655]
@ :pop_local                                 // ROM[20656]
0; JMP                                       // ROM[20657]
( Output.createShiftedMap:288)

// -------------------------------------
// GOTO: IF_END0
// -------------------------------------
@ Output.createShiftedMap$IF_END0            // ROM[20658]
0; JMP                                       // ROM[20659]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Output.createShiftedMap$IF_FALSE0 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20660]
D = A                                        // ROM[20661]
@ R13                                        // ROM[20662]
M = D                                        // ROM[20663]
// ---------------------------
// call
@ Output.createShiftedMap:289                // ROM[20664]
D = A                                        // ROM[20665]
@ R15                                        // ROM[20666]
M = D                                        // ROM[20667]
@ :push_local                                // ROM[20668]
0; JMP                                       // ROM[20669]
( Output.createShiftedMap:289)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[20670]
D = A                                        // ROM[20671]
// ---------------------------
// push D
@ SP                                         // ROM[20672]
AM = M+1                                     // ROM[20673]
A = A-1                                      // ROM[20674]
M = D                                        // ROM[20675]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:290                // ROM[20676]
D = A                                        // ROM[20677]
@ R15                                        // ROM[20678]
M = D                                        // ROM[20679]
@ :add                                       // ROM[20680]
0; JMP                                       // ROM[20681]
( Output.createShiftedMap:290)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20682]
D = A                                        // ROM[20683]
@ R13                                        // ROM[20684]
M = D                                        // ROM[20685]
// ---------------------------
// call
@ Output.createShiftedMap:291                // ROM[20686]
D = A                                        // ROM[20687]
@ R15                                        // ROM[20688]
M = D                                        // ROM[20689]
@ :pop_local                                 // ROM[20690]
0; JMP                                       // ROM[20691]
( Output.createShiftedMap:291)

// -------------------------------------
// LABEL: IF_END0
// -------------------------------------
( Output.createShiftedMap$IF_END0 )

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Output.createShiftedMap$WHILE_EXP0         // ROM[20692]
0; JMP                                       // ROM[20693]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Output.createShiftedMap$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[20694]
D = A                                        // ROM[20695]
// ---------------------------
// push D
@ SP                                         // ROM[20696]
AM = M+1                                     // ROM[20697]
A = A-1                                      // ROM[20698]
M = D                                        // ROM[20699]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.createShiftedMap:292                // ROM[20700]
D = A                                        // ROM[20701]
@ R15                                        // ROM[20702]
M = D                                        // ROM[20703]
@ :return                                    // ROM[20704]
0; JMP                                       // ROM[20705]
( Output.createShiftedMap:292)

// =========================================================
// FUNCTION: Output.getMap(1 locals)
// =========================================================

( Output.getMap )
// ---------------------------
// clear local segment
D = 0                                        // ROM[20706]
// ---------------------------
// push D
@ SP                                         // ROM[20707]
AM = M+1                                     // ROM[20708]
A = A-1                                      // ROM[20709]
M = D                                        // ROM[20710]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20711]
D = A                                        // ROM[20712]
@ R13                                        // ROM[20713]
M = D                                        // ROM[20714]
// ---------------------------
// call
@ Output.getMap:293                          // ROM[20715]
D = A                                        // ROM[20716]
@ R15                                        // ROM[20717]
M = D                                        // ROM[20718]
@ :push_argument                             // ROM[20719]
0; JMP                                       // ROM[20720]
( Output.getMap:293)

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[20721]
D = A                                        // ROM[20722]
// ---------------------------
// push D
@ SP                                         // ROM[20723]
AM = M+1                                     // ROM[20724]
A = A-1                                      // ROM[20725]
M = D                                        // ROM[20726]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Output.getMap:294                          // ROM[20727]
D = A                                        // ROM[20728]
@ R15                                        // ROM[20729]
M = D                                        // ROM[20730]
@ :lt                                        // ROM[20731]
0; JMP                                       // ROM[20732]
( Output.getMap:294)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20733]
D = A                                        // ROM[20734]
@ R13                                        // ROM[20735]
M = D                                        // ROM[20736]
// ---------------------------
// call
@ Output.getMap:295                          // ROM[20737]
D = A                                        // ROM[20738]
@ R15                                        // ROM[20739]
M = D                                        // ROM[20740]
@ :push_argument                             // ROM[20741]
0; JMP                                       // ROM[20742]
( Output.getMap:295)

// -------------------------------------
// PUSH: <constant, 126>
// -------------------------------------
@ 126                                        // ROM[20743]
D = A                                        // ROM[20744]
// ---------------------------
// push D
@ SP                                         // ROM[20745]
AM = M+1                                     // ROM[20746]
A = A-1                                      // ROM[20747]
M = D                                        // ROM[20748]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Output.getMap:296                          // ROM[20749]
D = A                                        // ROM[20750]
@ R15                                        // ROM[20751]
M = D                                        // ROM[20752]
@ :gt                                        // ROM[20753]
0; JMP                                       // ROM[20754]
( Output.getMap:296)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Output.getMap:297                          // ROM[20755]
D = A                                        // ROM[20756]
@ R15                                        // ROM[20757]
M = D                                        // ROM[20758]
@ :or                                        // ROM[20759]
0; JMP                                       // ROM[20760]
( Output.getMap:297)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20761]
AM = M-1                                     // ROM[20762]
D = M                                        // ROM[20763]
// ---------------------------
@ Output.getMap$IF_TRUE0                     // ROM[20764]
D; JNE                                       // ROM[20765]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Output.getMap$IF_FALSE0                    // ROM[20766]
0; JMP                                       // ROM[20767]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Output.getMap$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[20768]
D = A                                        // ROM[20769]
// ---------------------------
// push D
@ SP                                         // ROM[20770]
AM = M+1                                     // ROM[20771]
A = A-1                                      // ROM[20772]
M = D                                        // ROM[20773]

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20774]
D = A                                        // ROM[20775]
@ R13                                        // ROM[20776]
M = D                                        // ROM[20777]
// ---------------------------
// call
@ Output.getMap:298                          // ROM[20778]
D = A                                        // ROM[20779]
@ R15                                        // ROM[20780]
M = D                                        // ROM[20781]
@ :pop_argument                              // ROM[20782]
0; JMP                                       // ROM[20783]
( Output.getMap:298)

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Output.getMap$IF_FALSE0 )

// -------------------------------------
// PUSH: <static, 2>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.2                                   // ROM[20784]
D = M                                        // ROM[20785]
// ---------------------------
// push D
@ SP                                         // ROM[20786]
AM = M+1                                     // ROM[20787]
A = A-1                                      // ROM[20788]
M = D                                        // ROM[20789]

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20790]
AM = M-1                                     // ROM[20791]
D = M                                        // ROM[20792]
// ---------------------------
@ Output.getMap$IF_TRUE1                     // ROM[20793]
D; JNE                                       // ROM[20794]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Output.getMap$IF_FALSE1                    // ROM[20795]
0; JMP                                       // ROM[20796]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Output.getMap$IF_TRUE1 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20797]
D = A                                        // ROM[20798]
@ R13                                        // ROM[20799]
M = D                                        // ROM[20800]
// ---------------------------
// call
@ Output.getMap:299                          // ROM[20801]
D = A                                        // ROM[20802]
@ R15                                        // ROM[20803]
M = D                                        // ROM[20804]
@ :push_argument                             // ROM[20805]
0; JMP                                       // ROM[20806]
( Output.getMap:299)

// -------------------------------------
// PUSH: <static, 5>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.5                                   // ROM[20807]
D = M                                        // ROM[20808]
// ---------------------------
// push D
@ SP                                         // ROM[20809]
AM = M+1                                     // ROM[20810]
A = A-1                                      // ROM[20811]
M = D                                        // ROM[20812]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.getMap:300                          // ROM[20813]
D = A                                        // ROM[20814]
@ R15                                        // ROM[20815]
M = D                                        // ROM[20816]
@ :add                                       // ROM[20817]
0; JMP                                       // ROM[20818]
( Output.getMap:300)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20819]
AM = M-1                                     // ROM[20820]
D = M                                        // ROM[20821]
// ---------------------------
@ 4                                          // ROM[20822]
M = D                                        // ROM[20823]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20824]
D = A                                        // ROM[20825]
@ R13                                        // ROM[20826]
M = D                                        // ROM[20827]
// ---------------------------
// call
@ Output.getMap:301                          // ROM[20828]
D = A                                        // ROM[20829]
@ R15                                        // ROM[20830]
M = D                                        // ROM[20831]
@ :push_that                                 // ROM[20832]
0; JMP                                       // ROM[20833]
( Output.getMap:301)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20834]
D = A                                        // ROM[20835]
@ R13                                        // ROM[20836]
M = D                                        // ROM[20837]
// ---------------------------
// call
@ Output.getMap:302                          // ROM[20838]
D = A                                        // ROM[20839]
@ R15                                        // ROM[20840]
M = D                                        // ROM[20841]
@ :pop_local                                 // ROM[20842]
0; JMP                                       // ROM[20843]
( Output.getMap:302)

// -------------------------------------
// GOTO: IF_END1
// -------------------------------------
@ Output.getMap$IF_END1                      // ROM[20844]
0; JMP                                       // ROM[20845]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Output.getMap$IF_FALSE1 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20846]
D = A                                        // ROM[20847]
@ R13                                        // ROM[20848]
M = D                                        // ROM[20849]
// ---------------------------
// call
@ Output.getMap:303                          // ROM[20850]
D = A                                        // ROM[20851]
@ R15                                        // ROM[20852]
M = D                                        // ROM[20853]
@ :push_argument                             // ROM[20854]
0; JMP                                       // ROM[20855]
( Output.getMap:303)

// -------------------------------------
// PUSH: <static, 6>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.6                                   // ROM[20856]
D = M                                        // ROM[20857]
// ---------------------------
// push D
@ SP                                         // ROM[20858]
AM = M+1                                     // ROM[20859]
A = A-1                                      // ROM[20860]
M = D                                        // ROM[20861]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.getMap:304                          // ROM[20862]
D = A                                        // ROM[20863]
@ R15                                        // ROM[20864]
M = D                                        // ROM[20865]
@ :add                                       // ROM[20866]
0; JMP                                       // ROM[20867]
( Output.getMap:304)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[20868]
AM = M-1                                     // ROM[20869]
D = M                                        // ROM[20870]
// ---------------------------
@ 4                                          // ROM[20871]
M = D                                        // ROM[20872]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20873]
D = A                                        // ROM[20874]
@ R13                                        // ROM[20875]
M = D                                        // ROM[20876]
// ---------------------------
// call
@ Output.getMap:305                          // ROM[20877]
D = A                                        // ROM[20878]
@ R15                                        // ROM[20879]
M = D                                        // ROM[20880]
@ :push_that                                 // ROM[20881]
0; JMP                                       // ROM[20882]
( Output.getMap:305)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20883]
D = A                                        // ROM[20884]
@ R13                                        // ROM[20885]
M = D                                        // ROM[20886]
// ---------------------------
// call
@ Output.getMap:306                          // ROM[20887]
D = A                                        // ROM[20888]
@ R15                                        // ROM[20889]
M = D                                        // ROM[20890]
@ :pop_local                                 // ROM[20891]
0; JMP                                       // ROM[20892]
( Output.getMap:306)

// -------------------------------------
// LABEL: IF_END1
// -------------------------------------
( Output.getMap$IF_END1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20893]
D = A                                        // ROM[20894]
@ R13                                        // ROM[20895]
M = D                                        // ROM[20896]
// ---------------------------
// call
@ Output.getMap:307                          // ROM[20897]
D = A                                        // ROM[20898]
@ R15                                        // ROM[20899]
M = D                                        // ROM[20900]
@ :push_local                                // ROM[20901]
0; JMP                                       // ROM[20902]
( Output.getMap:307)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.getMap:308                          // ROM[20903]
D = A                                        // ROM[20904]
@ R15                                        // ROM[20905]
M = D                                        // ROM[20906]
@ :return                                    // ROM[20907]
0; JMP                                       // ROM[20908]
( Output.getMap:308)

// =========================================================
// FUNCTION: Output.drawChar(4 locals)
// =========================================================

( Output.drawChar )
// ---------------------------
// clear local segment
D = 0                                        // ROM[20909]
// ---------------------------
// push D
@ SP                                         // ROM[20910]
AM = M+1                                     // ROM[20911]
A = A-1                                      // ROM[20912]
M = D                                        // ROM[20913]
// ---------------------------
// push D
@ SP                                         // ROM[20914]
AM = M+1                                     // ROM[20915]
A = A-1                                      // ROM[20916]
M = D                                        // ROM[20917]
// ---------------------------
// push D
@ SP                                         // ROM[20918]
AM = M+1                                     // ROM[20919]
A = A-1                                      // ROM[20920]
M = D                                        // ROM[20921]
// ---------------------------
// push D
@ SP                                         // ROM[20922]
AM = M+1                                     // ROM[20923]
A = A-1                                      // ROM[20924]
M = D                                        // ROM[20925]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20926]
D = A                                        // ROM[20927]
@ R13                                        // ROM[20928]
M = D                                        // ROM[20929]
// ---------------------------
// call
@ Output.drawChar:309                        // ROM[20930]
D = A                                        // ROM[20931]
@ R15                                        // ROM[20932]
M = D                                        // ROM[20933]
@ :push_argument                             // ROM[20934]
0; JMP                                       // ROM[20935]
( Output.drawChar:309)

// -------------------------------------
// CALL: Output.getMap(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[20936]
D = A                                        // ROM[20937]
@ R13                                        // ROM[20938]
M = D                                        // ROM[20939]
// ---------------------------
// Push RA
@ Output.drawChar:310                        // ROM[20940]
D = A                                        // ROM[20941]
// ---------------------------
// push D
@ SP                                         // ROM[20942]
AM = M+1                                     // ROM[20943]
A = A-1                                      // ROM[20944]
M = D                                        // ROM[20945]
// ---------------------------
// call
@ Output.drawChar:311                        // ROM[20946]
D = A                                        // ROM[20947]
@ R15                                        // ROM[20948]
M = D                                        // ROM[20949]
@ :call                                      // ROM[20950]
0; JMP                                       // ROM[20951]
( Output.drawChar:311)
// ---------------------------
// goto functionName
@ Output.getMap                              // ROM[20952]
0; JMP                                       // ROM[20953]
// ---------------------------
// ( RA )
( Output.drawChar:310) 

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[20954]
D = A                                        // ROM[20955]
@ R13                                        // ROM[20956]
M = D                                        // ROM[20957]
// ---------------------------
// call
@ Output.drawChar:312                        // ROM[20958]
D = A                                        // ROM[20959]
@ R15                                        // ROM[20960]
M = D                                        // ROM[20961]
@ :pop_local                                 // ROM[20962]
0; JMP                                       // ROM[20963]
( Output.drawChar:312)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.1                                   // ROM[20964]
D = M                                        // ROM[20965]
// ---------------------------
// push D
@ SP                                         // ROM[20966]
AM = M+1                                     // ROM[20967]
A = A-1                                      // ROM[20968]
M = D                                        // ROM[20969]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[20970]
D = A                                        // ROM[20971]
@ R13                                        // ROM[20972]
M = D                                        // ROM[20973]
// ---------------------------
// call
@ Output.drawChar:313                        // ROM[20974]
D = A                                        // ROM[20975]
@ R15                                        // ROM[20976]
M = D                                        // ROM[20977]
@ :pop_local                                 // ROM[20978]
0; JMP                                       // ROM[20979]
( Output.drawChar:313)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Output.drawChar$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[20980]
D = A                                        // ROM[20981]
@ R13                                        // ROM[20982]
M = D                                        // ROM[20983]
// ---------------------------
// call
@ Output.drawChar:314                        // ROM[20984]
D = A                                        // ROM[20985]
@ R15                                        // ROM[20986]
M = D                                        // ROM[20987]
@ :push_local                                // ROM[20988]
0; JMP                                       // ROM[20989]
( Output.drawChar:314)

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[20990]
D = A                                        // ROM[20991]
// ---------------------------
// push D
@ SP                                         // ROM[20992]
AM = M+1                                     // ROM[20993]
A = A-1                                      // ROM[20994]
M = D                                        // ROM[20995]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:315                        // ROM[20996]
D = A                                        // ROM[20997]
@ R15                                        // ROM[20998]
M = D                                        // ROM[20999]
@ :lt                                        // ROM[21000]
0; JMP                                       // ROM[21001]
( Output.drawChar:315)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[21002]
A = M-1                                      // ROM[21003]
M = !M                                       // ROM[21004]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21005]
AM = M-1                                     // ROM[21006]
D = M                                        // ROM[21007]
// ---------------------------
@ Output.drawChar$WHILE_END0                 // ROM[21008]
D; JNE                                       // ROM[21009]

// -------------------------------------
// PUSH: <static, 2>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.2                                   // ROM[21010]
D = M                                        // ROM[21011]
// ---------------------------
// push D
@ SP                                         // ROM[21012]
AM = M+1                                     // ROM[21013]
A = A-1                                      // ROM[21014]
M = D                                        // ROM[21015]

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21016]
AM = M-1                                     // ROM[21017]
D = M                                        // ROM[21018]
// ---------------------------
@ Output.drawChar$IF_TRUE0                   // ROM[21019]
D; JNE                                       // ROM[21020]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Output.drawChar$IF_FALSE0                  // ROM[21021]
0; JMP                                       // ROM[21022]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Output.drawChar$IF_TRUE0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21023]
D = A                                        // ROM[21024]
@ R13                                        // ROM[21025]
M = D                                        // ROM[21026]
// ---------------------------
// call
@ Output.drawChar:316                        // ROM[21027]
D = A                                        // ROM[21028]
@ R15                                        // ROM[21029]
M = D                                        // ROM[21030]
@ :push_local                                // ROM[21031]
0; JMP                                       // ROM[21032]
( Output.drawChar:316)

// -------------------------------------
// PUSH: <static, 4>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.4                                   // ROM[21033]
D = M                                        // ROM[21034]
// ---------------------------
// push D
@ SP                                         // ROM[21035]
AM = M+1                                     // ROM[21036]
A = A-1                                      // ROM[21037]
M = D                                        // ROM[21038]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:317                        // ROM[21039]
D = A                                        // ROM[21040]
@ R15                                        // ROM[21041]
M = D                                        // ROM[21042]
@ :add                                       // ROM[21043]
0; JMP                                       // ROM[21044]
( Output.drawChar:317)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21045]
AM = M-1                                     // ROM[21046]
D = M                                        // ROM[21047]
// ---------------------------
@ 4                                          // ROM[21048]
M = D                                        // ROM[21049]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21050]
D = A                                        // ROM[21051]
@ R13                                        // ROM[21052]
M = D                                        // ROM[21053]
// ---------------------------
// call
@ Output.drawChar:318                        // ROM[21054]
D = A                                        // ROM[21055]
@ R15                                        // ROM[21056]
M = D                                        // ROM[21057]
@ :push_that                                 // ROM[21058]
0; JMP                                       // ROM[21059]
( Output.drawChar:318)

// -------------------------------------
// PUSH: <constant, 256>
// -------------------------------------
@ 256                                        // ROM[21060]
D = A                                        // ROM[21061]
// ---------------------------
// push D
@ SP                                         // ROM[21062]
AM = M+1                                     // ROM[21063]
A = A-1                                      // ROM[21064]
M = D                                        // ROM[21065]

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[21066]
A = M-1                                      // ROM[21067]
M = -M                                       // ROM[21068]

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:319                        // ROM[21069]
D = A                                        // ROM[21070]
@ R15                                        // ROM[21071]
M = D                                        // ROM[21072]
@ :and                                       // ROM[21073]
0; JMP                                       // ROM[21074]
( Output.drawChar:319)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[21075]
D = A                                        // ROM[21076]
@ R13                                        // ROM[21077]
M = D                                        // ROM[21078]
// ---------------------------
// call
@ Output.drawChar:320                        // ROM[21079]
D = A                                        // ROM[21080]
@ R15                                        // ROM[21081]
M = D                                        // ROM[21082]
@ :pop_local                                 // ROM[21083]
0; JMP                                       // ROM[21084]
( Output.drawChar:320)

// -------------------------------------
// GOTO: IF_END0
// -------------------------------------
@ Output.drawChar$IF_END0                    // ROM[21085]
0; JMP                                       // ROM[21086]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Output.drawChar$IF_FALSE0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21087]
D = A                                        // ROM[21088]
@ R13                                        // ROM[21089]
M = D                                        // ROM[21090]
// ---------------------------
// call
@ Output.drawChar:321                        // ROM[21091]
D = A                                        // ROM[21092]
@ R15                                        // ROM[21093]
M = D                                        // ROM[21094]
@ :push_local                                // ROM[21095]
0; JMP                                       // ROM[21096]
( Output.drawChar:321)

// -------------------------------------
// PUSH: <static, 4>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.4                                   // ROM[21097]
D = M                                        // ROM[21098]
// ---------------------------
// push D
@ SP                                         // ROM[21099]
AM = M+1                                     // ROM[21100]
A = A-1                                      // ROM[21101]
M = D                                        // ROM[21102]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:322                        // ROM[21103]
D = A                                        // ROM[21104]
@ R15                                        // ROM[21105]
M = D                                        // ROM[21106]
@ :add                                       // ROM[21107]
0; JMP                                       // ROM[21108]
( Output.drawChar:322)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21109]
AM = M-1                                     // ROM[21110]
D = M                                        // ROM[21111]
// ---------------------------
@ 4                                          // ROM[21112]
M = D                                        // ROM[21113]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21114]
D = A                                        // ROM[21115]
@ R13                                        // ROM[21116]
M = D                                        // ROM[21117]
// ---------------------------
// call
@ Output.drawChar:323                        // ROM[21118]
D = A                                        // ROM[21119]
@ R15                                        // ROM[21120]
M = D                                        // ROM[21121]
@ :push_that                                 // ROM[21122]
0; JMP                                       // ROM[21123]
( Output.drawChar:323)

// -------------------------------------
// PUSH: <constant, 255>
// -------------------------------------
@ 255                                        // ROM[21124]
D = A                                        // ROM[21125]
// ---------------------------
// push D
@ SP                                         // ROM[21126]
AM = M+1                                     // ROM[21127]
A = A-1                                      // ROM[21128]
M = D                                        // ROM[21129]

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:324                        // ROM[21130]
D = A                                        // ROM[21131]
@ R15                                        // ROM[21132]
M = D                                        // ROM[21133]
@ :and                                       // ROM[21134]
0; JMP                                       // ROM[21135]
( Output.drawChar:324)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[21136]
D = A                                        // ROM[21137]
@ R13                                        // ROM[21138]
M = D                                        // ROM[21139]
// ---------------------------
// call
@ Output.drawChar:325                        // ROM[21140]
D = A                                        // ROM[21141]
@ R15                                        // ROM[21142]
M = D                                        // ROM[21143]
@ :pop_local                                 // ROM[21144]
0; JMP                                       // ROM[21145]
( Output.drawChar:325)

// -------------------------------------
// LABEL: IF_END0
// -------------------------------------
( Output.drawChar$IF_END0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21146]
D = A                                        // ROM[21147]
@ R13                                        // ROM[21148]
M = D                                        // ROM[21149]
// ---------------------------
// call
@ Output.drawChar:326                        // ROM[21150]
D = A                                        // ROM[21151]
@ R15                                        // ROM[21152]
M = D                                        // ROM[21153]
@ :push_local                                // ROM[21154]
0; JMP                                       // ROM[21155]
( Output.drawChar:326)

// -------------------------------------
// PUSH: <static, 4>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.4                                   // ROM[21156]
D = M                                        // ROM[21157]
// ---------------------------
// push D
@ SP                                         // ROM[21158]
AM = M+1                                     // ROM[21159]
A = A-1                                      // ROM[21160]
M = D                                        // ROM[21161]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:327                        // ROM[21162]
D = A                                        // ROM[21163]
@ R15                                        // ROM[21164]
M = D                                        // ROM[21165]
@ :add                                       // ROM[21166]
0; JMP                                       // ROM[21167]
( Output.drawChar:327)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[21168]
D = A                                        // ROM[21169]
@ R13                                        // ROM[21170]
M = D                                        // ROM[21171]
// ---------------------------
// call
@ Output.drawChar:328                        // ROM[21172]
D = A                                        // ROM[21173]
@ R15                                        // ROM[21174]
M = D                                        // ROM[21175]
@ :push_local                                // ROM[21176]
0; JMP                                       // ROM[21177]
( Output.drawChar:328)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[21178]
D = A                                        // ROM[21179]
@ R13                                        // ROM[21180]
M = D                                        // ROM[21181]
// ---------------------------
// call
@ Output.drawChar:329                        // ROM[21182]
D = A                                        // ROM[21183]
@ R15                                        // ROM[21184]
M = D                                        // ROM[21185]
@ :push_local                                // ROM[21186]
0; JMP                                       // ROM[21187]
( Output.drawChar:329)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:330                        // ROM[21188]
D = A                                        // ROM[21189]
@ R15                                        // ROM[21190]
M = D                                        // ROM[21191]
@ :add                                       // ROM[21192]
0; JMP                                       // ROM[21193]
( Output.drawChar:330)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21194]
AM = M-1                                     // ROM[21195]
D = M                                        // ROM[21196]
// ---------------------------
@ 4                                          // ROM[21197]
M = D                                        // ROM[21198]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21199]
D = A                                        // ROM[21200]
@ R13                                        // ROM[21201]
M = D                                        // ROM[21202]
// ---------------------------
// call
@ Output.drawChar:331                        // ROM[21203]
D = A                                        // ROM[21204]
@ R15                                        // ROM[21205]
M = D                                        // ROM[21206]
@ :push_that                                 // ROM[21207]
0; JMP                                       // ROM[21208]
( Output.drawChar:331)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[21209]
D = A                                        // ROM[21210]
@ R13                                        // ROM[21211]
M = D                                        // ROM[21212]
// ---------------------------
// call
@ Output.drawChar:332                        // ROM[21213]
D = A                                        // ROM[21214]
@ R15                                        // ROM[21215]
M = D                                        // ROM[21216]
@ :push_local                                // ROM[21217]
0; JMP                                       // ROM[21218]
( Output.drawChar:332)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:333                        // ROM[21219]
D = A                                        // ROM[21220]
@ R15                                        // ROM[21221]
M = D                                        // ROM[21222]
@ :or                                        // ROM[21223]
0; JMP                                       // ROM[21224]
( Output.drawChar:333)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21225]
AM = M-1                                     // ROM[21226]
D = M                                        // ROM[21227]
// ---------------------------
@ 5                                          // ROM[21228]
M = D                                        // ROM[21229]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21230]
AM = M-1                                     // ROM[21231]
D = M                                        // ROM[21232]
// ---------------------------
@ 4                                          // ROM[21233]
M = D                                        // ROM[21234]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[21235]
D = M                                        // ROM[21236]
// ---------------------------
// push D
@ SP                                         // ROM[21237]
AM = M+1                                     // ROM[21238]
A = A-1                                      // ROM[21239]
M = D                                        // ROM[21240]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21241]
D = A                                        // ROM[21242]
@ R13                                        // ROM[21243]
M = D                                        // ROM[21244]
// ---------------------------
// call
@ Output.drawChar:334                        // ROM[21245]
D = A                                        // ROM[21246]
@ R15                                        // ROM[21247]
M = D                                        // ROM[21248]
@ :pop_that                                  // ROM[21249]
0; JMP                                       // ROM[21250]
( Output.drawChar:334)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21251]
D = A                                        // ROM[21252]
@ R13                                        // ROM[21253]
M = D                                        // ROM[21254]
// ---------------------------
// call
@ Output.drawChar:335                        // ROM[21255]
D = A                                        // ROM[21256]
@ R15                                        // ROM[21257]
M = D                                        // ROM[21258]
@ :push_local                                // ROM[21259]
0; JMP                                       // ROM[21260]
( Output.drawChar:335)

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[21261]
D = A                                        // ROM[21262]
// ---------------------------
// push D
@ SP                                         // ROM[21263]
AM = M+1                                     // ROM[21264]
A = A-1                                      // ROM[21265]
M = D                                        // ROM[21266]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:336                        // ROM[21267]
D = A                                        // ROM[21268]
@ R15                                        // ROM[21269]
M = D                                        // ROM[21270]
@ :add                                       // ROM[21271]
0; JMP                                       // ROM[21272]
( Output.drawChar:336)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21273]
D = A                                        // ROM[21274]
@ R13                                        // ROM[21275]
M = D                                        // ROM[21276]
// ---------------------------
// call
@ Output.drawChar:337                        // ROM[21277]
D = A                                        // ROM[21278]
@ R15                                        // ROM[21279]
M = D                                        // ROM[21280]
@ :pop_local                                 // ROM[21281]
0; JMP                                       // ROM[21282]
( Output.drawChar:337)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[21283]
D = A                                        // ROM[21284]
@ R13                                        // ROM[21285]
M = D                                        // ROM[21286]
// ---------------------------
// call
@ Output.drawChar:338                        // ROM[21287]
D = A                                        // ROM[21288]
@ R15                                        // ROM[21289]
M = D                                        // ROM[21290]
@ :push_local                                // ROM[21291]
0; JMP                                       // ROM[21292]
( Output.drawChar:338)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[21293]
D = A                                        // ROM[21294]
// ---------------------------
// push D
@ SP                                         // ROM[21295]
AM = M+1                                     // ROM[21296]
A = A-1                                      // ROM[21297]
M = D                                        // ROM[21298]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:339                        // ROM[21299]
D = A                                        // ROM[21300]
@ R15                                        // ROM[21301]
M = D                                        // ROM[21302]
@ :add                                       // ROM[21303]
0; JMP                                       // ROM[21304]
( Output.drawChar:339)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[21305]
D = A                                        // ROM[21306]
@ R13                                        // ROM[21307]
M = D                                        // ROM[21308]
// ---------------------------
// call
@ Output.drawChar:340                        // ROM[21309]
D = A                                        // ROM[21310]
@ R15                                        // ROM[21311]
M = D                                        // ROM[21312]
@ :pop_local                                 // ROM[21313]
0; JMP                                       // ROM[21314]
( Output.drawChar:340)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Output.drawChar$WHILE_EXP0                 // ROM[21315]
0; JMP                                       // ROM[21316]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Output.drawChar$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[21317]
D = A                                        // ROM[21318]
// ---------------------------
// push D
@ SP                                         // ROM[21319]
AM = M+1                                     // ROM[21320]
A = A-1                                      // ROM[21321]
M = D                                        // ROM[21322]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.drawChar:341                        // ROM[21323]
D = A                                        // ROM[21324]
@ R15                                        // ROM[21325]
M = D                                        // ROM[21326]
@ :return                                    // ROM[21327]
0; JMP                                       // ROM[21328]
( Output.drawChar:341)

// =========================================================
// FUNCTION: Output.moveCursor(0 locals)
// =========================================================

( Output.moveCursor )
// ---------------------------
// clear local segment
D = 0                                        // ROM[21329]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21330]
D = A                                        // ROM[21331]
@ R13                                        // ROM[21332]
M = D                                        // ROM[21333]
// ---------------------------
// call
@ Output.moveCursor:342                      // ROM[21334]
D = A                                        // ROM[21335]
@ R15                                        // ROM[21336]
M = D                                        // ROM[21337]
@ :push_argument                             // ROM[21338]
0; JMP                                       // ROM[21339]
( Output.moveCursor:342)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[21340]
D = A                                        // ROM[21341]
// ---------------------------
// push D
@ SP                                         // ROM[21342]
AM = M+1                                     // ROM[21343]
A = A-1                                      // ROM[21344]
M = D                                        // ROM[21345]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:343                      // ROM[21346]
D = A                                        // ROM[21347]
@ R15                                        // ROM[21348]
M = D                                        // ROM[21349]
@ :lt                                        // ROM[21350]
0; JMP                                       // ROM[21351]
( Output.moveCursor:343)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21352]
D = A                                        // ROM[21353]
@ R13                                        // ROM[21354]
M = D                                        // ROM[21355]
// ---------------------------
// call
@ Output.moveCursor:344                      // ROM[21356]
D = A                                        // ROM[21357]
@ R15                                        // ROM[21358]
M = D                                        // ROM[21359]
@ :push_argument                             // ROM[21360]
0; JMP                                       // ROM[21361]
( Output.moveCursor:344)

// -------------------------------------
// PUSH: <constant, 22>
// -------------------------------------
@ 22                                         // ROM[21362]
D = A                                        // ROM[21363]
// ---------------------------
// push D
@ SP                                         // ROM[21364]
AM = M+1                                     // ROM[21365]
A = A-1                                      // ROM[21366]
M = D                                        // ROM[21367]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:345                      // ROM[21368]
D = A                                        // ROM[21369]
@ R15                                        // ROM[21370]
M = D                                        // ROM[21371]
@ :gt                                        // ROM[21372]
0; JMP                                       // ROM[21373]
( Output.moveCursor:345)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:346                      // ROM[21374]
D = A                                        // ROM[21375]
@ R15                                        // ROM[21376]
M = D                                        // ROM[21377]
@ :or                                        // ROM[21378]
0; JMP                                       // ROM[21379]
( Output.moveCursor:346)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[21380]
D = A                                        // ROM[21381]
@ R13                                        // ROM[21382]
M = D                                        // ROM[21383]
// ---------------------------
// call
@ Output.moveCursor:347                      // ROM[21384]
D = A                                        // ROM[21385]
@ R15                                        // ROM[21386]
M = D                                        // ROM[21387]
@ :push_argument                             // ROM[21388]
0; JMP                                       // ROM[21389]
( Output.moveCursor:347)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[21390]
D = A                                        // ROM[21391]
// ---------------------------
// push D
@ SP                                         // ROM[21392]
AM = M+1                                     // ROM[21393]
A = A-1                                      // ROM[21394]
M = D                                        // ROM[21395]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:348                      // ROM[21396]
D = A                                        // ROM[21397]
@ R15                                        // ROM[21398]
M = D                                        // ROM[21399]
@ :lt                                        // ROM[21400]
0; JMP                                       // ROM[21401]
( Output.moveCursor:348)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:349                      // ROM[21402]
D = A                                        // ROM[21403]
@ R15                                        // ROM[21404]
M = D                                        // ROM[21405]
@ :or                                        // ROM[21406]
0; JMP                                       // ROM[21407]
( Output.moveCursor:349)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[21408]
D = A                                        // ROM[21409]
@ R13                                        // ROM[21410]
M = D                                        // ROM[21411]
// ---------------------------
// call
@ Output.moveCursor:350                      // ROM[21412]
D = A                                        // ROM[21413]
@ R15                                        // ROM[21414]
M = D                                        // ROM[21415]
@ :push_argument                             // ROM[21416]
0; JMP                                       // ROM[21417]
( Output.moveCursor:350)

// -------------------------------------
// PUSH: <constant, 63>
// -------------------------------------
@ 63                                         // ROM[21418]
D = A                                        // ROM[21419]
// ---------------------------
// push D
@ SP                                         // ROM[21420]
AM = M+1                                     // ROM[21421]
A = A-1                                      // ROM[21422]
M = D                                        // ROM[21423]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:351                      // ROM[21424]
D = A                                        // ROM[21425]
@ R15                                        // ROM[21426]
M = D                                        // ROM[21427]
@ :gt                                        // ROM[21428]
0; JMP                                       // ROM[21429]
( Output.moveCursor:351)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:352                      // ROM[21430]
D = A                                        // ROM[21431]
@ R15                                        // ROM[21432]
M = D                                        // ROM[21433]
@ :or                                        // ROM[21434]
0; JMP                                       // ROM[21435]
( Output.moveCursor:352)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21436]
AM = M-1                                     // ROM[21437]
D = M                                        // ROM[21438]
// ---------------------------
@ Output.moveCursor$IF_TRUE0                 // ROM[21439]
D; JNE                                       // ROM[21440]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Output.moveCursor$IF_FALSE0                // ROM[21441]
0; JMP                                       // ROM[21442]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Output.moveCursor$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 20>
// -------------------------------------
@ 20                                         // ROM[21443]
D = A                                        // ROM[21444]
// ---------------------------
// push D
@ SP                                         // ROM[21445]
AM = M+1                                     // ROM[21446]
A = A-1                                      // ROM[21447]
M = D                                        // ROM[21448]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[21449]
D = A                                        // ROM[21450]
@ R13                                        // ROM[21451]
M = D                                        // ROM[21452]
// ---------------------------
// Push RA
@ Output.moveCursor:353                      // ROM[21453]
D = A                                        // ROM[21454]
// ---------------------------
// push D
@ SP                                         // ROM[21455]
AM = M+1                                     // ROM[21456]
A = A-1                                      // ROM[21457]
M = D                                        // ROM[21458]
// ---------------------------
// call
@ Output.moveCursor:354                      // ROM[21459]
D = A                                        // ROM[21460]
@ R15                                        // ROM[21461]
M = D                                        // ROM[21462]
@ :call                                      // ROM[21463]
0; JMP                                       // ROM[21464]
( Output.moveCursor:354)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[21465]
0; JMP                                       // ROM[21466]
// ---------------------------
// ( RA )
( Output.moveCursor:353) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21467]
AM = M-1                                     // ROM[21468]
D = M                                        // ROM[21469]
// ---------------------------
@ 5                                          // ROM[21470]
M = D                                        // ROM[21471]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Output.moveCursor$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[21472]
D = A                                        // ROM[21473]
@ R13                                        // ROM[21474]
M = D                                        // ROM[21475]
// ---------------------------
// call
@ Output.moveCursor:355                      // ROM[21476]
D = A                                        // ROM[21477]
@ R15                                        // ROM[21478]
M = D                                        // ROM[21479]
@ :push_argument                             // ROM[21480]
0; JMP                                       // ROM[21481]
( Output.moveCursor:355)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[21482]
D = A                                        // ROM[21483]
// ---------------------------
// push D
@ SP                                         // ROM[21484]
AM = M+1                                     // ROM[21485]
A = A-1                                      // ROM[21486]
M = D                                        // ROM[21487]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[21488]
D = A                                        // ROM[21489]
@ R13                                        // ROM[21490]
M = D                                        // ROM[21491]
// ---------------------------
// Push RA
@ Output.moveCursor:356                      // ROM[21492]
D = A                                        // ROM[21493]
// ---------------------------
// push D
@ SP                                         // ROM[21494]
AM = M+1                                     // ROM[21495]
A = A-1                                      // ROM[21496]
M = D                                        // ROM[21497]
// ---------------------------
// call
@ Output.moveCursor:357                      // ROM[21498]
D = A                                        // ROM[21499]
@ R15                                        // ROM[21500]
M = D                                        // ROM[21501]
@ :call                                      // ROM[21502]
0; JMP                                       // ROM[21503]
( Output.moveCursor:357)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[21504]
0; JMP                                       // ROM[21505]
// ---------------------------
// ( RA )
( Output.moveCursor:356) 

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21506]
AM = M-1                                     // ROM[21507]
D = M                                        // ROM[21508]
// ---------------------------
// static[index] = D
@ Output.0                                   // ROM[21509]
M = D                                        // ROM[21510]

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[21511]
D = A                                        // ROM[21512]
// ---------------------------
// push D
@ SP                                         // ROM[21513]
AM = M+1                                     // ROM[21514]
A = A-1                                      // ROM[21515]
M = D                                        // ROM[21516]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21517]
D = A                                        // ROM[21518]
@ R13                                        // ROM[21519]
M = D                                        // ROM[21520]
// ---------------------------
// call
@ Output.moveCursor:358                      // ROM[21521]
D = A                                        // ROM[21522]
@ R15                                        // ROM[21523]
M = D                                        // ROM[21524]
@ :push_argument                             // ROM[21525]
0; JMP                                       // ROM[21526]
( Output.moveCursor:358)

// -------------------------------------
// PUSH: <constant, 352>
// -------------------------------------
@ 352                                        // ROM[21527]
D = A                                        // ROM[21528]
// ---------------------------
// push D
@ SP                                         // ROM[21529]
AM = M+1                                     // ROM[21530]
A = A-1                                      // ROM[21531]
M = D                                        // ROM[21532]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[21533]
D = A                                        // ROM[21534]
@ R13                                        // ROM[21535]
M = D                                        // ROM[21536]
// ---------------------------
// Push RA
@ Output.moveCursor:359                      // ROM[21537]
D = A                                        // ROM[21538]
// ---------------------------
// push D
@ SP                                         // ROM[21539]
AM = M+1                                     // ROM[21540]
A = A-1                                      // ROM[21541]
M = D                                        // ROM[21542]
// ---------------------------
// call
@ Output.moveCursor:360                      // ROM[21543]
D = A                                        // ROM[21544]
@ R15                                        // ROM[21545]
M = D                                        // ROM[21546]
@ :call                                      // ROM[21547]
0; JMP                                       // ROM[21548]
( Output.moveCursor:360)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[21549]
0; JMP                                       // ROM[21550]
// ---------------------------
// ( RA )
( Output.moveCursor:359) 

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:361                      // ROM[21551]
D = A                                        // ROM[21552]
@ R15                                        // ROM[21553]
M = D                                        // ROM[21554]
@ :add                                       // ROM[21555]
0; JMP                                       // ROM[21556]
( Output.moveCursor:361)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.0                                   // ROM[21557]
D = M                                        // ROM[21558]
// ---------------------------
// push D
@ SP                                         // ROM[21559]
AM = M+1                                     // ROM[21560]
A = A-1                                      // ROM[21561]
M = D                                        // ROM[21562]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:362                      // ROM[21563]
D = A                                        // ROM[21564]
@ R15                                        // ROM[21565]
M = D                                        // ROM[21566]
@ :add                                       // ROM[21567]
0; JMP                                       // ROM[21568]
( Output.moveCursor:362)

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21569]
AM = M-1                                     // ROM[21570]
D = M                                        // ROM[21571]
// ---------------------------
// static[index] = D
@ Output.1                                   // ROM[21572]
M = D                                        // ROM[21573]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[21574]
D = A                                        // ROM[21575]
@ R13                                        // ROM[21576]
M = D                                        // ROM[21577]
// ---------------------------
// call
@ Output.moveCursor:363                      // ROM[21578]
D = A                                        // ROM[21579]
@ R15                                        // ROM[21580]
M = D                                        // ROM[21581]
@ :push_argument                             // ROM[21582]
0; JMP                                       // ROM[21583]
( Output.moveCursor:363)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.0                                   // ROM[21584]
D = M                                        // ROM[21585]
// ---------------------------
// push D
@ SP                                         // ROM[21586]
AM = M+1                                     // ROM[21587]
A = A-1                                      // ROM[21588]
M = D                                        // ROM[21589]

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[21590]
D = A                                        // ROM[21591]
// ---------------------------
// push D
@ SP                                         // ROM[21592]
AM = M+1                                     // ROM[21593]
A = A-1                                      // ROM[21594]
M = D                                        // ROM[21595]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[21596]
D = A                                        // ROM[21597]
@ R13                                        // ROM[21598]
M = D                                        // ROM[21599]
// ---------------------------
// Push RA
@ Output.moveCursor:364                      // ROM[21600]
D = A                                        // ROM[21601]
// ---------------------------
// push D
@ SP                                         // ROM[21602]
AM = M+1                                     // ROM[21603]
A = A-1                                      // ROM[21604]
M = D                                        // ROM[21605]
// ---------------------------
// call
@ Output.moveCursor:365                      // ROM[21606]
D = A                                        // ROM[21607]
@ R15                                        // ROM[21608]
M = D                                        // ROM[21609]
@ :call                                      // ROM[21610]
0; JMP                                       // ROM[21611]
( Output.moveCursor:365)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[21612]
0; JMP                                       // ROM[21613]
// ---------------------------
// ( RA )
( Output.moveCursor:364) 

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:366                      // ROM[21614]
D = A                                        // ROM[21615]
@ R15                                        // ROM[21616]
M = D                                        // ROM[21617]
@ :eq                                        // ROM[21618]
0; JMP                                       // ROM[21619]
( Output.moveCursor:366)

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21620]
AM = M-1                                     // ROM[21621]
D = M                                        // ROM[21622]
// ---------------------------
// static[index] = D
@ Output.2                                   // ROM[21623]
M = D                                        // ROM[21624]

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[21625]
D = A                                        // ROM[21626]
// ---------------------------
// push D
@ SP                                         // ROM[21627]
AM = M+1                                     // ROM[21628]
A = A-1                                      // ROM[21629]
M = D                                        // ROM[21630]

// -------------------------------------
// CALL: Output.drawChar(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[21631]
D = A                                        // ROM[21632]
@ R13                                        // ROM[21633]
M = D                                        // ROM[21634]
// ---------------------------
// Push RA
@ Output.moveCursor:367                      // ROM[21635]
D = A                                        // ROM[21636]
// ---------------------------
// push D
@ SP                                         // ROM[21637]
AM = M+1                                     // ROM[21638]
A = A-1                                      // ROM[21639]
M = D                                        // ROM[21640]
// ---------------------------
// call
@ Output.moveCursor:368                      // ROM[21641]
D = A                                        // ROM[21642]
@ R15                                        // ROM[21643]
M = D                                        // ROM[21644]
@ :call                                      // ROM[21645]
0; JMP                                       // ROM[21646]
( Output.moveCursor:368)
// ---------------------------
// goto functionName
@ Output.drawChar                            // ROM[21647]
0; JMP                                       // ROM[21648]
// ---------------------------
// ( RA )
( Output.moveCursor:367) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21649]
AM = M-1                                     // ROM[21650]
D = M                                        // ROM[21651]
// ---------------------------
@ 5                                          // ROM[21652]
M = D                                        // ROM[21653]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[21654]
D = A                                        // ROM[21655]
// ---------------------------
// push D
@ SP                                         // ROM[21656]
AM = M+1                                     // ROM[21657]
A = A-1                                      // ROM[21658]
M = D                                        // ROM[21659]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.moveCursor:369                      // ROM[21660]
D = A                                        // ROM[21661]
@ R15                                        // ROM[21662]
M = D                                        // ROM[21663]
@ :return                                    // ROM[21664]
0; JMP                                       // ROM[21665]
( Output.moveCursor:369)

// =========================================================
// FUNCTION: Output.printChar(0 locals)
// =========================================================

( Output.printChar )
// ---------------------------
// clear local segment
D = 0                                        // ROM[21666]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21667]
D = A                                        // ROM[21668]
@ R13                                        // ROM[21669]
M = D                                        // ROM[21670]
// ---------------------------
// call
@ Output.printChar:370                       // ROM[21671]
D = A                                        // ROM[21672]
@ R15                                        // ROM[21673]
M = D                                        // ROM[21674]
@ :push_argument                             // ROM[21675]
0; JMP                                       // ROM[21676]
( Output.printChar:370)

// -------------------------------------
// CALL: String.newLine(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[21677]
D = A                                        // ROM[21678]
@ R13                                        // ROM[21679]
M = D                                        // ROM[21680]
// ---------------------------
// Push RA
@ Output.printChar:371                       // ROM[21681]
D = A                                        // ROM[21682]
// ---------------------------
// push D
@ SP                                         // ROM[21683]
AM = M+1                                     // ROM[21684]
A = A-1                                      // ROM[21685]
M = D                                        // ROM[21686]
// ---------------------------
// call
@ Output.printChar:372                       // ROM[21687]
D = A                                        // ROM[21688]
@ R15                                        // ROM[21689]
M = D                                        // ROM[21690]
@ :call                                      // ROM[21691]
0; JMP                                       // ROM[21692]
( Output.printChar:372)
// ---------------------------
// goto functionName
@ String.newLine                             // ROM[21693]
0; JMP                                       // ROM[21694]
// ---------------------------
// ( RA )
( Output.printChar:371) 

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Output.printChar:373                       // ROM[21695]
D = A                                        // ROM[21696]
@ R15                                        // ROM[21697]
M = D                                        // ROM[21698]
@ :eq                                        // ROM[21699]
0; JMP                                       // ROM[21700]
( Output.printChar:373)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21701]
AM = M-1                                     // ROM[21702]
D = M                                        // ROM[21703]
// ---------------------------
@ Output.printChar$IF_TRUE0                  // ROM[21704]
D; JNE                                       // ROM[21705]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Output.printChar$IF_FALSE0                 // ROM[21706]
0; JMP                                       // ROM[21707]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Output.printChar$IF_TRUE0 )

// -------------------------------------
// CALL: Output.println(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[21708]
D = A                                        // ROM[21709]
@ R13                                        // ROM[21710]
M = D                                        // ROM[21711]
// ---------------------------
// Push RA
@ Output.printChar:374                       // ROM[21712]
D = A                                        // ROM[21713]
// ---------------------------
// push D
@ SP                                         // ROM[21714]
AM = M+1                                     // ROM[21715]
A = A-1                                      // ROM[21716]
M = D                                        // ROM[21717]
// ---------------------------
// call
@ Output.printChar:375                       // ROM[21718]
D = A                                        // ROM[21719]
@ R15                                        // ROM[21720]
M = D                                        // ROM[21721]
@ :call                                      // ROM[21722]
0; JMP                                       // ROM[21723]
( Output.printChar:375)
// ---------------------------
// goto functionName
@ Output.println                             // ROM[21724]
0; JMP                                       // ROM[21725]
// ---------------------------
// ( RA )
( Output.printChar:374) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21726]
AM = M-1                                     // ROM[21727]
D = M                                        // ROM[21728]
// ---------------------------
@ 5                                          // ROM[21729]
M = D                                        // ROM[21730]

// -------------------------------------
// GOTO: IF_END0
// -------------------------------------
@ Output.printChar$IF_END0                   // ROM[21731]
0; JMP                                       // ROM[21732]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Output.printChar$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21733]
D = A                                        // ROM[21734]
@ R13                                        // ROM[21735]
M = D                                        // ROM[21736]
// ---------------------------
// call
@ Output.printChar:376                       // ROM[21737]
D = A                                        // ROM[21738]
@ R15                                        // ROM[21739]
M = D                                        // ROM[21740]
@ :push_argument                             // ROM[21741]
0; JMP                                       // ROM[21742]
( Output.printChar:376)

// -------------------------------------
// CALL: String.backSpace(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[21743]
D = A                                        // ROM[21744]
@ R13                                        // ROM[21745]
M = D                                        // ROM[21746]
// ---------------------------
// Push RA
@ Output.printChar:377                       // ROM[21747]
D = A                                        // ROM[21748]
// ---------------------------
// push D
@ SP                                         // ROM[21749]
AM = M+1                                     // ROM[21750]
A = A-1                                      // ROM[21751]
M = D                                        // ROM[21752]
// ---------------------------
// call
@ Output.printChar:378                       // ROM[21753]
D = A                                        // ROM[21754]
@ R15                                        // ROM[21755]
M = D                                        // ROM[21756]
@ :call                                      // ROM[21757]
0; JMP                                       // ROM[21758]
( Output.printChar:378)
// ---------------------------
// goto functionName
@ String.backSpace                           // ROM[21759]
0; JMP                                       // ROM[21760]
// ---------------------------
// ( RA )
( Output.printChar:377) 

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Output.printChar:379                       // ROM[21761]
D = A                                        // ROM[21762]
@ R15                                        // ROM[21763]
M = D                                        // ROM[21764]
@ :eq                                        // ROM[21765]
0; JMP                                       // ROM[21766]
( Output.printChar:379)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21767]
AM = M-1                                     // ROM[21768]
D = M                                        // ROM[21769]
// ---------------------------
@ Output.printChar$IF_TRUE1                  // ROM[21770]
D; JNE                                       // ROM[21771]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Output.printChar$IF_FALSE1                 // ROM[21772]
0; JMP                                       // ROM[21773]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Output.printChar$IF_TRUE1 )

// -------------------------------------
// CALL: Output.backSpace(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[21774]
D = A                                        // ROM[21775]
@ R13                                        // ROM[21776]
M = D                                        // ROM[21777]
// ---------------------------
// Push RA
@ Output.printChar:380                       // ROM[21778]
D = A                                        // ROM[21779]
// ---------------------------
// push D
@ SP                                         // ROM[21780]
AM = M+1                                     // ROM[21781]
A = A-1                                      // ROM[21782]
M = D                                        // ROM[21783]
// ---------------------------
// call
@ Output.printChar:381                       // ROM[21784]
D = A                                        // ROM[21785]
@ R15                                        // ROM[21786]
M = D                                        // ROM[21787]
@ :call                                      // ROM[21788]
0; JMP                                       // ROM[21789]
( Output.printChar:381)
// ---------------------------
// goto functionName
@ Output.backSpace                           // ROM[21790]
0; JMP                                       // ROM[21791]
// ---------------------------
// ( RA )
( Output.printChar:380) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21792]
AM = M-1                                     // ROM[21793]
D = M                                        // ROM[21794]
// ---------------------------
@ 5                                          // ROM[21795]
M = D                                        // ROM[21796]

// -------------------------------------
// GOTO: IF_END1
// -------------------------------------
@ Output.printChar$IF_END1                   // ROM[21797]
0; JMP                                       // ROM[21798]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Output.printChar$IF_FALSE1 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21799]
D = A                                        // ROM[21800]
@ R13                                        // ROM[21801]
M = D                                        // ROM[21802]
// ---------------------------
// call
@ Output.printChar:382                       // ROM[21803]
D = A                                        // ROM[21804]
@ R15                                        // ROM[21805]
M = D                                        // ROM[21806]
@ :push_argument                             // ROM[21807]
0; JMP                                       // ROM[21808]
( Output.printChar:382)

// -------------------------------------
// CALL: Output.drawChar(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[21809]
D = A                                        // ROM[21810]
@ R13                                        // ROM[21811]
M = D                                        // ROM[21812]
// ---------------------------
// Push RA
@ Output.printChar:383                       // ROM[21813]
D = A                                        // ROM[21814]
// ---------------------------
// push D
@ SP                                         // ROM[21815]
AM = M+1                                     // ROM[21816]
A = A-1                                      // ROM[21817]
M = D                                        // ROM[21818]
// ---------------------------
// call
@ Output.printChar:384                       // ROM[21819]
D = A                                        // ROM[21820]
@ R15                                        // ROM[21821]
M = D                                        // ROM[21822]
@ :call                                      // ROM[21823]
0; JMP                                       // ROM[21824]
( Output.printChar:384)
// ---------------------------
// goto functionName
@ Output.drawChar                            // ROM[21825]
0; JMP                                       // ROM[21826]
// ---------------------------
// ( RA )
( Output.printChar:383) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21827]
AM = M-1                                     // ROM[21828]
D = M                                        // ROM[21829]
// ---------------------------
@ 5                                          // ROM[21830]
M = D                                        // ROM[21831]

// -------------------------------------
// PUSH: <static, 2>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.2                                   // ROM[21832]
D = M                                        // ROM[21833]
// ---------------------------
// push D
@ SP                                         // ROM[21834]
AM = M+1                                     // ROM[21835]
A = A-1                                      // ROM[21836]
M = D                                        // ROM[21837]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[21838]
A = M-1                                      // ROM[21839]
M = !M                                       // ROM[21840]

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21841]
AM = M-1                                     // ROM[21842]
D = M                                        // ROM[21843]
// ---------------------------
@ Output.printChar$IF_TRUE2                  // ROM[21844]
D; JNE                                       // ROM[21845]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ Output.printChar$IF_FALSE2                 // ROM[21846]
0; JMP                                       // ROM[21847]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( Output.printChar$IF_TRUE2 )

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.0                                   // ROM[21848]
D = M                                        // ROM[21849]
// ---------------------------
// push D
@ SP                                         // ROM[21850]
AM = M+1                                     // ROM[21851]
A = A-1                                      // ROM[21852]
M = D                                        // ROM[21853]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[21854]
D = A                                        // ROM[21855]
// ---------------------------
// push D
@ SP                                         // ROM[21856]
AM = M+1                                     // ROM[21857]
A = A-1                                      // ROM[21858]
M = D                                        // ROM[21859]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.printChar:385                       // ROM[21860]
D = A                                        // ROM[21861]
@ R15                                        // ROM[21862]
M = D                                        // ROM[21863]
@ :add                                       // ROM[21864]
0; JMP                                       // ROM[21865]
( Output.printChar:385)

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21866]
AM = M-1                                     // ROM[21867]
D = M                                        // ROM[21868]
// ---------------------------
// static[index] = D
@ Output.0                                   // ROM[21869]
M = D                                        // ROM[21870]

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.1                                   // ROM[21871]
D = M                                        // ROM[21872]
// ---------------------------
// push D
@ SP                                         // ROM[21873]
AM = M+1                                     // ROM[21874]
A = A-1                                      // ROM[21875]
M = D                                        // ROM[21876]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[21877]
D = A                                        // ROM[21878]
// ---------------------------
// push D
@ SP                                         // ROM[21879]
AM = M+1                                     // ROM[21880]
A = A-1                                      // ROM[21881]
M = D                                        // ROM[21882]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.printChar:386                       // ROM[21883]
D = A                                        // ROM[21884]
@ R15                                        // ROM[21885]
M = D                                        // ROM[21886]
@ :add                                       // ROM[21887]
0; JMP                                       // ROM[21888]
( Output.printChar:386)

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21889]
AM = M-1                                     // ROM[21890]
D = M                                        // ROM[21891]
// ---------------------------
// static[index] = D
@ Output.1                                   // ROM[21892]
M = D                                        // ROM[21893]

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( Output.printChar$IF_FALSE2 )

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.0                                   // ROM[21894]
D = M                                        // ROM[21895]
// ---------------------------
// push D
@ SP                                         // ROM[21896]
AM = M+1                                     // ROM[21897]
A = A-1                                      // ROM[21898]
M = D                                        // ROM[21899]

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[21900]
D = A                                        // ROM[21901]
// ---------------------------
// push D
@ SP                                         // ROM[21902]
AM = M+1                                     // ROM[21903]
A = A-1                                      // ROM[21904]
M = D                                        // ROM[21905]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Output.printChar:387                       // ROM[21906]
D = A                                        // ROM[21907]
@ R15                                        // ROM[21908]
M = D                                        // ROM[21909]
@ :eq                                        // ROM[21910]
0; JMP                                       // ROM[21911]
( Output.printChar:387)

// -------------------------------------
// IF-GOTO: IF_TRUE3
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21912]
AM = M-1                                     // ROM[21913]
D = M                                        // ROM[21914]
// ---------------------------
@ Output.printChar$IF_TRUE3                  // ROM[21915]
D; JNE                                       // ROM[21916]

// -------------------------------------
// GOTO: IF_FALSE3
// -------------------------------------
@ Output.printChar$IF_FALSE3                 // ROM[21917]
0; JMP                                       // ROM[21918]

// -------------------------------------
// LABEL: IF_TRUE3
// -------------------------------------
( Output.printChar$IF_TRUE3 )

// -------------------------------------
// CALL: Output.println(0 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 0                                          // ROM[21919]
D = A                                        // ROM[21920]
@ R13                                        // ROM[21921]
M = D                                        // ROM[21922]
// ---------------------------
// Push RA
@ Output.printChar:388                       // ROM[21923]
D = A                                        // ROM[21924]
// ---------------------------
// push D
@ SP                                         // ROM[21925]
AM = M+1                                     // ROM[21926]
A = A-1                                      // ROM[21927]
M = D                                        // ROM[21928]
// ---------------------------
// call
@ Output.printChar:389                       // ROM[21929]
D = A                                        // ROM[21930]
@ R15                                        // ROM[21931]
M = D                                        // ROM[21932]
@ :call                                      // ROM[21933]
0; JMP                                       // ROM[21934]
( Output.printChar:389)
// ---------------------------
// goto functionName
@ Output.println                             // ROM[21935]
0; JMP                                       // ROM[21936]
// ---------------------------
// ( RA )
( Output.printChar:388) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21937]
AM = M-1                                     // ROM[21938]
D = M                                        // ROM[21939]
// ---------------------------
@ 5                                          // ROM[21940]
M = D                                        // ROM[21941]

// -------------------------------------
// GOTO: IF_END3
// -------------------------------------
@ Output.printChar$IF_END3                   // ROM[21942]
0; JMP                                       // ROM[21943]

// -------------------------------------
// LABEL: IF_FALSE3
// -------------------------------------
( Output.printChar$IF_FALSE3 )

// -------------------------------------
// PUSH: <static, 2>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.2                                   // ROM[21944]
D = M                                        // ROM[21945]
// ---------------------------
// push D
@ SP                                         // ROM[21946]
AM = M+1                                     // ROM[21947]
A = A-1                                      // ROM[21948]
M = D                                        // ROM[21949]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[21950]
A = M-1                                      // ROM[21951]
M = !M                                       // ROM[21952]

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[21953]
AM = M-1                                     // ROM[21954]
D = M                                        // ROM[21955]
// ---------------------------
// static[index] = D
@ Output.2                                   // ROM[21956]
M = D                                        // ROM[21957]

// -------------------------------------
// LABEL: IF_END3
// -------------------------------------
( Output.printChar$IF_END3 )

// -------------------------------------
// LABEL: IF_END1
// -------------------------------------
( Output.printChar$IF_END1 )

// -------------------------------------
// LABEL: IF_END0
// -------------------------------------
( Output.printChar$IF_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[21958]
D = A                                        // ROM[21959]
// ---------------------------
// push D
@ SP                                         // ROM[21960]
AM = M+1                                     // ROM[21961]
A = A-1                                      // ROM[21962]
M = D                                        // ROM[21963]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.printChar:390                       // ROM[21964]
D = A                                        // ROM[21965]
@ R15                                        // ROM[21966]
M = D                                        // ROM[21967]
@ :return                                    // ROM[21968]
0; JMP                                       // ROM[21969]
( Output.printChar:390)

// =========================================================
// FUNCTION: Output.printString(2 locals)
// =========================================================

( Output.printString )
// ---------------------------
// clear local segment
D = 0                                        // ROM[21970]
// ---------------------------
// push D
@ SP                                         // ROM[21971]
AM = M+1                                     // ROM[21972]
A = A-1                                      // ROM[21973]
M = D                                        // ROM[21974]
// ---------------------------
// push D
@ SP                                         // ROM[21975]
AM = M+1                                     // ROM[21976]
A = A-1                                      // ROM[21977]
M = D                                        // ROM[21978]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[21979]
D = A                                        // ROM[21980]
@ R13                                        // ROM[21981]
M = D                                        // ROM[21982]
// ---------------------------
// call
@ Output.printString:391                     // ROM[21983]
D = A                                        // ROM[21984]
@ R15                                        // ROM[21985]
M = D                                        // ROM[21986]
@ :push_argument                             // ROM[21987]
0; JMP                                       // ROM[21988]
( Output.printString:391)

// -------------------------------------
// CALL: String.length(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[21989]
D = A                                        // ROM[21990]
@ R13                                        // ROM[21991]
M = D                                        // ROM[21992]
// ---------------------------
// Push RA
@ Output.printString:392                     // ROM[21993]
D = A                                        // ROM[21994]
// ---------------------------
// push D
@ SP                                         // ROM[21995]
AM = M+1                                     // ROM[21996]
A = A-1                                      // ROM[21997]
M = D                                        // ROM[21998]
// ---------------------------
// call
@ Output.printString:393                     // ROM[21999]
D = A                                        // ROM[22000]
@ R15                                        // ROM[22001]
M = D                                        // ROM[22002]
@ :call                                      // ROM[22003]
0; JMP                                       // ROM[22004]
( Output.printString:393)
// ---------------------------
// goto functionName
@ String.length                              // ROM[22005]
0; JMP                                       // ROM[22006]
// ---------------------------
// ( RA )
( Output.printString:392) 

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[22007]
D = A                                        // ROM[22008]
@ R13                                        // ROM[22009]
M = D                                        // ROM[22010]
// ---------------------------
// call
@ Output.printString:394                     // ROM[22011]
D = A                                        // ROM[22012]
@ R15                                        // ROM[22013]
M = D                                        // ROM[22014]
@ :pop_local                                 // ROM[22015]
0; JMP                                       // ROM[22016]
( Output.printString:394)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Output.printString$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22017]
D = A                                        // ROM[22018]
@ R13                                        // ROM[22019]
M = D                                        // ROM[22020]
// ---------------------------
// call
@ Output.printString:395                     // ROM[22021]
D = A                                        // ROM[22022]
@ R15                                        // ROM[22023]
M = D                                        // ROM[22024]
@ :push_local                                // ROM[22025]
0; JMP                                       // ROM[22026]
( Output.printString:395)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[22027]
D = A                                        // ROM[22028]
@ R13                                        // ROM[22029]
M = D                                        // ROM[22030]
// ---------------------------
// call
@ Output.printString:396                     // ROM[22031]
D = A                                        // ROM[22032]
@ R15                                        // ROM[22033]
M = D                                        // ROM[22034]
@ :push_local                                // ROM[22035]
0; JMP                                       // ROM[22036]
( Output.printString:396)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Output.printString:397                     // ROM[22037]
D = A                                        // ROM[22038]
@ R15                                        // ROM[22039]
M = D                                        // ROM[22040]
@ :lt                                        // ROM[22041]
0; JMP                                       // ROM[22042]
( Output.printString:397)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[22043]
A = M-1                                      // ROM[22044]
M = !M                                       // ROM[22045]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22046]
AM = M-1                                     // ROM[22047]
D = M                                        // ROM[22048]
// ---------------------------
@ Output.printString$WHILE_END0              // ROM[22049]
D; JNE                                       // ROM[22050]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22051]
D = A                                        // ROM[22052]
@ R13                                        // ROM[22053]
M = D                                        // ROM[22054]
// ---------------------------
// call
@ Output.printString:398                     // ROM[22055]
D = A                                        // ROM[22056]
@ R15                                        // ROM[22057]
M = D                                        // ROM[22058]
@ :push_argument                             // ROM[22059]
0; JMP                                       // ROM[22060]
( Output.printString:398)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22061]
D = A                                        // ROM[22062]
@ R13                                        // ROM[22063]
M = D                                        // ROM[22064]
// ---------------------------
// call
@ Output.printString:399                     // ROM[22065]
D = A                                        // ROM[22066]
@ R15                                        // ROM[22067]
M = D                                        // ROM[22068]
@ :push_local                                // ROM[22069]
0; JMP                                       // ROM[22070]
( Output.printString:399)

// -------------------------------------
// CALL: String.charAt(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[22071]
D = A                                        // ROM[22072]
@ R13                                        // ROM[22073]
M = D                                        // ROM[22074]
// ---------------------------
// Push RA
@ Output.printString:400                     // ROM[22075]
D = A                                        // ROM[22076]
// ---------------------------
// push D
@ SP                                         // ROM[22077]
AM = M+1                                     // ROM[22078]
A = A-1                                      // ROM[22079]
M = D                                        // ROM[22080]
// ---------------------------
// call
@ Output.printString:401                     // ROM[22081]
D = A                                        // ROM[22082]
@ R15                                        // ROM[22083]
M = D                                        // ROM[22084]
@ :call                                      // ROM[22085]
0; JMP                                       // ROM[22086]
( Output.printString:401)
// ---------------------------
// goto functionName
@ String.charAt                              // ROM[22087]
0; JMP                                       // ROM[22088]
// ---------------------------
// ( RA )
( Output.printString:400) 

// -------------------------------------
// CALL: Output.printChar(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[22089]
D = A                                        // ROM[22090]
@ R13                                        // ROM[22091]
M = D                                        // ROM[22092]
// ---------------------------
// Push RA
@ Output.printString:402                     // ROM[22093]
D = A                                        // ROM[22094]
// ---------------------------
// push D
@ SP                                         // ROM[22095]
AM = M+1                                     // ROM[22096]
A = A-1                                      // ROM[22097]
M = D                                        // ROM[22098]
// ---------------------------
// call
@ Output.printString:403                     // ROM[22099]
D = A                                        // ROM[22100]
@ R15                                        // ROM[22101]
M = D                                        // ROM[22102]
@ :call                                      // ROM[22103]
0; JMP                                       // ROM[22104]
( Output.printString:403)
// ---------------------------
// goto functionName
@ Output.printChar                           // ROM[22105]
0; JMP                                       // ROM[22106]
// ---------------------------
// ( RA )
( Output.printString:402) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22107]
AM = M-1                                     // ROM[22108]
D = M                                        // ROM[22109]
// ---------------------------
@ 5                                          // ROM[22110]
M = D                                        // ROM[22111]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22112]
D = A                                        // ROM[22113]
@ R13                                        // ROM[22114]
M = D                                        // ROM[22115]
// ---------------------------
// call
@ Output.printString:404                     // ROM[22116]
D = A                                        // ROM[22117]
@ R15                                        // ROM[22118]
M = D                                        // ROM[22119]
@ :push_local                                // ROM[22120]
0; JMP                                       // ROM[22121]
( Output.printString:404)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[22122]
D = A                                        // ROM[22123]
// ---------------------------
// push D
@ SP                                         // ROM[22124]
AM = M+1                                     // ROM[22125]
A = A-1                                      // ROM[22126]
M = D                                        // ROM[22127]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.printString:405                     // ROM[22128]
D = A                                        // ROM[22129]
@ R15                                        // ROM[22130]
M = D                                        // ROM[22131]
@ :add                                       // ROM[22132]
0; JMP                                       // ROM[22133]
( Output.printString:405)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22134]
D = A                                        // ROM[22135]
@ R13                                        // ROM[22136]
M = D                                        // ROM[22137]
// ---------------------------
// call
@ Output.printString:406                     // ROM[22138]
D = A                                        // ROM[22139]
@ R15                                        // ROM[22140]
M = D                                        // ROM[22141]
@ :pop_local                                 // ROM[22142]
0; JMP                                       // ROM[22143]
( Output.printString:406)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Output.printString$WHILE_EXP0              // ROM[22144]
0; JMP                                       // ROM[22145]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Output.printString$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22146]
D = A                                        // ROM[22147]
// ---------------------------
// push D
@ SP                                         // ROM[22148]
AM = M+1                                     // ROM[22149]
A = A-1                                      // ROM[22150]
M = D                                        // ROM[22151]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.printString:407                     // ROM[22152]
D = A                                        // ROM[22153]
@ R15                                        // ROM[22154]
M = D                                        // ROM[22155]
@ :return                                    // ROM[22156]
0; JMP                                       // ROM[22157]
( Output.printString:407)

// =========================================================
// FUNCTION: Output.printInt(0 locals)
// =========================================================

( Output.printInt )
// ---------------------------
// clear local segment
D = 0                                        // ROM[22158]

// -------------------------------------
// PUSH: <static, 3>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.3                                   // ROM[22159]
D = M                                        // ROM[22160]
// ---------------------------
// push D
@ SP                                         // ROM[22161]
AM = M+1                                     // ROM[22162]
A = A-1                                      // ROM[22163]
M = D                                        // ROM[22164]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22165]
D = A                                        // ROM[22166]
@ R13                                        // ROM[22167]
M = D                                        // ROM[22168]
// ---------------------------
// call
@ Output.printInt:408                        // ROM[22169]
D = A                                        // ROM[22170]
@ R15                                        // ROM[22171]
M = D                                        // ROM[22172]
@ :push_argument                             // ROM[22173]
0; JMP                                       // ROM[22174]
( Output.printInt:408)

// -------------------------------------
// CALL: String.setInt(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[22175]
D = A                                        // ROM[22176]
@ R13                                        // ROM[22177]
M = D                                        // ROM[22178]
// ---------------------------
// Push RA
@ Output.printInt:409                        // ROM[22179]
D = A                                        // ROM[22180]
// ---------------------------
// push D
@ SP                                         // ROM[22181]
AM = M+1                                     // ROM[22182]
A = A-1                                      // ROM[22183]
M = D                                        // ROM[22184]
// ---------------------------
// call
@ Output.printInt:410                        // ROM[22185]
D = A                                        // ROM[22186]
@ R15                                        // ROM[22187]
M = D                                        // ROM[22188]
@ :call                                      // ROM[22189]
0; JMP                                       // ROM[22190]
( Output.printInt:410)
// ---------------------------
// goto functionName
@ String.setInt                              // ROM[22191]
0; JMP                                       // ROM[22192]
// ---------------------------
// ( RA )
( Output.printInt:409) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22193]
AM = M-1                                     // ROM[22194]
D = M                                        // ROM[22195]
// ---------------------------
@ 5                                          // ROM[22196]
M = D                                        // ROM[22197]

// -------------------------------------
// PUSH: <static, 3>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.3                                   // ROM[22198]
D = M                                        // ROM[22199]
// ---------------------------
// push D
@ SP                                         // ROM[22200]
AM = M+1                                     // ROM[22201]
A = A-1                                      // ROM[22202]
M = D                                        // ROM[22203]

// -------------------------------------
// CALL: Output.printString(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[22204]
D = A                                        // ROM[22205]
@ R13                                        // ROM[22206]
M = D                                        // ROM[22207]
// ---------------------------
// Push RA
@ Output.printInt:411                        // ROM[22208]
D = A                                        // ROM[22209]
// ---------------------------
// push D
@ SP                                         // ROM[22210]
AM = M+1                                     // ROM[22211]
A = A-1                                      // ROM[22212]
M = D                                        // ROM[22213]
// ---------------------------
// call
@ Output.printInt:412                        // ROM[22214]
D = A                                        // ROM[22215]
@ R15                                        // ROM[22216]
M = D                                        // ROM[22217]
@ :call                                      // ROM[22218]
0; JMP                                       // ROM[22219]
( Output.printInt:412)
// ---------------------------
// goto functionName
@ Output.printString                         // ROM[22220]
0; JMP                                       // ROM[22221]
// ---------------------------
// ( RA )
( Output.printInt:411) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22222]
AM = M-1                                     // ROM[22223]
D = M                                        // ROM[22224]
// ---------------------------
@ 5                                          // ROM[22225]
M = D                                        // ROM[22226]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22227]
D = A                                        // ROM[22228]
// ---------------------------
// push D
@ SP                                         // ROM[22229]
AM = M+1                                     // ROM[22230]
A = A-1                                      // ROM[22231]
M = D                                        // ROM[22232]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.printInt:413                        // ROM[22233]
D = A                                        // ROM[22234]
@ R15                                        // ROM[22235]
M = D                                        // ROM[22236]
@ :return                                    // ROM[22237]
0; JMP                                       // ROM[22238]
( Output.printInt:413)

// =========================================================
// FUNCTION: Output.println(0 locals)
// =========================================================

( Output.println )
// ---------------------------
// clear local segment
D = 0                                        // ROM[22239]

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.1                                   // ROM[22240]
D = M                                        // ROM[22241]
// ---------------------------
// push D
@ SP                                         // ROM[22242]
AM = M+1                                     // ROM[22243]
A = A-1                                      // ROM[22244]
M = D                                        // ROM[22245]

// -------------------------------------
// PUSH: <constant, 352>
// -------------------------------------
@ 352                                        // ROM[22246]
D = A                                        // ROM[22247]
// ---------------------------
// push D
@ SP                                         // ROM[22248]
AM = M+1                                     // ROM[22249]
A = A-1                                      // ROM[22250]
M = D                                        // ROM[22251]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Output.println:414                         // ROM[22252]
D = A                                        // ROM[22253]
@ R15                                        // ROM[22254]
M = D                                        // ROM[22255]
@ :add                                       // ROM[22256]
0; JMP                                       // ROM[22257]
( Output.println:414)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.0                                   // ROM[22258]
D = M                                        // ROM[22259]
// ---------------------------
// push D
@ SP                                         // ROM[22260]
AM = M+1                                     // ROM[22261]
A = A-1                                      // ROM[22262]
M = D                                        // ROM[22263]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Output.println:415                         // ROM[22264]
D = A                                        // ROM[22265]
@ R15                                        // ROM[22266]
M = D                                        // ROM[22267]
@ :sub                                       // ROM[22268]
0; JMP                                       // ROM[22269]
( Output.println:415)

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22270]
AM = M-1                                     // ROM[22271]
D = M                                        // ROM[22272]
// ---------------------------
// static[index] = D
@ Output.1                                   // ROM[22273]
M = D                                        // ROM[22274]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22275]
D = A                                        // ROM[22276]
// ---------------------------
// push D
@ SP                                         // ROM[22277]
AM = M+1                                     // ROM[22278]
A = A-1                                      // ROM[22279]
M = D                                        // ROM[22280]

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22281]
AM = M-1                                     // ROM[22282]
D = M                                        // ROM[22283]
// ---------------------------
// static[index] = D
@ Output.0                                   // ROM[22284]
M = D                                        // ROM[22285]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22286]
D = A                                        // ROM[22287]
// ---------------------------
// push D
@ SP                                         // ROM[22288]
AM = M+1                                     // ROM[22289]
A = A-1                                      // ROM[22290]
M = D                                        // ROM[22291]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[22292]
A = M-1                                      // ROM[22293]
M = !M                                       // ROM[22294]

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22295]
AM = M-1                                     // ROM[22296]
D = M                                        // ROM[22297]
// ---------------------------
// static[index] = D
@ Output.2                                   // ROM[22298]
M = D                                        // ROM[22299]

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.1                                   // ROM[22300]
D = M                                        // ROM[22301]
// ---------------------------
// push D
@ SP                                         // ROM[22302]
AM = M+1                                     // ROM[22303]
A = A-1                                      // ROM[22304]
M = D                                        // ROM[22305]

// -------------------------------------
// PUSH: <constant, 8128>
// -------------------------------------
@ 8128                                       // ROM[22306]
D = A                                        // ROM[22307]
// ---------------------------
// push D
@ SP                                         // ROM[22308]
AM = M+1                                     // ROM[22309]
A = A-1                                      // ROM[22310]
M = D                                        // ROM[22311]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Output.println:416                         // ROM[22312]
D = A                                        // ROM[22313]
@ R15                                        // ROM[22314]
M = D                                        // ROM[22315]
@ :eq                                        // ROM[22316]
0; JMP                                       // ROM[22317]
( Output.println:416)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22318]
AM = M-1                                     // ROM[22319]
D = M                                        // ROM[22320]
// ---------------------------
@ Output.println$IF_TRUE0                    // ROM[22321]
D; JNE                                       // ROM[22322]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Output.println$IF_FALSE0                   // ROM[22323]
0; JMP                                       // ROM[22324]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Output.println$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[22325]
D = A                                        // ROM[22326]
// ---------------------------
// push D
@ SP                                         // ROM[22327]
AM = M+1                                     // ROM[22328]
A = A-1                                      // ROM[22329]
M = D                                        // ROM[22330]

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22331]
AM = M-1                                     // ROM[22332]
D = M                                        // ROM[22333]
// ---------------------------
// static[index] = D
@ Output.1                                   // ROM[22334]
M = D                                        // ROM[22335]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Output.println$IF_FALSE0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22336]
D = A                                        // ROM[22337]
// ---------------------------
// push D
@ SP                                         // ROM[22338]
AM = M+1                                     // ROM[22339]
A = A-1                                      // ROM[22340]
M = D                                        // ROM[22341]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.println:417                         // ROM[22342]
D = A                                        // ROM[22343]
@ R15                                        // ROM[22344]
M = D                                        // ROM[22345]
@ :return                                    // ROM[22346]
0; JMP                                       // ROM[22347]
( Output.println:417)

// =========================================================
// FUNCTION: Output.backSpace(0 locals)
// =========================================================

( Output.backSpace )
// ---------------------------
// clear local segment
D = 0                                        // ROM[22348]

// -------------------------------------
// PUSH: <static, 2>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.2                                   // ROM[22349]
D = M                                        // ROM[22350]
// ---------------------------
// push D
@ SP                                         // ROM[22351]
AM = M+1                                     // ROM[22352]
A = A-1                                      // ROM[22353]
M = D                                        // ROM[22354]

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22355]
AM = M-1                                     // ROM[22356]
D = M                                        // ROM[22357]
// ---------------------------
@ Output.backSpace$IF_TRUE0                  // ROM[22358]
D; JNE                                       // ROM[22359]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Output.backSpace$IF_FALSE0                 // ROM[22360]
0; JMP                                       // ROM[22361]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Output.backSpace$IF_TRUE0 )

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.0                                   // ROM[22362]
D = M                                        // ROM[22363]
// ---------------------------
// push D
@ SP                                         // ROM[22364]
AM = M+1                                     // ROM[22365]
A = A-1                                      // ROM[22366]
M = D                                        // ROM[22367]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22368]
D = A                                        // ROM[22369]
// ---------------------------
// push D
@ SP                                         // ROM[22370]
AM = M+1                                     // ROM[22371]
A = A-1                                      // ROM[22372]
M = D                                        // ROM[22373]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Output.backSpace:418                       // ROM[22374]
D = A                                        // ROM[22375]
@ R15                                        // ROM[22376]
M = D                                        // ROM[22377]
@ :gt                                        // ROM[22378]
0; JMP                                       // ROM[22379]
( Output.backSpace:418)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22380]
AM = M-1                                     // ROM[22381]
D = M                                        // ROM[22382]
// ---------------------------
@ Output.backSpace$IF_TRUE1                  // ROM[22383]
D; JNE                                       // ROM[22384]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Output.backSpace$IF_FALSE1                 // ROM[22385]
0; JMP                                       // ROM[22386]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Output.backSpace$IF_TRUE1 )

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.0                                   // ROM[22387]
D = M                                        // ROM[22388]
// ---------------------------
// push D
@ SP                                         // ROM[22389]
AM = M+1                                     // ROM[22390]
A = A-1                                      // ROM[22391]
M = D                                        // ROM[22392]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[22393]
D = A                                        // ROM[22394]
// ---------------------------
// push D
@ SP                                         // ROM[22395]
AM = M+1                                     // ROM[22396]
A = A-1                                      // ROM[22397]
M = D                                        // ROM[22398]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Output.backSpace:419                       // ROM[22399]
D = A                                        // ROM[22400]
@ R15                                        // ROM[22401]
M = D                                        // ROM[22402]
@ :sub                                       // ROM[22403]
0; JMP                                       // ROM[22404]
( Output.backSpace:419)

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22405]
AM = M-1                                     // ROM[22406]
D = M                                        // ROM[22407]
// ---------------------------
// static[index] = D
@ Output.0                                   // ROM[22408]
M = D                                        // ROM[22409]

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.1                                   // ROM[22410]
D = M                                        // ROM[22411]
// ---------------------------
// push D
@ SP                                         // ROM[22412]
AM = M+1                                     // ROM[22413]
A = A-1                                      // ROM[22414]
M = D                                        // ROM[22415]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[22416]
D = A                                        // ROM[22417]
// ---------------------------
// push D
@ SP                                         // ROM[22418]
AM = M+1                                     // ROM[22419]
A = A-1                                      // ROM[22420]
M = D                                        // ROM[22421]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Output.backSpace:420                       // ROM[22422]
D = A                                        // ROM[22423]
@ R15                                        // ROM[22424]
M = D                                        // ROM[22425]
@ :sub                                       // ROM[22426]
0; JMP                                       // ROM[22427]
( Output.backSpace:420)

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22428]
AM = M-1                                     // ROM[22429]
D = M                                        // ROM[22430]
// ---------------------------
// static[index] = D
@ Output.1                                   // ROM[22431]
M = D                                        // ROM[22432]

// -------------------------------------
// GOTO: IF_END1
// -------------------------------------
@ Output.backSpace$IF_END1                   // ROM[22433]
0; JMP                                       // ROM[22434]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Output.backSpace$IF_FALSE1 )

// -------------------------------------
// PUSH: <constant, 31>
// -------------------------------------
@ 31                                         // ROM[22435]
D = A                                        // ROM[22436]
// ---------------------------
// push D
@ SP                                         // ROM[22437]
AM = M+1                                     // ROM[22438]
A = A-1                                      // ROM[22439]
M = D                                        // ROM[22440]

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22441]
AM = M-1                                     // ROM[22442]
D = M                                        // ROM[22443]
// ---------------------------
// static[index] = D
@ Output.0                                   // ROM[22444]
M = D                                        // ROM[22445]

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.1                                   // ROM[22446]
D = M                                        // ROM[22447]
// ---------------------------
// push D
@ SP                                         // ROM[22448]
AM = M+1                                     // ROM[22449]
A = A-1                                      // ROM[22450]
M = D                                        // ROM[22451]

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[22452]
D = A                                        // ROM[22453]
// ---------------------------
// push D
@ SP                                         // ROM[22454]
AM = M+1                                     // ROM[22455]
A = A-1                                      // ROM[22456]
M = D                                        // ROM[22457]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Output.backSpace:421                       // ROM[22458]
D = A                                        // ROM[22459]
@ R15                                        // ROM[22460]
M = D                                        // ROM[22461]
@ :eq                                        // ROM[22462]
0; JMP                                       // ROM[22463]
( Output.backSpace:421)

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22464]
AM = M-1                                     // ROM[22465]
D = M                                        // ROM[22466]
// ---------------------------
@ Output.backSpace$IF_TRUE2                  // ROM[22467]
D; JNE                                       // ROM[22468]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ Output.backSpace$IF_FALSE2                 // ROM[22469]
0; JMP                                       // ROM[22470]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( Output.backSpace$IF_TRUE2 )

// -------------------------------------
// PUSH: <constant, 8128>
// -------------------------------------
@ 8128                                       // ROM[22471]
D = A                                        // ROM[22472]
// ---------------------------
// push D
@ SP                                         // ROM[22473]
AM = M+1                                     // ROM[22474]
A = A-1                                      // ROM[22475]
M = D                                        // ROM[22476]

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22477]
AM = M-1                                     // ROM[22478]
D = M                                        // ROM[22479]
// ---------------------------
// static[index] = D
@ Output.1                                   // ROM[22480]
M = D                                        // ROM[22481]

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( Output.backSpace$IF_FALSE2 )

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Output.1                                   // ROM[22482]
D = M                                        // ROM[22483]
// ---------------------------
// push D
@ SP                                         // ROM[22484]
AM = M+1                                     // ROM[22485]
A = A-1                                      // ROM[22486]
M = D                                        // ROM[22487]

// -------------------------------------
// PUSH: <constant, 321>
// -------------------------------------
@ 321                                        // ROM[22488]
D = A                                        // ROM[22489]
// ---------------------------
// push D
@ SP                                         // ROM[22490]
AM = M+1                                     // ROM[22491]
A = A-1                                      // ROM[22492]
M = D                                        // ROM[22493]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Output.backSpace:422                       // ROM[22494]
D = A                                        // ROM[22495]
@ R15                                        // ROM[22496]
M = D                                        // ROM[22497]
@ :sub                                       // ROM[22498]
0; JMP                                       // ROM[22499]
( Output.backSpace:422)

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22500]
AM = M-1                                     // ROM[22501]
D = M                                        // ROM[22502]
// ---------------------------
// static[index] = D
@ Output.1                                   // ROM[22503]
M = D                                        // ROM[22504]

// -------------------------------------
// LABEL: IF_END1
// -------------------------------------
( Output.backSpace$IF_END1 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22505]
D = A                                        // ROM[22506]
// ---------------------------
// push D
@ SP                                         // ROM[22507]
AM = M+1                                     // ROM[22508]
A = A-1                                      // ROM[22509]
M = D                                        // ROM[22510]

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22511]
AM = M-1                                     // ROM[22512]
D = M                                        // ROM[22513]
// ---------------------------
// static[index] = D
@ Output.2                                   // ROM[22514]
M = D                                        // ROM[22515]

// -------------------------------------
// GOTO: IF_END0
// -------------------------------------
@ Output.backSpace$IF_END0                   // ROM[22516]
0; JMP                                       // ROM[22517]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Output.backSpace$IF_FALSE0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22518]
D = A                                        // ROM[22519]
// ---------------------------
// push D
@ SP                                         // ROM[22520]
AM = M+1                                     // ROM[22521]
A = A-1                                      // ROM[22522]
M = D                                        // ROM[22523]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[22524]
A = M-1                                      // ROM[22525]
M = !M                                       // ROM[22526]

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22527]
AM = M-1                                     // ROM[22528]
D = M                                        // ROM[22529]
// ---------------------------
// static[index] = D
@ Output.2                                   // ROM[22530]
M = D                                        // ROM[22531]

// -------------------------------------
// LABEL: IF_END0
// -------------------------------------
( Output.backSpace$IF_END0 )

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[22532]
D = A                                        // ROM[22533]
// ---------------------------
// push D
@ SP                                         // ROM[22534]
AM = M+1                                     // ROM[22535]
A = A-1                                      // ROM[22536]
M = D                                        // ROM[22537]

// -------------------------------------
// CALL: Output.drawChar(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[22538]
D = A                                        // ROM[22539]
@ R13                                        // ROM[22540]
M = D                                        // ROM[22541]
// ---------------------------
// Push RA
@ Output.backSpace:423                       // ROM[22542]
D = A                                        // ROM[22543]
// ---------------------------
// push D
@ SP                                         // ROM[22544]
AM = M+1                                     // ROM[22545]
A = A-1                                      // ROM[22546]
M = D                                        // ROM[22547]
// ---------------------------
// call
@ Output.backSpace:424                       // ROM[22548]
D = A                                        // ROM[22549]
@ R15                                        // ROM[22550]
M = D                                        // ROM[22551]
@ :call                                      // ROM[22552]
0; JMP                                       // ROM[22553]
( Output.backSpace:424)
// ---------------------------
// goto functionName
@ Output.drawChar                            // ROM[22554]
0; JMP                                       // ROM[22555]
// ---------------------------
// ( RA )
( Output.backSpace:423) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22556]
AM = M-1                                     // ROM[22557]
D = M                                        // ROM[22558]
// ---------------------------
@ 5                                          // ROM[22559]
M = D                                        // ROM[22560]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22561]
D = A                                        // ROM[22562]
// ---------------------------
// push D
@ SP                                         // ROM[22563]
AM = M+1                                     // ROM[22564]
A = A-1                                      // ROM[22565]
M = D                                        // ROM[22566]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Output.backSpace:425                       // ROM[22567]
D = A                                        // ROM[22568]
@ R15                                        // ROM[22569]
M = D                                        // ROM[22570]
@ :return                                    // ROM[22571]
0; JMP                                       // ROM[22572]
( Output.backSpace:425)

// *********************************************************
// Translation of: ./Screen.vm
// *********************************************************


// =========================================================
// FUNCTION: Screen.init(1 locals)
// =========================================================

( Screen.init )
// ---------------------------
// clear local segment
D = 0                                        // ROM[22573]
// ---------------------------
// push D
@ SP                                         // ROM[22574]
AM = M+1                                     // ROM[22575]
A = A-1                                      // ROM[22576]
M = D                                        // ROM[22577]

// -------------------------------------
// PUSH: <constant, 16384>
// -------------------------------------
@ 16384                                      // ROM[22578]
D = A                                        // ROM[22579]
// ---------------------------
// push D
@ SP                                         // ROM[22580]
AM = M+1                                     // ROM[22581]
A = A-1                                      // ROM[22582]
M = D                                        // ROM[22583]

// -------------------------------------
// POP: <static, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22584]
AM = M-1                                     // ROM[22585]
D = M                                        // ROM[22586]
// ---------------------------
// static[index] = D
@ Screen.1                                   // ROM[22587]
M = D                                        // ROM[22588]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22589]
D = A                                        // ROM[22590]
// ---------------------------
// push D
@ SP                                         // ROM[22591]
AM = M+1                                     // ROM[22592]
A = A-1                                      // ROM[22593]
M = D                                        // ROM[22594]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[22595]
A = M-1                                      // ROM[22596]
M = !M                                       // ROM[22597]

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22598]
AM = M-1                                     // ROM[22599]
D = M                                        // ROM[22600]
// ---------------------------
// static[index] = D
@ Screen.2                                   // ROM[22601]
M = D                                        // ROM[22602]

// -------------------------------------
// PUSH: <constant, 17>
// -------------------------------------
@ 17                                         // ROM[22603]
D = A                                        // ROM[22604]
// ---------------------------
// push D
@ SP                                         // ROM[22605]
AM = M+1                                     // ROM[22606]
A = A-1                                      // ROM[22607]
M = D                                        // ROM[22608]

// -------------------------------------
// CALL: Array.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[22609]
D = A                                        // ROM[22610]
@ R13                                        // ROM[22611]
M = D                                        // ROM[22612]
// ---------------------------
// Push RA
@ Screen.init:0                              // ROM[22613]
D = A                                        // ROM[22614]
// ---------------------------
// push D
@ SP                                         // ROM[22615]
AM = M+1                                     // ROM[22616]
A = A-1                                      // ROM[22617]
M = D                                        // ROM[22618]
// ---------------------------
// call
@ Screen.init:1                              // ROM[22619]
D = A                                        // ROM[22620]
@ R15                                        // ROM[22621]
M = D                                        // ROM[22622]
@ :call                                      // ROM[22623]
0; JMP                                       // ROM[22624]
( Screen.init:1)
// ---------------------------
// goto functionName
@ Array.new                                  // ROM[22625]
0; JMP                                       // ROM[22626]
// ---------------------------
// ( RA )
( Screen.init:0) 

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22627]
AM = M-1                                     // ROM[22628]
D = M                                        // ROM[22629]
// ---------------------------
// static[index] = D
@ Screen.0                                   // ROM[22630]
M = D                                        // ROM[22631]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22632]
D = A                                        // ROM[22633]
// ---------------------------
// push D
@ SP                                         // ROM[22634]
AM = M+1                                     // ROM[22635]
A = A-1                                      // ROM[22636]
M = D                                        // ROM[22637]

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[22638]
D = M                                        // ROM[22639]
// ---------------------------
// push D
@ SP                                         // ROM[22640]
AM = M+1                                     // ROM[22641]
A = A-1                                      // ROM[22642]
M = D                                        // ROM[22643]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.init:2                              // ROM[22644]
D = A                                        // ROM[22645]
@ R15                                        // ROM[22646]
M = D                                        // ROM[22647]
@ :add                                       // ROM[22648]
0; JMP                                       // ROM[22649]
( Screen.init:2)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[22650]
D = A                                        // ROM[22651]
// ---------------------------
// push D
@ SP                                         // ROM[22652]
AM = M+1                                     // ROM[22653]
A = A-1                                      // ROM[22654]
M = D                                        // ROM[22655]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22656]
AM = M-1                                     // ROM[22657]
D = M                                        // ROM[22658]
// ---------------------------
@ 5                                          // ROM[22659]
M = D                                        // ROM[22660]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22661]
AM = M-1                                     // ROM[22662]
D = M                                        // ROM[22663]
// ---------------------------
@ 4                                          // ROM[22664]
M = D                                        // ROM[22665]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[22666]
D = M                                        // ROM[22667]
// ---------------------------
// push D
@ SP                                         // ROM[22668]
AM = M+1                                     // ROM[22669]
A = A-1                                      // ROM[22670]
M = D                                        // ROM[22671]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22672]
D = A                                        // ROM[22673]
@ R13                                        // ROM[22674]
M = D                                        // ROM[22675]
// ---------------------------
// call
@ Screen.init:3                              // ROM[22676]
D = A                                        // ROM[22677]
@ R15                                        // ROM[22678]
M = D                                        // ROM[22679]
@ :pop_that                                  // ROM[22680]
0; JMP                                       // ROM[22681]
( Screen.init:3)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Screen.init$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22682]
D = A                                        // ROM[22683]
@ R13                                        // ROM[22684]
M = D                                        // ROM[22685]
// ---------------------------
// call
@ Screen.init:4                              // ROM[22686]
D = A                                        // ROM[22687]
@ R15                                        // ROM[22688]
M = D                                        // ROM[22689]
@ :push_local                                // ROM[22690]
0; JMP                                       // ROM[22691]
( Screen.init:4)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[22692]
D = A                                        // ROM[22693]
// ---------------------------
// push D
@ SP                                         // ROM[22694]
AM = M+1                                     // ROM[22695]
A = A-1                                      // ROM[22696]
M = D                                        // ROM[22697]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.init:5                              // ROM[22698]
D = A                                        // ROM[22699]
@ R15                                        // ROM[22700]
M = D                                        // ROM[22701]
@ :lt                                        // ROM[22702]
0; JMP                                       // ROM[22703]
( Screen.init:5)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[22704]
A = M-1                                      // ROM[22705]
M = !M                                       // ROM[22706]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22707]
AM = M-1                                     // ROM[22708]
D = M                                        // ROM[22709]
// ---------------------------
@ Screen.init$WHILE_END0                     // ROM[22710]
D; JNE                                       // ROM[22711]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22712]
D = A                                        // ROM[22713]
@ R13                                        // ROM[22714]
M = D                                        // ROM[22715]
// ---------------------------
// call
@ Screen.init:6                              // ROM[22716]
D = A                                        // ROM[22717]
@ R15                                        // ROM[22718]
M = D                                        // ROM[22719]
@ :push_local                                // ROM[22720]
0; JMP                                       // ROM[22721]
( Screen.init:6)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[22722]
D = A                                        // ROM[22723]
// ---------------------------
// push D
@ SP                                         // ROM[22724]
AM = M+1                                     // ROM[22725]
A = A-1                                      // ROM[22726]
M = D                                        // ROM[22727]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.init:7                              // ROM[22728]
D = A                                        // ROM[22729]
@ R15                                        // ROM[22730]
M = D                                        // ROM[22731]
@ :add                                       // ROM[22732]
0; JMP                                       // ROM[22733]
( Screen.init:7)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22734]
D = A                                        // ROM[22735]
@ R13                                        // ROM[22736]
M = D                                        // ROM[22737]
// ---------------------------
// call
@ Screen.init:8                              // ROM[22738]
D = A                                        // ROM[22739]
@ R15                                        // ROM[22740]
M = D                                        // ROM[22741]
@ :pop_local                                 // ROM[22742]
0; JMP                                       // ROM[22743]
( Screen.init:8)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22744]
D = A                                        // ROM[22745]
@ R13                                        // ROM[22746]
M = D                                        // ROM[22747]
// ---------------------------
// call
@ Screen.init:9                              // ROM[22748]
D = A                                        // ROM[22749]
@ R15                                        // ROM[22750]
M = D                                        // ROM[22751]
@ :push_local                                // ROM[22752]
0; JMP                                       // ROM[22753]
( Screen.init:9)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[22754]
D = M                                        // ROM[22755]
// ---------------------------
// push D
@ SP                                         // ROM[22756]
AM = M+1                                     // ROM[22757]
A = A-1                                      // ROM[22758]
M = D                                        // ROM[22759]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.init:10                             // ROM[22760]
D = A                                        // ROM[22761]
@ R15                                        // ROM[22762]
M = D                                        // ROM[22763]
@ :add                                       // ROM[22764]
0; JMP                                       // ROM[22765]
( Screen.init:10)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22766]
D = A                                        // ROM[22767]
@ R13                                        // ROM[22768]
M = D                                        // ROM[22769]
// ---------------------------
// call
@ Screen.init:11                             // ROM[22770]
D = A                                        // ROM[22771]
@ R15                                        // ROM[22772]
M = D                                        // ROM[22773]
@ :push_local                                // ROM[22774]
0; JMP                                       // ROM[22775]
( Screen.init:11)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[22776]
D = A                                        // ROM[22777]
// ---------------------------
// push D
@ SP                                         // ROM[22778]
AM = M+1                                     // ROM[22779]
A = A-1                                      // ROM[22780]
M = D                                        // ROM[22781]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.init:12                             // ROM[22782]
D = A                                        // ROM[22783]
@ R15                                        // ROM[22784]
M = D                                        // ROM[22785]
@ :sub                                       // ROM[22786]
0; JMP                                       // ROM[22787]
( Screen.init:12)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[22788]
D = M                                        // ROM[22789]
// ---------------------------
// push D
@ SP                                         // ROM[22790]
AM = M+1                                     // ROM[22791]
A = A-1                                      // ROM[22792]
M = D                                        // ROM[22793]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.init:13                             // ROM[22794]
D = A                                        // ROM[22795]
@ R15                                        // ROM[22796]
M = D                                        // ROM[22797]
@ :add                                       // ROM[22798]
0; JMP                                       // ROM[22799]
( Screen.init:13)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22800]
AM = M-1                                     // ROM[22801]
D = M                                        // ROM[22802]
// ---------------------------
@ 4                                          // ROM[22803]
M = D                                        // ROM[22804]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22805]
D = A                                        // ROM[22806]
@ R13                                        // ROM[22807]
M = D                                        // ROM[22808]
// ---------------------------
// call
@ Screen.init:14                             // ROM[22809]
D = A                                        // ROM[22810]
@ R15                                        // ROM[22811]
M = D                                        // ROM[22812]
@ :push_that                                 // ROM[22813]
0; JMP                                       // ROM[22814]
( Screen.init:14)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22815]
D = A                                        // ROM[22816]
@ R13                                        // ROM[22817]
M = D                                        // ROM[22818]
// ---------------------------
// call
@ Screen.init:15                             // ROM[22819]
D = A                                        // ROM[22820]
@ R15                                        // ROM[22821]
M = D                                        // ROM[22822]
@ :push_local                                // ROM[22823]
0; JMP                                       // ROM[22824]
( Screen.init:15)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[22825]
D = A                                        // ROM[22826]
// ---------------------------
// push D
@ SP                                         // ROM[22827]
AM = M+1                                     // ROM[22828]
A = A-1                                      // ROM[22829]
M = D                                        // ROM[22830]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.init:16                             // ROM[22831]
D = A                                        // ROM[22832]
@ R15                                        // ROM[22833]
M = D                                        // ROM[22834]
@ :sub                                       // ROM[22835]
0; JMP                                       // ROM[22836]
( Screen.init:16)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[22837]
D = M                                        // ROM[22838]
// ---------------------------
// push D
@ SP                                         // ROM[22839]
AM = M+1                                     // ROM[22840]
A = A-1                                      // ROM[22841]
M = D                                        // ROM[22842]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.init:17                             // ROM[22843]
D = A                                        // ROM[22844]
@ R15                                        // ROM[22845]
M = D                                        // ROM[22846]
@ :add                                       // ROM[22847]
0; JMP                                       // ROM[22848]
( Screen.init:17)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22849]
AM = M-1                                     // ROM[22850]
D = M                                        // ROM[22851]
// ---------------------------
@ 4                                          // ROM[22852]
M = D                                        // ROM[22853]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22854]
D = A                                        // ROM[22855]
@ R13                                        // ROM[22856]
M = D                                        // ROM[22857]
// ---------------------------
// call
@ Screen.init:18                             // ROM[22858]
D = A                                        // ROM[22859]
@ R15                                        // ROM[22860]
M = D                                        // ROM[22861]
@ :push_that                                 // ROM[22862]
0; JMP                                       // ROM[22863]
( Screen.init:18)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.init:19                             // ROM[22864]
D = A                                        // ROM[22865]
@ R15                                        // ROM[22866]
M = D                                        // ROM[22867]
@ :add                                       // ROM[22868]
0; JMP                                       // ROM[22869]
( Screen.init:19)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22870]
AM = M-1                                     // ROM[22871]
D = M                                        // ROM[22872]
// ---------------------------
@ 5                                          // ROM[22873]
M = D                                        // ROM[22874]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22875]
AM = M-1                                     // ROM[22876]
D = M                                        // ROM[22877]
// ---------------------------
@ 4                                          // ROM[22878]
M = D                                        // ROM[22879]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[22880]
D = M                                        // ROM[22881]
// ---------------------------
// push D
@ SP                                         // ROM[22882]
AM = M+1                                     // ROM[22883]
A = A-1                                      // ROM[22884]
M = D                                        // ROM[22885]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22886]
D = A                                        // ROM[22887]
@ R13                                        // ROM[22888]
M = D                                        // ROM[22889]
// ---------------------------
// call
@ Screen.init:20                             // ROM[22890]
D = A                                        // ROM[22891]
@ R15                                        // ROM[22892]
M = D                                        // ROM[22893]
@ :pop_that                                  // ROM[22894]
0; JMP                                       // ROM[22895]
( Screen.init:20)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Screen.init$WHILE_EXP0                     // ROM[22896]
0; JMP                                       // ROM[22897]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Screen.init$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22898]
D = A                                        // ROM[22899]
// ---------------------------
// push D
@ SP                                         // ROM[22900]
AM = M+1                                     // ROM[22901]
A = A-1                                      // ROM[22902]
M = D                                        // ROM[22903]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.init:21                             // ROM[22904]
D = A                                        // ROM[22905]
@ R15                                        // ROM[22906]
M = D                                        // ROM[22907]
@ :return                                    // ROM[22908]
0; JMP                                       // ROM[22909]
( Screen.init:21)

// =========================================================
// FUNCTION: Screen.clearScreen(1 locals)
// =========================================================

( Screen.clearScreen )
// ---------------------------
// clear local segment
D = 0                                        // ROM[22910]
// ---------------------------
// push D
@ SP                                         // ROM[22911]
AM = M+1                                     // ROM[22912]
A = A-1                                      // ROM[22913]
M = D                                        // ROM[22914]

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Screen.clearScreen$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22915]
D = A                                        // ROM[22916]
@ R13                                        // ROM[22917]
M = D                                        // ROM[22918]
// ---------------------------
// call
@ Screen.clearScreen:22                      // ROM[22919]
D = A                                        // ROM[22920]
@ R15                                        // ROM[22921]
M = D                                        // ROM[22922]
@ :push_local                                // ROM[22923]
0; JMP                                       // ROM[22924]
( Screen.clearScreen:22)

// -------------------------------------
// PUSH: <constant, 8192>
// -------------------------------------
@ 8192                                       // ROM[22925]
D = A                                        // ROM[22926]
// ---------------------------
// push D
@ SP                                         // ROM[22927]
AM = M+1                                     // ROM[22928]
A = A-1                                      // ROM[22929]
M = D                                        // ROM[22930]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.clearScreen:23                      // ROM[22931]
D = A                                        // ROM[22932]
@ R15                                        // ROM[22933]
M = D                                        // ROM[22934]
@ :lt                                        // ROM[22935]
0; JMP                                       // ROM[22936]
( Screen.clearScreen:23)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[22937]
A = M-1                                      // ROM[22938]
M = !M                                       // ROM[22939]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22940]
AM = M-1                                     // ROM[22941]
D = M                                        // ROM[22942]
// ---------------------------
@ Screen.clearScreen$WHILE_END0              // ROM[22943]
D; JNE                                       // ROM[22944]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22945]
D = A                                        // ROM[22946]
@ R13                                        // ROM[22947]
M = D                                        // ROM[22948]
// ---------------------------
// call
@ Screen.clearScreen:24                      // ROM[22949]
D = A                                        // ROM[22950]
@ R15                                        // ROM[22951]
M = D                                        // ROM[22952]
@ :push_local                                // ROM[22953]
0; JMP                                       // ROM[22954]
( Screen.clearScreen:24)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.1                                   // ROM[22955]
D = M                                        // ROM[22956]
// ---------------------------
// push D
@ SP                                         // ROM[22957]
AM = M+1                                     // ROM[22958]
A = A-1                                      // ROM[22959]
M = D                                        // ROM[22960]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.clearScreen:25                      // ROM[22961]
D = A                                        // ROM[22962]
@ R15                                        // ROM[22963]
M = D                                        // ROM[22964]
@ :add                                       // ROM[22965]
0; JMP                                       // ROM[22966]
( Screen.clearScreen:25)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[22967]
D = A                                        // ROM[22968]
// ---------------------------
// push D
@ SP                                         // ROM[22969]
AM = M+1                                     // ROM[22970]
A = A-1                                      // ROM[22971]
M = D                                        // ROM[22972]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22973]
AM = M-1                                     // ROM[22974]
D = M                                        // ROM[22975]
// ---------------------------
@ 5                                          // ROM[22976]
M = D                                        // ROM[22977]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[22978]
AM = M-1                                     // ROM[22979]
D = M                                        // ROM[22980]
// ---------------------------
@ 4                                          // ROM[22981]
M = D                                        // ROM[22982]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[22983]
D = M                                        // ROM[22984]
// ---------------------------
// push D
@ SP                                         // ROM[22985]
AM = M+1                                     // ROM[22986]
A = A-1                                      // ROM[22987]
M = D                                        // ROM[22988]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22989]
D = A                                        // ROM[22990]
@ R13                                        // ROM[22991]
M = D                                        // ROM[22992]
// ---------------------------
// call
@ Screen.clearScreen:26                      // ROM[22993]
D = A                                        // ROM[22994]
@ R15                                        // ROM[22995]
M = D                                        // ROM[22996]
@ :pop_that                                  // ROM[22997]
0; JMP                                       // ROM[22998]
( Screen.clearScreen:26)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[22999]
D = A                                        // ROM[23000]
@ R13                                        // ROM[23001]
M = D                                        // ROM[23002]
// ---------------------------
// call
@ Screen.clearScreen:27                      // ROM[23003]
D = A                                        // ROM[23004]
@ R15                                        // ROM[23005]
M = D                                        // ROM[23006]
@ :push_local                                // ROM[23007]
0; JMP                                       // ROM[23008]
( Screen.clearScreen:27)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[23009]
D = A                                        // ROM[23010]
// ---------------------------
// push D
@ SP                                         // ROM[23011]
AM = M+1                                     // ROM[23012]
A = A-1                                      // ROM[23013]
M = D                                        // ROM[23014]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.clearScreen:28                      // ROM[23015]
D = A                                        // ROM[23016]
@ R15                                        // ROM[23017]
M = D                                        // ROM[23018]
@ :add                                       // ROM[23019]
0; JMP                                       // ROM[23020]
( Screen.clearScreen:28)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23021]
D = A                                        // ROM[23022]
@ R13                                        // ROM[23023]
M = D                                        // ROM[23024]
// ---------------------------
// call
@ Screen.clearScreen:29                      // ROM[23025]
D = A                                        // ROM[23026]
@ R15                                        // ROM[23027]
M = D                                        // ROM[23028]
@ :pop_local                                 // ROM[23029]
0; JMP                                       // ROM[23030]
( Screen.clearScreen:29)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Screen.clearScreen$WHILE_EXP0              // ROM[23031]
0; JMP                                       // ROM[23032]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Screen.clearScreen$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23033]
D = A                                        // ROM[23034]
// ---------------------------
// push D
@ SP                                         // ROM[23035]
AM = M+1                                     // ROM[23036]
A = A-1                                      // ROM[23037]
M = D                                        // ROM[23038]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.clearScreen:30                      // ROM[23039]
D = A                                        // ROM[23040]
@ R15                                        // ROM[23041]
M = D                                        // ROM[23042]
@ :return                                    // ROM[23043]
0; JMP                                       // ROM[23044]
( Screen.clearScreen:30)

// =========================================================
// FUNCTION: Screen.updateLocation(0 locals)
// =========================================================

( Screen.updateLocation )
// ---------------------------
// clear local segment
D = 0                                        // ROM[23045]

// -------------------------------------
// PUSH: <static, 2>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.2                                   // ROM[23046]
D = M                                        // ROM[23047]
// ---------------------------
// push D
@ SP                                         // ROM[23048]
AM = M+1                                     // ROM[23049]
A = A-1                                      // ROM[23050]
M = D                                        // ROM[23051]

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23052]
AM = M-1                                     // ROM[23053]
D = M                                        // ROM[23054]
// ---------------------------
@ Screen.updateLocation$IF_TRUE0             // ROM[23055]
D; JNE                                       // ROM[23056]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Screen.updateLocation$IF_FALSE0            // ROM[23057]
0; JMP                                       // ROM[23058]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Screen.updateLocation$IF_TRUE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23059]
D = A                                        // ROM[23060]
@ R13                                        // ROM[23061]
M = D                                        // ROM[23062]
// ---------------------------
// call
@ Screen.updateLocation:31                   // ROM[23063]
D = A                                        // ROM[23064]
@ R15                                        // ROM[23065]
M = D                                        // ROM[23066]
@ :push_argument                             // ROM[23067]
0; JMP                                       // ROM[23068]
( Screen.updateLocation:31)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.1                                   // ROM[23069]
D = M                                        // ROM[23070]
// ---------------------------
// push D
@ SP                                         // ROM[23071]
AM = M+1                                     // ROM[23072]
A = A-1                                      // ROM[23073]
M = D                                        // ROM[23074]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.updateLocation:32                   // ROM[23075]
D = A                                        // ROM[23076]
@ R15                                        // ROM[23077]
M = D                                        // ROM[23078]
@ :add                                       // ROM[23079]
0; JMP                                       // ROM[23080]
( Screen.updateLocation:32)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23081]
D = A                                        // ROM[23082]
@ R13                                        // ROM[23083]
M = D                                        // ROM[23084]
// ---------------------------
// call
@ Screen.updateLocation:33                   // ROM[23085]
D = A                                        // ROM[23086]
@ R15                                        // ROM[23087]
M = D                                        // ROM[23088]
@ :push_argument                             // ROM[23089]
0; JMP                                       // ROM[23090]
( Screen.updateLocation:33)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.1                                   // ROM[23091]
D = M                                        // ROM[23092]
// ---------------------------
// push D
@ SP                                         // ROM[23093]
AM = M+1                                     // ROM[23094]
A = A-1                                      // ROM[23095]
M = D                                        // ROM[23096]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.updateLocation:34                   // ROM[23097]
D = A                                        // ROM[23098]
@ R15                                        // ROM[23099]
M = D                                        // ROM[23100]
@ :add                                       // ROM[23101]
0; JMP                                       // ROM[23102]
( Screen.updateLocation:34)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23103]
AM = M-1                                     // ROM[23104]
D = M                                        // ROM[23105]
// ---------------------------
@ 4                                          // ROM[23106]
M = D                                        // ROM[23107]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23108]
D = A                                        // ROM[23109]
@ R13                                        // ROM[23110]
M = D                                        // ROM[23111]
// ---------------------------
// call
@ Screen.updateLocation:35                   // ROM[23112]
D = A                                        // ROM[23113]
@ R15                                        // ROM[23114]
M = D                                        // ROM[23115]
@ :push_that                                 // ROM[23116]
0; JMP                                       // ROM[23117]
( Screen.updateLocation:35)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23118]
D = A                                        // ROM[23119]
@ R13                                        // ROM[23120]
M = D                                        // ROM[23121]
// ---------------------------
// call
@ Screen.updateLocation:36                   // ROM[23122]
D = A                                        // ROM[23123]
@ R15                                        // ROM[23124]
M = D                                        // ROM[23125]
@ :push_argument                             // ROM[23126]
0; JMP                                       // ROM[23127]
( Screen.updateLocation:36)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.updateLocation:37                   // ROM[23128]
D = A                                        // ROM[23129]
@ R15                                        // ROM[23130]
M = D                                        // ROM[23131]
@ :or                                        // ROM[23132]
0; JMP                                       // ROM[23133]
( Screen.updateLocation:37)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23134]
AM = M-1                                     // ROM[23135]
D = M                                        // ROM[23136]
// ---------------------------
@ 5                                          // ROM[23137]
M = D                                        // ROM[23138]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23139]
AM = M-1                                     // ROM[23140]
D = M                                        // ROM[23141]
// ---------------------------
@ 4                                          // ROM[23142]
M = D                                        // ROM[23143]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[23144]
D = M                                        // ROM[23145]
// ---------------------------
// push D
@ SP                                         // ROM[23146]
AM = M+1                                     // ROM[23147]
A = A-1                                      // ROM[23148]
M = D                                        // ROM[23149]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23150]
D = A                                        // ROM[23151]
@ R13                                        // ROM[23152]
M = D                                        // ROM[23153]
// ---------------------------
// call
@ Screen.updateLocation:38                   // ROM[23154]
D = A                                        // ROM[23155]
@ R15                                        // ROM[23156]
M = D                                        // ROM[23157]
@ :pop_that                                  // ROM[23158]
0; JMP                                       // ROM[23159]
( Screen.updateLocation:38)

// -------------------------------------
// GOTO: IF_END0
// -------------------------------------
@ Screen.updateLocation$IF_END0              // ROM[23160]
0; JMP                                       // ROM[23161]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Screen.updateLocation$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23162]
D = A                                        // ROM[23163]
@ R13                                        // ROM[23164]
M = D                                        // ROM[23165]
// ---------------------------
// call
@ Screen.updateLocation:39                   // ROM[23166]
D = A                                        // ROM[23167]
@ R15                                        // ROM[23168]
M = D                                        // ROM[23169]
@ :push_argument                             // ROM[23170]
0; JMP                                       // ROM[23171]
( Screen.updateLocation:39)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.1                                   // ROM[23172]
D = M                                        // ROM[23173]
// ---------------------------
// push D
@ SP                                         // ROM[23174]
AM = M+1                                     // ROM[23175]
A = A-1                                      // ROM[23176]
M = D                                        // ROM[23177]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.updateLocation:40                   // ROM[23178]
D = A                                        // ROM[23179]
@ R15                                        // ROM[23180]
M = D                                        // ROM[23181]
@ :add                                       // ROM[23182]
0; JMP                                       // ROM[23183]
( Screen.updateLocation:40)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23184]
D = A                                        // ROM[23185]
@ R13                                        // ROM[23186]
M = D                                        // ROM[23187]
// ---------------------------
// call
@ Screen.updateLocation:41                   // ROM[23188]
D = A                                        // ROM[23189]
@ R15                                        // ROM[23190]
M = D                                        // ROM[23191]
@ :push_argument                             // ROM[23192]
0; JMP                                       // ROM[23193]
( Screen.updateLocation:41)

// -------------------------------------
// PUSH: <static, 1>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.1                                   // ROM[23194]
D = M                                        // ROM[23195]
// ---------------------------
// push D
@ SP                                         // ROM[23196]
AM = M+1                                     // ROM[23197]
A = A-1                                      // ROM[23198]
M = D                                        // ROM[23199]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.updateLocation:42                   // ROM[23200]
D = A                                        // ROM[23201]
@ R15                                        // ROM[23202]
M = D                                        // ROM[23203]
@ :add                                       // ROM[23204]
0; JMP                                       // ROM[23205]
( Screen.updateLocation:42)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23206]
AM = M-1                                     // ROM[23207]
D = M                                        // ROM[23208]
// ---------------------------
@ 4                                          // ROM[23209]
M = D                                        // ROM[23210]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23211]
D = A                                        // ROM[23212]
@ R13                                        // ROM[23213]
M = D                                        // ROM[23214]
// ---------------------------
// call
@ Screen.updateLocation:43                   // ROM[23215]
D = A                                        // ROM[23216]
@ R15                                        // ROM[23217]
M = D                                        // ROM[23218]
@ :push_that                                 // ROM[23219]
0; JMP                                       // ROM[23220]
( Screen.updateLocation:43)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23221]
D = A                                        // ROM[23222]
@ R13                                        // ROM[23223]
M = D                                        // ROM[23224]
// ---------------------------
// call
@ Screen.updateLocation:44                   // ROM[23225]
D = A                                        // ROM[23226]
@ R15                                        // ROM[23227]
M = D                                        // ROM[23228]
@ :push_argument                             // ROM[23229]
0; JMP                                       // ROM[23230]
( Screen.updateLocation:44)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[23231]
A = M-1                                      // ROM[23232]
M = !M                                       // ROM[23233]

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Screen.updateLocation:45                   // ROM[23234]
D = A                                        // ROM[23235]
@ R15                                        // ROM[23236]
M = D                                        // ROM[23237]
@ :and                                       // ROM[23238]
0; JMP                                       // ROM[23239]
( Screen.updateLocation:45)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23240]
AM = M-1                                     // ROM[23241]
D = M                                        // ROM[23242]
// ---------------------------
@ 5                                          // ROM[23243]
M = D                                        // ROM[23244]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23245]
AM = M-1                                     // ROM[23246]
D = M                                        // ROM[23247]
// ---------------------------
@ 4                                          // ROM[23248]
M = D                                        // ROM[23249]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[23250]
D = M                                        // ROM[23251]
// ---------------------------
// push D
@ SP                                         // ROM[23252]
AM = M+1                                     // ROM[23253]
A = A-1                                      // ROM[23254]
M = D                                        // ROM[23255]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23256]
D = A                                        // ROM[23257]
@ R13                                        // ROM[23258]
M = D                                        // ROM[23259]
// ---------------------------
// call
@ Screen.updateLocation:46                   // ROM[23260]
D = A                                        // ROM[23261]
@ R15                                        // ROM[23262]
M = D                                        // ROM[23263]
@ :pop_that                                  // ROM[23264]
0; JMP                                       // ROM[23265]
( Screen.updateLocation:46)

// -------------------------------------
// LABEL: IF_END0
// -------------------------------------
( Screen.updateLocation$IF_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23266]
D = A                                        // ROM[23267]
// ---------------------------
// push D
@ SP                                         // ROM[23268]
AM = M+1                                     // ROM[23269]
A = A-1                                      // ROM[23270]
M = D                                        // ROM[23271]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.updateLocation:47                   // ROM[23272]
D = A                                        // ROM[23273]
@ R15                                        // ROM[23274]
M = D                                        // ROM[23275]
@ :return                                    // ROM[23276]
0; JMP                                       // ROM[23277]
( Screen.updateLocation:47)

// =========================================================
// FUNCTION: Screen.setColor(0 locals)
// =========================================================

( Screen.setColor )
// ---------------------------
// clear local segment
D = 0                                        // ROM[23278]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23279]
D = A                                        // ROM[23280]
@ R13                                        // ROM[23281]
M = D                                        // ROM[23282]
// ---------------------------
// call
@ Screen.setColor:48                         // ROM[23283]
D = A                                        // ROM[23284]
@ R15                                        // ROM[23285]
M = D                                        // ROM[23286]
@ :push_argument                             // ROM[23287]
0; JMP                                       // ROM[23288]
( Screen.setColor:48)

// -------------------------------------
// POP: <static, 2>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23289]
AM = M-1                                     // ROM[23290]
D = M                                        // ROM[23291]
// ---------------------------
// static[index] = D
@ Screen.2                                   // ROM[23292]
M = D                                        // ROM[23293]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23294]
D = A                                        // ROM[23295]
// ---------------------------
// push D
@ SP                                         // ROM[23296]
AM = M+1                                     // ROM[23297]
A = A-1                                      // ROM[23298]
M = D                                        // ROM[23299]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.setColor:49                         // ROM[23300]
D = A                                        // ROM[23301]
@ R15                                        // ROM[23302]
M = D                                        // ROM[23303]
@ :return                                    // ROM[23304]
0; JMP                                       // ROM[23305]
( Screen.setColor:49)

// =========================================================
// FUNCTION: Screen.drawPixel(3 locals)
// =========================================================

( Screen.drawPixel )
// ---------------------------
// clear local segment
D = 0                                        // ROM[23306]
// ---------------------------
// push D
@ SP                                         // ROM[23307]
AM = M+1                                     // ROM[23308]
A = A-1                                      // ROM[23309]
M = D                                        // ROM[23310]
// ---------------------------
// push D
@ SP                                         // ROM[23311]
AM = M+1                                     // ROM[23312]
A = A-1                                      // ROM[23313]
M = D                                        // ROM[23314]
// ---------------------------
// push D
@ SP                                         // ROM[23315]
AM = M+1                                     // ROM[23316]
A = A-1                                      // ROM[23317]
M = D                                        // ROM[23318]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23319]
D = A                                        // ROM[23320]
@ R13                                        // ROM[23321]
M = D                                        // ROM[23322]
// ---------------------------
// call
@ Screen.drawPixel:50                        // ROM[23323]
D = A                                        // ROM[23324]
@ R15                                        // ROM[23325]
M = D                                        // ROM[23326]
@ :push_argument                             // ROM[23327]
0; JMP                                       // ROM[23328]
( Screen.drawPixel:50)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23329]
D = A                                        // ROM[23330]
// ---------------------------
// push D
@ SP                                         // ROM[23331]
AM = M+1                                     // ROM[23332]
A = A-1                                      // ROM[23333]
M = D                                        // ROM[23334]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:51                        // ROM[23335]
D = A                                        // ROM[23336]
@ R15                                        // ROM[23337]
M = D                                        // ROM[23338]
@ :lt                                        // ROM[23339]
0; JMP                                       // ROM[23340]
( Screen.drawPixel:51)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23341]
D = A                                        // ROM[23342]
@ R13                                        // ROM[23343]
M = D                                        // ROM[23344]
// ---------------------------
// call
@ Screen.drawPixel:52                        // ROM[23345]
D = A                                        // ROM[23346]
@ R15                                        // ROM[23347]
M = D                                        // ROM[23348]
@ :push_argument                             // ROM[23349]
0; JMP                                       // ROM[23350]
( Screen.drawPixel:52)

// -------------------------------------
// PUSH: <constant, 511>
// -------------------------------------
@ 511                                        // ROM[23351]
D = A                                        // ROM[23352]
// ---------------------------
// push D
@ SP                                         // ROM[23353]
AM = M+1                                     // ROM[23354]
A = A-1                                      // ROM[23355]
M = D                                        // ROM[23356]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:53                        // ROM[23357]
D = A                                        // ROM[23358]
@ R15                                        // ROM[23359]
M = D                                        // ROM[23360]
@ :gt                                        // ROM[23361]
0; JMP                                       // ROM[23362]
( Screen.drawPixel:53)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:54                        // ROM[23363]
D = A                                        // ROM[23364]
@ R15                                        // ROM[23365]
M = D                                        // ROM[23366]
@ :or                                        // ROM[23367]
0; JMP                                       // ROM[23368]
( Screen.drawPixel:54)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23369]
D = A                                        // ROM[23370]
@ R13                                        // ROM[23371]
M = D                                        // ROM[23372]
// ---------------------------
// call
@ Screen.drawPixel:55                        // ROM[23373]
D = A                                        // ROM[23374]
@ R15                                        // ROM[23375]
M = D                                        // ROM[23376]
@ :push_argument                             // ROM[23377]
0; JMP                                       // ROM[23378]
( Screen.drawPixel:55)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23379]
D = A                                        // ROM[23380]
// ---------------------------
// push D
@ SP                                         // ROM[23381]
AM = M+1                                     // ROM[23382]
A = A-1                                      // ROM[23383]
M = D                                        // ROM[23384]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:56                        // ROM[23385]
D = A                                        // ROM[23386]
@ R15                                        // ROM[23387]
M = D                                        // ROM[23388]
@ :lt                                        // ROM[23389]
0; JMP                                       // ROM[23390]
( Screen.drawPixel:56)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:57                        // ROM[23391]
D = A                                        // ROM[23392]
@ R15                                        // ROM[23393]
M = D                                        // ROM[23394]
@ :or                                        // ROM[23395]
0; JMP                                       // ROM[23396]
( Screen.drawPixel:57)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23397]
D = A                                        // ROM[23398]
@ R13                                        // ROM[23399]
M = D                                        // ROM[23400]
// ---------------------------
// call
@ Screen.drawPixel:58                        // ROM[23401]
D = A                                        // ROM[23402]
@ R15                                        // ROM[23403]
M = D                                        // ROM[23404]
@ :push_argument                             // ROM[23405]
0; JMP                                       // ROM[23406]
( Screen.drawPixel:58)

// -------------------------------------
// PUSH: <constant, 255>
// -------------------------------------
@ 255                                        // ROM[23407]
D = A                                        // ROM[23408]
// ---------------------------
// push D
@ SP                                         // ROM[23409]
AM = M+1                                     // ROM[23410]
A = A-1                                      // ROM[23411]
M = D                                        // ROM[23412]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:59                        // ROM[23413]
D = A                                        // ROM[23414]
@ R15                                        // ROM[23415]
M = D                                        // ROM[23416]
@ :gt                                        // ROM[23417]
0; JMP                                       // ROM[23418]
( Screen.drawPixel:59)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:60                        // ROM[23419]
D = A                                        // ROM[23420]
@ R15                                        // ROM[23421]
M = D                                        // ROM[23422]
@ :or                                        // ROM[23423]
0; JMP                                       // ROM[23424]
( Screen.drawPixel:60)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23425]
AM = M-1                                     // ROM[23426]
D = M                                        // ROM[23427]
// ---------------------------
@ Screen.drawPixel$IF_TRUE0                  // ROM[23428]
D; JNE                                       // ROM[23429]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Screen.drawPixel$IF_FALSE0                 // ROM[23430]
0; JMP                                       // ROM[23431]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Screen.drawPixel$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 7>
// -------------------------------------
@ 7                                          // ROM[23432]
D = A                                        // ROM[23433]
// ---------------------------
// push D
@ SP                                         // ROM[23434]
AM = M+1                                     // ROM[23435]
A = A-1                                      // ROM[23436]
M = D                                        // ROM[23437]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[23438]
D = A                                        // ROM[23439]
@ R13                                        // ROM[23440]
M = D                                        // ROM[23441]
// ---------------------------
// Push RA
@ Screen.drawPixel:61                        // ROM[23442]
D = A                                        // ROM[23443]
// ---------------------------
// push D
@ SP                                         // ROM[23444]
AM = M+1                                     // ROM[23445]
A = A-1                                      // ROM[23446]
M = D                                        // ROM[23447]
// ---------------------------
// call
@ Screen.drawPixel:62                        // ROM[23448]
D = A                                        // ROM[23449]
@ R15                                        // ROM[23450]
M = D                                        // ROM[23451]
@ :call                                      // ROM[23452]
0; JMP                                       // ROM[23453]
( Screen.drawPixel:62)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[23454]
0; JMP                                       // ROM[23455]
// ---------------------------
// ( RA )
( Screen.drawPixel:61) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23456]
AM = M-1                                     // ROM[23457]
D = M                                        // ROM[23458]
// ---------------------------
@ 5                                          // ROM[23459]
M = D                                        // ROM[23460]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Screen.drawPixel$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23461]
D = A                                        // ROM[23462]
@ R13                                        // ROM[23463]
M = D                                        // ROM[23464]
// ---------------------------
// call
@ Screen.drawPixel:63                        // ROM[23465]
D = A                                        // ROM[23466]
@ R15                                        // ROM[23467]
M = D                                        // ROM[23468]
@ :push_argument                             // ROM[23469]
0; JMP                                       // ROM[23470]
( Screen.drawPixel:63)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[23471]
D = A                                        // ROM[23472]
// ---------------------------
// push D
@ SP                                         // ROM[23473]
AM = M+1                                     // ROM[23474]
A = A-1                                      // ROM[23475]
M = D                                        // ROM[23476]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[23477]
D = A                                        // ROM[23478]
@ R13                                        // ROM[23479]
M = D                                        // ROM[23480]
// ---------------------------
// Push RA
@ Screen.drawPixel:64                        // ROM[23481]
D = A                                        // ROM[23482]
// ---------------------------
// push D
@ SP                                         // ROM[23483]
AM = M+1                                     // ROM[23484]
A = A-1                                      // ROM[23485]
M = D                                        // ROM[23486]
// ---------------------------
// call
@ Screen.drawPixel:65                        // ROM[23487]
D = A                                        // ROM[23488]
@ R15                                        // ROM[23489]
M = D                                        // ROM[23490]
@ :call                                      // ROM[23491]
0; JMP                                       // ROM[23492]
( Screen.drawPixel:65)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[23493]
0; JMP                                       // ROM[23494]
// ---------------------------
// ( RA )
( Screen.drawPixel:64) 

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23495]
D = A                                        // ROM[23496]
@ R13                                        // ROM[23497]
M = D                                        // ROM[23498]
// ---------------------------
// call
@ Screen.drawPixel:66                        // ROM[23499]
D = A                                        // ROM[23500]
@ R15                                        // ROM[23501]
M = D                                        // ROM[23502]
@ :pop_local                                 // ROM[23503]
0; JMP                                       // ROM[23504]
( Screen.drawPixel:66)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23505]
D = A                                        // ROM[23506]
@ R13                                        // ROM[23507]
M = D                                        // ROM[23508]
// ---------------------------
// call
@ Screen.drawPixel:67                        // ROM[23509]
D = A                                        // ROM[23510]
@ R15                                        // ROM[23511]
M = D                                        // ROM[23512]
@ :push_argument                             // ROM[23513]
0; JMP                                       // ROM[23514]
( Screen.drawPixel:67)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23515]
D = A                                        // ROM[23516]
@ R13                                        // ROM[23517]
M = D                                        // ROM[23518]
// ---------------------------
// call
@ Screen.drawPixel:68                        // ROM[23519]
D = A                                        // ROM[23520]
@ R15                                        // ROM[23521]
M = D                                        // ROM[23522]
@ :push_local                                // ROM[23523]
0; JMP                                       // ROM[23524]
( Screen.drawPixel:68)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[23525]
D = A                                        // ROM[23526]
// ---------------------------
// push D
@ SP                                         // ROM[23527]
AM = M+1                                     // ROM[23528]
A = A-1                                      // ROM[23529]
M = D                                        // ROM[23530]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[23531]
D = A                                        // ROM[23532]
@ R13                                        // ROM[23533]
M = D                                        // ROM[23534]
// ---------------------------
// Push RA
@ Screen.drawPixel:69                        // ROM[23535]
D = A                                        // ROM[23536]
// ---------------------------
// push D
@ SP                                         // ROM[23537]
AM = M+1                                     // ROM[23538]
A = A-1                                      // ROM[23539]
M = D                                        // ROM[23540]
// ---------------------------
// call
@ Screen.drawPixel:70                        // ROM[23541]
D = A                                        // ROM[23542]
@ R15                                        // ROM[23543]
M = D                                        // ROM[23544]
@ :call                                      // ROM[23545]
0; JMP                                       // ROM[23546]
( Screen.drawPixel:70)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[23547]
0; JMP                                       // ROM[23548]
// ---------------------------
// ( RA )
( Screen.drawPixel:69) 

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:71                        // ROM[23549]
D = A                                        // ROM[23550]
@ R15                                        // ROM[23551]
M = D                                        // ROM[23552]
@ :sub                                       // ROM[23553]
0; JMP                                       // ROM[23554]
( Screen.drawPixel:71)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23555]
D = A                                        // ROM[23556]
@ R13                                        // ROM[23557]
M = D                                        // ROM[23558]
// ---------------------------
// call
@ Screen.drawPixel:72                        // ROM[23559]
D = A                                        // ROM[23560]
@ R15                                        // ROM[23561]
M = D                                        // ROM[23562]
@ :pop_local                                 // ROM[23563]
0; JMP                                       // ROM[23564]
( Screen.drawPixel:72)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23565]
D = A                                        // ROM[23566]
@ R13                                        // ROM[23567]
M = D                                        // ROM[23568]
// ---------------------------
// call
@ Screen.drawPixel:73                        // ROM[23569]
D = A                                        // ROM[23570]
@ R15                                        // ROM[23571]
M = D                                        // ROM[23572]
@ :push_argument                             // ROM[23573]
0; JMP                                       // ROM[23574]
( Screen.drawPixel:73)

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[23575]
D = A                                        // ROM[23576]
// ---------------------------
// push D
@ SP                                         // ROM[23577]
AM = M+1                                     // ROM[23578]
A = A-1                                      // ROM[23579]
M = D                                        // ROM[23580]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[23581]
D = A                                        // ROM[23582]
@ R13                                        // ROM[23583]
M = D                                        // ROM[23584]
// ---------------------------
// Push RA
@ Screen.drawPixel:74                        // ROM[23585]
D = A                                        // ROM[23586]
// ---------------------------
// push D
@ SP                                         // ROM[23587]
AM = M+1                                     // ROM[23588]
A = A-1                                      // ROM[23589]
M = D                                        // ROM[23590]
// ---------------------------
// call
@ Screen.drawPixel:75                        // ROM[23591]
D = A                                        // ROM[23592]
@ R15                                        // ROM[23593]
M = D                                        // ROM[23594]
@ :call                                      // ROM[23595]
0; JMP                                       // ROM[23596]
( Screen.drawPixel:75)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[23597]
0; JMP                                       // ROM[23598]
// ---------------------------
// ( RA )
( Screen.drawPixel:74) 

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23599]
D = A                                        // ROM[23600]
@ R13                                        // ROM[23601]
M = D                                        // ROM[23602]
// ---------------------------
// call
@ Screen.drawPixel:76                        // ROM[23603]
D = A                                        // ROM[23604]
@ R15                                        // ROM[23605]
M = D                                        // ROM[23606]
@ :push_local                                // ROM[23607]
0; JMP                                       // ROM[23608]
( Screen.drawPixel:76)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:77                        // ROM[23609]
D = A                                        // ROM[23610]
@ R15                                        // ROM[23611]
M = D                                        // ROM[23612]
@ :add                                       // ROM[23613]
0; JMP                                       // ROM[23614]
( Screen.drawPixel:77)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[23615]
D = A                                        // ROM[23616]
@ R13                                        // ROM[23617]
M = D                                        // ROM[23618]
// ---------------------------
// call
@ Screen.drawPixel:78                        // ROM[23619]
D = A                                        // ROM[23620]
@ R15                                        // ROM[23621]
M = D                                        // ROM[23622]
@ :pop_local                                 // ROM[23623]
0; JMP                                       // ROM[23624]
( Screen.drawPixel:78)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[23625]
D = A                                        // ROM[23626]
@ R13                                        // ROM[23627]
M = D                                        // ROM[23628]
// ---------------------------
// call
@ Screen.drawPixel:79                        // ROM[23629]
D = A                                        // ROM[23630]
@ R15                                        // ROM[23631]
M = D                                        // ROM[23632]
@ :push_local                                // ROM[23633]
0; JMP                                       // ROM[23634]
( Screen.drawPixel:79)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23635]
D = A                                        // ROM[23636]
@ R13                                        // ROM[23637]
M = D                                        // ROM[23638]
// ---------------------------
// call
@ Screen.drawPixel:80                        // ROM[23639]
D = A                                        // ROM[23640]
@ R15                                        // ROM[23641]
M = D                                        // ROM[23642]
@ :push_local                                // ROM[23643]
0; JMP                                       // ROM[23644]
( Screen.drawPixel:80)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[23645]
D = M                                        // ROM[23646]
// ---------------------------
// push D
@ SP                                         // ROM[23647]
AM = M+1                                     // ROM[23648]
A = A-1                                      // ROM[23649]
M = D                                        // ROM[23650]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:81                        // ROM[23651]
D = A                                        // ROM[23652]
@ R15                                        // ROM[23653]
M = D                                        // ROM[23654]
@ :add                                       // ROM[23655]
0; JMP                                       // ROM[23656]
( Screen.drawPixel:81)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23657]
AM = M-1                                     // ROM[23658]
D = M                                        // ROM[23659]
// ---------------------------
@ 4                                          // ROM[23660]
M = D                                        // ROM[23661]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23662]
D = A                                        // ROM[23663]
@ R13                                        // ROM[23664]
M = D                                        // ROM[23665]
// ---------------------------
// call
@ Screen.drawPixel:82                        // ROM[23666]
D = A                                        // ROM[23667]
@ R15                                        // ROM[23668]
M = D                                        // ROM[23669]
@ :push_that                                 // ROM[23670]
0; JMP                                       // ROM[23671]
( Screen.drawPixel:82)

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[23672]
D = A                                        // ROM[23673]
@ R13                                        // ROM[23674]
M = D                                        // ROM[23675]
// ---------------------------
// Push RA
@ Screen.drawPixel:83                        // ROM[23676]
D = A                                        // ROM[23677]
// ---------------------------
// push D
@ SP                                         // ROM[23678]
AM = M+1                                     // ROM[23679]
A = A-1                                      // ROM[23680]
M = D                                        // ROM[23681]
// ---------------------------
// call
@ Screen.drawPixel:84                        // ROM[23682]
D = A                                        // ROM[23683]
@ R15                                        // ROM[23684]
M = D                                        // ROM[23685]
@ :call                                      // ROM[23686]
0; JMP                                       // ROM[23687]
( Screen.drawPixel:84)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[23688]
0; JMP                                       // ROM[23689]
// ---------------------------
// ( RA )
( Screen.drawPixel:83) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23690]
AM = M-1                                     // ROM[23691]
D = M                                        // ROM[23692]
// ---------------------------
@ 5                                          // ROM[23693]
M = D                                        // ROM[23694]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23695]
D = A                                        // ROM[23696]
// ---------------------------
// push D
@ SP                                         // ROM[23697]
AM = M+1                                     // ROM[23698]
A = A-1                                      // ROM[23699]
M = D                                        // ROM[23700]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.drawPixel:85                        // ROM[23701]
D = A                                        // ROM[23702]
@ R15                                        // ROM[23703]
M = D                                        // ROM[23704]
@ :return                                    // ROM[23705]
0; JMP                                       // ROM[23706]
( Screen.drawPixel:85)

// =========================================================
// FUNCTION: Screen.drawConditional(0 locals)
// =========================================================

( Screen.drawConditional )
// ---------------------------
// clear local segment
D = 0                                        // ROM[23707]

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[23708]
D = A                                        // ROM[23709]
@ R13                                        // ROM[23710]
M = D                                        // ROM[23711]
// ---------------------------
// call
@ Screen.drawConditional:86                  // ROM[23712]
D = A                                        // ROM[23713]
@ R15                                        // ROM[23714]
M = D                                        // ROM[23715]
@ :push_argument                             // ROM[23716]
0; JMP                                       // ROM[23717]
( Screen.drawConditional:86)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23718]
AM = M-1                                     // ROM[23719]
D = M                                        // ROM[23720]
// ---------------------------
@ Screen.drawConditional$IF_TRUE0            // ROM[23721]
D; JNE                                       // ROM[23722]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Screen.drawConditional$IF_FALSE0           // ROM[23723]
0; JMP                                       // ROM[23724]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Screen.drawConditional$IF_TRUE0 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23725]
D = A                                        // ROM[23726]
@ R13                                        // ROM[23727]
M = D                                        // ROM[23728]
// ---------------------------
// call
@ Screen.drawConditional:87                  // ROM[23729]
D = A                                        // ROM[23730]
@ R15                                        // ROM[23731]
M = D                                        // ROM[23732]
@ :push_argument                             // ROM[23733]
0; JMP                                       // ROM[23734]
( Screen.drawConditional:87)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23735]
D = A                                        // ROM[23736]
@ R13                                        // ROM[23737]
M = D                                        // ROM[23738]
// ---------------------------
// call
@ Screen.drawConditional:88                  // ROM[23739]
D = A                                        // ROM[23740]
@ R15                                        // ROM[23741]
M = D                                        // ROM[23742]
@ :push_argument                             // ROM[23743]
0; JMP                                       // ROM[23744]
( Screen.drawConditional:88)

// -------------------------------------
// CALL: Screen.drawPixel(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[23745]
D = A                                        // ROM[23746]
@ R13                                        // ROM[23747]
M = D                                        // ROM[23748]
// ---------------------------
// Push RA
@ Screen.drawConditional:89                  // ROM[23749]
D = A                                        // ROM[23750]
// ---------------------------
// push D
@ SP                                         // ROM[23751]
AM = M+1                                     // ROM[23752]
A = A-1                                      // ROM[23753]
M = D                                        // ROM[23754]
// ---------------------------
// call
@ Screen.drawConditional:90                  // ROM[23755]
D = A                                        // ROM[23756]
@ R15                                        // ROM[23757]
M = D                                        // ROM[23758]
@ :call                                      // ROM[23759]
0; JMP                                       // ROM[23760]
( Screen.drawConditional:90)
// ---------------------------
// goto functionName
@ Screen.drawPixel                           // ROM[23761]
0; JMP                                       // ROM[23762]
// ---------------------------
// ( RA )
( Screen.drawConditional:89) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23763]
AM = M-1                                     // ROM[23764]
D = M                                        // ROM[23765]
// ---------------------------
@ 5                                          // ROM[23766]
M = D                                        // ROM[23767]

// -------------------------------------
// GOTO: IF_END0
// -------------------------------------
@ Screen.drawConditional$IF_END0             // ROM[23768]
0; JMP                                       // ROM[23769]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Screen.drawConditional$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23770]
D = A                                        // ROM[23771]
@ R13                                        // ROM[23772]
M = D                                        // ROM[23773]
// ---------------------------
// call
@ Screen.drawConditional:91                  // ROM[23774]
D = A                                        // ROM[23775]
@ R15                                        // ROM[23776]
M = D                                        // ROM[23777]
@ :push_argument                             // ROM[23778]
0; JMP                                       // ROM[23779]
( Screen.drawConditional:91)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23780]
D = A                                        // ROM[23781]
@ R13                                        // ROM[23782]
M = D                                        // ROM[23783]
// ---------------------------
// call
@ Screen.drawConditional:92                  // ROM[23784]
D = A                                        // ROM[23785]
@ R15                                        // ROM[23786]
M = D                                        // ROM[23787]
@ :push_argument                             // ROM[23788]
0; JMP                                       // ROM[23789]
( Screen.drawConditional:92)

// -------------------------------------
// CALL: Screen.drawPixel(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[23790]
D = A                                        // ROM[23791]
@ R13                                        // ROM[23792]
M = D                                        // ROM[23793]
// ---------------------------
// Push RA
@ Screen.drawConditional:93                  // ROM[23794]
D = A                                        // ROM[23795]
// ---------------------------
// push D
@ SP                                         // ROM[23796]
AM = M+1                                     // ROM[23797]
A = A-1                                      // ROM[23798]
M = D                                        // ROM[23799]
// ---------------------------
// call
@ Screen.drawConditional:94                  // ROM[23800]
D = A                                        // ROM[23801]
@ R15                                        // ROM[23802]
M = D                                        // ROM[23803]
@ :call                                      // ROM[23804]
0; JMP                                       // ROM[23805]
( Screen.drawConditional:94)
// ---------------------------
// goto functionName
@ Screen.drawPixel                           // ROM[23806]
0; JMP                                       // ROM[23807]
// ---------------------------
// ( RA )
( Screen.drawConditional:93) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23808]
AM = M-1                                     // ROM[23809]
D = M                                        // ROM[23810]
// ---------------------------
@ 5                                          // ROM[23811]
M = D                                        // ROM[23812]

// -------------------------------------
// LABEL: IF_END0
// -------------------------------------
( Screen.drawConditional$IF_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23813]
D = A                                        // ROM[23814]
// ---------------------------
// push D
@ SP                                         // ROM[23815]
AM = M+1                                     // ROM[23816]
A = A-1                                      // ROM[23817]
M = D                                        // ROM[23818]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.drawConditional:95                  // ROM[23819]
D = A                                        // ROM[23820]
@ R15                                        // ROM[23821]
M = D                                        // ROM[23822]
@ :return                                    // ROM[23823]
0; JMP                                       // ROM[23824]
( Screen.drawConditional:95)

// =========================================================
// FUNCTION: Screen.drawLine(11 locals)
// =========================================================

( Screen.drawLine )
// ---------------------------
// clear local segment
D = 0                                        // ROM[23825]
// ---------------------------
// push D
@ SP                                         // ROM[23826]
AM = M+1                                     // ROM[23827]
A = A-1                                      // ROM[23828]
M = D                                        // ROM[23829]
// ---------------------------
// push D
@ SP                                         // ROM[23830]
AM = M+1                                     // ROM[23831]
A = A-1                                      // ROM[23832]
M = D                                        // ROM[23833]
// ---------------------------
// push D
@ SP                                         // ROM[23834]
AM = M+1                                     // ROM[23835]
A = A-1                                      // ROM[23836]
M = D                                        // ROM[23837]
// ---------------------------
// push D
@ SP                                         // ROM[23838]
AM = M+1                                     // ROM[23839]
A = A-1                                      // ROM[23840]
M = D                                        // ROM[23841]
// ---------------------------
// push D
@ SP                                         // ROM[23842]
AM = M+1                                     // ROM[23843]
A = A-1                                      // ROM[23844]
M = D                                        // ROM[23845]
// ---------------------------
// push D
@ SP                                         // ROM[23846]
AM = M+1                                     // ROM[23847]
A = A-1                                      // ROM[23848]
M = D                                        // ROM[23849]
// ---------------------------
// push D
@ SP                                         // ROM[23850]
AM = M+1                                     // ROM[23851]
A = A-1                                      // ROM[23852]
M = D                                        // ROM[23853]
// ---------------------------
// push D
@ SP                                         // ROM[23854]
AM = M+1                                     // ROM[23855]
A = A-1                                      // ROM[23856]
M = D                                        // ROM[23857]
// ---------------------------
// push D
@ SP                                         // ROM[23858]
AM = M+1                                     // ROM[23859]
A = A-1                                      // ROM[23860]
M = D                                        // ROM[23861]
// ---------------------------
// push D
@ SP                                         // ROM[23862]
AM = M+1                                     // ROM[23863]
A = A-1                                      // ROM[23864]
M = D                                        // ROM[23865]
// ---------------------------
// push D
@ SP                                         // ROM[23866]
AM = M+1                                     // ROM[23867]
A = A-1                                      // ROM[23868]
M = D                                        // ROM[23869]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[23870]
D = A                                        // ROM[23871]
@ R13                                        // ROM[23872]
M = D                                        // ROM[23873]
// ---------------------------
// call
@ Screen.drawLine:96                         // ROM[23874]
D = A                                        // ROM[23875]
@ R15                                        // ROM[23876]
M = D                                        // ROM[23877]
@ :push_argument                             // ROM[23878]
0; JMP                                       // ROM[23879]
( Screen.drawLine:96)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23880]
D = A                                        // ROM[23881]
// ---------------------------
// push D
@ SP                                         // ROM[23882]
AM = M+1                                     // ROM[23883]
A = A-1                                      // ROM[23884]
M = D                                        // ROM[23885]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:97                         // ROM[23886]
D = A                                        // ROM[23887]
@ R15                                        // ROM[23888]
M = D                                        // ROM[23889]
@ :lt                                        // ROM[23890]
0; JMP                                       // ROM[23891]
( Screen.drawLine:97)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[23892]
D = A                                        // ROM[23893]
@ R13                                        // ROM[23894]
M = D                                        // ROM[23895]
// ---------------------------
// call
@ Screen.drawLine:98                         // ROM[23896]
D = A                                        // ROM[23897]
@ R15                                        // ROM[23898]
M = D                                        // ROM[23899]
@ :push_argument                             // ROM[23900]
0; JMP                                       // ROM[23901]
( Screen.drawLine:98)

// -------------------------------------
// PUSH: <constant, 511>
// -------------------------------------
@ 511                                        // ROM[23902]
D = A                                        // ROM[23903]
// ---------------------------
// push D
@ SP                                         // ROM[23904]
AM = M+1                                     // ROM[23905]
A = A-1                                      // ROM[23906]
M = D                                        // ROM[23907]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:99                         // ROM[23908]
D = A                                        // ROM[23909]
@ R15                                        // ROM[23910]
M = D                                        // ROM[23911]
@ :gt                                        // ROM[23912]
0; JMP                                       // ROM[23913]
( Screen.drawLine:99)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:100                        // ROM[23914]
D = A                                        // ROM[23915]
@ R15                                        // ROM[23916]
M = D                                        // ROM[23917]
@ :or                                        // ROM[23918]
0; JMP                                       // ROM[23919]
( Screen.drawLine:100)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[23920]
D = A                                        // ROM[23921]
@ R13                                        // ROM[23922]
M = D                                        // ROM[23923]
// ---------------------------
// call
@ Screen.drawLine:101                        // ROM[23924]
D = A                                        // ROM[23925]
@ R15                                        // ROM[23926]
M = D                                        // ROM[23927]
@ :push_argument                             // ROM[23928]
0; JMP                                       // ROM[23929]
( Screen.drawLine:101)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[23930]
D = A                                        // ROM[23931]
// ---------------------------
// push D
@ SP                                         // ROM[23932]
AM = M+1                                     // ROM[23933]
A = A-1                                      // ROM[23934]
M = D                                        // ROM[23935]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:102                        // ROM[23936]
D = A                                        // ROM[23937]
@ R15                                        // ROM[23938]
M = D                                        // ROM[23939]
@ :lt                                        // ROM[23940]
0; JMP                                       // ROM[23941]
( Screen.drawLine:102)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:103                        // ROM[23942]
D = A                                        // ROM[23943]
@ R15                                        // ROM[23944]
M = D                                        // ROM[23945]
@ :or                                        // ROM[23946]
0; JMP                                       // ROM[23947]
( Screen.drawLine:103)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[23948]
D = A                                        // ROM[23949]
@ R13                                        // ROM[23950]
M = D                                        // ROM[23951]
// ---------------------------
// call
@ Screen.drawLine:104                        // ROM[23952]
D = A                                        // ROM[23953]
@ R15                                        // ROM[23954]
M = D                                        // ROM[23955]
@ :push_argument                             // ROM[23956]
0; JMP                                       // ROM[23957]
( Screen.drawLine:104)

// -------------------------------------
// PUSH: <constant, 255>
// -------------------------------------
@ 255                                        // ROM[23958]
D = A                                        // ROM[23959]
// ---------------------------
// push D
@ SP                                         // ROM[23960]
AM = M+1                                     // ROM[23961]
A = A-1                                      // ROM[23962]
M = D                                        // ROM[23963]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:105                        // ROM[23964]
D = A                                        // ROM[23965]
@ R15                                        // ROM[23966]
M = D                                        // ROM[23967]
@ :gt                                        // ROM[23968]
0; JMP                                       // ROM[23969]
( Screen.drawLine:105)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:106                        // ROM[23970]
D = A                                        // ROM[23971]
@ R15                                        // ROM[23972]
M = D                                        // ROM[23973]
@ :or                                        // ROM[23974]
0; JMP                                       // ROM[23975]
( Screen.drawLine:106)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[23976]
AM = M-1                                     // ROM[23977]
D = M                                        // ROM[23978]
// ---------------------------
@ Screen.drawLine$IF_TRUE0                   // ROM[23979]
D; JNE                                       // ROM[23980]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Screen.drawLine$IF_FALSE0                  // ROM[23981]
0; JMP                                       // ROM[23982]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Screen.drawLine$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[23983]
D = A                                        // ROM[23984]
// ---------------------------
// push D
@ SP                                         // ROM[23985]
AM = M+1                                     // ROM[23986]
A = A-1                                      // ROM[23987]
M = D                                        // ROM[23988]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[23989]
D = A                                        // ROM[23990]
@ R13                                        // ROM[23991]
M = D                                        // ROM[23992]
// ---------------------------
// Push RA
@ Screen.drawLine:107                        // ROM[23993]
D = A                                        // ROM[23994]
// ---------------------------
// push D
@ SP                                         // ROM[23995]
AM = M+1                                     // ROM[23996]
A = A-1                                      // ROM[23997]
M = D                                        // ROM[23998]
// ---------------------------
// call
@ Screen.drawLine:108                        // ROM[23999]
D = A                                        // ROM[24000]
@ R15                                        // ROM[24001]
M = D                                        // ROM[24002]
@ :call                                      // ROM[24003]
0; JMP                                       // ROM[24004]
( Screen.drawLine:108)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[24005]
0; JMP                                       // ROM[24006]
// ---------------------------
// ( RA )
( Screen.drawLine:107) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[24007]
AM = M-1                                     // ROM[24008]
D = M                                        // ROM[24009]
// ---------------------------
@ 5                                          // ROM[24010]
M = D                                        // ROM[24011]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Screen.drawLine$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24012]
D = A                                        // ROM[24013]
@ R13                                        // ROM[24014]
M = D                                        // ROM[24015]
// ---------------------------
// call
@ Screen.drawLine:109                        // ROM[24016]
D = A                                        // ROM[24017]
@ R15                                        // ROM[24018]
M = D                                        // ROM[24019]
@ :push_argument                             // ROM[24020]
0; JMP                                       // ROM[24021]
( Screen.drawLine:109)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24022]
D = A                                        // ROM[24023]
@ R13                                        // ROM[24024]
M = D                                        // ROM[24025]
// ---------------------------
// call
@ Screen.drawLine:110                        // ROM[24026]
D = A                                        // ROM[24027]
@ R15                                        // ROM[24028]
M = D                                        // ROM[24029]
@ :push_argument                             // ROM[24030]
0; JMP                                       // ROM[24031]
( Screen.drawLine:110)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:111                        // ROM[24032]
D = A                                        // ROM[24033]
@ R15                                        // ROM[24034]
M = D                                        // ROM[24035]
@ :sub                                       // ROM[24036]
0; JMP                                       // ROM[24037]
( Screen.drawLine:111)

// -------------------------------------
// CALL: Math.abs(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[24038]
D = A                                        // ROM[24039]
@ R13                                        // ROM[24040]
M = D                                        // ROM[24041]
// ---------------------------
// Push RA
@ Screen.drawLine:112                        // ROM[24042]
D = A                                        // ROM[24043]
// ---------------------------
// push D
@ SP                                         // ROM[24044]
AM = M+1                                     // ROM[24045]
A = A-1                                      // ROM[24046]
M = D                                        // ROM[24047]
// ---------------------------
// call
@ Screen.drawLine:113                        // ROM[24048]
D = A                                        // ROM[24049]
@ R15                                        // ROM[24050]
M = D                                        // ROM[24051]
@ :call                                      // ROM[24052]
0; JMP                                       // ROM[24053]
( Screen.drawLine:113)
// ---------------------------
// goto functionName
@ Math.abs                                   // ROM[24054]
0; JMP                                       // ROM[24055]
// ---------------------------
// ( RA )
( Screen.drawLine:112) 

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24056]
D = A                                        // ROM[24057]
@ R13                                        // ROM[24058]
M = D                                        // ROM[24059]
// ---------------------------
// call
@ Screen.drawLine:114                        // ROM[24060]
D = A                                        // ROM[24061]
@ R15                                        // ROM[24062]
M = D                                        // ROM[24063]
@ :pop_local                                 // ROM[24064]
0; JMP                                       // ROM[24065]
( Screen.drawLine:114)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24066]
D = A                                        // ROM[24067]
@ R13                                        // ROM[24068]
M = D                                        // ROM[24069]
// ---------------------------
// call
@ Screen.drawLine:115                        // ROM[24070]
D = A                                        // ROM[24071]
@ R15                                        // ROM[24072]
M = D                                        // ROM[24073]
@ :push_argument                             // ROM[24074]
0; JMP                                       // ROM[24075]
( Screen.drawLine:115)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24076]
D = A                                        // ROM[24077]
@ R13                                        // ROM[24078]
M = D                                        // ROM[24079]
// ---------------------------
// call
@ Screen.drawLine:116                        // ROM[24080]
D = A                                        // ROM[24081]
@ R15                                        // ROM[24082]
M = D                                        // ROM[24083]
@ :push_argument                             // ROM[24084]
0; JMP                                       // ROM[24085]
( Screen.drawLine:116)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:117                        // ROM[24086]
D = A                                        // ROM[24087]
@ R15                                        // ROM[24088]
M = D                                        // ROM[24089]
@ :sub                                       // ROM[24090]
0; JMP                                       // ROM[24091]
( Screen.drawLine:117)

// -------------------------------------
// CALL: Math.abs(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[24092]
D = A                                        // ROM[24093]
@ R13                                        // ROM[24094]
M = D                                        // ROM[24095]
// ---------------------------
// Push RA
@ Screen.drawLine:118                        // ROM[24096]
D = A                                        // ROM[24097]
// ---------------------------
// push D
@ SP                                         // ROM[24098]
AM = M+1                                     // ROM[24099]
A = A-1                                      // ROM[24100]
M = D                                        // ROM[24101]
// ---------------------------
// call
@ Screen.drawLine:119                        // ROM[24102]
D = A                                        // ROM[24103]
@ R15                                        // ROM[24104]
M = D                                        // ROM[24105]
@ :call                                      // ROM[24106]
0; JMP                                       // ROM[24107]
( Screen.drawLine:119)
// ---------------------------
// goto functionName
@ Math.abs                                   // ROM[24108]
0; JMP                                       // ROM[24109]
// ---------------------------
// ( RA )
( Screen.drawLine:118) 

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24110]
D = A                                        // ROM[24111]
@ R13                                        // ROM[24112]
M = D                                        // ROM[24113]
// ---------------------------
// call
@ Screen.drawLine:120                        // ROM[24114]
D = A                                        // ROM[24115]
@ R15                                        // ROM[24116]
M = D                                        // ROM[24117]
@ :pop_local                                 // ROM[24118]
0; JMP                                       // ROM[24119]
( Screen.drawLine:120)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24120]
D = A                                        // ROM[24121]
@ R13                                        // ROM[24122]
M = D                                        // ROM[24123]
// ---------------------------
// call
@ Screen.drawLine:121                        // ROM[24124]
D = A                                        // ROM[24125]
@ R15                                        // ROM[24126]
M = D                                        // ROM[24127]
@ :push_local                                // ROM[24128]
0; JMP                                       // ROM[24129]
( Screen.drawLine:121)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24130]
D = A                                        // ROM[24131]
@ R13                                        // ROM[24132]
M = D                                        // ROM[24133]
// ---------------------------
// call
@ Screen.drawLine:122                        // ROM[24134]
D = A                                        // ROM[24135]
@ R15                                        // ROM[24136]
M = D                                        // ROM[24137]
@ :push_local                                // ROM[24138]
0; JMP                                       // ROM[24139]
( Screen.drawLine:122)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:123                        // ROM[24140]
D = A                                        // ROM[24141]
@ R15                                        // ROM[24142]
M = D                                        // ROM[24143]
@ :lt                                        // ROM[24144]
0; JMP                                       // ROM[24145]
( Screen.drawLine:123)

// -------------------------------------
// POP: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[24146]
D = A                                        // ROM[24147]
@ R13                                        // ROM[24148]
M = D                                        // ROM[24149]
// ---------------------------
// call
@ Screen.drawLine:124                        // ROM[24150]
D = A                                        // ROM[24151]
@ R15                                        // ROM[24152]
M = D                                        // ROM[24153]
@ :pop_local                                 // ROM[24154]
0; JMP                                       // ROM[24155]
( Screen.drawLine:124)

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[24156]
D = A                                        // ROM[24157]
@ R13                                        // ROM[24158]
M = D                                        // ROM[24159]
// ---------------------------
// call
@ Screen.drawLine:125                        // ROM[24160]
D = A                                        // ROM[24161]
@ R15                                        // ROM[24162]
M = D                                        // ROM[24163]
@ :push_local                                // ROM[24164]
0; JMP                                       // ROM[24165]
( Screen.drawLine:125)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24166]
D = A                                        // ROM[24167]
@ R13                                        // ROM[24168]
M = D                                        // ROM[24169]
// ---------------------------
// call
@ Screen.drawLine:126                        // ROM[24170]
D = A                                        // ROM[24171]
@ R15                                        // ROM[24172]
M = D                                        // ROM[24173]
@ :push_argument                             // ROM[24174]
0; JMP                                       // ROM[24175]
( Screen.drawLine:126)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24176]
D = A                                        // ROM[24177]
@ R13                                        // ROM[24178]
M = D                                        // ROM[24179]
// ---------------------------
// call
@ Screen.drawLine:127                        // ROM[24180]
D = A                                        // ROM[24181]
@ R15                                        // ROM[24182]
M = D                                        // ROM[24183]
@ :push_argument                             // ROM[24184]
0; JMP                                       // ROM[24185]
( Screen.drawLine:127)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:128                        // ROM[24186]
D = A                                        // ROM[24187]
@ R15                                        // ROM[24188]
M = D                                        // ROM[24189]
@ :lt                                        // ROM[24190]
0; JMP                                       // ROM[24191]
( Screen.drawLine:128)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:129                        // ROM[24192]
D = A                                        // ROM[24193]
@ R15                                        // ROM[24194]
M = D                                        // ROM[24195]
@ :and                                       // ROM[24196]
0; JMP                                       // ROM[24197]
( Screen.drawLine:129)

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[24198]
D = A                                        // ROM[24199]
@ R13                                        // ROM[24200]
M = D                                        // ROM[24201]
// ---------------------------
// call
@ Screen.drawLine:130                        // ROM[24202]
D = A                                        // ROM[24203]
@ R15                                        // ROM[24204]
M = D                                        // ROM[24205]
@ :push_local                                // ROM[24206]
0; JMP                                       // ROM[24207]
( Screen.drawLine:130)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[24208]
A = M-1                                      // ROM[24209]
M = !M                                       // ROM[24210]

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24211]
D = A                                        // ROM[24212]
@ R13                                        // ROM[24213]
M = D                                        // ROM[24214]
// ---------------------------
// call
@ Screen.drawLine:131                        // ROM[24215]
D = A                                        // ROM[24216]
@ R15                                        // ROM[24217]
M = D                                        // ROM[24218]
@ :push_argument                             // ROM[24219]
0; JMP                                       // ROM[24220]
( Screen.drawLine:131)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24221]
D = A                                        // ROM[24222]
@ R13                                        // ROM[24223]
M = D                                        // ROM[24224]
// ---------------------------
// call
@ Screen.drawLine:132                        // ROM[24225]
D = A                                        // ROM[24226]
@ R15                                        // ROM[24227]
M = D                                        // ROM[24228]
@ :push_argument                             // ROM[24229]
0; JMP                                       // ROM[24230]
( Screen.drawLine:132)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:133                        // ROM[24231]
D = A                                        // ROM[24232]
@ R15                                        // ROM[24233]
M = D                                        // ROM[24234]
@ :lt                                        // ROM[24235]
0; JMP                                       // ROM[24236]
( Screen.drawLine:133)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:134                        // ROM[24237]
D = A                                        // ROM[24238]
@ R15                                        // ROM[24239]
M = D                                        // ROM[24240]
@ :and                                       // ROM[24241]
0; JMP                                       // ROM[24242]
( Screen.drawLine:134)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:135                        // ROM[24243]
D = A                                        // ROM[24244]
@ R15                                        // ROM[24245]
M = D                                        // ROM[24246]
@ :or                                        // ROM[24247]
0; JMP                                       // ROM[24248]
( Screen.drawLine:135)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[24249]
AM = M-1                                     // ROM[24250]
D = M                                        // ROM[24251]
// ---------------------------
@ Screen.drawLine$IF_TRUE1                   // ROM[24252]
D; JNE                                       // ROM[24253]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Screen.drawLine$IF_FALSE1                  // ROM[24254]
0; JMP                                       // ROM[24255]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Screen.drawLine$IF_TRUE1 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24256]
D = A                                        // ROM[24257]
@ R13                                        // ROM[24258]
M = D                                        // ROM[24259]
// ---------------------------
// call
@ Screen.drawLine:136                        // ROM[24260]
D = A                                        // ROM[24261]
@ R15                                        // ROM[24262]
M = D                                        // ROM[24263]
@ :push_argument                             // ROM[24264]
0; JMP                                       // ROM[24265]
( Screen.drawLine:136)

// -------------------------------------
// POP: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[24266]
D = A                                        // ROM[24267]
@ R13                                        // ROM[24268]
M = D                                        // ROM[24269]
// ---------------------------
// call
@ Screen.drawLine:137                        // ROM[24270]
D = A                                        // ROM[24271]
@ R15                                        // ROM[24272]
M = D                                        // ROM[24273]
@ :pop_local                                 // ROM[24274]
0; JMP                                       // ROM[24275]
( Screen.drawLine:137)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24276]
D = A                                        // ROM[24277]
@ R13                                        // ROM[24278]
M = D                                        // ROM[24279]
// ---------------------------
// call
@ Screen.drawLine:138                        // ROM[24280]
D = A                                        // ROM[24281]
@ R15                                        // ROM[24282]
M = D                                        // ROM[24283]
@ :push_argument                             // ROM[24284]
0; JMP                                       // ROM[24285]
( Screen.drawLine:138)

// -------------------------------------
// POP: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24286]
D = A                                        // ROM[24287]
@ R13                                        // ROM[24288]
M = D                                        // ROM[24289]
// ---------------------------
// call
@ Screen.drawLine:139                        // ROM[24290]
D = A                                        // ROM[24291]
@ R15                                        // ROM[24292]
M = D                                        // ROM[24293]
@ :pop_argument                              // ROM[24294]
0; JMP                                       // ROM[24295]
( Screen.drawLine:139)

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[24296]
D = A                                        // ROM[24297]
@ R13                                        // ROM[24298]
M = D                                        // ROM[24299]
// ---------------------------
// call
@ Screen.drawLine:140                        // ROM[24300]
D = A                                        // ROM[24301]
@ R15                                        // ROM[24302]
M = D                                        // ROM[24303]
@ :push_local                                // ROM[24304]
0; JMP                                       // ROM[24305]
( Screen.drawLine:140)

// -------------------------------------
// POP: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24306]
D = A                                        // ROM[24307]
@ R13                                        // ROM[24308]
M = D                                        // ROM[24309]
// ---------------------------
// call
@ Screen.drawLine:141                        // ROM[24310]
D = A                                        // ROM[24311]
@ R15                                        // ROM[24312]
M = D                                        // ROM[24313]
@ :pop_argument                              // ROM[24314]
0; JMP                                       // ROM[24315]
( Screen.drawLine:141)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24316]
D = A                                        // ROM[24317]
@ R13                                        // ROM[24318]
M = D                                        // ROM[24319]
// ---------------------------
// call
@ Screen.drawLine:142                        // ROM[24320]
D = A                                        // ROM[24321]
@ R15                                        // ROM[24322]
M = D                                        // ROM[24323]
@ :push_argument                             // ROM[24324]
0; JMP                                       // ROM[24325]
( Screen.drawLine:142)

// -------------------------------------
// POP: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[24326]
D = A                                        // ROM[24327]
@ R13                                        // ROM[24328]
M = D                                        // ROM[24329]
// ---------------------------
// call
@ Screen.drawLine:143                        // ROM[24330]
D = A                                        // ROM[24331]
@ R15                                        // ROM[24332]
M = D                                        // ROM[24333]
@ :pop_local                                 // ROM[24334]
0; JMP                                       // ROM[24335]
( Screen.drawLine:143)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24336]
D = A                                        // ROM[24337]
@ R13                                        // ROM[24338]
M = D                                        // ROM[24339]
// ---------------------------
// call
@ Screen.drawLine:144                        // ROM[24340]
D = A                                        // ROM[24341]
@ R15                                        // ROM[24342]
M = D                                        // ROM[24343]
@ :push_argument                             // ROM[24344]
0; JMP                                       // ROM[24345]
( Screen.drawLine:144)

// -------------------------------------
// POP: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24346]
D = A                                        // ROM[24347]
@ R13                                        // ROM[24348]
M = D                                        // ROM[24349]
// ---------------------------
// call
@ Screen.drawLine:145                        // ROM[24350]
D = A                                        // ROM[24351]
@ R15                                        // ROM[24352]
M = D                                        // ROM[24353]
@ :pop_argument                              // ROM[24354]
0; JMP                                       // ROM[24355]
( Screen.drawLine:145)

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[24356]
D = A                                        // ROM[24357]
@ R13                                        // ROM[24358]
M = D                                        // ROM[24359]
// ---------------------------
// call
@ Screen.drawLine:146                        // ROM[24360]
D = A                                        // ROM[24361]
@ R15                                        // ROM[24362]
M = D                                        // ROM[24363]
@ :push_local                                // ROM[24364]
0; JMP                                       // ROM[24365]
( Screen.drawLine:146)

// -------------------------------------
// POP: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24366]
D = A                                        // ROM[24367]
@ R13                                        // ROM[24368]
M = D                                        // ROM[24369]
// ---------------------------
// call
@ Screen.drawLine:147                        // ROM[24370]
D = A                                        // ROM[24371]
@ R15                                        // ROM[24372]
M = D                                        // ROM[24373]
@ :pop_argument                              // ROM[24374]
0; JMP                                       // ROM[24375]
( Screen.drawLine:147)

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Screen.drawLine$IF_FALSE1 )

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[24376]
D = A                                        // ROM[24377]
@ R13                                        // ROM[24378]
M = D                                        // ROM[24379]
// ---------------------------
// call
@ Screen.drawLine:148                        // ROM[24380]
D = A                                        // ROM[24381]
@ R15                                        // ROM[24382]
M = D                                        // ROM[24383]
@ :push_local                                // ROM[24384]
0; JMP                                       // ROM[24385]
( Screen.drawLine:148)

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[24386]
AM = M-1                                     // ROM[24387]
D = M                                        // ROM[24388]
// ---------------------------
@ Screen.drawLine$IF_TRUE2                   // ROM[24389]
D; JNE                                       // ROM[24390]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ Screen.drawLine$IF_FALSE2                  // ROM[24391]
0; JMP                                       // ROM[24392]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( Screen.drawLine$IF_TRUE2 )

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24393]
D = A                                        // ROM[24394]
@ R13                                        // ROM[24395]
M = D                                        // ROM[24396]
// ---------------------------
// call
@ Screen.drawLine:149                        // ROM[24397]
D = A                                        // ROM[24398]
@ R15                                        // ROM[24399]
M = D                                        // ROM[24400]
@ :push_local                                // ROM[24401]
0; JMP                                       // ROM[24402]
( Screen.drawLine:149)

// -------------------------------------
// POP: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[24403]
D = A                                        // ROM[24404]
@ R13                                        // ROM[24405]
M = D                                        // ROM[24406]
// ---------------------------
// call
@ Screen.drawLine:150                        // ROM[24407]
D = A                                        // ROM[24408]
@ R15                                        // ROM[24409]
M = D                                        // ROM[24410]
@ :pop_local                                 // ROM[24411]
0; JMP                                       // ROM[24412]
( Screen.drawLine:150)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24413]
D = A                                        // ROM[24414]
@ R13                                        // ROM[24415]
M = D                                        // ROM[24416]
// ---------------------------
// call
@ Screen.drawLine:151                        // ROM[24417]
D = A                                        // ROM[24418]
@ R15                                        // ROM[24419]
M = D                                        // ROM[24420]
@ :push_local                                // ROM[24421]
0; JMP                                       // ROM[24422]
( Screen.drawLine:151)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24423]
D = A                                        // ROM[24424]
@ R13                                        // ROM[24425]
M = D                                        // ROM[24426]
// ---------------------------
// call
@ Screen.drawLine:152                        // ROM[24427]
D = A                                        // ROM[24428]
@ R15                                        // ROM[24429]
M = D                                        // ROM[24430]
@ :pop_local                                 // ROM[24431]
0; JMP                                       // ROM[24432]
( Screen.drawLine:152)

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[24433]
D = A                                        // ROM[24434]
@ R13                                        // ROM[24435]
M = D                                        // ROM[24436]
// ---------------------------
// call
@ Screen.drawLine:153                        // ROM[24437]
D = A                                        // ROM[24438]
@ R15                                        // ROM[24439]
M = D                                        // ROM[24440]
@ :push_local                                // ROM[24441]
0; JMP                                       // ROM[24442]
( Screen.drawLine:153)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24443]
D = A                                        // ROM[24444]
@ R13                                        // ROM[24445]
M = D                                        // ROM[24446]
// ---------------------------
// call
@ Screen.drawLine:154                        // ROM[24447]
D = A                                        // ROM[24448]
@ R15                                        // ROM[24449]
M = D                                        // ROM[24450]
@ :pop_local                                 // ROM[24451]
0; JMP                                       // ROM[24452]
( Screen.drawLine:154)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24453]
D = A                                        // ROM[24454]
@ R13                                        // ROM[24455]
M = D                                        // ROM[24456]
// ---------------------------
// call
@ Screen.drawLine:155                        // ROM[24457]
D = A                                        // ROM[24458]
@ R15                                        // ROM[24459]
M = D                                        // ROM[24460]
@ :push_argument                             // ROM[24461]
0; JMP                                       // ROM[24462]
( Screen.drawLine:155)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24463]
D = A                                        // ROM[24464]
@ R13                                        // ROM[24465]
M = D                                        // ROM[24466]
// ---------------------------
// call
@ Screen.drawLine:156                        // ROM[24467]
D = A                                        // ROM[24468]
@ R15                                        // ROM[24469]
M = D                                        // ROM[24470]
@ :pop_local                                 // ROM[24471]
0; JMP                                       // ROM[24472]
( Screen.drawLine:156)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24473]
D = A                                        // ROM[24474]
@ R13                                        // ROM[24475]
M = D                                        // ROM[24476]
// ---------------------------
// call
@ Screen.drawLine:157                        // ROM[24477]
D = A                                        // ROM[24478]
@ R15                                        // ROM[24479]
M = D                                        // ROM[24480]
@ :push_argument                             // ROM[24481]
0; JMP                                       // ROM[24482]
( Screen.drawLine:157)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24483]
D = A                                        // ROM[24484]
@ R13                                        // ROM[24485]
M = D                                        // ROM[24486]
// ---------------------------
// call
@ Screen.drawLine:158                        // ROM[24487]
D = A                                        // ROM[24488]
@ R15                                        // ROM[24489]
M = D                                        // ROM[24490]
@ :pop_local                                 // ROM[24491]
0; JMP                                       // ROM[24492]
( Screen.drawLine:158)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24493]
D = A                                        // ROM[24494]
@ R13                                        // ROM[24495]
M = D                                        // ROM[24496]
// ---------------------------
// call
@ Screen.drawLine:159                        // ROM[24497]
D = A                                        // ROM[24498]
@ R15                                        // ROM[24499]
M = D                                        // ROM[24500]
@ :push_argument                             // ROM[24501]
0; JMP                                       // ROM[24502]
( Screen.drawLine:159)

// -------------------------------------
// POP: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[24503]
D = A                                        // ROM[24504]
@ R13                                        // ROM[24505]
M = D                                        // ROM[24506]
// ---------------------------
// call
@ Screen.drawLine:160                        // ROM[24507]
D = A                                        // ROM[24508]
@ R15                                        // ROM[24509]
M = D                                        // ROM[24510]
@ :pop_local                                 // ROM[24511]
0; JMP                                       // ROM[24512]
( Screen.drawLine:160)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24513]
D = A                                        // ROM[24514]
@ R13                                        // ROM[24515]
M = D                                        // ROM[24516]
// ---------------------------
// call
@ Screen.drawLine:161                        // ROM[24517]
D = A                                        // ROM[24518]
@ R15                                        // ROM[24519]
M = D                                        // ROM[24520]
@ :push_argument                             // ROM[24521]
0; JMP                                       // ROM[24522]
( Screen.drawLine:161)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24523]
D = A                                        // ROM[24524]
@ R13                                        // ROM[24525]
M = D                                        // ROM[24526]
// ---------------------------
// call
@ Screen.drawLine:162                        // ROM[24527]
D = A                                        // ROM[24528]
@ R15                                        // ROM[24529]
M = D                                        // ROM[24530]
@ :push_argument                             // ROM[24531]
0; JMP                                       // ROM[24532]
( Screen.drawLine:162)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:163                        // ROM[24533]
D = A                                        // ROM[24534]
@ R15                                        // ROM[24535]
M = D                                        // ROM[24536]
@ :gt                                        // ROM[24537]
0; JMP                                       // ROM[24538]
( Screen.drawLine:163)

// -------------------------------------
// POP: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[24539]
D = A                                        // ROM[24540]
@ R13                                        // ROM[24541]
M = D                                        // ROM[24542]
// ---------------------------
// call
@ Screen.drawLine:164                        // ROM[24543]
D = A                                        // ROM[24544]
@ R15                                        // ROM[24545]
M = D                                        // ROM[24546]
@ :pop_local                                 // ROM[24547]
0; JMP                                       // ROM[24548]
( Screen.drawLine:164)

// -------------------------------------
// GOTO: IF_END2
// -------------------------------------
@ Screen.drawLine$IF_END2                    // ROM[24549]
0; JMP                                       // ROM[24550]

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( Screen.drawLine$IF_FALSE2 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24551]
D = A                                        // ROM[24552]
@ R13                                        // ROM[24553]
M = D                                        // ROM[24554]
// ---------------------------
// call
@ Screen.drawLine:165                        // ROM[24555]
D = A                                        // ROM[24556]
@ R15                                        // ROM[24557]
M = D                                        // ROM[24558]
@ :push_argument                             // ROM[24559]
0; JMP                                       // ROM[24560]
( Screen.drawLine:165)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24561]
D = A                                        // ROM[24562]
@ R13                                        // ROM[24563]
M = D                                        // ROM[24564]
// ---------------------------
// call
@ Screen.drawLine:166                        // ROM[24565]
D = A                                        // ROM[24566]
@ R15                                        // ROM[24567]
M = D                                        // ROM[24568]
@ :pop_local                                 // ROM[24569]
0; JMP                                       // ROM[24570]
( Screen.drawLine:166)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24571]
D = A                                        // ROM[24572]
@ R13                                        // ROM[24573]
M = D                                        // ROM[24574]
// ---------------------------
// call
@ Screen.drawLine:167                        // ROM[24575]
D = A                                        // ROM[24576]
@ R15                                        // ROM[24577]
M = D                                        // ROM[24578]
@ :push_argument                             // ROM[24579]
0; JMP                                       // ROM[24580]
( Screen.drawLine:167)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24581]
D = A                                        // ROM[24582]
@ R13                                        // ROM[24583]
M = D                                        // ROM[24584]
// ---------------------------
// call
@ Screen.drawLine:168                        // ROM[24585]
D = A                                        // ROM[24586]
@ R15                                        // ROM[24587]
M = D                                        // ROM[24588]
@ :pop_local                                 // ROM[24589]
0; JMP                                       // ROM[24590]
( Screen.drawLine:168)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24591]
D = A                                        // ROM[24592]
@ R13                                        // ROM[24593]
M = D                                        // ROM[24594]
// ---------------------------
// call
@ Screen.drawLine:169                        // ROM[24595]
D = A                                        // ROM[24596]
@ R15                                        // ROM[24597]
M = D                                        // ROM[24598]
@ :push_argument                             // ROM[24599]
0; JMP                                       // ROM[24600]
( Screen.drawLine:169)

// -------------------------------------
// POP: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[24601]
D = A                                        // ROM[24602]
@ R13                                        // ROM[24603]
M = D                                        // ROM[24604]
// ---------------------------
// call
@ Screen.drawLine:170                        // ROM[24605]
D = A                                        // ROM[24606]
@ R15                                        // ROM[24607]
M = D                                        // ROM[24608]
@ :pop_local                                 // ROM[24609]
0; JMP                                       // ROM[24610]
( Screen.drawLine:170)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24611]
D = A                                        // ROM[24612]
@ R13                                        // ROM[24613]
M = D                                        // ROM[24614]
// ---------------------------
// call
@ Screen.drawLine:171                        // ROM[24615]
D = A                                        // ROM[24616]
@ R15                                        // ROM[24617]
M = D                                        // ROM[24618]
@ :push_argument                             // ROM[24619]
0; JMP                                       // ROM[24620]
( Screen.drawLine:171)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24621]
D = A                                        // ROM[24622]
@ R13                                        // ROM[24623]
M = D                                        // ROM[24624]
// ---------------------------
// call
@ Screen.drawLine:172                        // ROM[24625]
D = A                                        // ROM[24626]
@ R15                                        // ROM[24627]
M = D                                        // ROM[24628]
@ :push_argument                             // ROM[24629]
0; JMP                                       // ROM[24630]
( Screen.drawLine:172)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:173                        // ROM[24631]
D = A                                        // ROM[24632]
@ R15                                        // ROM[24633]
M = D                                        // ROM[24634]
@ :gt                                        // ROM[24635]
0; JMP                                       // ROM[24636]
( Screen.drawLine:173)

// -------------------------------------
// POP: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[24637]
D = A                                        // ROM[24638]
@ R13                                        // ROM[24639]
M = D                                        // ROM[24640]
// ---------------------------
// call
@ Screen.drawLine:174                        // ROM[24641]
D = A                                        // ROM[24642]
@ R15                                        // ROM[24643]
M = D                                        // ROM[24644]
@ :pop_local                                 // ROM[24645]
0; JMP                                       // ROM[24646]
( Screen.drawLine:174)

// -------------------------------------
// LABEL: IF_END2
// -------------------------------------
( Screen.drawLine$IF_END2 )

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[24647]
D = A                                        // ROM[24648]
// ---------------------------
// push D
@ SP                                         // ROM[24649]
AM = M+1                                     // ROM[24650]
A = A-1                                      // ROM[24651]
M = D                                        // ROM[24652]

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24653]
D = A                                        // ROM[24654]
@ R13                                        // ROM[24655]
M = D                                        // ROM[24656]
// ---------------------------
// call
@ Screen.drawLine:175                        // ROM[24657]
D = A                                        // ROM[24658]
@ R15                                        // ROM[24659]
M = D                                        // ROM[24660]
@ :push_local                                // ROM[24661]
0; JMP                                       // ROM[24662]
( Screen.drawLine:175)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[24663]
D = A                                        // ROM[24664]
@ R13                                        // ROM[24665]
M = D                                        // ROM[24666]
// ---------------------------
// Push RA
@ Screen.drawLine:176                        // ROM[24667]
D = A                                        // ROM[24668]
// ---------------------------
// push D
@ SP                                         // ROM[24669]
AM = M+1                                     // ROM[24670]
A = A-1                                      // ROM[24671]
M = D                                        // ROM[24672]
// ---------------------------
// call
@ Screen.drawLine:177                        // ROM[24673]
D = A                                        // ROM[24674]
@ R15                                        // ROM[24675]
M = D                                        // ROM[24676]
@ :call                                      // ROM[24677]
0; JMP                                       // ROM[24678]
( Screen.drawLine:177)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[24679]
0; JMP                                       // ROM[24680]
// ---------------------------
// ( RA )
( Screen.drawLine:176) 

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24681]
D = A                                        // ROM[24682]
@ R13                                        // ROM[24683]
M = D                                        // ROM[24684]
// ---------------------------
// call
@ Screen.drawLine:178                        // ROM[24685]
D = A                                        // ROM[24686]
@ R15                                        // ROM[24687]
M = D                                        // ROM[24688]
@ :push_local                                // ROM[24689]
0; JMP                                       // ROM[24690]
( Screen.drawLine:178)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:179                        // ROM[24691]
D = A                                        // ROM[24692]
@ R15                                        // ROM[24693]
M = D                                        // ROM[24694]
@ :sub                                       // ROM[24695]
0; JMP                                       // ROM[24696]
( Screen.drawLine:179)

// -------------------------------------
// POP: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[24697]
D = A                                        // ROM[24698]
@ R13                                        // ROM[24699]
M = D                                        // ROM[24700]
// ---------------------------
// call
@ Screen.drawLine:180                        // ROM[24701]
D = A                                        // ROM[24702]
@ R15                                        // ROM[24703]
M = D                                        // ROM[24704]
@ :pop_local                                 // ROM[24705]
0; JMP                                       // ROM[24706]
( Screen.drawLine:180)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[24707]
D = A                                        // ROM[24708]
// ---------------------------
// push D
@ SP                                         // ROM[24709]
AM = M+1                                     // ROM[24710]
A = A-1                                      // ROM[24711]
M = D                                        // ROM[24712]

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24713]
D = A                                        // ROM[24714]
@ R13                                        // ROM[24715]
M = D                                        // ROM[24716]
// ---------------------------
// call
@ Screen.drawLine:181                        // ROM[24717]
D = A                                        // ROM[24718]
@ R15                                        // ROM[24719]
M = D                                        // ROM[24720]
@ :push_local                                // ROM[24721]
0; JMP                                       // ROM[24722]
( Screen.drawLine:181)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[24723]
D = A                                        // ROM[24724]
@ R13                                        // ROM[24725]
M = D                                        // ROM[24726]
// ---------------------------
// Push RA
@ Screen.drawLine:182                        // ROM[24727]
D = A                                        // ROM[24728]
// ---------------------------
// push D
@ SP                                         // ROM[24729]
AM = M+1                                     // ROM[24730]
A = A-1                                      // ROM[24731]
M = D                                        // ROM[24732]
// ---------------------------
// call
@ Screen.drawLine:183                        // ROM[24733]
D = A                                        // ROM[24734]
@ R15                                        // ROM[24735]
M = D                                        // ROM[24736]
@ :call                                      // ROM[24737]
0; JMP                                       // ROM[24738]
( Screen.drawLine:183)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[24739]
0; JMP                                       // ROM[24740]
// ---------------------------
// ( RA )
( Screen.drawLine:182) 

// -------------------------------------
// POP: <local, 9>
// -------------------------------------
// ---------------------------
// R13 = index
@ 9                                          // ROM[24741]
D = A                                        // ROM[24742]
@ R13                                        // ROM[24743]
M = D                                        // ROM[24744]
// ---------------------------
// call
@ Screen.drawLine:184                        // ROM[24745]
D = A                                        // ROM[24746]
@ R15                                        // ROM[24747]
M = D                                        // ROM[24748]
@ :pop_local                                 // ROM[24749]
0; JMP                                       // ROM[24750]
( Screen.drawLine:184)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[24751]
D = A                                        // ROM[24752]
// ---------------------------
// push D
@ SP                                         // ROM[24753]
AM = M+1                                     // ROM[24754]
A = A-1                                      // ROM[24755]
M = D                                        // ROM[24756]

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[24757]
D = A                                        // ROM[24758]
@ R13                                        // ROM[24759]
M = D                                        // ROM[24760]
// ---------------------------
// call
@ Screen.drawLine:185                        // ROM[24761]
D = A                                        // ROM[24762]
@ R15                                        // ROM[24763]
M = D                                        // ROM[24764]
@ :push_local                                // ROM[24765]
0; JMP                                       // ROM[24766]
( Screen.drawLine:185)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[24767]
D = A                                        // ROM[24768]
@ R13                                        // ROM[24769]
M = D                                        // ROM[24770]
// ---------------------------
// call
@ Screen.drawLine:186                        // ROM[24771]
D = A                                        // ROM[24772]
@ R15                                        // ROM[24773]
M = D                                        // ROM[24774]
@ :push_local                                // ROM[24775]
0; JMP                                       // ROM[24776]
( Screen.drawLine:186)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:187                        // ROM[24777]
D = A                                        // ROM[24778]
@ R15                                        // ROM[24779]
M = D                                        // ROM[24780]
@ :sub                                       // ROM[24781]
0; JMP                                       // ROM[24782]
( Screen.drawLine:187)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[24783]
D = A                                        // ROM[24784]
@ R13                                        // ROM[24785]
M = D                                        // ROM[24786]
// ---------------------------
// Push RA
@ Screen.drawLine:188                        // ROM[24787]
D = A                                        // ROM[24788]
// ---------------------------
// push D
@ SP                                         // ROM[24789]
AM = M+1                                     // ROM[24790]
A = A-1                                      // ROM[24791]
M = D                                        // ROM[24792]
// ---------------------------
// call
@ Screen.drawLine:189                        // ROM[24793]
D = A                                        // ROM[24794]
@ R15                                        // ROM[24795]
M = D                                        // ROM[24796]
@ :call                                      // ROM[24797]
0; JMP                                       // ROM[24798]
( Screen.drawLine:189)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[24799]
0; JMP                                       // ROM[24800]
// ---------------------------
// ( RA )
( Screen.drawLine:188) 

// -------------------------------------
// POP: <local, 10>
// -------------------------------------
// ---------------------------
// R13 = index
@ 10                                         // ROM[24801]
D = A                                        // ROM[24802]
@ R13                                        // ROM[24803]
M = D                                        // ROM[24804]
// ---------------------------
// call
@ Screen.drawLine:190                        // ROM[24805]
D = A                                        // ROM[24806]
@ R15                                        // ROM[24807]
M = D                                        // ROM[24808]
@ :pop_local                                 // ROM[24809]
0; JMP                                       // ROM[24810]
( Screen.drawLine:190)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24811]
D = A                                        // ROM[24812]
@ R13                                        // ROM[24813]
M = D                                        // ROM[24814]
// ---------------------------
// call
@ Screen.drawLine:191                        // ROM[24815]
D = A                                        // ROM[24816]
@ R15                                        // ROM[24817]
M = D                                        // ROM[24818]
@ :push_local                                // ROM[24819]
0; JMP                                       // ROM[24820]
( Screen.drawLine:191)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[24821]
D = A                                        // ROM[24822]
@ R13                                        // ROM[24823]
M = D                                        // ROM[24824]
// ---------------------------
// call
@ Screen.drawLine:192                        // ROM[24825]
D = A                                        // ROM[24826]
@ R15                                        // ROM[24827]
M = D                                        // ROM[24828]
@ :push_local                                // ROM[24829]
0; JMP                                       // ROM[24830]
( Screen.drawLine:192)

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[24831]
D = A                                        // ROM[24832]
@ R13                                        // ROM[24833]
M = D                                        // ROM[24834]
// ---------------------------
// call
@ Screen.drawLine:193                        // ROM[24835]
D = A                                        // ROM[24836]
@ R15                                        // ROM[24837]
M = D                                        // ROM[24838]
@ :push_local                                // ROM[24839]
0; JMP                                       // ROM[24840]
( Screen.drawLine:193)

// -------------------------------------
// CALL: Screen.drawConditional(3 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 3                                          // ROM[24841]
D = A                                        // ROM[24842]
@ R13                                        // ROM[24843]
M = D                                        // ROM[24844]
// ---------------------------
// Push RA
@ Screen.drawLine:194                        // ROM[24845]
D = A                                        // ROM[24846]
// ---------------------------
// push D
@ SP                                         // ROM[24847]
AM = M+1                                     // ROM[24848]
A = A-1                                      // ROM[24849]
M = D                                        // ROM[24850]
// ---------------------------
// call
@ Screen.drawLine:195                        // ROM[24851]
D = A                                        // ROM[24852]
@ R15                                        // ROM[24853]
M = D                                        // ROM[24854]
@ :call                                      // ROM[24855]
0; JMP                                       // ROM[24856]
( Screen.drawLine:195)
// ---------------------------
// goto functionName
@ Screen.drawConditional                     // ROM[24857]
0; JMP                                       // ROM[24858]
// ---------------------------
// ( RA )
( Screen.drawLine:194) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[24859]
AM = M-1                                     // ROM[24860]
D = M                                        // ROM[24861]
// ---------------------------
@ 5                                          // ROM[24862]
M = D                                        // ROM[24863]

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Screen.drawLine$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[24864]
D = A                                        // ROM[24865]
@ R13                                        // ROM[24866]
M = D                                        // ROM[24867]
// ---------------------------
// call
@ Screen.drawLine:196                        // ROM[24868]
D = A                                        // ROM[24869]
@ R15                                        // ROM[24870]
M = D                                        // ROM[24871]
@ :push_local                                // ROM[24872]
0; JMP                                       // ROM[24873]
( Screen.drawLine:196)

// -------------------------------------
// PUSH: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[24874]
D = A                                        // ROM[24875]
@ R13                                        // ROM[24876]
M = D                                        // ROM[24877]
// ---------------------------
// call
@ Screen.drawLine:197                        // ROM[24878]
D = A                                        // ROM[24879]
@ R15                                        // ROM[24880]
M = D                                        // ROM[24881]
@ :push_local                                // ROM[24882]
0; JMP                                       // ROM[24883]
( Screen.drawLine:197)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:198                        // ROM[24884]
D = A                                        // ROM[24885]
@ R15                                        // ROM[24886]
M = D                                        // ROM[24887]
@ :lt                                        // ROM[24888]
0; JMP                                       // ROM[24889]
( Screen.drawLine:198)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[24890]
A = M-1                                      // ROM[24891]
M = !M                                       // ROM[24892]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[24893]
AM = M-1                                     // ROM[24894]
D = M                                        // ROM[24895]
// ---------------------------
@ Screen.drawLine$WHILE_END0                 // ROM[24896]
D; JNE                                       // ROM[24897]

// -------------------------------------
// PUSH: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[24898]
D = A                                        // ROM[24899]
@ R13                                        // ROM[24900]
M = D                                        // ROM[24901]
// ---------------------------
// call
@ Screen.drawLine:199                        // ROM[24902]
D = A                                        // ROM[24903]
@ R15                                        // ROM[24904]
M = D                                        // ROM[24905]
@ :push_local                                // ROM[24906]
0; JMP                                       // ROM[24907]
( Screen.drawLine:199)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[24908]
D = A                                        // ROM[24909]
// ---------------------------
// push D
@ SP                                         // ROM[24910]
AM = M+1                                     // ROM[24911]
A = A-1                                      // ROM[24912]
M = D                                        // ROM[24913]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:200                        // ROM[24914]
D = A                                        // ROM[24915]
@ R15                                        // ROM[24916]
M = D                                        // ROM[24917]
@ :lt                                        // ROM[24918]
0; JMP                                       // ROM[24919]
( Screen.drawLine:200)

// -------------------------------------
// IF-GOTO: IF_TRUE3
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[24920]
AM = M-1                                     // ROM[24921]
D = M                                        // ROM[24922]
// ---------------------------
@ Screen.drawLine$IF_TRUE3                   // ROM[24923]
D; JNE                                       // ROM[24924]

// -------------------------------------
// GOTO: IF_FALSE3
// -------------------------------------
@ Screen.drawLine$IF_FALSE3                  // ROM[24925]
0; JMP                                       // ROM[24926]

// -------------------------------------
// LABEL: IF_TRUE3
// -------------------------------------
( Screen.drawLine$IF_TRUE3 )

// -------------------------------------
// PUSH: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[24927]
D = A                                        // ROM[24928]
@ R13                                        // ROM[24929]
M = D                                        // ROM[24930]
// ---------------------------
// call
@ Screen.drawLine:201                        // ROM[24931]
D = A                                        // ROM[24932]
@ R15                                        // ROM[24933]
M = D                                        // ROM[24934]
@ :push_local                                // ROM[24935]
0; JMP                                       // ROM[24936]
( Screen.drawLine:201)

// -------------------------------------
// PUSH: <local, 9>
// -------------------------------------
// ---------------------------
// R13 = index
@ 9                                          // ROM[24937]
D = A                                        // ROM[24938]
@ R13                                        // ROM[24939]
M = D                                        // ROM[24940]
// ---------------------------
// call
@ Screen.drawLine:202                        // ROM[24941]
D = A                                        // ROM[24942]
@ R15                                        // ROM[24943]
M = D                                        // ROM[24944]
@ :push_local                                // ROM[24945]
0; JMP                                       // ROM[24946]
( Screen.drawLine:202)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:203                        // ROM[24947]
D = A                                        // ROM[24948]
@ R15                                        // ROM[24949]
M = D                                        // ROM[24950]
@ :add                                       // ROM[24951]
0; JMP                                       // ROM[24952]
( Screen.drawLine:203)

// -------------------------------------
// POP: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[24953]
D = A                                        // ROM[24954]
@ R13                                        // ROM[24955]
M = D                                        // ROM[24956]
// ---------------------------
// call
@ Screen.drawLine:204                        // ROM[24957]
D = A                                        // ROM[24958]
@ R15                                        // ROM[24959]
M = D                                        // ROM[24960]
@ :pop_local                                 // ROM[24961]
0; JMP                                       // ROM[24962]
( Screen.drawLine:204)

// -------------------------------------
// GOTO: IF_END3
// -------------------------------------
@ Screen.drawLine$IF_END3                    // ROM[24963]
0; JMP                                       // ROM[24964]

// -------------------------------------
// LABEL: IF_FALSE3
// -------------------------------------
( Screen.drawLine$IF_FALSE3 )

// -------------------------------------
// PUSH: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[24965]
D = A                                        // ROM[24966]
@ R13                                        // ROM[24967]
M = D                                        // ROM[24968]
// ---------------------------
// call
@ Screen.drawLine:205                        // ROM[24969]
D = A                                        // ROM[24970]
@ R15                                        // ROM[24971]
M = D                                        // ROM[24972]
@ :push_local                                // ROM[24973]
0; JMP                                       // ROM[24974]
( Screen.drawLine:205)

// -------------------------------------
// PUSH: <local, 10>
// -------------------------------------
// ---------------------------
// R13 = index
@ 10                                         // ROM[24975]
D = A                                        // ROM[24976]
@ R13                                        // ROM[24977]
M = D                                        // ROM[24978]
// ---------------------------
// call
@ Screen.drawLine:206                        // ROM[24979]
D = A                                        // ROM[24980]
@ R15                                        // ROM[24981]
M = D                                        // ROM[24982]
@ :push_local                                // ROM[24983]
0; JMP                                       // ROM[24984]
( Screen.drawLine:206)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:207                        // ROM[24985]
D = A                                        // ROM[24986]
@ R15                                        // ROM[24987]
M = D                                        // ROM[24988]
@ :add                                       // ROM[24989]
0; JMP                                       // ROM[24990]
( Screen.drawLine:207)

// -------------------------------------
// POP: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[24991]
D = A                                        // ROM[24992]
@ R13                                        // ROM[24993]
M = D                                        // ROM[24994]
// ---------------------------
// call
@ Screen.drawLine:208                        // ROM[24995]
D = A                                        // ROM[24996]
@ R15                                        // ROM[24997]
M = D                                        // ROM[24998]
@ :pop_local                                 // ROM[24999]
0; JMP                                       // ROM[25000]
( Screen.drawLine:208)

// -------------------------------------
// PUSH: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[25001]
D = A                                        // ROM[25002]
@ R13                                        // ROM[25003]
M = D                                        // ROM[25004]
// ---------------------------
// call
@ Screen.drawLine:209                        // ROM[25005]
D = A                                        // ROM[25006]
@ R15                                        // ROM[25007]
M = D                                        // ROM[25008]
@ :push_local                                // ROM[25009]
0; JMP                                       // ROM[25010]
( Screen.drawLine:209)

// -------------------------------------
// IF-GOTO: IF_TRUE4
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[25011]
AM = M-1                                     // ROM[25012]
D = M                                        // ROM[25013]
// ---------------------------
@ Screen.drawLine$IF_TRUE4                   // ROM[25014]
D; JNE                                       // ROM[25015]

// -------------------------------------
// GOTO: IF_FALSE4
// -------------------------------------
@ Screen.drawLine$IF_FALSE4                  // ROM[25016]
0; JMP                                       // ROM[25017]

// -------------------------------------
// LABEL: IF_TRUE4
// -------------------------------------
( Screen.drawLine$IF_TRUE4 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25018]
D = A                                        // ROM[25019]
@ R13                                        // ROM[25020]
M = D                                        // ROM[25021]
// ---------------------------
// call
@ Screen.drawLine:210                        // ROM[25022]
D = A                                        // ROM[25023]
@ R15                                        // ROM[25024]
M = D                                        // ROM[25025]
@ :push_local                                // ROM[25026]
0; JMP                                       // ROM[25027]
( Screen.drawLine:210)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[25028]
D = A                                        // ROM[25029]
// ---------------------------
// push D
@ SP                                         // ROM[25030]
AM = M+1                                     // ROM[25031]
A = A-1                                      // ROM[25032]
M = D                                        // ROM[25033]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:211                        // ROM[25034]
D = A                                        // ROM[25035]
@ R15                                        // ROM[25036]
M = D                                        // ROM[25037]
@ :sub                                       // ROM[25038]
0; JMP                                       // ROM[25039]
( Screen.drawLine:211)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25040]
D = A                                        // ROM[25041]
@ R13                                        // ROM[25042]
M = D                                        // ROM[25043]
// ---------------------------
// call
@ Screen.drawLine:212                        // ROM[25044]
D = A                                        // ROM[25045]
@ R15                                        // ROM[25046]
M = D                                        // ROM[25047]
@ :pop_local                                 // ROM[25048]
0; JMP                                       // ROM[25049]
( Screen.drawLine:212)

// -------------------------------------
// GOTO: IF_END4
// -------------------------------------
@ Screen.drawLine$IF_END4                    // ROM[25050]
0; JMP                                       // ROM[25051]

// -------------------------------------
// LABEL: IF_FALSE4
// -------------------------------------
( Screen.drawLine$IF_FALSE4 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25052]
D = A                                        // ROM[25053]
@ R13                                        // ROM[25054]
M = D                                        // ROM[25055]
// ---------------------------
// call
@ Screen.drawLine:213                        // ROM[25056]
D = A                                        // ROM[25057]
@ R15                                        // ROM[25058]
M = D                                        // ROM[25059]
@ :push_local                                // ROM[25060]
0; JMP                                       // ROM[25061]
( Screen.drawLine:213)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[25062]
D = A                                        // ROM[25063]
// ---------------------------
// push D
@ SP                                         // ROM[25064]
AM = M+1                                     // ROM[25065]
A = A-1                                      // ROM[25066]
M = D                                        // ROM[25067]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:214                        // ROM[25068]
D = A                                        // ROM[25069]
@ R15                                        // ROM[25070]
M = D                                        // ROM[25071]
@ :add                                       // ROM[25072]
0; JMP                                       // ROM[25073]
( Screen.drawLine:214)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25074]
D = A                                        // ROM[25075]
@ R13                                        // ROM[25076]
M = D                                        // ROM[25077]
// ---------------------------
// call
@ Screen.drawLine:215                        // ROM[25078]
D = A                                        // ROM[25079]
@ R15                                        // ROM[25080]
M = D                                        // ROM[25081]
@ :pop_local                                 // ROM[25082]
0; JMP                                       // ROM[25083]
( Screen.drawLine:215)

// -------------------------------------
// LABEL: IF_END4
// -------------------------------------
( Screen.drawLine$IF_END4 )

// -------------------------------------
// LABEL: IF_END3
// -------------------------------------
( Screen.drawLine$IF_END3 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[25084]
D = A                                        // ROM[25085]
@ R13                                        // ROM[25086]
M = D                                        // ROM[25087]
// ---------------------------
// call
@ Screen.drawLine:216                        // ROM[25088]
D = A                                        // ROM[25089]
@ R15                                        // ROM[25090]
M = D                                        // ROM[25091]
@ :push_local                                // ROM[25092]
0; JMP                                       // ROM[25093]
( Screen.drawLine:216)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[25094]
D = A                                        // ROM[25095]
// ---------------------------
// push D
@ SP                                         // ROM[25096]
AM = M+1                                     // ROM[25097]
A = A-1                                      // ROM[25098]
M = D                                        // ROM[25099]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:217                        // ROM[25100]
D = A                                        // ROM[25101]
@ R15                                        // ROM[25102]
M = D                                        // ROM[25103]
@ :add                                       // ROM[25104]
0; JMP                                       // ROM[25105]
( Screen.drawLine:217)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[25106]
D = A                                        // ROM[25107]
@ R13                                        // ROM[25108]
M = D                                        // ROM[25109]
// ---------------------------
// call
@ Screen.drawLine:218                        // ROM[25110]
D = A                                        // ROM[25111]
@ R15                                        // ROM[25112]
M = D                                        // ROM[25113]
@ :pop_local                                 // ROM[25114]
0; JMP                                       // ROM[25115]
( Screen.drawLine:218)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[25116]
D = A                                        // ROM[25117]
@ R13                                        // ROM[25118]
M = D                                        // ROM[25119]
// ---------------------------
// call
@ Screen.drawLine:219                        // ROM[25120]
D = A                                        // ROM[25121]
@ R15                                        // ROM[25122]
M = D                                        // ROM[25123]
@ :push_local                                // ROM[25124]
0; JMP                                       // ROM[25125]
( Screen.drawLine:219)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25126]
D = A                                        // ROM[25127]
@ R13                                        // ROM[25128]
M = D                                        // ROM[25129]
// ---------------------------
// call
@ Screen.drawLine:220                        // ROM[25130]
D = A                                        // ROM[25131]
@ R15                                        // ROM[25132]
M = D                                        // ROM[25133]
@ :push_local                                // ROM[25134]
0; JMP                                       // ROM[25135]
( Screen.drawLine:220)

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[25136]
D = A                                        // ROM[25137]
@ R13                                        // ROM[25138]
M = D                                        // ROM[25139]
// ---------------------------
// call
@ Screen.drawLine:221                        // ROM[25140]
D = A                                        // ROM[25141]
@ R15                                        // ROM[25142]
M = D                                        // ROM[25143]
@ :push_local                                // ROM[25144]
0; JMP                                       // ROM[25145]
( Screen.drawLine:221)

// -------------------------------------
// CALL: Screen.drawConditional(3 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 3                                          // ROM[25146]
D = A                                        // ROM[25147]
@ R13                                        // ROM[25148]
M = D                                        // ROM[25149]
// ---------------------------
// Push RA
@ Screen.drawLine:222                        // ROM[25150]
D = A                                        // ROM[25151]
// ---------------------------
// push D
@ SP                                         // ROM[25152]
AM = M+1                                     // ROM[25153]
A = A-1                                      // ROM[25154]
M = D                                        // ROM[25155]
// ---------------------------
// call
@ Screen.drawLine:223                        // ROM[25156]
D = A                                        // ROM[25157]
@ R15                                        // ROM[25158]
M = D                                        // ROM[25159]
@ :call                                      // ROM[25160]
0; JMP                                       // ROM[25161]
( Screen.drawLine:223)
// ---------------------------
// goto functionName
@ Screen.drawConditional                     // ROM[25162]
0; JMP                                       // ROM[25163]
// ---------------------------
// ( RA )
( Screen.drawLine:222) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[25164]
AM = M-1                                     // ROM[25165]
D = M                                        // ROM[25166]
// ---------------------------
@ 5                                          // ROM[25167]
M = D                                        // ROM[25168]

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Screen.drawLine$WHILE_EXP0                 // ROM[25169]
0; JMP                                       // ROM[25170]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Screen.drawLine$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[25171]
D = A                                        // ROM[25172]
// ---------------------------
// push D
@ SP                                         // ROM[25173]
AM = M+1                                     // ROM[25174]
A = A-1                                      // ROM[25175]
M = D                                        // ROM[25176]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.drawLine:224                        // ROM[25177]
D = A                                        // ROM[25178]
@ R15                                        // ROM[25179]
M = D                                        // ROM[25180]
@ :return                                    // ROM[25181]
0; JMP                                       // ROM[25182]
( Screen.drawLine:224)

// =========================================================
// FUNCTION: Screen.drawRectangle(9 locals)
// =========================================================

( Screen.drawRectangle )
// ---------------------------
// clear local segment
D = 0                                        // ROM[25183]
// ---------------------------
// push D
@ SP                                         // ROM[25184]
AM = M+1                                     // ROM[25185]
A = A-1                                      // ROM[25186]
M = D                                        // ROM[25187]
// ---------------------------
// push D
@ SP                                         // ROM[25188]
AM = M+1                                     // ROM[25189]
A = A-1                                      // ROM[25190]
M = D                                        // ROM[25191]
// ---------------------------
// push D
@ SP                                         // ROM[25192]
AM = M+1                                     // ROM[25193]
A = A-1                                      // ROM[25194]
M = D                                        // ROM[25195]
// ---------------------------
// push D
@ SP                                         // ROM[25196]
AM = M+1                                     // ROM[25197]
A = A-1                                      // ROM[25198]
M = D                                        // ROM[25199]
// ---------------------------
// push D
@ SP                                         // ROM[25200]
AM = M+1                                     // ROM[25201]
A = A-1                                      // ROM[25202]
M = D                                        // ROM[25203]
// ---------------------------
// push D
@ SP                                         // ROM[25204]
AM = M+1                                     // ROM[25205]
A = A-1                                      // ROM[25206]
M = D                                        // ROM[25207]
// ---------------------------
// push D
@ SP                                         // ROM[25208]
AM = M+1                                     // ROM[25209]
A = A-1                                      // ROM[25210]
M = D                                        // ROM[25211]
// ---------------------------
// push D
@ SP                                         // ROM[25212]
AM = M+1                                     // ROM[25213]
A = A-1                                      // ROM[25214]
M = D                                        // ROM[25215]
// ---------------------------
// push D
@ SP                                         // ROM[25216]
AM = M+1                                     // ROM[25217]
A = A-1                                      // ROM[25218]
M = D                                        // ROM[25219]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25220]
D = A                                        // ROM[25221]
@ R13                                        // ROM[25222]
M = D                                        // ROM[25223]
// ---------------------------
// call
@ Screen.drawRectangle:225                   // ROM[25224]
D = A                                        // ROM[25225]
@ R15                                        // ROM[25226]
M = D                                        // ROM[25227]
@ :push_argument                             // ROM[25228]
0; JMP                                       // ROM[25229]
( Screen.drawRectangle:225)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[25230]
D = A                                        // ROM[25231]
@ R13                                        // ROM[25232]
M = D                                        // ROM[25233]
// ---------------------------
// call
@ Screen.drawRectangle:226                   // ROM[25234]
D = A                                        // ROM[25235]
@ R15                                        // ROM[25236]
M = D                                        // ROM[25237]
@ :push_argument                             // ROM[25238]
0; JMP                                       // ROM[25239]
( Screen.drawRectangle:226)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:227                   // ROM[25240]
D = A                                        // ROM[25241]
@ R15                                        // ROM[25242]
M = D                                        // ROM[25243]
@ :gt                                        // ROM[25244]
0; JMP                                       // ROM[25245]
( Screen.drawRectangle:227)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[25246]
D = A                                        // ROM[25247]
@ R13                                        // ROM[25248]
M = D                                        // ROM[25249]
// ---------------------------
// call
@ Screen.drawRectangle:228                   // ROM[25250]
D = A                                        // ROM[25251]
@ R15                                        // ROM[25252]
M = D                                        // ROM[25253]
@ :push_argument                             // ROM[25254]
0; JMP                                       // ROM[25255]
( Screen.drawRectangle:228)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[25256]
D = A                                        // ROM[25257]
@ R13                                        // ROM[25258]
M = D                                        // ROM[25259]
// ---------------------------
// call
@ Screen.drawRectangle:229                   // ROM[25260]
D = A                                        // ROM[25261]
@ R15                                        // ROM[25262]
M = D                                        // ROM[25263]
@ :push_argument                             // ROM[25264]
0; JMP                                       // ROM[25265]
( Screen.drawRectangle:229)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:230                   // ROM[25266]
D = A                                        // ROM[25267]
@ R15                                        // ROM[25268]
M = D                                        // ROM[25269]
@ :gt                                        // ROM[25270]
0; JMP                                       // ROM[25271]
( Screen.drawRectangle:230)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:231                   // ROM[25272]
D = A                                        // ROM[25273]
@ R15                                        // ROM[25274]
M = D                                        // ROM[25275]
@ :or                                        // ROM[25276]
0; JMP                                       // ROM[25277]
( Screen.drawRectangle:231)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25278]
D = A                                        // ROM[25279]
@ R13                                        // ROM[25280]
M = D                                        // ROM[25281]
// ---------------------------
// call
@ Screen.drawRectangle:232                   // ROM[25282]
D = A                                        // ROM[25283]
@ R15                                        // ROM[25284]
M = D                                        // ROM[25285]
@ :push_argument                             // ROM[25286]
0; JMP                                       // ROM[25287]
( Screen.drawRectangle:232)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[25288]
D = A                                        // ROM[25289]
// ---------------------------
// push D
@ SP                                         // ROM[25290]
AM = M+1                                     // ROM[25291]
A = A-1                                      // ROM[25292]
M = D                                        // ROM[25293]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:233                   // ROM[25294]
D = A                                        // ROM[25295]
@ R15                                        // ROM[25296]
M = D                                        // ROM[25297]
@ :lt                                        // ROM[25298]
0; JMP                                       // ROM[25299]
( Screen.drawRectangle:233)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:234                   // ROM[25300]
D = A                                        // ROM[25301]
@ R15                                        // ROM[25302]
M = D                                        // ROM[25303]
@ :or                                        // ROM[25304]
0; JMP                                       // ROM[25305]
( Screen.drawRectangle:234)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[25306]
D = A                                        // ROM[25307]
@ R13                                        // ROM[25308]
M = D                                        // ROM[25309]
// ---------------------------
// call
@ Screen.drawRectangle:235                   // ROM[25310]
D = A                                        // ROM[25311]
@ R15                                        // ROM[25312]
M = D                                        // ROM[25313]
@ :push_argument                             // ROM[25314]
0; JMP                                       // ROM[25315]
( Screen.drawRectangle:235)

// -------------------------------------
// PUSH: <constant, 511>
// -------------------------------------
@ 511                                        // ROM[25316]
D = A                                        // ROM[25317]
// ---------------------------
// push D
@ SP                                         // ROM[25318]
AM = M+1                                     // ROM[25319]
A = A-1                                      // ROM[25320]
M = D                                        // ROM[25321]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:236                   // ROM[25322]
D = A                                        // ROM[25323]
@ R15                                        // ROM[25324]
M = D                                        // ROM[25325]
@ :gt                                        // ROM[25326]
0; JMP                                       // ROM[25327]
( Screen.drawRectangle:236)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:237                   // ROM[25328]
D = A                                        // ROM[25329]
@ R15                                        // ROM[25330]
M = D                                        // ROM[25331]
@ :or                                        // ROM[25332]
0; JMP                                       // ROM[25333]
( Screen.drawRectangle:237)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[25334]
D = A                                        // ROM[25335]
@ R13                                        // ROM[25336]
M = D                                        // ROM[25337]
// ---------------------------
// call
@ Screen.drawRectangle:238                   // ROM[25338]
D = A                                        // ROM[25339]
@ R15                                        // ROM[25340]
M = D                                        // ROM[25341]
@ :push_argument                             // ROM[25342]
0; JMP                                       // ROM[25343]
( Screen.drawRectangle:238)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[25344]
D = A                                        // ROM[25345]
// ---------------------------
// push D
@ SP                                         // ROM[25346]
AM = M+1                                     // ROM[25347]
A = A-1                                      // ROM[25348]
M = D                                        // ROM[25349]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:239                   // ROM[25350]
D = A                                        // ROM[25351]
@ R15                                        // ROM[25352]
M = D                                        // ROM[25353]
@ :lt                                        // ROM[25354]
0; JMP                                       // ROM[25355]
( Screen.drawRectangle:239)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:240                   // ROM[25356]
D = A                                        // ROM[25357]
@ R15                                        // ROM[25358]
M = D                                        // ROM[25359]
@ :or                                        // ROM[25360]
0; JMP                                       // ROM[25361]
( Screen.drawRectangle:240)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[25362]
D = A                                        // ROM[25363]
@ R13                                        // ROM[25364]
M = D                                        // ROM[25365]
// ---------------------------
// call
@ Screen.drawRectangle:241                   // ROM[25366]
D = A                                        // ROM[25367]
@ R15                                        // ROM[25368]
M = D                                        // ROM[25369]
@ :push_argument                             // ROM[25370]
0; JMP                                       // ROM[25371]
( Screen.drawRectangle:241)

// -------------------------------------
// PUSH: <constant, 255>
// -------------------------------------
@ 255                                        // ROM[25372]
D = A                                        // ROM[25373]
// ---------------------------
// push D
@ SP                                         // ROM[25374]
AM = M+1                                     // ROM[25375]
A = A-1                                      // ROM[25376]
M = D                                        // ROM[25377]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:242                   // ROM[25378]
D = A                                        // ROM[25379]
@ R15                                        // ROM[25380]
M = D                                        // ROM[25381]
@ :gt                                        // ROM[25382]
0; JMP                                       // ROM[25383]
( Screen.drawRectangle:242)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:243                   // ROM[25384]
D = A                                        // ROM[25385]
@ R15                                        // ROM[25386]
M = D                                        // ROM[25387]
@ :or                                        // ROM[25388]
0; JMP                                       // ROM[25389]
( Screen.drawRectangle:243)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[25390]
AM = M-1                                     // ROM[25391]
D = M                                        // ROM[25392]
// ---------------------------
@ Screen.drawRectangle$IF_TRUE0              // ROM[25393]
D; JNE                                       // ROM[25394]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Screen.drawRectangle$IF_FALSE0             // ROM[25395]
0; JMP                                       // ROM[25396]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Screen.drawRectangle$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 9>
// -------------------------------------
@ 9                                          // ROM[25397]
D = A                                        // ROM[25398]
// ---------------------------
// push D
@ SP                                         // ROM[25399]
AM = M+1                                     // ROM[25400]
A = A-1                                      // ROM[25401]
M = D                                        // ROM[25402]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[25403]
D = A                                        // ROM[25404]
@ R13                                        // ROM[25405]
M = D                                        // ROM[25406]
// ---------------------------
// Push RA
@ Screen.drawRectangle:244                   // ROM[25407]
D = A                                        // ROM[25408]
// ---------------------------
// push D
@ SP                                         // ROM[25409]
AM = M+1                                     // ROM[25410]
A = A-1                                      // ROM[25411]
M = D                                        // ROM[25412]
// ---------------------------
// call
@ Screen.drawRectangle:245                   // ROM[25413]
D = A                                        // ROM[25414]
@ R15                                        // ROM[25415]
M = D                                        // ROM[25416]
@ :call                                      // ROM[25417]
0; JMP                                       // ROM[25418]
( Screen.drawRectangle:245)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[25419]
0; JMP                                       // ROM[25420]
// ---------------------------
// ( RA )
( Screen.drawRectangle:244) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[25421]
AM = M-1                                     // ROM[25422]
D = M                                        // ROM[25423]
// ---------------------------
@ 5                                          // ROM[25424]
M = D                                        // ROM[25425]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Screen.drawRectangle$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25426]
D = A                                        // ROM[25427]
@ R13                                        // ROM[25428]
M = D                                        // ROM[25429]
// ---------------------------
// call
@ Screen.drawRectangle:246                   // ROM[25430]
D = A                                        // ROM[25431]
@ R15                                        // ROM[25432]
M = D                                        // ROM[25433]
@ :push_argument                             // ROM[25434]
0; JMP                                       // ROM[25435]
( Screen.drawRectangle:246)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[25436]
D = A                                        // ROM[25437]
// ---------------------------
// push D
@ SP                                         // ROM[25438]
AM = M+1                                     // ROM[25439]
A = A-1                                      // ROM[25440]
M = D                                        // ROM[25441]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[25442]
D = A                                        // ROM[25443]
@ R13                                        // ROM[25444]
M = D                                        // ROM[25445]
// ---------------------------
// Push RA
@ Screen.drawRectangle:247                   // ROM[25446]
D = A                                        // ROM[25447]
// ---------------------------
// push D
@ SP                                         // ROM[25448]
AM = M+1                                     // ROM[25449]
A = A-1                                      // ROM[25450]
M = D                                        // ROM[25451]
// ---------------------------
// call
@ Screen.drawRectangle:248                   // ROM[25452]
D = A                                        // ROM[25453]
@ R15                                        // ROM[25454]
M = D                                        // ROM[25455]
@ :call                                      // ROM[25456]
0; JMP                                       // ROM[25457]
( Screen.drawRectangle:248)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[25458]
0; JMP                                       // ROM[25459]
// ---------------------------
// ( RA )
( Screen.drawRectangle:247) 

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[25460]
D = A                                        // ROM[25461]
@ R13                                        // ROM[25462]
M = D                                        // ROM[25463]
// ---------------------------
// call
@ Screen.drawRectangle:249                   // ROM[25464]
D = A                                        // ROM[25465]
@ R15                                        // ROM[25466]
M = D                                        // ROM[25467]
@ :pop_local                                 // ROM[25468]
0; JMP                                       // ROM[25469]
( Screen.drawRectangle:249)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25470]
D = A                                        // ROM[25471]
@ R13                                        // ROM[25472]
M = D                                        // ROM[25473]
// ---------------------------
// call
@ Screen.drawRectangle:250                   // ROM[25474]
D = A                                        // ROM[25475]
@ R15                                        // ROM[25476]
M = D                                        // ROM[25477]
@ :push_argument                             // ROM[25478]
0; JMP                                       // ROM[25479]
( Screen.drawRectangle:250)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[25480]
D = A                                        // ROM[25481]
@ R13                                        // ROM[25482]
M = D                                        // ROM[25483]
// ---------------------------
// call
@ Screen.drawRectangle:251                   // ROM[25484]
D = A                                        // ROM[25485]
@ R15                                        // ROM[25486]
M = D                                        // ROM[25487]
@ :push_local                                // ROM[25488]
0; JMP                                       // ROM[25489]
( Screen.drawRectangle:251)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[25490]
D = A                                        // ROM[25491]
// ---------------------------
// push D
@ SP                                         // ROM[25492]
AM = M+1                                     // ROM[25493]
A = A-1                                      // ROM[25494]
M = D                                        // ROM[25495]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[25496]
D = A                                        // ROM[25497]
@ R13                                        // ROM[25498]
M = D                                        // ROM[25499]
// ---------------------------
// Push RA
@ Screen.drawRectangle:252                   // ROM[25500]
D = A                                        // ROM[25501]
// ---------------------------
// push D
@ SP                                         // ROM[25502]
AM = M+1                                     // ROM[25503]
A = A-1                                      // ROM[25504]
M = D                                        // ROM[25505]
// ---------------------------
// call
@ Screen.drawRectangle:253                   // ROM[25506]
D = A                                        // ROM[25507]
@ R15                                        // ROM[25508]
M = D                                        // ROM[25509]
@ :call                                      // ROM[25510]
0; JMP                                       // ROM[25511]
( Screen.drawRectangle:253)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[25512]
0; JMP                                       // ROM[25513]
// ---------------------------
// ( RA )
( Screen.drawRectangle:252) 

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:254                   // ROM[25514]
D = A                                        // ROM[25515]
@ R15                                        // ROM[25516]
M = D                                        // ROM[25517]
@ :sub                                       // ROM[25518]
0; JMP                                       // ROM[25519]
( Screen.drawRectangle:254)

// -------------------------------------
// POP: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[25520]
D = A                                        // ROM[25521]
@ R13                                        // ROM[25522]
M = D                                        // ROM[25523]
// ---------------------------
// call
@ Screen.drawRectangle:255                   // ROM[25524]
D = A                                        // ROM[25525]
@ R15                                        // ROM[25526]
M = D                                        // ROM[25527]
@ :pop_local                                 // ROM[25528]
0; JMP                                       // ROM[25529]
( Screen.drawRectangle:255)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[25530]
D = A                                        // ROM[25531]
@ R13                                        // ROM[25532]
M = D                                        // ROM[25533]
// ---------------------------
// call
@ Screen.drawRectangle:256                   // ROM[25534]
D = A                                        // ROM[25535]
@ R15                                        // ROM[25536]
M = D                                        // ROM[25537]
@ :push_argument                             // ROM[25538]
0; JMP                                       // ROM[25539]
( Screen.drawRectangle:256)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[25540]
D = A                                        // ROM[25541]
// ---------------------------
// push D
@ SP                                         // ROM[25542]
AM = M+1                                     // ROM[25543]
A = A-1                                      // ROM[25544]
M = D                                        // ROM[25545]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[25546]
D = A                                        // ROM[25547]
@ R13                                        // ROM[25548]
M = D                                        // ROM[25549]
// ---------------------------
// Push RA
@ Screen.drawRectangle:257                   // ROM[25550]
D = A                                        // ROM[25551]
// ---------------------------
// push D
@ SP                                         // ROM[25552]
AM = M+1                                     // ROM[25553]
A = A-1                                      // ROM[25554]
M = D                                        // ROM[25555]
// ---------------------------
// call
@ Screen.drawRectangle:258                   // ROM[25556]
D = A                                        // ROM[25557]
@ R15                                        // ROM[25558]
M = D                                        // ROM[25559]
@ :call                                      // ROM[25560]
0; JMP                                       // ROM[25561]
( Screen.drawRectangle:258)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[25562]
0; JMP                                       // ROM[25563]
// ---------------------------
// ( RA )
( Screen.drawRectangle:257) 

// -------------------------------------
// POP: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[25564]
D = A                                        // ROM[25565]
@ R13                                        // ROM[25566]
M = D                                        // ROM[25567]
// ---------------------------
// call
@ Screen.drawRectangle:259                   // ROM[25568]
D = A                                        // ROM[25569]
@ R15                                        // ROM[25570]
M = D                                        // ROM[25571]
@ :pop_local                                 // ROM[25572]
0; JMP                                       // ROM[25573]
( Screen.drawRectangle:259)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[25574]
D = A                                        // ROM[25575]
@ R13                                        // ROM[25576]
M = D                                        // ROM[25577]
// ---------------------------
// call
@ Screen.drawRectangle:260                   // ROM[25578]
D = A                                        // ROM[25579]
@ R15                                        // ROM[25580]
M = D                                        // ROM[25581]
@ :push_argument                             // ROM[25582]
0; JMP                                       // ROM[25583]
( Screen.drawRectangle:260)

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[25584]
D = A                                        // ROM[25585]
@ R13                                        // ROM[25586]
M = D                                        // ROM[25587]
// ---------------------------
// call
@ Screen.drawRectangle:261                   // ROM[25588]
D = A                                        // ROM[25589]
@ R15                                        // ROM[25590]
M = D                                        // ROM[25591]
@ :push_local                                // ROM[25592]
0; JMP                                       // ROM[25593]
( Screen.drawRectangle:261)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[25594]
D = A                                        // ROM[25595]
// ---------------------------
// push D
@ SP                                         // ROM[25596]
AM = M+1                                     // ROM[25597]
A = A-1                                      // ROM[25598]
M = D                                        // ROM[25599]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[25600]
D = A                                        // ROM[25601]
@ R13                                        // ROM[25602]
M = D                                        // ROM[25603]
// ---------------------------
// Push RA
@ Screen.drawRectangle:262                   // ROM[25604]
D = A                                        // ROM[25605]
// ---------------------------
// push D
@ SP                                         // ROM[25606]
AM = M+1                                     // ROM[25607]
A = A-1                                      // ROM[25608]
M = D                                        // ROM[25609]
// ---------------------------
// call
@ Screen.drawRectangle:263                   // ROM[25610]
D = A                                        // ROM[25611]
@ R15                                        // ROM[25612]
M = D                                        // ROM[25613]
@ :call                                      // ROM[25614]
0; JMP                                       // ROM[25615]
( Screen.drawRectangle:263)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[25616]
0; JMP                                       // ROM[25617]
// ---------------------------
// ( RA )
( Screen.drawRectangle:262) 

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:264                   // ROM[25618]
D = A                                        // ROM[25619]
@ R15                                        // ROM[25620]
M = D                                        // ROM[25621]
@ :sub                                       // ROM[25622]
0; JMP                                       // ROM[25623]
( Screen.drawRectangle:264)

// -------------------------------------
// POP: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[25624]
D = A                                        // ROM[25625]
@ R13                                        // ROM[25626]
M = D                                        // ROM[25627]
// ---------------------------
// call
@ Screen.drawRectangle:265                   // ROM[25628]
D = A                                        // ROM[25629]
@ R15                                        // ROM[25630]
M = D                                        // ROM[25631]
@ :pop_local                                 // ROM[25632]
0; JMP                                       // ROM[25633]
( Screen.drawRectangle:265)

// -------------------------------------
// PUSH: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[25634]
D = A                                        // ROM[25635]
@ R13                                        // ROM[25636]
M = D                                        // ROM[25637]
// ---------------------------
// call
@ Screen.drawRectangle:266                   // ROM[25638]
D = A                                        // ROM[25639]
@ R15                                        // ROM[25640]
M = D                                        // ROM[25641]
@ :push_local                                // ROM[25642]
0; JMP                                       // ROM[25643]
( Screen.drawRectangle:266)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[25644]
D = M                                        // ROM[25645]
// ---------------------------
// push D
@ SP                                         // ROM[25646]
AM = M+1                                     // ROM[25647]
A = A-1                                      // ROM[25648]
M = D                                        // ROM[25649]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:267                   // ROM[25650]
D = A                                        // ROM[25651]
@ R15                                        // ROM[25652]
M = D                                        // ROM[25653]
@ :add                                       // ROM[25654]
0; JMP                                       // ROM[25655]
( Screen.drawRectangle:267)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[25656]
AM = M-1                                     // ROM[25657]
D = M                                        // ROM[25658]
// ---------------------------
@ 4                                          // ROM[25659]
M = D                                        // ROM[25660]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25661]
D = A                                        // ROM[25662]
@ R13                                        // ROM[25663]
M = D                                        // ROM[25664]
// ---------------------------
// call
@ Screen.drawRectangle:268                   // ROM[25665]
D = A                                        // ROM[25666]
@ R15                                        // ROM[25667]
M = D                                        // ROM[25668]
@ :push_that                                 // ROM[25669]
0; JMP                                       // ROM[25670]
( Screen.drawRectangle:268)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[25671]
D = A                                        // ROM[25672]
// ---------------------------
// push D
@ SP                                         // ROM[25673]
AM = M+1                                     // ROM[25674]
A = A-1                                      // ROM[25675]
M = D                                        // ROM[25676]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:269                   // ROM[25677]
D = A                                        // ROM[25678]
@ R15                                        // ROM[25679]
M = D                                        // ROM[25680]
@ :sub                                       // ROM[25681]
0; JMP                                       // ROM[25682]
( Screen.drawRectangle:269)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[25683]
A = M-1                                      // ROM[25684]
M = !M                                       // ROM[25685]

// -------------------------------------
// POP: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[25686]
D = A                                        // ROM[25687]
@ R13                                        // ROM[25688]
M = D                                        // ROM[25689]
// ---------------------------
// call
@ Screen.drawRectangle:270                   // ROM[25690]
D = A                                        // ROM[25691]
@ R15                                        // ROM[25692]
M = D                                        // ROM[25693]
@ :pop_local                                 // ROM[25694]
0; JMP                                       // ROM[25695]
( Screen.drawRectangle:270)

// -------------------------------------
// PUSH: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[25696]
D = A                                        // ROM[25697]
@ R13                                        // ROM[25698]
M = D                                        // ROM[25699]
// ---------------------------
// call
@ Screen.drawRectangle:271                   // ROM[25700]
D = A                                        // ROM[25701]
@ R15                                        // ROM[25702]
M = D                                        // ROM[25703]
@ :push_local                                // ROM[25704]
0; JMP                                       // ROM[25705]
( Screen.drawRectangle:271)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[25706]
D = A                                        // ROM[25707]
// ---------------------------
// push D
@ SP                                         // ROM[25708]
AM = M+1                                     // ROM[25709]
A = A-1                                      // ROM[25710]
M = D                                        // ROM[25711]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:272                   // ROM[25712]
D = A                                        // ROM[25713]
@ R15                                        // ROM[25714]
M = D                                        // ROM[25715]
@ :add                                       // ROM[25716]
0; JMP                                       // ROM[25717]
( Screen.drawRectangle:272)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[25718]
D = M                                        // ROM[25719]
// ---------------------------
// push D
@ SP                                         // ROM[25720]
AM = M+1                                     // ROM[25721]
A = A-1                                      // ROM[25722]
M = D                                        // ROM[25723]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:273                   // ROM[25724]
D = A                                        // ROM[25725]
@ R15                                        // ROM[25726]
M = D                                        // ROM[25727]
@ :add                                       // ROM[25728]
0; JMP                                       // ROM[25729]
( Screen.drawRectangle:273)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[25730]
AM = M-1                                     // ROM[25731]
D = M                                        // ROM[25732]
// ---------------------------
@ 4                                          // ROM[25733]
M = D                                        // ROM[25734]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25735]
D = A                                        // ROM[25736]
@ R13                                        // ROM[25737]
M = D                                        // ROM[25738]
// ---------------------------
// call
@ Screen.drawRectangle:274                   // ROM[25739]
D = A                                        // ROM[25740]
@ R15                                        // ROM[25741]
M = D                                        // ROM[25742]
@ :push_that                                 // ROM[25743]
0; JMP                                       // ROM[25744]
( Screen.drawRectangle:274)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[25745]
D = A                                        // ROM[25746]
// ---------------------------
// push D
@ SP                                         // ROM[25747]
AM = M+1                                     // ROM[25748]
A = A-1                                      // ROM[25749]
M = D                                        // ROM[25750]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:275                   // ROM[25751]
D = A                                        // ROM[25752]
@ R15                                        // ROM[25753]
M = D                                        // ROM[25754]
@ :sub                                       // ROM[25755]
0; JMP                                       // ROM[25756]
( Screen.drawRectangle:275)

// -------------------------------------
// POP: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[25757]
D = A                                        // ROM[25758]
@ R13                                        // ROM[25759]
M = D                                        // ROM[25760]
// ---------------------------
// call
@ Screen.drawRectangle:276                   // ROM[25761]
D = A                                        // ROM[25762]
@ R15                                        // ROM[25763]
M = D                                        // ROM[25764]
@ :pop_local                                 // ROM[25765]
0; JMP                                       // ROM[25766]
( Screen.drawRectangle:276)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[25767]
D = A                                        // ROM[25768]
@ R13                                        // ROM[25769]
M = D                                        // ROM[25770]
// ---------------------------
// call
@ Screen.drawRectangle:277                   // ROM[25771]
D = A                                        // ROM[25772]
@ R15                                        // ROM[25773]
M = D                                        // ROM[25774]
@ :push_argument                             // ROM[25775]
0; JMP                                       // ROM[25776]
( Screen.drawRectangle:277)

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[25777]
D = A                                        // ROM[25778]
// ---------------------------
// push D
@ SP                                         // ROM[25779]
AM = M+1                                     // ROM[25780]
A = A-1                                      // ROM[25781]
M = D                                        // ROM[25782]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[25783]
D = A                                        // ROM[25784]
@ R13                                        // ROM[25785]
M = D                                        // ROM[25786]
// ---------------------------
// Push RA
@ Screen.drawRectangle:278                   // ROM[25787]
D = A                                        // ROM[25788]
// ---------------------------
// push D
@ SP                                         // ROM[25789]
AM = M+1                                     // ROM[25790]
A = A-1                                      // ROM[25791]
M = D                                        // ROM[25792]
// ---------------------------
// call
@ Screen.drawRectangle:279                   // ROM[25793]
D = A                                        // ROM[25794]
@ R15                                        // ROM[25795]
M = D                                        // ROM[25796]
@ :call                                      // ROM[25797]
0; JMP                                       // ROM[25798]
( Screen.drawRectangle:279)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[25799]
0; JMP                                       // ROM[25800]
// ---------------------------
// ( RA )
( Screen.drawRectangle:278) 

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[25801]
D = A                                        // ROM[25802]
@ R13                                        // ROM[25803]
M = D                                        // ROM[25804]
// ---------------------------
// call
@ Screen.drawRectangle:280                   // ROM[25805]
D = A                                        // ROM[25806]
@ R15                                        // ROM[25807]
M = D                                        // ROM[25808]
@ :push_local                                // ROM[25809]
0; JMP                                       // ROM[25810]
( Screen.drawRectangle:280)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:281                   // ROM[25811]
D = A                                        // ROM[25812]
@ R15                                        // ROM[25813]
M = D                                        // ROM[25814]
@ :add                                       // ROM[25815]
0; JMP                                       // ROM[25816]
( Screen.drawRectangle:281)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25817]
D = A                                        // ROM[25818]
@ R13                                        // ROM[25819]
M = D                                        // ROM[25820]
// ---------------------------
// call
@ Screen.drawRectangle:282                   // ROM[25821]
D = A                                        // ROM[25822]
@ R15                                        // ROM[25823]
M = D                                        // ROM[25824]
@ :pop_local                                 // ROM[25825]
0; JMP                                       // ROM[25826]
( Screen.drawRectangle:282)

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[25827]
D = A                                        // ROM[25828]
@ R13                                        // ROM[25829]
M = D                                        // ROM[25830]
// ---------------------------
// call
@ Screen.drawRectangle:283                   // ROM[25831]
D = A                                        // ROM[25832]
@ R15                                        // ROM[25833]
M = D                                        // ROM[25834]
@ :push_local                                // ROM[25835]
0; JMP                                       // ROM[25836]
( Screen.drawRectangle:283)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[25837]
D = A                                        // ROM[25838]
@ R13                                        // ROM[25839]
M = D                                        // ROM[25840]
// ---------------------------
// call
@ Screen.drawRectangle:284                   // ROM[25841]
D = A                                        // ROM[25842]
@ R15                                        // ROM[25843]
M = D                                        // ROM[25844]
@ :push_local                                // ROM[25845]
0; JMP                                       // ROM[25846]
( Screen.drawRectangle:284)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:285                   // ROM[25847]
D = A                                        // ROM[25848]
@ R15                                        // ROM[25849]
M = D                                        // ROM[25850]
@ :sub                                       // ROM[25851]
0; JMP                                       // ROM[25852]
( Screen.drawRectangle:285)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[25853]
D = A                                        // ROM[25854]
@ R13                                        // ROM[25855]
M = D                                        // ROM[25856]
// ---------------------------
// call
@ Screen.drawRectangle:286                   // ROM[25857]
D = A                                        // ROM[25858]
@ R15                                        // ROM[25859]
M = D                                        // ROM[25860]
@ :pop_local                                 // ROM[25861]
0; JMP                                       // ROM[25862]
( Screen.drawRectangle:286)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Screen.drawRectangle$WHILE_EXP0 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[25863]
D = A                                        // ROM[25864]
@ R13                                        // ROM[25865]
M = D                                        // ROM[25866]
// ---------------------------
// call
@ Screen.drawRectangle:287                   // ROM[25867]
D = A                                        // ROM[25868]
@ R15                                        // ROM[25869]
M = D                                        // ROM[25870]
@ :push_argument                             // ROM[25871]
0; JMP                                       // ROM[25872]
( Screen.drawRectangle:287)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[25873]
D = A                                        // ROM[25874]
@ R13                                        // ROM[25875]
M = D                                        // ROM[25876]
// ---------------------------
// call
@ Screen.drawRectangle:288                   // ROM[25877]
D = A                                        // ROM[25878]
@ R15                                        // ROM[25879]
M = D                                        // ROM[25880]
@ :push_argument                             // ROM[25881]
0; JMP                                       // ROM[25882]
( Screen.drawRectangle:288)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:289                   // ROM[25883]
D = A                                        // ROM[25884]
@ R15                                        // ROM[25885]
M = D                                        // ROM[25886]
@ :gt                                        // ROM[25887]
0; JMP                                       // ROM[25888]
( Screen.drawRectangle:289)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[25889]
A = M-1                                      // ROM[25890]
M = !M                                       // ROM[25891]

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[25892]
A = M-1                                      // ROM[25893]
M = !M                                       // ROM[25894]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[25895]
AM = M-1                                     // ROM[25896]
D = M                                        // ROM[25897]
// ---------------------------
@ Screen.drawRectangle$WHILE_END0            // ROM[25898]
D; JNE                                       // ROM[25899]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25900]
D = A                                        // ROM[25901]
@ R13                                        // ROM[25902]
M = D                                        // ROM[25903]
// ---------------------------
// call
@ Screen.drawRectangle:290                   // ROM[25904]
D = A                                        // ROM[25905]
@ R15                                        // ROM[25906]
M = D                                        // ROM[25907]
@ :push_local                                // ROM[25908]
0; JMP                                       // ROM[25909]
( Screen.drawRectangle:290)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[25910]
D = A                                        // ROM[25911]
@ R13                                        // ROM[25912]
M = D                                        // ROM[25913]
// ---------------------------
// call
@ Screen.drawRectangle:291                   // ROM[25914]
D = A                                        // ROM[25915]
@ R15                                        // ROM[25916]
M = D                                        // ROM[25917]
@ :push_local                                // ROM[25918]
0; JMP                                       // ROM[25919]
( Screen.drawRectangle:291)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:292                   // ROM[25920]
D = A                                        // ROM[25921]
@ R15                                        // ROM[25922]
M = D                                        // ROM[25923]
@ :add                                       // ROM[25924]
0; JMP                                       // ROM[25925]
( Screen.drawRectangle:292)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[25926]
D = A                                        // ROM[25927]
@ R13                                        // ROM[25928]
M = D                                        // ROM[25929]
// ---------------------------
// call
@ Screen.drawRectangle:293                   // ROM[25930]
D = A                                        // ROM[25931]
@ R15                                        // ROM[25932]
M = D                                        // ROM[25933]
@ :pop_local                                 // ROM[25934]
0; JMP                                       // ROM[25935]
( Screen.drawRectangle:293)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[25936]
D = A                                        // ROM[25937]
@ R13                                        // ROM[25938]
M = D                                        // ROM[25939]
// ---------------------------
// call
@ Screen.drawRectangle:294                   // ROM[25940]
D = A                                        // ROM[25941]
@ R15                                        // ROM[25942]
M = D                                        // ROM[25943]
@ :push_local                                // ROM[25944]
0; JMP                                       // ROM[25945]
( Screen.drawRectangle:294)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[25946]
D = A                                        // ROM[25947]
// ---------------------------
// push D
@ SP                                         // ROM[25948]
AM = M+1                                     // ROM[25949]
A = A-1                                      // ROM[25950]
M = D                                        // ROM[25951]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:295                   // ROM[25952]
D = A                                        // ROM[25953]
@ R15                                        // ROM[25954]
M = D                                        // ROM[25955]
@ :eq                                        // ROM[25956]
0; JMP                                       // ROM[25957]
( Screen.drawRectangle:295)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[25958]
AM = M-1                                     // ROM[25959]
D = M                                        // ROM[25960]
// ---------------------------
@ Screen.drawRectangle$IF_TRUE1              // ROM[25961]
D; JNE                                       // ROM[25962]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Screen.drawRectangle$IF_FALSE1             // ROM[25963]
0; JMP                                       // ROM[25964]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Screen.drawRectangle$IF_TRUE1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[25965]
D = A                                        // ROM[25966]
@ R13                                        // ROM[25967]
M = D                                        // ROM[25968]
// ---------------------------
// call
@ Screen.drawRectangle:296                   // ROM[25969]
D = A                                        // ROM[25970]
@ R15                                        // ROM[25971]
M = D                                        // ROM[25972]
@ :push_local                                // ROM[25973]
0; JMP                                       // ROM[25974]
( Screen.drawRectangle:296)

// -------------------------------------
// PUSH: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[25975]
D = A                                        // ROM[25976]
@ R13                                        // ROM[25977]
M = D                                        // ROM[25978]
// ---------------------------
// call
@ Screen.drawRectangle:297                   // ROM[25979]
D = A                                        // ROM[25980]
@ R15                                        // ROM[25981]
M = D                                        // ROM[25982]
@ :push_local                                // ROM[25983]
0; JMP                                       // ROM[25984]
( Screen.drawRectangle:297)

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[25985]
D = A                                        // ROM[25986]
@ R13                                        // ROM[25987]
M = D                                        // ROM[25988]
// ---------------------------
// call
@ Screen.drawRectangle:298                   // ROM[25989]
D = A                                        // ROM[25990]
@ R15                                        // ROM[25991]
M = D                                        // ROM[25992]
@ :push_local                                // ROM[25993]
0; JMP                                       // ROM[25994]
( Screen.drawRectangle:298)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:299                   // ROM[25995]
D = A                                        // ROM[25996]
@ R15                                        // ROM[25997]
M = D                                        // ROM[25998]
@ :and                                       // ROM[25999]
0; JMP                                       // ROM[26000]
( Screen.drawRectangle:299)

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26001]
D = A                                        // ROM[26002]
@ R13                                        // ROM[26003]
M = D                                        // ROM[26004]
// ---------------------------
// Push RA
@ Screen.drawRectangle:300                   // ROM[26005]
D = A                                        // ROM[26006]
// ---------------------------
// push D
@ SP                                         // ROM[26007]
AM = M+1                                     // ROM[26008]
A = A-1                                      // ROM[26009]
M = D                                        // ROM[26010]
// ---------------------------
// call
@ Screen.drawRectangle:301                   // ROM[26011]
D = A                                        // ROM[26012]
@ R15                                        // ROM[26013]
M = D                                        // ROM[26014]
@ :call                                      // ROM[26015]
0; JMP                                       // ROM[26016]
( Screen.drawRectangle:301)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[26017]
0; JMP                                       // ROM[26018]
// ---------------------------
// ( RA )
( Screen.drawRectangle:300) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[26019]
AM = M-1                                     // ROM[26020]
D = M                                        // ROM[26021]
// ---------------------------
@ 5                                          // ROM[26022]
M = D                                        // ROM[26023]

// -------------------------------------
// GOTO: IF_END1
// -------------------------------------
@ Screen.drawRectangle$IF_END1               // ROM[26024]
0; JMP                                       // ROM[26025]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Screen.drawRectangle$IF_FALSE1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26026]
D = A                                        // ROM[26027]
@ R13                                        // ROM[26028]
M = D                                        // ROM[26029]
// ---------------------------
// call
@ Screen.drawRectangle:302                   // ROM[26030]
D = A                                        // ROM[26031]
@ R15                                        // ROM[26032]
M = D                                        // ROM[26033]
@ :push_local                                // ROM[26034]
0; JMP                                       // ROM[26035]
( Screen.drawRectangle:302)

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[26036]
D = A                                        // ROM[26037]
@ R13                                        // ROM[26038]
M = D                                        // ROM[26039]
// ---------------------------
// call
@ Screen.drawRectangle:303                   // ROM[26040]
D = A                                        // ROM[26041]
@ R15                                        // ROM[26042]
M = D                                        // ROM[26043]
@ :push_local                                // ROM[26044]
0; JMP                                       // ROM[26045]
( Screen.drawRectangle:303)

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26046]
D = A                                        // ROM[26047]
@ R13                                        // ROM[26048]
M = D                                        // ROM[26049]
// ---------------------------
// Push RA
@ Screen.drawRectangle:304                   // ROM[26050]
D = A                                        // ROM[26051]
// ---------------------------
// push D
@ SP                                         // ROM[26052]
AM = M+1                                     // ROM[26053]
A = A-1                                      // ROM[26054]
M = D                                        // ROM[26055]
// ---------------------------
// call
@ Screen.drawRectangle:305                   // ROM[26056]
D = A                                        // ROM[26057]
@ R15                                        // ROM[26058]
M = D                                        // ROM[26059]
@ :call                                      // ROM[26060]
0; JMP                                       // ROM[26061]
( Screen.drawRectangle:305)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[26062]
0; JMP                                       // ROM[26063]
// ---------------------------
// ( RA )
( Screen.drawRectangle:304) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[26064]
AM = M-1                                     // ROM[26065]
D = M                                        // ROM[26066]
// ---------------------------
@ 5                                          // ROM[26067]
M = D                                        // ROM[26068]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26069]
D = A                                        // ROM[26070]
@ R13                                        // ROM[26071]
M = D                                        // ROM[26072]
// ---------------------------
// call
@ Screen.drawRectangle:306                   // ROM[26073]
D = A                                        // ROM[26074]
@ R15                                        // ROM[26075]
M = D                                        // ROM[26076]
@ :push_local                                // ROM[26077]
0; JMP                                       // ROM[26078]
( Screen.drawRectangle:306)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[26079]
D = A                                        // ROM[26080]
// ---------------------------
// push D
@ SP                                         // ROM[26081]
AM = M+1                                     // ROM[26082]
A = A-1                                      // ROM[26083]
M = D                                        // ROM[26084]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:307                   // ROM[26085]
D = A                                        // ROM[26086]
@ R15                                        // ROM[26087]
M = D                                        // ROM[26088]
@ :add                                       // ROM[26089]
0; JMP                                       // ROM[26090]
( Screen.drawRectangle:307)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26091]
D = A                                        // ROM[26092]
@ R13                                        // ROM[26093]
M = D                                        // ROM[26094]
// ---------------------------
// call
@ Screen.drawRectangle:308                   // ROM[26095]
D = A                                        // ROM[26096]
@ R15                                        // ROM[26097]
M = D                                        // ROM[26098]
@ :pop_local                                 // ROM[26099]
0; JMP                                       // ROM[26100]
( Screen.drawRectangle:308)

// -------------------------------------
// LABEL: WHILE_EXP1
// -------------------------------------
( Screen.drawRectangle$WHILE_EXP1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26101]
D = A                                        // ROM[26102]
@ R13                                        // ROM[26103]
M = D                                        // ROM[26104]
// ---------------------------
// call
@ Screen.drawRectangle:309                   // ROM[26105]
D = A                                        // ROM[26106]
@ R15                                        // ROM[26107]
M = D                                        // ROM[26108]
@ :push_local                                // ROM[26109]
0; JMP                                       // ROM[26110]
( Screen.drawRectangle:309)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26111]
D = A                                        // ROM[26112]
@ R13                                        // ROM[26113]
M = D                                        // ROM[26114]
// ---------------------------
// call
@ Screen.drawRectangle:310                   // ROM[26115]
D = A                                        // ROM[26116]
@ R15                                        // ROM[26117]
M = D                                        // ROM[26118]
@ :push_local                                // ROM[26119]
0; JMP                                       // ROM[26120]
( Screen.drawRectangle:310)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:311                   // ROM[26121]
D = A                                        // ROM[26122]
@ R15                                        // ROM[26123]
M = D                                        // ROM[26124]
@ :lt                                        // ROM[26125]
0; JMP                                       // ROM[26126]
( Screen.drawRectangle:311)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[26127]
A = M-1                                      // ROM[26128]
M = !M                                       // ROM[26129]

// -------------------------------------
// IF-GOTO: WHILE_END1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[26130]
AM = M-1                                     // ROM[26131]
D = M                                        // ROM[26132]
// ---------------------------
@ Screen.drawRectangle$WHILE_END1            // ROM[26133]
D; JNE                                       // ROM[26134]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26135]
D = A                                        // ROM[26136]
@ R13                                        // ROM[26137]
M = D                                        // ROM[26138]
// ---------------------------
// call
@ Screen.drawRectangle:312                   // ROM[26139]
D = A                                        // ROM[26140]
@ R15                                        // ROM[26141]
M = D                                        // ROM[26142]
@ :push_local                                // ROM[26143]
0; JMP                                       // ROM[26144]
( Screen.drawRectangle:312)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[26145]
D = A                                        // ROM[26146]
// ---------------------------
// push D
@ SP                                         // ROM[26147]
AM = M+1                                     // ROM[26148]
A = A-1                                      // ROM[26149]
M = D                                        // ROM[26150]

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[26151]
A = M-1                                      // ROM[26152]
M = -M                                       // ROM[26153]

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26154]
D = A                                        // ROM[26155]
@ R13                                        // ROM[26156]
M = D                                        // ROM[26157]
// ---------------------------
// Push RA
@ Screen.drawRectangle:313                   // ROM[26158]
D = A                                        // ROM[26159]
// ---------------------------
// push D
@ SP                                         // ROM[26160]
AM = M+1                                     // ROM[26161]
A = A-1                                      // ROM[26162]
M = D                                        // ROM[26163]
// ---------------------------
// call
@ Screen.drawRectangle:314                   // ROM[26164]
D = A                                        // ROM[26165]
@ R15                                        // ROM[26166]
M = D                                        // ROM[26167]
@ :call                                      // ROM[26168]
0; JMP                                       // ROM[26169]
( Screen.drawRectangle:314)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[26170]
0; JMP                                       // ROM[26171]
// ---------------------------
// ( RA )
( Screen.drawRectangle:313) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[26172]
AM = M-1                                     // ROM[26173]
D = M                                        // ROM[26174]
// ---------------------------
@ 5                                          // ROM[26175]
M = D                                        // ROM[26176]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26177]
D = A                                        // ROM[26178]
@ R13                                        // ROM[26179]
M = D                                        // ROM[26180]
// ---------------------------
// call
@ Screen.drawRectangle:315                   // ROM[26181]
D = A                                        // ROM[26182]
@ R15                                        // ROM[26183]
M = D                                        // ROM[26184]
@ :push_local                                // ROM[26185]
0; JMP                                       // ROM[26186]
( Screen.drawRectangle:315)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[26187]
D = A                                        // ROM[26188]
// ---------------------------
// push D
@ SP                                         // ROM[26189]
AM = M+1                                     // ROM[26190]
A = A-1                                      // ROM[26191]
M = D                                        // ROM[26192]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:316                   // ROM[26193]
D = A                                        // ROM[26194]
@ R15                                        // ROM[26195]
M = D                                        // ROM[26196]
@ :add                                       // ROM[26197]
0; JMP                                       // ROM[26198]
( Screen.drawRectangle:316)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26199]
D = A                                        // ROM[26200]
@ R13                                        // ROM[26201]
M = D                                        // ROM[26202]
// ---------------------------
// call
@ Screen.drawRectangle:317                   // ROM[26203]
D = A                                        // ROM[26204]
@ R15                                        // ROM[26205]
M = D                                        // ROM[26206]
@ :pop_local                                 // ROM[26207]
0; JMP                                       // ROM[26208]
( Screen.drawRectangle:317)

// -------------------------------------
// GOTO: WHILE_EXP1
// -------------------------------------
@ Screen.drawRectangle$WHILE_EXP1            // ROM[26209]
0; JMP                                       // ROM[26210]

// -------------------------------------
// LABEL: WHILE_END1
// -------------------------------------
( Screen.drawRectangle$WHILE_END1 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26211]
D = A                                        // ROM[26212]
@ R13                                        // ROM[26213]
M = D                                        // ROM[26214]
// ---------------------------
// call
@ Screen.drawRectangle:318                   // ROM[26215]
D = A                                        // ROM[26216]
@ R15                                        // ROM[26217]
M = D                                        // ROM[26218]
@ :push_local                                // ROM[26219]
0; JMP                                       // ROM[26220]
( Screen.drawRectangle:318)

// -------------------------------------
// PUSH: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[26221]
D = A                                        // ROM[26222]
@ R13                                        // ROM[26223]
M = D                                        // ROM[26224]
// ---------------------------
// call
@ Screen.drawRectangle:319                   // ROM[26225]
D = A                                        // ROM[26226]
@ R15                                        // ROM[26227]
M = D                                        // ROM[26228]
@ :push_local                                // ROM[26229]
0; JMP                                       // ROM[26230]
( Screen.drawRectangle:319)

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26231]
D = A                                        // ROM[26232]
@ R13                                        // ROM[26233]
M = D                                        // ROM[26234]
// ---------------------------
// Push RA
@ Screen.drawRectangle:320                   // ROM[26235]
D = A                                        // ROM[26236]
// ---------------------------
// push D
@ SP                                         // ROM[26237]
AM = M+1                                     // ROM[26238]
A = A-1                                      // ROM[26239]
M = D                                        // ROM[26240]
// ---------------------------
// call
@ Screen.drawRectangle:321                   // ROM[26241]
D = A                                        // ROM[26242]
@ R15                                        // ROM[26243]
M = D                                        // ROM[26244]
@ :call                                      // ROM[26245]
0; JMP                                       // ROM[26246]
( Screen.drawRectangle:321)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[26247]
0; JMP                                       // ROM[26248]
// ---------------------------
// ( RA )
( Screen.drawRectangle:320) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[26249]
AM = M-1                                     // ROM[26250]
D = M                                        // ROM[26251]
// ---------------------------
@ 5                                          // ROM[26252]
M = D                                        // ROM[26253]

// -------------------------------------
// LABEL: IF_END1
// -------------------------------------
( Screen.drawRectangle$IF_END1 )

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26254]
D = A                                        // ROM[26255]
@ R13                                        // ROM[26256]
M = D                                        // ROM[26257]
// ---------------------------
// call
@ Screen.drawRectangle:322                   // ROM[26258]
D = A                                        // ROM[26259]
@ R15                                        // ROM[26260]
M = D                                        // ROM[26261]
@ :push_argument                             // ROM[26262]
0; JMP                                       // ROM[26263]
( Screen.drawRectangle:322)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[26264]
D = A                                        // ROM[26265]
// ---------------------------
// push D
@ SP                                         // ROM[26266]
AM = M+1                                     // ROM[26267]
A = A-1                                      // ROM[26268]
M = D                                        // ROM[26269]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:323                   // ROM[26270]
D = A                                        // ROM[26271]
@ R15                                        // ROM[26272]
M = D                                        // ROM[26273]
@ :add                                       // ROM[26274]
0; JMP                                       // ROM[26275]
( Screen.drawRectangle:323)

// -------------------------------------
// POP: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26276]
D = A                                        // ROM[26277]
@ R13                                        // ROM[26278]
M = D                                        // ROM[26279]
// ---------------------------
// call
@ Screen.drawRectangle:324                   // ROM[26280]
D = A                                        // ROM[26281]
@ R15                                        // ROM[26282]
M = D                                        // ROM[26283]
@ :pop_argument                              // ROM[26284]
0; JMP                                       // ROM[26285]
( Screen.drawRectangle:324)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26286]
D = A                                        // ROM[26287]
@ R13                                        // ROM[26288]
M = D                                        // ROM[26289]
// ---------------------------
// call
@ Screen.drawRectangle:325                   // ROM[26290]
D = A                                        // ROM[26291]
@ R15                                        // ROM[26292]
M = D                                        // ROM[26293]
@ :push_local                                // ROM[26294]
0; JMP                                       // ROM[26295]
( Screen.drawRectangle:325)

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[26296]
D = A                                        // ROM[26297]
// ---------------------------
// push D
@ SP                                         // ROM[26298]
AM = M+1                                     // ROM[26299]
A = A-1                                      // ROM[26300]
M = D                                        // ROM[26301]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:326                   // ROM[26302]
D = A                                        // ROM[26303]
@ R15                                        // ROM[26304]
M = D                                        // ROM[26305]
@ :add                                       // ROM[26306]
0; JMP                                       // ROM[26307]
( Screen.drawRectangle:326)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[26308]
D = A                                        // ROM[26309]
@ R13                                        // ROM[26310]
M = D                                        // ROM[26311]
// ---------------------------
// call
@ Screen.drawRectangle:327                   // ROM[26312]
D = A                                        // ROM[26313]
@ R15                                        // ROM[26314]
M = D                                        // ROM[26315]
@ :push_local                                // ROM[26316]
0; JMP                                       // ROM[26317]
( Screen.drawRectangle:327)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:328                   // ROM[26318]
D = A                                        // ROM[26319]
@ R15                                        // ROM[26320]
M = D                                        // ROM[26321]
@ :sub                                       // ROM[26322]
0; JMP                                       // ROM[26323]
( Screen.drawRectangle:328)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26324]
D = A                                        // ROM[26325]
@ R13                                        // ROM[26326]
M = D                                        // ROM[26327]
// ---------------------------
// call
@ Screen.drawRectangle:329                   // ROM[26328]
D = A                                        // ROM[26329]
@ R15                                        // ROM[26330]
M = D                                        // ROM[26331]
@ :pop_local                                 // ROM[26332]
0; JMP                                       // ROM[26333]
( Screen.drawRectangle:329)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Screen.drawRectangle$WHILE_EXP0            // ROM[26334]
0; JMP                                       // ROM[26335]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Screen.drawRectangle$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[26336]
D = A                                        // ROM[26337]
// ---------------------------
// push D
@ SP                                         // ROM[26338]
AM = M+1                                     // ROM[26339]
A = A-1                                      // ROM[26340]
M = D                                        // ROM[26341]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.drawRectangle:330                   // ROM[26342]
D = A                                        // ROM[26343]
@ R15                                        // ROM[26344]
M = D                                        // ROM[26345]
@ :return                                    // ROM[26346]
0; JMP                                       // ROM[26347]
( Screen.drawRectangle:330)

// =========================================================
// FUNCTION: Screen.drawHorizontal(11 locals)
// =========================================================

( Screen.drawHorizontal )
// ---------------------------
// clear local segment
D = 0                                        // ROM[26348]
// ---------------------------
// push D
@ SP                                         // ROM[26349]
AM = M+1                                     // ROM[26350]
A = A-1                                      // ROM[26351]
M = D                                        // ROM[26352]
// ---------------------------
// push D
@ SP                                         // ROM[26353]
AM = M+1                                     // ROM[26354]
A = A-1                                      // ROM[26355]
M = D                                        // ROM[26356]
// ---------------------------
// push D
@ SP                                         // ROM[26357]
AM = M+1                                     // ROM[26358]
A = A-1                                      // ROM[26359]
M = D                                        // ROM[26360]
// ---------------------------
// push D
@ SP                                         // ROM[26361]
AM = M+1                                     // ROM[26362]
A = A-1                                      // ROM[26363]
M = D                                        // ROM[26364]
// ---------------------------
// push D
@ SP                                         // ROM[26365]
AM = M+1                                     // ROM[26366]
A = A-1                                      // ROM[26367]
M = D                                        // ROM[26368]
// ---------------------------
// push D
@ SP                                         // ROM[26369]
AM = M+1                                     // ROM[26370]
A = A-1                                      // ROM[26371]
M = D                                        // ROM[26372]
// ---------------------------
// push D
@ SP                                         // ROM[26373]
AM = M+1                                     // ROM[26374]
A = A-1                                      // ROM[26375]
M = D                                        // ROM[26376]
// ---------------------------
// push D
@ SP                                         // ROM[26377]
AM = M+1                                     // ROM[26378]
A = A-1                                      // ROM[26379]
M = D                                        // ROM[26380]
// ---------------------------
// push D
@ SP                                         // ROM[26381]
AM = M+1                                     // ROM[26382]
A = A-1                                      // ROM[26383]
M = D                                        // ROM[26384]
// ---------------------------
// push D
@ SP                                         // ROM[26385]
AM = M+1                                     // ROM[26386]
A = A-1                                      // ROM[26387]
M = D                                        // ROM[26388]
// ---------------------------
// push D
@ SP                                         // ROM[26389]
AM = M+1                                     // ROM[26390]
A = A-1                                      // ROM[26391]
M = D                                        // ROM[26392]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26393]
D = A                                        // ROM[26394]
@ R13                                        // ROM[26395]
M = D                                        // ROM[26396]
// ---------------------------
// call
@ Screen.drawHorizontal:331                  // ROM[26397]
D = A                                        // ROM[26398]
@ R15                                        // ROM[26399]
M = D                                        // ROM[26400]
@ :push_argument                             // ROM[26401]
0; JMP                                       // ROM[26402]
( Screen.drawHorizontal:331)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[26403]
D = A                                        // ROM[26404]
@ R13                                        // ROM[26405]
M = D                                        // ROM[26406]
// ---------------------------
// call
@ Screen.drawHorizontal:332                  // ROM[26407]
D = A                                        // ROM[26408]
@ R15                                        // ROM[26409]
M = D                                        // ROM[26410]
@ :push_argument                             // ROM[26411]
0; JMP                                       // ROM[26412]
( Screen.drawHorizontal:332)

// -------------------------------------
// CALL: Math.min(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26413]
D = A                                        // ROM[26414]
@ R13                                        // ROM[26415]
M = D                                        // ROM[26416]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:333                  // ROM[26417]
D = A                                        // ROM[26418]
// ---------------------------
// push D
@ SP                                         // ROM[26419]
AM = M+1                                     // ROM[26420]
A = A-1                                      // ROM[26421]
M = D                                        // ROM[26422]
// ---------------------------
// call
@ Screen.drawHorizontal:334                  // ROM[26423]
D = A                                        // ROM[26424]
@ R15                                        // ROM[26425]
M = D                                        // ROM[26426]
@ :call                                      // ROM[26427]
0; JMP                                       // ROM[26428]
( Screen.drawHorizontal:334)
// ---------------------------
// goto functionName
@ Math.min                                   // ROM[26429]
0; JMP                                       // ROM[26430]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:333) 

// -------------------------------------
// POP: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[26431]
D = A                                        // ROM[26432]
@ R13                                        // ROM[26433]
M = D                                        // ROM[26434]
// ---------------------------
// call
@ Screen.drawHorizontal:335                  // ROM[26435]
D = A                                        // ROM[26436]
@ R15                                        // ROM[26437]
M = D                                        // ROM[26438]
@ :pop_local                                 // ROM[26439]
0; JMP                                       // ROM[26440]
( Screen.drawHorizontal:335)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26441]
D = A                                        // ROM[26442]
@ R13                                        // ROM[26443]
M = D                                        // ROM[26444]
// ---------------------------
// call
@ Screen.drawHorizontal:336                  // ROM[26445]
D = A                                        // ROM[26446]
@ R15                                        // ROM[26447]
M = D                                        // ROM[26448]
@ :push_argument                             // ROM[26449]
0; JMP                                       // ROM[26450]
( Screen.drawHorizontal:336)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[26451]
D = A                                        // ROM[26452]
@ R13                                        // ROM[26453]
M = D                                        // ROM[26454]
// ---------------------------
// call
@ Screen.drawHorizontal:337                  // ROM[26455]
D = A                                        // ROM[26456]
@ R15                                        // ROM[26457]
M = D                                        // ROM[26458]
@ :push_argument                             // ROM[26459]
0; JMP                                       // ROM[26460]
( Screen.drawHorizontal:337)

// -------------------------------------
// CALL: Math.max(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26461]
D = A                                        // ROM[26462]
@ R13                                        // ROM[26463]
M = D                                        // ROM[26464]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:338                  // ROM[26465]
D = A                                        // ROM[26466]
// ---------------------------
// push D
@ SP                                         // ROM[26467]
AM = M+1                                     // ROM[26468]
A = A-1                                      // ROM[26469]
M = D                                        // ROM[26470]
// ---------------------------
// call
@ Screen.drawHorizontal:339                  // ROM[26471]
D = A                                        // ROM[26472]
@ R15                                        // ROM[26473]
M = D                                        // ROM[26474]
@ :call                                      // ROM[26475]
0; JMP                                       // ROM[26476]
( Screen.drawHorizontal:339)
// ---------------------------
// goto functionName
@ Math.max                                   // ROM[26477]
0; JMP                                       // ROM[26478]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:338) 

// -------------------------------------
// POP: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[26479]
D = A                                        // ROM[26480]
@ R13                                        // ROM[26481]
M = D                                        // ROM[26482]
// ---------------------------
// call
@ Screen.drawHorizontal:340                  // ROM[26483]
D = A                                        // ROM[26484]
@ R15                                        // ROM[26485]
M = D                                        // ROM[26486]
@ :pop_local                                 // ROM[26487]
0; JMP                                       // ROM[26488]
( Screen.drawHorizontal:340)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26489]
D = A                                        // ROM[26490]
@ R13                                        // ROM[26491]
M = D                                        // ROM[26492]
// ---------------------------
// call
@ Screen.drawHorizontal:341                  // ROM[26493]
D = A                                        // ROM[26494]
@ R15                                        // ROM[26495]
M = D                                        // ROM[26496]
@ :push_argument                             // ROM[26497]
0; JMP                                       // ROM[26498]
( Screen.drawHorizontal:341)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[26499]
D = A                                        // ROM[26500]
// ---------------------------
// push D
@ SP                                         // ROM[26501]
AM = M+1                                     // ROM[26502]
A = A-1                                      // ROM[26503]
M = D                                        // ROM[26504]

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[26505]
A = M-1                                      // ROM[26506]
M = -M                                       // ROM[26507]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:342                  // ROM[26508]
D = A                                        // ROM[26509]
@ R15                                        // ROM[26510]
M = D                                        // ROM[26511]
@ :gt                                        // ROM[26512]
0; JMP                                       // ROM[26513]
( Screen.drawHorizontal:342)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26514]
D = A                                        // ROM[26515]
@ R13                                        // ROM[26516]
M = D                                        // ROM[26517]
// ---------------------------
// call
@ Screen.drawHorizontal:343                  // ROM[26518]
D = A                                        // ROM[26519]
@ R15                                        // ROM[26520]
M = D                                        // ROM[26521]
@ :push_argument                             // ROM[26522]
0; JMP                                       // ROM[26523]
( Screen.drawHorizontal:343)

// -------------------------------------
// PUSH: <constant, 256>
// -------------------------------------
@ 256                                        // ROM[26524]
D = A                                        // ROM[26525]
// ---------------------------
// push D
@ SP                                         // ROM[26526]
AM = M+1                                     // ROM[26527]
A = A-1                                      // ROM[26528]
M = D                                        // ROM[26529]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:344                  // ROM[26530]
D = A                                        // ROM[26531]
@ R15                                        // ROM[26532]
M = D                                        // ROM[26533]
@ :lt                                        // ROM[26534]
0; JMP                                       // ROM[26535]
( Screen.drawHorizontal:344)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:345                  // ROM[26536]
D = A                                        // ROM[26537]
@ R15                                        // ROM[26538]
M = D                                        // ROM[26539]
@ :and                                       // ROM[26540]
0; JMP                                       // ROM[26541]
( Screen.drawHorizontal:345)

// -------------------------------------
// PUSH: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[26542]
D = A                                        // ROM[26543]
@ R13                                        // ROM[26544]
M = D                                        // ROM[26545]
// ---------------------------
// call
@ Screen.drawHorizontal:346                  // ROM[26546]
D = A                                        // ROM[26547]
@ R15                                        // ROM[26548]
M = D                                        // ROM[26549]
@ :push_local                                // ROM[26550]
0; JMP                                       // ROM[26551]
( Screen.drawHorizontal:346)

// -------------------------------------
// PUSH: <constant, 512>
// -------------------------------------
@ 512                                        // ROM[26552]
D = A                                        // ROM[26553]
// ---------------------------
// push D
@ SP                                         // ROM[26554]
AM = M+1                                     // ROM[26555]
A = A-1                                      // ROM[26556]
M = D                                        // ROM[26557]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:347                  // ROM[26558]
D = A                                        // ROM[26559]
@ R15                                        // ROM[26560]
M = D                                        // ROM[26561]
@ :lt                                        // ROM[26562]
0; JMP                                       // ROM[26563]
( Screen.drawHorizontal:347)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:348                  // ROM[26564]
D = A                                        // ROM[26565]
@ R15                                        // ROM[26566]
M = D                                        // ROM[26567]
@ :and                                       // ROM[26568]
0; JMP                                       // ROM[26569]
( Screen.drawHorizontal:348)

// -------------------------------------
// PUSH: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[26570]
D = A                                        // ROM[26571]
@ R13                                        // ROM[26572]
M = D                                        // ROM[26573]
// ---------------------------
// call
@ Screen.drawHorizontal:349                  // ROM[26574]
D = A                                        // ROM[26575]
@ R15                                        // ROM[26576]
M = D                                        // ROM[26577]
@ :push_local                                // ROM[26578]
0; JMP                                       // ROM[26579]
( Screen.drawHorizontal:349)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[26580]
D = A                                        // ROM[26581]
// ---------------------------
// push D
@ SP                                         // ROM[26582]
AM = M+1                                     // ROM[26583]
A = A-1                                      // ROM[26584]
M = D                                        // ROM[26585]

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[26586]
A = M-1                                      // ROM[26587]
M = -M                                       // ROM[26588]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:350                  // ROM[26589]
D = A                                        // ROM[26590]
@ R15                                        // ROM[26591]
M = D                                        // ROM[26592]
@ :gt                                        // ROM[26593]
0; JMP                                       // ROM[26594]
( Screen.drawHorizontal:350)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:351                  // ROM[26595]
D = A                                        // ROM[26596]
@ R15                                        // ROM[26597]
M = D                                        // ROM[26598]
@ :and                                       // ROM[26599]
0; JMP                                       // ROM[26600]
( Screen.drawHorizontal:351)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[26601]
AM = M-1                                     // ROM[26602]
D = M                                        // ROM[26603]
// ---------------------------
@ Screen.drawHorizontal$IF_TRUE0             // ROM[26604]
D; JNE                                       // ROM[26605]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Screen.drawHorizontal$IF_FALSE0            // ROM[26606]
0; JMP                                       // ROM[26607]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Screen.drawHorizontal$IF_TRUE0 )

// -------------------------------------
// PUSH: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[26608]
D = A                                        // ROM[26609]
@ R13                                        // ROM[26610]
M = D                                        // ROM[26611]
// ---------------------------
// call
@ Screen.drawHorizontal:352                  // ROM[26612]
D = A                                        // ROM[26613]
@ R15                                        // ROM[26614]
M = D                                        // ROM[26615]
@ :push_local                                // ROM[26616]
0; JMP                                       // ROM[26617]
( Screen.drawHorizontal:352)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[26618]
D = A                                        // ROM[26619]
// ---------------------------
// push D
@ SP                                         // ROM[26620]
AM = M+1                                     // ROM[26621]
A = A-1                                      // ROM[26622]
M = D                                        // ROM[26623]

// -------------------------------------
// CALL: Math.max(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26624]
D = A                                        // ROM[26625]
@ R13                                        // ROM[26626]
M = D                                        // ROM[26627]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:353                  // ROM[26628]
D = A                                        // ROM[26629]
// ---------------------------
// push D
@ SP                                         // ROM[26630]
AM = M+1                                     // ROM[26631]
A = A-1                                      // ROM[26632]
M = D                                        // ROM[26633]
// ---------------------------
// call
@ Screen.drawHorizontal:354                  // ROM[26634]
D = A                                        // ROM[26635]
@ R15                                        // ROM[26636]
M = D                                        // ROM[26637]
@ :call                                      // ROM[26638]
0; JMP                                       // ROM[26639]
( Screen.drawHorizontal:354)
// ---------------------------
// goto functionName
@ Math.max                                   // ROM[26640]
0; JMP                                       // ROM[26641]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:353) 

// -------------------------------------
// POP: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[26642]
D = A                                        // ROM[26643]
@ R13                                        // ROM[26644]
M = D                                        // ROM[26645]
// ---------------------------
// call
@ Screen.drawHorizontal:355                  // ROM[26646]
D = A                                        // ROM[26647]
@ R15                                        // ROM[26648]
M = D                                        // ROM[26649]
@ :pop_local                                 // ROM[26650]
0; JMP                                       // ROM[26651]
( Screen.drawHorizontal:355)

// -------------------------------------
// PUSH: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[26652]
D = A                                        // ROM[26653]
@ R13                                        // ROM[26654]
M = D                                        // ROM[26655]
// ---------------------------
// call
@ Screen.drawHorizontal:356                  // ROM[26656]
D = A                                        // ROM[26657]
@ R15                                        // ROM[26658]
M = D                                        // ROM[26659]
@ :push_local                                // ROM[26660]
0; JMP                                       // ROM[26661]
( Screen.drawHorizontal:356)

// -------------------------------------
// PUSH: <constant, 511>
// -------------------------------------
@ 511                                        // ROM[26662]
D = A                                        // ROM[26663]
// ---------------------------
// push D
@ SP                                         // ROM[26664]
AM = M+1                                     // ROM[26665]
A = A-1                                      // ROM[26666]
M = D                                        // ROM[26667]

// -------------------------------------
// CALL: Math.min(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26668]
D = A                                        // ROM[26669]
@ R13                                        // ROM[26670]
M = D                                        // ROM[26671]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:357                  // ROM[26672]
D = A                                        // ROM[26673]
// ---------------------------
// push D
@ SP                                         // ROM[26674]
AM = M+1                                     // ROM[26675]
A = A-1                                      // ROM[26676]
M = D                                        // ROM[26677]
// ---------------------------
// call
@ Screen.drawHorizontal:358                  // ROM[26678]
D = A                                        // ROM[26679]
@ R15                                        // ROM[26680]
M = D                                        // ROM[26681]
@ :call                                      // ROM[26682]
0; JMP                                       // ROM[26683]
( Screen.drawHorizontal:358)
// ---------------------------
// goto functionName
@ Math.min                                   // ROM[26684]
0; JMP                                       // ROM[26685]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:357) 

// -------------------------------------
// POP: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[26686]
D = A                                        // ROM[26687]
@ R13                                        // ROM[26688]
M = D                                        // ROM[26689]
// ---------------------------
// call
@ Screen.drawHorizontal:359                  // ROM[26690]
D = A                                        // ROM[26691]
@ R15                                        // ROM[26692]
M = D                                        // ROM[26693]
@ :pop_local                                 // ROM[26694]
0; JMP                                       // ROM[26695]
( Screen.drawHorizontal:359)

// -------------------------------------
// PUSH: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[26696]
D = A                                        // ROM[26697]
@ R13                                        // ROM[26698]
M = D                                        // ROM[26699]
// ---------------------------
// call
@ Screen.drawHorizontal:360                  // ROM[26700]
D = A                                        // ROM[26701]
@ R15                                        // ROM[26702]
M = D                                        // ROM[26703]
@ :push_local                                // ROM[26704]
0; JMP                                       // ROM[26705]
( Screen.drawHorizontal:360)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[26706]
D = A                                        // ROM[26707]
// ---------------------------
// push D
@ SP                                         // ROM[26708]
AM = M+1                                     // ROM[26709]
A = A-1                                      // ROM[26710]
M = D                                        // ROM[26711]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26712]
D = A                                        // ROM[26713]
@ R13                                        // ROM[26714]
M = D                                        // ROM[26715]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:361                  // ROM[26716]
D = A                                        // ROM[26717]
// ---------------------------
// push D
@ SP                                         // ROM[26718]
AM = M+1                                     // ROM[26719]
A = A-1                                      // ROM[26720]
M = D                                        // ROM[26721]
// ---------------------------
// call
@ Screen.drawHorizontal:362                  // ROM[26722]
D = A                                        // ROM[26723]
@ R15                                        // ROM[26724]
M = D                                        // ROM[26725]
@ :call                                      // ROM[26726]
0; JMP                                       // ROM[26727]
( Screen.drawHorizontal:362)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[26728]
0; JMP                                       // ROM[26729]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:361) 

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26730]
D = A                                        // ROM[26731]
@ R13                                        // ROM[26732]
M = D                                        // ROM[26733]
// ---------------------------
// call
@ Screen.drawHorizontal:363                  // ROM[26734]
D = A                                        // ROM[26735]
@ R15                                        // ROM[26736]
M = D                                        // ROM[26737]
@ :pop_local                                 // ROM[26738]
0; JMP                                       // ROM[26739]
( Screen.drawHorizontal:363)

// -------------------------------------
// PUSH: <local, 7>
// -------------------------------------
// ---------------------------
// R13 = index
@ 7                                          // ROM[26740]
D = A                                        // ROM[26741]
@ R13                                        // ROM[26742]
M = D                                        // ROM[26743]
// ---------------------------
// call
@ Screen.drawHorizontal:364                  // ROM[26744]
D = A                                        // ROM[26745]
@ R15                                        // ROM[26746]
M = D                                        // ROM[26747]
@ :push_local                                // ROM[26748]
0; JMP                                       // ROM[26749]
( Screen.drawHorizontal:364)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[26750]
D = A                                        // ROM[26751]
@ R13                                        // ROM[26752]
M = D                                        // ROM[26753]
// ---------------------------
// call
@ Screen.drawHorizontal:365                  // ROM[26754]
D = A                                        // ROM[26755]
@ R15                                        // ROM[26756]
M = D                                        // ROM[26757]
@ :push_local                                // ROM[26758]
0; JMP                                       // ROM[26759]
( Screen.drawHorizontal:365)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[26760]
D = A                                        // ROM[26761]
// ---------------------------
// push D
@ SP                                         // ROM[26762]
AM = M+1                                     // ROM[26763]
A = A-1                                      // ROM[26764]
M = D                                        // ROM[26765]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26766]
D = A                                        // ROM[26767]
@ R13                                        // ROM[26768]
M = D                                        // ROM[26769]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:366                  // ROM[26770]
D = A                                        // ROM[26771]
// ---------------------------
// push D
@ SP                                         // ROM[26772]
AM = M+1                                     // ROM[26773]
A = A-1                                      // ROM[26774]
M = D                                        // ROM[26775]
// ---------------------------
// call
@ Screen.drawHorizontal:367                  // ROM[26776]
D = A                                        // ROM[26777]
@ R15                                        // ROM[26778]
M = D                                        // ROM[26779]
@ :call                                      // ROM[26780]
0; JMP                                       // ROM[26781]
( Screen.drawHorizontal:367)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[26782]
0; JMP                                       // ROM[26783]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:366) 

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:368                  // ROM[26784]
D = A                                        // ROM[26785]
@ R15                                        // ROM[26786]
M = D                                        // ROM[26787]
@ :sub                                       // ROM[26788]
0; JMP                                       // ROM[26789]
( Screen.drawHorizontal:368)

// -------------------------------------
// POP: <local, 9>
// -------------------------------------
// ---------------------------
// R13 = index
@ 9                                          // ROM[26790]
D = A                                        // ROM[26791]
@ R13                                        // ROM[26792]
M = D                                        // ROM[26793]
// ---------------------------
// call
@ Screen.drawHorizontal:369                  // ROM[26794]
D = A                                        // ROM[26795]
@ R15                                        // ROM[26796]
M = D                                        // ROM[26797]
@ :pop_local                                 // ROM[26798]
0; JMP                                       // ROM[26799]
( Screen.drawHorizontal:369)

// -------------------------------------
// PUSH: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[26800]
D = A                                        // ROM[26801]
@ R13                                        // ROM[26802]
M = D                                        // ROM[26803]
// ---------------------------
// call
@ Screen.drawHorizontal:370                  // ROM[26804]
D = A                                        // ROM[26805]
@ R15                                        // ROM[26806]
M = D                                        // ROM[26807]
@ :push_local                                // ROM[26808]
0; JMP                                       // ROM[26809]
( Screen.drawHorizontal:370)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[26810]
D = A                                        // ROM[26811]
// ---------------------------
// push D
@ SP                                         // ROM[26812]
AM = M+1                                     // ROM[26813]
A = A-1                                      // ROM[26814]
M = D                                        // ROM[26815]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26816]
D = A                                        // ROM[26817]
@ R13                                        // ROM[26818]
M = D                                        // ROM[26819]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:371                  // ROM[26820]
D = A                                        // ROM[26821]
// ---------------------------
// push D
@ SP                                         // ROM[26822]
AM = M+1                                     // ROM[26823]
A = A-1                                      // ROM[26824]
M = D                                        // ROM[26825]
// ---------------------------
// call
@ Screen.drawHorizontal:372                  // ROM[26826]
D = A                                        // ROM[26827]
@ R15                                        // ROM[26828]
M = D                                        // ROM[26829]
@ :call                                      // ROM[26830]
0; JMP                                       // ROM[26831]
( Screen.drawHorizontal:372)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[26832]
0; JMP                                       // ROM[26833]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:371) 

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[26834]
D = A                                        // ROM[26835]
@ R13                                        // ROM[26836]
M = D                                        // ROM[26837]
// ---------------------------
// call
@ Screen.drawHorizontal:373                  // ROM[26838]
D = A                                        // ROM[26839]
@ R15                                        // ROM[26840]
M = D                                        // ROM[26841]
@ :pop_local                                 // ROM[26842]
0; JMP                                       // ROM[26843]
( Screen.drawHorizontal:373)

// -------------------------------------
// PUSH: <local, 8>
// -------------------------------------
// ---------------------------
// R13 = index
@ 8                                          // ROM[26844]
D = A                                        // ROM[26845]
@ R13                                        // ROM[26846]
M = D                                        // ROM[26847]
// ---------------------------
// call
@ Screen.drawHorizontal:374                  // ROM[26848]
D = A                                        // ROM[26849]
@ R15                                        // ROM[26850]
M = D                                        // ROM[26851]
@ :push_local                                // ROM[26852]
0; JMP                                       // ROM[26853]
( Screen.drawHorizontal:374)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[26854]
D = A                                        // ROM[26855]
@ R13                                        // ROM[26856]
M = D                                        // ROM[26857]
// ---------------------------
// call
@ Screen.drawHorizontal:375                  // ROM[26858]
D = A                                        // ROM[26859]
@ R15                                        // ROM[26860]
M = D                                        // ROM[26861]
@ :push_local                                // ROM[26862]
0; JMP                                       // ROM[26863]
( Screen.drawHorizontal:375)

// -------------------------------------
// PUSH: <constant, 16>
// -------------------------------------
@ 16                                         // ROM[26864]
D = A                                        // ROM[26865]
// ---------------------------
// push D
@ SP                                         // ROM[26866]
AM = M+1                                     // ROM[26867]
A = A-1                                      // ROM[26868]
M = D                                        // ROM[26869]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[26870]
D = A                                        // ROM[26871]
@ R13                                        // ROM[26872]
M = D                                        // ROM[26873]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:376                  // ROM[26874]
D = A                                        // ROM[26875]
// ---------------------------
// push D
@ SP                                         // ROM[26876]
AM = M+1                                     // ROM[26877]
A = A-1                                      // ROM[26878]
M = D                                        // ROM[26879]
// ---------------------------
// call
@ Screen.drawHorizontal:377                  // ROM[26880]
D = A                                        // ROM[26881]
@ R15                                        // ROM[26882]
M = D                                        // ROM[26883]
@ :call                                      // ROM[26884]
0; JMP                                       // ROM[26885]
( Screen.drawHorizontal:377)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[26886]
0; JMP                                       // ROM[26887]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:376) 

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:378                  // ROM[26888]
D = A                                        // ROM[26889]
@ R15                                        // ROM[26890]
M = D                                        // ROM[26891]
@ :sub                                       // ROM[26892]
0; JMP                                       // ROM[26893]
( Screen.drawHorizontal:378)

// -------------------------------------
// POP: <local, 10>
// -------------------------------------
// ---------------------------
// R13 = index
@ 10                                         // ROM[26894]
D = A                                        // ROM[26895]
@ R13                                        // ROM[26896]
M = D                                        // ROM[26897]
// ---------------------------
// call
@ Screen.drawHorizontal:379                  // ROM[26898]
D = A                                        // ROM[26899]
@ R15                                        // ROM[26900]
M = D                                        // ROM[26901]
@ :pop_local                                 // ROM[26902]
0; JMP                                       // ROM[26903]
( Screen.drawHorizontal:379)

// -------------------------------------
// PUSH: <local, 9>
// -------------------------------------
// ---------------------------
// R13 = index
@ 9                                          // ROM[26904]
D = A                                        // ROM[26905]
@ R13                                        // ROM[26906]
M = D                                        // ROM[26907]
// ---------------------------
// call
@ Screen.drawHorizontal:380                  // ROM[26908]
D = A                                        // ROM[26909]
@ R15                                        // ROM[26910]
M = D                                        // ROM[26911]
@ :push_local                                // ROM[26912]
0; JMP                                       // ROM[26913]
( Screen.drawHorizontal:380)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[26914]
D = M                                        // ROM[26915]
// ---------------------------
// push D
@ SP                                         // ROM[26916]
AM = M+1                                     // ROM[26917]
A = A-1                                      // ROM[26918]
M = D                                        // ROM[26919]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:381                  // ROM[26920]
D = A                                        // ROM[26921]
@ R15                                        // ROM[26922]
M = D                                        // ROM[26923]
@ :add                                       // ROM[26924]
0; JMP                                       // ROM[26925]
( Screen.drawHorizontal:381)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[26926]
AM = M-1                                     // ROM[26927]
D = M                                        // ROM[26928]
// ---------------------------
@ 4                                          // ROM[26929]
M = D                                        // ROM[26930]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[26931]
D = A                                        // ROM[26932]
@ R13                                        // ROM[26933]
M = D                                        // ROM[26934]
// ---------------------------
// call
@ Screen.drawHorizontal:382                  // ROM[26935]
D = A                                        // ROM[26936]
@ R15                                        // ROM[26937]
M = D                                        // ROM[26938]
@ :push_that                                 // ROM[26939]
0; JMP                                       // ROM[26940]
( Screen.drawHorizontal:382)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[26941]
D = A                                        // ROM[26942]
// ---------------------------
// push D
@ SP                                         // ROM[26943]
AM = M+1                                     // ROM[26944]
A = A-1                                      // ROM[26945]
M = D                                        // ROM[26946]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:383                  // ROM[26947]
D = A                                        // ROM[26948]
@ R15                                        // ROM[26949]
M = D                                        // ROM[26950]
@ :sub                                       // ROM[26951]
0; JMP                                       // ROM[26952]
( Screen.drawHorizontal:383)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[26953]
A = M-1                                      // ROM[26954]
M = !M                                       // ROM[26955]

// -------------------------------------
// POP: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[26956]
D = A                                        // ROM[26957]
@ R13                                        // ROM[26958]
M = D                                        // ROM[26959]
// ---------------------------
// call
@ Screen.drawHorizontal:384                  // ROM[26960]
D = A                                        // ROM[26961]
@ R15                                        // ROM[26962]
M = D                                        // ROM[26963]
@ :pop_local                                 // ROM[26964]
0; JMP                                       // ROM[26965]
( Screen.drawHorizontal:384)

// -------------------------------------
// PUSH: <local, 10>
// -------------------------------------
// ---------------------------
// R13 = index
@ 10                                         // ROM[26966]
D = A                                        // ROM[26967]
@ R13                                        // ROM[26968]
M = D                                        // ROM[26969]
// ---------------------------
// call
@ Screen.drawHorizontal:385                  // ROM[26970]
D = A                                        // ROM[26971]
@ R15                                        // ROM[26972]
M = D                                        // ROM[26973]
@ :push_local                                // ROM[26974]
0; JMP                                       // ROM[26975]
( Screen.drawHorizontal:385)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[26976]
D = A                                        // ROM[26977]
// ---------------------------
// push D
@ SP                                         // ROM[26978]
AM = M+1                                     // ROM[26979]
A = A-1                                      // ROM[26980]
M = D                                        // ROM[26981]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:386                  // ROM[26982]
D = A                                        // ROM[26983]
@ R15                                        // ROM[26984]
M = D                                        // ROM[26985]
@ :add                                       // ROM[26986]
0; JMP                                       // ROM[26987]
( Screen.drawHorizontal:386)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Screen.0                                   // ROM[26988]
D = M                                        // ROM[26989]
// ---------------------------
// push D
@ SP                                         // ROM[26990]
AM = M+1                                     // ROM[26991]
A = A-1                                      // ROM[26992]
M = D                                        // ROM[26993]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:387                  // ROM[26994]
D = A                                        // ROM[26995]
@ R15                                        // ROM[26996]
M = D                                        // ROM[26997]
@ :add                                       // ROM[26998]
0; JMP                                       // ROM[26999]
( Screen.drawHorizontal:387)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27000]
AM = M-1                                     // ROM[27001]
D = M                                        // ROM[27002]
// ---------------------------
@ 4                                          // ROM[27003]
M = D                                        // ROM[27004]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27005]
D = A                                        // ROM[27006]
@ R13                                        // ROM[27007]
M = D                                        // ROM[27008]
// ---------------------------
// call
@ Screen.drawHorizontal:388                  // ROM[27009]
D = A                                        // ROM[27010]
@ R15                                        // ROM[27011]
M = D                                        // ROM[27012]
@ :push_that                                 // ROM[27013]
0; JMP                                       // ROM[27014]
( Screen.drawHorizontal:388)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[27015]
D = A                                        // ROM[27016]
// ---------------------------
// push D
@ SP                                         // ROM[27017]
AM = M+1                                     // ROM[27018]
A = A-1                                      // ROM[27019]
M = D                                        // ROM[27020]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:389                  // ROM[27021]
D = A                                        // ROM[27022]
@ R15                                        // ROM[27023]
M = D                                        // ROM[27024]
@ :sub                                       // ROM[27025]
0; JMP                                       // ROM[27026]
( Screen.drawHorizontal:389)

// -------------------------------------
// POP: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[27027]
D = A                                        // ROM[27028]
@ R13                                        // ROM[27029]
M = D                                        // ROM[27030]
// ---------------------------
// call
@ Screen.drawHorizontal:390                  // ROM[27031]
D = A                                        // ROM[27032]
@ R15                                        // ROM[27033]
M = D                                        // ROM[27034]
@ :pop_local                                 // ROM[27035]
0; JMP                                       // ROM[27036]
( Screen.drawHorizontal:390)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27037]
D = A                                        // ROM[27038]
@ R13                                        // ROM[27039]
M = D                                        // ROM[27040]
// ---------------------------
// call
@ Screen.drawHorizontal:391                  // ROM[27041]
D = A                                        // ROM[27042]
@ R15                                        // ROM[27043]
M = D                                        // ROM[27044]
@ :push_argument                             // ROM[27045]
0; JMP                                       // ROM[27046]
( Screen.drawHorizontal:391)

// -------------------------------------
// PUSH: <constant, 32>
// -------------------------------------
@ 32                                         // ROM[27047]
D = A                                        // ROM[27048]
// ---------------------------
// push D
@ SP                                         // ROM[27049]
AM = M+1                                     // ROM[27050]
A = A-1                                      // ROM[27051]
M = D                                        // ROM[27052]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[27053]
D = A                                        // ROM[27054]
@ R13                                        // ROM[27055]
M = D                                        // ROM[27056]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:392                  // ROM[27057]
D = A                                        // ROM[27058]
// ---------------------------
// push D
@ SP                                         // ROM[27059]
AM = M+1                                     // ROM[27060]
A = A-1                                      // ROM[27061]
M = D                                        // ROM[27062]
// ---------------------------
// call
@ Screen.drawHorizontal:393                  // ROM[27063]
D = A                                        // ROM[27064]
@ R15                                        // ROM[27065]
M = D                                        // ROM[27066]
@ :call                                      // ROM[27067]
0; JMP                                       // ROM[27068]
( Screen.drawHorizontal:393)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[27069]
0; JMP                                       // ROM[27070]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:392) 

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[27071]
D = A                                        // ROM[27072]
@ R13                                        // ROM[27073]
M = D                                        // ROM[27074]
// ---------------------------
// call
@ Screen.drawHorizontal:394                  // ROM[27075]
D = A                                        // ROM[27076]
@ R15                                        // ROM[27077]
M = D                                        // ROM[27078]
@ :push_local                                // ROM[27079]
0; JMP                                       // ROM[27080]
( Screen.drawHorizontal:394)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:395                  // ROM[27081]
D = A                                        // ROM[27082]
@ R15                                        // ROM[27083]
M = D                                        // ROM[27084]
@ :add                                       // ROM[27085]
0; JMP                                       // ROM[27086]
( Screen.drawHorizontal:395)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27087]
D = A                                        // ROM[27088]
@ R13                                        // ROM[27089]
M = D                                        // ROM[27090]
// ---------------------------
// call
@ Screen.drawHorizontal:396                  // ROM[27091]
D = A                                        // ROM[27092]
@ R15                                        // ROM[27093]
M = D                                        // ROM[27094]
@ :pop_local                                 // ROM[27095]
0; JMP                                       // ROM[27096]
( Screen.drawHorizontal:396)

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[27097]
D = A                                        // ROM[27098]
@ R13                                        // ROM[27099]
M = D                                        // ROM[27100]
// ---------------------------
// call
@ Screen.drawHorizontal:397                  // ROM[27101]
D = A                                        // ROM[27102]
@ R15                                        // ROM[27103]
M = D                                        // ROM[27104]
@ :push_local                                // ROM[27105]
0; JMP                                       // ROM[27106]
( Screen.drawHorizontal:397)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[27107]
D = A                                        // ROM[27108]
@ R13                                        // ROM[27109]
M = D                                        // ROM[27110]
// ---------------------------
// call
@ Screen.drawHorizontal:398                  // ROM[27111]
D = A                                        // ROM[27112]
@ R15                                        // ROM[27113]
M = D                                        // ROM[27114]
@ :push_local                                // ROM[27115]
0; JMP                                       // ROM[27116]
( Screen.drawHorizontal:398)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:399                  // ROM[27117]
D = A                                        // ROM[27118]
@ R15                                        // ROM[27119]
M = D                                        // ROM[27120]
@ :sub                                       // ROM[27121]
0; JMP                                       // ROM[27122]
( Screen.drawHorizontal:399)

// -------------------------------------
// POP: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[27123]
D = A                                        // ROM[27124]
@ R13                                        // ROM[27125]
M = D                                        // ROM[27126]
// ---------------------------
// call
@ Screen.drawHorizontal:400                  // ROM[27127]
D = A                                        // ROM[27128]
@ R15                                        // ROM[27129]
M = D                                        // ROM[27130]
@ :pop_local                                 // ROM[27131]
0; JMP                                       // ROM[27132]
( Screen.drawHorizontal:400)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27133]
D = A                                        // ROM[27134]
@ R13                                        // ROM[27135]
M = D                                        // ROM[27136]
// ---------------------------
// call
@ Screen.drawHorizontal:401                  // ROM[27137]
D = A                                        // ROM[27138]
@ R15                                        // ROM[27139]
M = D                                        // ROM[27140]
@ :push_local                                // ROM[27141]
0; JMP                                       // ROM[27142]
( Screen.drawHorizontal:401)

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[27143]
D = A                                        // ROM[27144]
@ R13                                        // ROM[27145]
M = D                                        // ROM[27146]
// ---------------------------
// call
@ Screen.drawHorizontal:402                  // ROM[27147]
D = A                                        // ROM[27148]
@ R15                                        // ROM[27149]
M = D                                        // ROM[27150]
@ :push_local                                // ROM[27151]
0; JMP                                       // ROM[27152]
( Screen.drawHorizontal:402)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:403                  // ROM[27153]
D = A                                        // ROM[27154]
@ R15                                        // ROM[27155]
M = D                                        // ROM[27156]
@ :add                                       // ROM[27157]
0; JMP                                       // ROM[27158]
( Screen.drawHorizontal:403)

// -------------------------------------
// POP: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27159]
D = A                                        // ROM[27160]
@ R13                                        // ROM[27161]
M = D                                        // ROM[27162]
// ---------------------------
// call
@ Screen.drawHorizontal:404                  // ROM[27163]
D = A                                        // ROM[27164]
@ R15                                        // ROM[27165]
M = D                                        // ROM[27166]
@ :pop_local                                 // ROM[27167]
0; JMP                                       // ROM[27168]
( Screen.drawHorizontal:404)

// -------------------------------------
// PUSH: <local, 6>
// -------------------------------------
// ---------------------------
// R13 = index
@ 6                                          // ROM[27169]
D = A                                        // ROM[27170]
@ R13                                        // ROM[27171]
M = D                                        // ROM[27172]
// ---------------------------
// call
@ Screen.drawHorizontal:405                  // ROM[27173]
D = A                                        // ROM[27174]
@ R15                                        // ROM[27175]
M = D                                        // ROM[27176]
@ :push_local                                // ROM[27177]
0; JMP                                       // ROM[27178]
( Screen.drawHorizontal:405)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[27179]
D = A                                        // ROM[27180]
// ---------------------------
// push D
@ SP                                         // ROM[27181]
AM = M+1                                     // ROM[27182]
A = A-1                                      // ROM[27183]
M = D                                        // ROM[27184]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:406                  // ROM[27185]
D = A                                        // ROM[27186]
@ R15                                        // ROM[27187]
M = D                                        // ROM[27188]
@ :eq                                        // ROM[27189]
0; JMP                                       // ROM[27190]
( Screen.drawHorizontal:406)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27191]
AM = M-1                                     // ROM[27192]
D = M                                        // ROM[27193]
// ---------------------------
@ Screen.drawHorizontal$IF_TRUE1             // ROM[27194]
D; JNE                                       // ROM[27195]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Screen.drawHorizontal$IF_FALSE1            // ROM[27196]
0; JMP                                       // ROM[27197]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Screen.drawHorizontal$IF_TRUE1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27198]
D = A                                        // ROM[27199]
@ R13                                        // ROM[27200]
M = D                                        // ROM[27201]
// ---------------------------
// call
@ Screen.drawHorizontal:407                  // ROM[27202]
D = A                                        // ROM[27203]
@ R15                                        // ROM[27204]
M = D                                        // ROM[27205]
@ :push_local                                // ROM[27206]
0; JMP                                       // ROM[27207]
( Screen.drawHorizontal:407)

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[27208]
D = A                                        // ROM[27209]
@ R13                                        // ROM[27210]
M = D                                        // ROM[27211]
// ---------------------------
// call
@ Screen.drawHorizontal:408                  // ROM[27212]
D = A                                        // ROM[27213]
@ R15                                        // ROM[27214]
M = D                                        // ROM[27215]
@ :push_local                                // ROM[27216]
0; JMP                                       // ROM[27217]
( Screen.drawHorizontal:408)

// -------------------------------------
// PUSH: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[27218]
D = A                                        // ROM[27219]
@ R13                                        // ROM[27220]
M = D                                        // ROM[27221]
// ---------------------------
// call
@ Screen.drawHorizontal:409                  // ROM[27222]
D = A                                        // ROM[27223]
@ R15                                        // ROM[27224]
M = D                                        // ROM[27225]
@ :push_local                                // ROM[27226]
0; JMP                                       // ROM[27227]
( Screen.drawHorizontal:409)

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:410                  // ROM[27228]
D = A                                        // ROM[27229]
@ R15                                        // ROM[27230]
M = D                                        // ROM[27231]
@ :and                                       // ROM[27232]
0; JMP                                       // ROM[27233]
( Screen.drawHorizontal:410)

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[27234]
D = A                                        // ROM[27235]
@ R13                                        // ROM[27236]
M = D                                        // ROM[27237]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:411                  // ROM[27238]
D = A                                        // ROM[27239]
// ---------------------------
// push D
@ SP                                         // ROM[27240]
AM = M+1                                     // ROM[27241]
A = A-1                                      // ROM[27242]
M = D                                        // ROM[27243]
// ---------------------------
// call
@ Screen.drawHorizontal:412                  // ROM[27244]
D = A                                        // ROM[27245]
@ R15                                        // ROM[27246]
M = D                                        // ROM[27247]
@ :call                                      // ROM[27248]
0; JMP                                       // ROM[27249]
( Screen.drawHorizontal:412)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[27250]
0; JMP                                       // ROM[27251]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:411) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27252]
AM = M-1                                     // ROM[27253]
D = M                                        // ROM[27254]
// ---------------------------
@ 5                                          // ROM[27255]
M = D                                        // ROM[27256]

// -------------------------------------
// GOTO: IF_END1
// -------------------------------------
@ Screen.drawHorizontal$IF_END1              // ROM[27257]
0; JMP                                       // ROM[27258]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Screen.drawHorizontal$IF_FALSE1 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27259]
D = A                                        // ROM[27260]
@ R13                                        // ROM[27261]
M = D                                        // ROM[27262]
// ---------------------------
// call
@ Screen.drawHorizontal:413                  // ROM[27263]
D = A                                        // ROM[27264]
@ R15                                        // ROM[27265]
M = D                                        // ROM[27266]
@ :push_local                                // ROM[27267]
0; JMP                                       // ROM[27268]
( Screen.drawHorizontal:413)

// -------------------------------------
// PUSH: <local, 5>
// -------------------------------------
// ---------------------------
// R13 = index
@ 5                                          // ROM[27269]
D = A                                        // ROM[27270]
@ R13                                        // ROM[27271]
M = D                                        // ROM[27272]
// ---------------------------
// call
@ Screen.drawHorizontal:414                  // ROM[27273]
D = A                                        // ROM[27274]
@ R15                                        // ROM[27275]
M = D                                        // ROM[27276]
@ :push_local                                // ROM[27277]
0; JMP                                       // ROM[27278]
( Screen.drawHorizontal:414)

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[27279]
D = A                                        // ROM[27280]
@ R13                                        // ROM[27281]
M = D                                        // ROM[27282]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:415                  // ROM[27283]
D = A                                        // ROM[27284]
// ---------------------------
// push D
@ SP                                         // ROM[27285]
AM = M+1                                     // ROM[27286]
A = A-1                                      // ROM[27287]
M = D                                        // ROM[27288]
// ---------------------------
// call
@ Screen.drawHorizontal:416                  // ROM[27289]
D = A                                        // ROM[27290]
@ R15                                        // ROM[27291]
M = D                                        // ROM[27292]
@ :call                                      // ROM[27293]
0; JMP                                       // ROM[27294]
( Screen.drawHorizontal:416)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[27295]
0; JMP                                       // ROM[27296]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:415) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27297]
AM = M-1                                     // ROM[27298]
D = M                                        // ROM[27299]
// ---------------------------
@ 5                                          // ROM[27300]
M = D                                        // ROM[27301]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27302]
D = A                                        // ROM[27303]
@ R13                                        // ROM[27304]
M = D                                        // ROM[27305]
// ---------------------------
// call
@ Screen.drawHorizontal:417                  // ROM[27306]
D = A                                        // ROM[27307]
@ R15                                        // ROM[27308]
M = D                                        // ROM[27309]
@ :push_local                                // ROM[27310]
0; JMP                                       // ROM[27311]
( Screen.drawHorizontal:417)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[27312]
D = A                                        // ROM[27313]
// ---------------------------
// push D
@ SP                                         // ROM[27314]
AM = M+1                                     // ROM[27315]
A = A-1                                      // ROM[27316]
M = D                                        // ROM[27317]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:418                  // ROM[27318]
D = A                                        // ROM[27319]
@ R15                                        // ROM[27320]
M = D                                        // ROM[27321]
@ :add                                       // ROM[27322]
0; JMP                                       // ROM[27323]
( Screen.drawHorizontal:418)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27324]
D = A                                        // ROM[27325]
@ R13                                        // ROM[27326]
M = D                                        // ROM[27327]
// ---------------------------
// call
@ Screen.drawHorizontal:419                  // ROM[27328]
D = A                                        // ROM[27329]
@ R15                                        // ROM[27330]
M = D                                        // ROM[27331]
@ :pop_local                                 // ROM[27332]
0; JMP                                       // ROM[27333]
( Screen.drawHorizontal:419)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Screen.drawHorizontal$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27334]
D = A                                        // ROM[27335]
@ R13                                        // ROM[27336]
M = D                                        // ROM[27337]
// ---------------------------
// call
@ Screen.drawHorizontal:420                  // ROM[27338]
D = A                                        // ROM[27339]
@ R15                                        // ROM[27340]
M = D                                        // ROM[27341]
@ :push_local                                // ROM[27342]
0; JMP                                       // ROM[27343]
( Screen.drawHorizontal:420)

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27344]
D = A                                        // ROM[27345]
@ R13                                        // ROM[27346]
M = D                                        // ROM[27347]
// ---------------------------
// call
@ Screen.drawHorizontal:421                  // ROM[27348]
D = A                                        // ROM[27349]
@ R15                                        // ROM[27350]
M = D                                        // ROM[27351]
@ :push_local                                // ROM[27352]
0; JMP                                       // ROM[27353]
( Screen.drawHorizontal:421)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:422                  // ROM[27354]
D = A                                        // ROM[27355]
@ R15                                        // ROM[27356]
M = D                                        // ROM[27357]
@ :lt                                        // ROM[27358]
0; JMP                                       // ROM[27359]
( Screen.drawHorizontal:422)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[27360]
A = M-1                                      // ROM[27361]
M = !M                                       // ROM[27362]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27363]
AM = M-1                                     // ROM[27364]
D = M                                        // ROM[27365]
// ---------------------------
@ Screen.drawHorizontal$WHILE_END0           // ROM[27366]
D; JNE                                       // ROM[27367]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27368]
D = A                                        // ROM[27369]
@ R13                                        // ROM[27370]
M = D                                        // ROM[27371]
// ---------------------------
// call
@ Screen.drawHorizontal:423                  // ROM[27372]
D = A                                        // ROM[27373]
@ R15                                        // ROM[27374]
M = D                                        // ROM[27375]
@ :push_local                                // ROM[27376]
0; JMP                                       // ROM[27377]
( Screen.drawHorizontal:423)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[27378]
D = A                                        // ROM[27379]
// ---------------------------
// push D
@ SP                                         // ROM[27380]
AM = M+1                                     // ROM[27381]
A = A-1                                      // ROM[27382]
M = D                                        // ROM[27383]

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[27384]
A = M-1                                      // ROM[27385]
M = -M                                       // ROM[27386]

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[27387]
D = A                                        // ROM[27388]
@ R13                                        // ROM[27389]
M = D                                        // ROM[27390]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:424                  // ROM[27391]
D = A                                        // ROM[27392]
// ---------------------------
// push D
@ SP                                         // ROM[27393]
AM = M+1                                     // ROM[27394]
A = A-1                                      // ROM[27395]
M = D                                        // ROM[27396]
// ---------------------------
// call
@ Screen.drawHorizontal:425                  // ROM[27397]
D = A                                        // ROM[27398]
@ R15                                        // ROM[27399]
M = D                                        // ROM[27400]
@ :call                                      // ROM[27401]
0; JMP                                       // ROM[27402]
( Screen.drawHorizontal:425)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[27403]
0; JMP                                       // ROM[27404]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:424) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27405]
AM = M-1                                     // ROM[27406]
D = M                                        // ROM[27407]
// ---------------------------
@ 5                                          // ROM[27408]
M = D                                        // ROM[27409]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27410]
D = A                                        // ROM[27411]
@ R13                                        // ROM[27412]
M = D                                        // ROM[27413]
// ---------------------------
// call
@ Screen.drawHorizontal:426                  // ROM[27414]
D = A                                        // ROM[27415]
@ R15                                        // ROM[27416]
M = D                                        // ROM[27417]
@ :push_local                                // ROM[27418]
0; JMP                                       // ROM[27419]
( Screen.drawHorizontal:426)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[27420]
D = A                                        // ROM[27421]
// ---------------------------
// push D
@ SP                                         // ROM[27422]
AM = M+1                                     // ROM[27423]
A = A-1                                      // ROM[27424]
M = D                                        // ROM[27425]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:427                  // ROM[27426]
D = A                                        // ROM[27427]
@ R15                                        // ROM[27428]
M = D                                        // ROM[27429]
@ :add                                       // ROM[27430]
0; JMP                                       // ROM[27431]
( Screen.drawHorizontal:427)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27432]
D = A                                        // ROM[27433]
@ R13                                        // ROM[27434]
M = D                                        // ROM[27435]
// ---------------------------
// call
@ Screen.drawHorizontal:428                  // ROM[27436]
D = A                                        // ROM[27437]
@ R15                                        // ROM[27438]
M = D                                        // ROM[27439]
@ :pop_local                                 // ROM[27440]
0; JMP                                       // ROM[27441]
( Screen.drawHorizontal:428)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Screen.drawHorizontal$WHILE_EXP0           // ROM[27442]
0; JMP                                       // ROM[27443]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Screen.drawHorizontal$WHILE_END0 )

// -------------------------------------
// PUSH: <local, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27444]
D = A                                        // ROM[27445]
@ R13                                        // ROM[27446]
M = D                                        // ROM[27447]
// ---------------------------
// call
@ Screen.drawHorizontal:429                  // ROM[27448]
D = A                                        // ROM[27449]
@ R15                                        // ROM[27450]
M = D                                        // ROM[27451]
@ :push_local                                // ROM[27452]
0; JMP                                       // ROM[27453]
( Screen.drawHorizontal:429)

// -------------------------------------
// PUSH: <local, 4>
// -------------------------------------
// ---------------------------
// R13 = index
@ 4                                          // ROM[27454]
D = A                                        // ROM[27455]
@ R13                                        // ROM[27456]
M = D                                        // ROM[27457]
// ---------------------------
// call
@ Screen.drawHorizontal:430                  // ROM[27458]
D = A                                        // ROM[27459]
@ R15                                        // ROM[27460]
M = D                                        // ROM[27461]
@ :push_local                                // ROM[27462]
0; JMP                                       // ROM[27463]
( Screen.drawHorizontal:430)

// -------------------------------------
// CALL: Screen.updateLocation(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[27464]
D = A                                        // ROM[27465]
@ R13                                        // ROM[27466]
M = D                                        // ROM[27467]
// ---------------------------
// Push RA
@ Screen.drawHorizontal:431                  // ROM[27468]
D = A                                        // ROM[27469]
// ---------------------------
// push D
@ SP                                         // ROM[27470]
AM = M+1                                     // ROM[27471]
A = A-1                                      // ROM[27472]
M = D                                        // ROM[27473]
// ---------------------------
// call
@ Screen.drawHorizontal:432                  // ROM[27474]
D = A                                        // ROM[27475]
@ R15                                        // ROM[27476]
M = D                                        // ROM[27477]
@ :call                                      // ROM[27478]
0; JMP                                       // ROM[27479]
( Screen.drawHorizontal:432)
// ---------------------------
// goto functionName
@ Screen.updateLocation                      // ROM[27480]
0; JMP                                       // ROM[27481]
// ---------------------------
// ( RA )
( Screen.drawHorizontal:431) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27482]
AM = M-1                                     // ROM[27483]
D = M                                        // ROM[27484]
// ---------------------------
@ 5                                          // ROM[27485]
M = D                                        // ROM[27486]

// -------------------------------------
// LABEL: IF_END1
// -------------------------------------
( Screen.drawHorizontal$IF_END1 )

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Screen.drawHorizontal$IF_FALSE0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[27487]
D = A                                        // ROM[27488]
// ---------------------------
// push D
@ SP                                         // ROM[27489]
AM = M+1                                     // ROM[27490]
A = A-1                                      // ROM[27491]
M = D                                        // ROM[27492]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.drawHorizontal:433                  // ROM[27493]
D = A                                        // ROM[27494]
@ R15                                        // ROM[27495]
M = D                                        // ROM[27496]
@ :return                                    // ROM[27497]
0; JMP                                       // ROM[27498]
( Screen.drawHorizontal:433)

// =========================================================
// FUNCTION: Screen.drawSymetric(0 locals)
// =========================================================

( Screen.drawSymetric )
// ---------------------------
// clear local segment
D = 0                                        // ROM[27499]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[27500]
D = A                                        // ROM[27501]
@ R13                                        // ROM[27502]
M = D                                        // ROM[27503]
// ---------------------------
// call
@ Screen.drawSymetric:434                    // ROM[27504]
D = A                                        // ROM[27505]
@ R15                                        // ROM[27506]
M = D                                        // ROM[27507]
@ :push_argument                             // ROM[27508]
0; JMP                                       // ROM[27509]
( Screen.drawSymetric:434)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27510]
D = A                                        // ROM[27511]
@ R13                                        // ROM[27512]
M = D                                        // ROM[27513]
// ---------------------------
// call
@ Screen.drawSymetric:435                    // ROM[27514]
D = A                                        // ROM[27515]
@ R15                                        // ROM[27516]
M = D                                        // ROM[27517]
@ :push_argument                             // ROM[27518]
0; JMP                                       // ROM[27519]
( Screen.drawSymetric:435)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:436                    // ROM[27520]
D = A                                        // ROM[27521]
@ R15                                        // ROM[27522]
M = D                                        // ROM[27523]
@ :sub                                       // ROM[27524]
0; JMP                                       // ROM[27525]
( Screen.drawSymetric:436)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27526]
D = A                                        // ROM[27527]
@ R13                                        // ROM[27528]
M = D                                        // ROM[27529]
// ---------------------------
// call
@ Screen.drawSymetric:437                    // ROM[27530]
D = A                                        // ROM[27531]
@ R15                                        // ROM[27532]
M = D                                        // ROM[27533]
@ :push_argument                             // ROM[27534]
0; JMP                                       // ROM[27535]
( Screen.drawSymetric:437)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[27536]
D = A                                        // ROM[27537]
@ R13                                        // ROM[27538]
M = D                                        // ROM[27539]
// ---------------------------
// call
@ Screen.drawSymetric:438                    // ROM[27540]
D = A                                        // ROM[27541]
@ R15                                        // ROM[27542]
M = D                                        // ROM[27543]
@ :push_argument                             // ROM[27544]
0; JMP                                       // ROM[27545]
( Screen.drawSymetric:438)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:439                    // ROM[27546]
D = A                                        // ROM[27547]
@ R15                                        // ROM[27548]
M = D                                        // ROM[27549]
@ :add                                       // ROM[27550]
0; JMP                                       // ROM[27551]
( Screen.drawSymetric:439)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27552]
D = A                                        // ROM[27553]
@ R13                                        // ROM[27554]
M = D                                        // ROM[27555]
// ---------------------------
// call
@ Screen.drawSymetric:440                    // ROM[27556]
D = A                                        // ROM[27557]
@ R15                                        // ROM[27558]
M = D                                        // ROM[27559]
@ :push_argument                             // ROM[27560]
0; JMP                                       // ROM[27561]
( Screen.drawSymetric:440)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[27562]
D = A                                        // ROM[27563]
@ R13                                        // ROM[27564]
M = D                                        // ROM[27565]
// ---------------------------
// call
@ Screen.drawSymetric:441                    // ROM[27566]
D = A                                        // ROM[27567]
@ R15                                        // ROM[27568]
M = D                                        // ROM[27569]
@ :push_argument                             // ROM[27570]
0; JMP                                       // ROM[27571]
( Screen.drawSymetric:441)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:442                    // ROM[27572]
D = A                                        // ROM[27573]
@ R15                                        // ROM[27574]
M = D                                        // ROM[27575]
@ :sub                                       // ROM[27576]
0; JMP                                       // ROM[27577]
( Screen.drawSymetric:442)

// -------------------------------------
// CALL: Screen.drawHorizontal(3 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 3                                          // ROM[27578]
D = A                                        // ROM[27579]
@ R13                                        // ROM[27580]
M = D                                        // ROM[27581]
// ---------------------------
// Push RA
@ Screen.drawSymetric:443                    // ROM[27582]
D = A                                        // ROM[27583]
// ---------------------------
// push D
@ SP                                         // ROM[27584]
AM = M+1                                     // ROM[27585]
A = A-1                                      // ROM[27586]
M = D                                        // ROM[27587]
// ---------------------------
// call
@ Screen.drawSymetric:444                    // ROM[27588]
D = A                                        // ROM[27589]
@ R15                                        // ROM[27590]
M = D                                        // ROM[27591]
@ :call                                      // ROM[27592]
0; JMP                                       // ROM[27593]
( Screen.drawSymetric:444)
// ---------------------------
// goto functionName
@ Screen.drawHorizontal                      // ROM[27594]
0; JMP                                       // ROM[27595]
// ---------------------------
// ( RA )
( Screen.drawSymetric:443) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27596]
AM = M-1                                     // ROM[27597]
D = M                                        // ROM[27598]
// ---------------------------
@ 5                                          // ROM[27599]
M = D                                        // ROM[27600]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[27601]
D = A                                        // ROM[27602]
@ R13                                        // ROM[27603]
M = D                                        // ROM[27604]
// ---------------------------
// call
@ Screen.drawSymetric:445                    // ROM[27605]
D = A                                        // ROM[27606]
@ R15                                        // ROM[27607]
M = D                                        // ROM[27608]
@ :push_argument                             // ROM[27609]
0; JMP                                       // ROM[27610]
( Screen.drawSymetric:445)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27611]
D = A                                        // ROM[27612]
@ R13                                        // ROM[27613]
M = D                                        // ROM[27614]
// ---------------------------
// call
@ Screen.drawSymetric:446                    // ROM[27615]
D = A                                        // ROM[27616]
@ R15                                        // ROM[27617]
M = D                                        // ROM[27618]
@ :push_argument                             // ROM[27619]
0; JMP                                       // ROM[27620]
( Screen.drawSymetric:446)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:447                    // ROM[27621]
D = A                                        // ROM[27622]
@ R15                                        // ROM[27623]
M = D                                        // ROM[27624]
@ :add                                       // ROM[27625]
0; JMP                                       // ROM[27626]
( Screen.drawSymetric:447)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27627]
D = A                                        // ROM[27628]
@ R13                                        // ROM[27629]
M = D                                        // ROM[27630]
// ---------------------------
// call
@ Screen.drawSymetric:448                    // ROM[27631]
D = A                                        // ROM[27632]
@ R15                                        // ROM[27633]
M = D                                        // ROM[27634]
@ :push_argument                             // ROM[27635]
0; JMP                                       // ROM[27636]
( Screen.drawSymetric:448)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[27637]
D = A                                        // ROM[27638]
@ R13                                        // ROM[27639]
M = D                                        // ROM[27640]
// ---------------------------
// call
@ Screen.drawSymetric:449                    // ROM[27641]
D = A                                        // ROM[27642]
@ R15                                        // ROM[27643]
M = D                                        // ROM[27644]
@ :push_argument                             // ROM[27645]
0; JMP                                       // ROM[27646]
( Screen.drawSymetric:449)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:450                    // ROM[27647]
D = A                                        // ROM[27648]
@ R15                                        // ROM[27649]
M = D                                        // ROM[27650]
@ :add                                       // ROM[27651]
0; JMP                                       // ROM[27652]
( Screen.drawSymetric:450)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27653]
D = A                                        // ROM[27654]
@ R13                                        // ROM[27655]
M = D                                        // ROM[27656]
// ---------------------------
// call
@ Screen.drawSymetric:451                    // ROM[27657]
D = A                                        // ROM[27658]
@ R15                                        // ROM[27659]
M = D                                        // ROM[27660]
@ :push_argument                             // ROM[27661]
0; JMP                                       // ROM[27662]
( Screen.drawSymetric:451)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[27663]
D = A                                        // ROM[27664]
@ R13                                        // ROM[27665]
M = D                                        // ROM[27666]
// ---------------------------
// call
@ Screen.drawSymetric:452                    // ROM[27667]
D = A                                        // ROM[27668]
@ R15                                        // ROM[27669]
M = D                                        // ROM[27670]
@ :push_argument                             // ROM[27671]
0; JMP                                       // ROM[27672]
( Screen.drawSymetric:452)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:453                    // ROM[27673]
D = A                                        // ROM[27674]
@ R15                                        // ROM[27675]
M = D                                        // ROM[27676]
@ :sub                                       // ROM[27677]
0; JMP                                       // ROM[27678]
( Screen.drawSymetric:453)

// -------------------------------------
// CALL: Screen.drawHorizontal(3 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 3                                          // ROM[27679]
D = A                                        // ROM[27680]
@ R13                                        // ROM[27681]
M = D                                        // ROM[27682]
// ---------------------------
// Push RA
@ Screen.drawSymetric:454                    // ROM[27683]
D = A                                        // ROM[27684]
// ---------------------------
// push D
@ SP                                         // ROM[27685]
AM = M+1                                     // ROM[27686]
A = A-1                                      // ROM[27687]
M = D                                        // ROM[27688]
// ---------------------------
// call
@ Screen.drawSymetric:455                    // ROM[27689]
D = A                                        // ROM[27690]
@ R15                                        // ROM[27691]
M = D                                        // ROM[27692]
@ :call                                      // ROM[27693]
0; JMP                                       // ROM[27694]
( Screen.drawSymetric:455)
// ---------------------------
// goto functionName
@ Screen.drawHorizontal                      // ROM[27695]
0; JMP                                       // ROM[27696]
// ---------------------------
// ( RA )
( Screen.drawSymetric:454) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27697]
AM = M-1                                     // ROM[27698]
D = M                                        // ROM[27699]
// ---------------------------
@ 5                                          // ROM[27700]
M = D                                        // ROM[27701]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[27702]
D = A                                        // ROM[27703]
@ R13                                        // ROM[27704]
M = D                                        // ROM[27705]
// ---------------------------
// call
@ Screen.drawSymetric:456                    // ROM[27706]
D = A                                        // ROM[27707]
@ R15                                        // ROM[27708]
M = D                                        // ROM[27709]
@ :push_argument                             // ROM[27710]
0; JMP                                       // ROM[27711]
( Screen.drawSymetric:456)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[27712]
D = A                                        // ROM[27713]
@ R13                                        // ROM[27714]
M = D                                        // ROM[27715]
// ---------------------------
// call
@ Screen.drawSymetric:457                    // ROM[27716]
D = A                                        // ROM[27717]
@ R15                                        // ROM[27718]
M = D                                        // ROM[27719]
@ :push_argument                             // ROM[27720]
0; JMP                                       // ROM[27721]
( Screen.drawSymetric:457)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:458                    // ROM[27722]
D = A                                        // ROM[27723]
@ R15                                        // ROM[27724]
M = D                                        // ROM[27725]
@ :sub                                       // ROM[27726]
0; JMP                                       // ROM[27727]
( Screen.drawSymetric:458)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27728]
D = A                                        // ROM[27729]
@ R13                                        // ROM[27730]
M = D                                        // ROM[27731]
// ---------------------------
// call
@ Screen.drawSymetric:459                    // ROM[27732]
D = A                                        // ROM[27733]
@ R15                                        // ROM[27734]
M = D                                        // ROM[27735]
@ :push_argument                             // ROM[27736]
0; JMP                                       // ROM[27737]
( Screen.drawSymetric:459)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27738]
D = A                                        // ROM[27739]
@ R13                                        // ROM[27740]
M = D                                        // ROM[27741]
// ---------------------------
// call
@ Screen.drawSymetric:460                    // ROM[27742]
D = A                                        // ROM[27743]
@ R15                                        // ROM[27744]
M = D                                        // ROM[27745]
@ :push_argument                             // ROM[27746]
0; JMP                                       // ROM[27747]
( Screen.drawSymetric:460)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:461                    // ROM[27748]
D = A                                        // ROM[27749]
@ R15                                        // ROM[27750]
M = D                                        // ROM[27751]
@ :sub                                       // ROM[27752]
0; JMP                                       // ROM[27753]
( Screen.drawSymetric:461)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27754]
D = A                                        // ROM[27755]
@ R13                                        // ROM[27756]
M = D                                        // ROM[27757]
// ---------------------------
// call
@ Screen.drawSymetric:462                    // ROM[27758]
D = A                                        // ROM[27759]
@ R15                                        // ROM[27760]
M = D                                        // ROM[27761]
@ :push_argument                             // ROM[27762]
0; JMP                                       // ROM[27763]
( Screen.drawSymetric:462)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27764]
D = A                                        // ROM[27765]
@ R13                                        // ROM[27766]
M = D                                        // ROM[27767]
// ---------------------------
// call
@ Screen.drawSymetric:463                    // ROM[27768]
D = A                                        // ROM[27769]
@ R15                                        // ROM[27770]
M = D                                        // ROM[27771]
@ :push_argument                             // ROM[27772]
0; JMP                                       // ROM[27773]
( Screen.drawSymetric:463)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:464                    // ROM[27774]
D = A                                        // ROM[27775]
@ R15                                        // ROM[27776]
M = D                                        // ROM[27777]
@ :add                                       // ROM[27778]
0; JMP                                       // ROM[27779]
( Screen.drawSymetric:464)

// -------------------------------------
// CALL: Screen.drawHorizontal(3 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 3                                          // ROM[27780]
D = A                                        // ROM[27781]
@ R13                                        // ROM[27782]
M = D                                        // ROM[27783]
// ---------------------------
// Push RA
@ Screen.drawSymetric:465                    // ROM[27784]
D = A                                        // ROM[27785]
// ---------------------------
// push D
@ SP                                         // ROM[27786]
AM = M+1                                     // ROM[27787]
A = A-1                                      // ROM[27788]
M = D                                        // ROM[27789]
// ---------------------------
// call
@ Screen.drawSymetric:466                    // ROM[27790]
D = A                                        // ROM[27791]
@ R15                                        // ROM[27792]
M = D                                        // ROM[27793]
@ :call                                      // ROM[27794]
0; JMP                                       // ROM[27795]
( Screen.drawSymetric:466)
// ---------------------------
// goto functionName
@ Screen.drawHorizontal                      // ROM[27796]
0; JMP                                       // ROM[27797]
// ---------------------------
// ( RA )
( Screen.drawSymetric:465) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27798]
AM = M-1                                     // ROM[27799]
D = M                                        // ROM[27800]
// ---------------------------
@ 5                                          // ROM[27801]
M = D                                        // ROM[27802]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[27803]
D = A                                        // ROM[27804]
@ R13                                        // ROM[27805]
M = D                                        // ROM[27806]
// ---------------------------
// call
@ Screen.drawSymetric:467                    // ROM[27807]
D = A                                        // ROM[27808]
@ R15                                        // ROM[27809]
M = D                                        // ROM[27810]
@ :push_argument                             // ROM[27811]
0; JMP                                       // ROM[27812]
( Screen.drawSymetric:467)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[27813]
D = A                                        // ROM[27814]
@ R13                                        // ROM[27815]
M = D                                        // ROM[27816]
// ---------------------------
// call
@ Screen.drawSymetric:468                    // ROM[27817]
D = A                                        // ROM[27818]
@ R15                                        // ROM[27819]
M = D                                        // ROM[27820]
@ :push_argument                             // ROM[27821]
0; JMP                                       // ROM[27822]
( Screen.drawSymetric:468)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:469                    // ROM[27823]
D = A                                        // ROM[27824]
@ R15                                        // ROM[27825]
M = D                                        // ROM[27826]
@ :add                                       // ROM[27827]
0; JMP                                       // ROM[27828]
( Screen.drawSymetric:469)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27829]
D = A                                        // ROM[27830]
@ R13                                        // ROM[27831]
M = D                                        // ROM[27832]
// ---------------------------
// call
@ Screen.drawSymetric:470                    // ROM[27833]
D = A                                        // ROM[27834]
@ R15                                        // ROM[27835]
M = D                                        // ROM[27836]
@ :push_argument                             // ROM[27837]
0; JMP                                       // ROM[27838]
( Screen.drawSymetric:470)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27839]
D = A                                        // ROM[27840]
@ R13                                        // ROM[27841]
M = D                                        // ROM[27842]
// ---------------------------
// call
@ Screen.drawSymetric:471                    // ROM[27843]
D = A                                        // ROM[27844]
@ R15                                        // ROM[27845]
M = D                                        // ROM[27846]
@ :push_argument                             // ROM[27847]
0; JMP                                       // ROM[27848]
( Screen.drawSymetric:471)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:472                    // ROM[27849]
D = A                                        // ROM[27850]
@ R15                                        // ROM[27851]
M = D                                        // ROM[27852]
@ :sub                                       // ROM[27853]
0; JMP                                       // ROM[27854]
( Screen.drawSymetric:472)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27855]
D = A                                        // ROM[27856]
@ R13                                        // ROM[27857]
M = D                                        // ROM[27858]
// ---------------------------
// call
@ Screen.drawSymetric:473                    // ROM[27859]
D = A                                        // ROM[27860]
@ R15                                        // ROM[27861]
M = D                                        // ROM[27862]
@ :push_argument                             // ROM[27863]
0; JMP                                       // ROM[27864]
( Screen.drawSymetric:473)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[27865]
D = A                                        // ROM[27866]
@ R13                                        // ROM[27867]
M = D                                        // ROM[27868]
// ---------------------------
// call
@ Screen.drawSymetric:474                    // ROM[27869]
D = A                                        // ROM[27870]
@ R15                                        // ROM[27871]
M = D                                        // ROM[27872]
@ :push_argument                             // ROM[27873]
0; JMP                                       // ROM[27874]
( Screen.drawSymetric:474)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:475                    // ROM[27875]
D = A                                        // ROM[27876]
@ R15                                        // ROM[27877]
M = D                                        // ROM[27878]
@ :add                                       // ROM[27879]
0; JMP                                       // ROM[27880]
( Screen.drawSymetric:475)

// -------------------------------------
// CALL: Screen.drawHorizontal(3 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 3                                          // ROM[27881]
D = A                                        // ROM[27882]
@ R13                                        // ROM[27883]
M = D                                        // ROM[27884]
// ---------------------------
// Push RA
@ Screen.drawSymetric:476                    // ROM[27885]
D = A                                        // ROM[27886]
// ---------------------------
// push D
@ SP                                         // ROM[27887]
AM = M+1                                     // ROM[27888]
A = A-1                                      // ROM[27889]
M = D                                        // ROM[27890]
// ---------------------------
// call
@ Screen.drawSymetric:477                    // ROM[27891]
D = A                                        // ROM[27892]
@ R15                                        // ROM[27893]
M = D                                        // ROM[27894]
@ :call                                      // ROM[27895]
0; JMP                                       // ROM[27896]
( Screen.drawSymetric:477)
// ---------------------------
// goto functionName
@ Screen.drawHorizontal                      // ROM[27897]
0; JMP                                       // ROM[27898]
// ---------------------------
// ( RA )
( Screen.drawSymetric:476) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[27899]
AM = M-1                                     // ROM[27900]
D = M                                        // ROM[27901]
// ---------------------------
@ 5                                          // ROM[27902]
M = D                                        // ROM[27903]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[27904]
D = A                                        // ROM[27905]
// ---------------------------
// push D
@ SP                                         // ROM[27906]
AM = M+1                                     // ROM[27907]
A = A-1                                      // ROM[27908]
M = D                                        // ROM[27909]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.drawSymetric:478                    // ROM[27910]
D = A                                        // ROM[27911]
@ R15                                        // ROM[27912]
M = D                                        // ROM[27913]
@ :return                                    // ROM[27914]
0; JMP                                       // ROM[27915]
( Screen.drawSymetric:478)

// =========================================================
// FUNCTION: Screen.drawCircle(3 locals)
// =========================================================

( Screen.drawCircle )
// ---------------------------
// clear local segment
D = 0                                        // ROM[27916]
// ---------------------------
// push D
@ SP                                         // ROM[27917]
AM = M+1                                     // ROM[27918]
A = A-1                                      // ROM[27919]
M = D                                        // ROM[27920]
// ---------------------------
// push D
@ SP                                         // ROM[27921]
AM = M+1                                     // ROM[27922]
A = A-1                                      // ROM[27923]
M = D                                        // ROM[27924]
// ---------------------------
// push D
@ SP                                         // ROM[27925]
AM = M+1                                     // ROM[27926]
A = A-1                                      // ROM[27927]
M = D                                        // ROM[27928]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27929]
D = A                                        // ROM[27930]
@ R13                                        // ROM[27931]
M = D                                        // ROM[27932]
// ---------------------------
// call
@ Screen.drawCircle:479                      // ROM[27933]
D = A                                        // ROM[27934]
@ R15                                        // ROM[27935]
M = D                                        // ROM[27936]
@ :push_argument                             // ROM[27937]
0; JMP                                       // ROM[27938]
( Screen.drawCircle:479)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[27939]
D = A                                        // ROM[27940]
// ---------------------------
// push D
@ SP                                         // ROM[27941]
AM = M+1                                     // ROM[27942]
A = A-1                                      // ROM[27943]
M = D                                        // ROM[27944]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:480                      // ROM[27945]
D = A                                        // ROM[27946]
@ R15                                        // ROM[27947]
M = D                                        // ROM[27948]
@ :lt                                        // ROM[27949]
0; JMP                                       // ROM[27950]
( Screen.drawCircle:480)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[27951]
D = A                                        // ROM[27952]
@ R13                                        // ROM[27953]
M = D                                        // ROM[27954]
// ---------------------------
// call
@ Screen.drawCircle:481                      // ROM[27955]
D = A                                        // ROM[27956]
@ R15                                        // ROM[27957]
M = D                                        // ROM[27958]
@ :push_argument                             // ROM[27959]
0; JMP                                       // ROM[27960]
( Screen.drawCircle:481)

// -------------------------------------
// PUSH: <constant, 511>
// -------------------------------------
@ 511                                        // ROM[27961]
D = A                                        // ROM[27962]
// ---------------------------
// push D
@ SP                                         // ROM[27963]
AM = M+1                                     // ROM[27964]
A = A-1                                      // ROM[27965]
M = D                                        // ROM[27966]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:482                      // ROM[27967]
D = A                                        // ROM[27968]
@ R15                                        // ROM[27969]
M = D                                        // ROM[27970]
@ :gt                                        // ROM[27971]
0; JMP                                       // ROM[27972]
( Screen.drawCircle:482)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:483                      // ROM[27973]
D = A                                        // ROM[27974]
@ R15                                        // ROM[27975]
M = D                                        // ROM[27976]
@ :or                                        // ROM[27977]
0; JMP                                       // ROM[27978]
( Screen.drawCircle:483)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[27979]
D = A                                        // ROM[27980]
@ R13                                        // ROM[27981]
M = D                                        // ROM[27982]
// ---------------------------
// call
@ Screen.drawCircle:484                      // ROM[27983]
D = A                                        // ROM[27984]
@ R15                                        // ROM[27985]
M = D                                        // ROM[27986]
@ :push_argument                             // ROM[27987]
0; JMP                                       // ROM[27988]
( Screen.drawCircle:484)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[27989]
D = A                                        // ROM[27990]
// ---------------------------
// push D
@ SP                                         // ROM[27991]
AM = M+1                                     // ROM[27992]
A = A-1                                      // ROM[27993]
M = D                                        // ROM[27994]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:485                      // ROM[27995]
D = A                                        // ROM[27996]
@ R15                                        // ROM[27997]
M = D                                        // ROM[27998]
@ :lt                                        // ROM[27999]
0; JMP                                       // ROM[28000]
( Screen.drawCircle:485)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:486                      // ROM[28001]
D = A                                        // ROM[28002]
@ R15                                        // ROM[28003]
M = D                                        // ROM[28004]
@ :or                                        // ROM[28005]
0; JMP                                       // ROM[28006]
( Screen.drawCircle:486)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28007]
D = A                                        // ROM[28008]
@ R13                                        // ROM[28009]
M = D                                        // ROM[28010]
// ---------------------------
// call
@ Screen.drawCircle:487                      // ROM[28011]
D = A                                        // ROM[28012]
@ R15                                        // ROM[28013]
M = D                                        // ROM[28014]
@ :push_argument                             // ROM[28015]
0; JMP                                       // ROM[28016]
( Screen.drawCircle:487)

// -------------------------------------
// PUSH: <constant, 255>
// -------------------------------------
@ 255                                        // ROM[28017]
D = A                                        // ROM[28018]
// ---------------------------
// push D
@ SP                                         // ROM[28019]
AM = M+1                                     // ROM[28020]
A = A-1                                      // ROM[28021]
M = D                                        // ROM[28022]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:488                      // ROM[28023]
D = A                                        // ROM[28024]
@ R15                                        // ROM[28025]
M = D                                        // ROM[28026]
@ :gt                                        // ROM[28027]
0; JMP                                       // ROM[28028]
( Screen.drawCircle:488)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:489                      // ROM[28029]
D = A                                        // ROM[28030]
@ R15                                        // ROM[28031]
M = D                                        // ROM[28032]
@ :or                                        // ROM[28033]
0; JMP                                       // ROM[28034]
( Screen.drawCircle:489)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28035]
AM = M-1                                     // ROM[28036]
D = M                                        // ROM[28037]
// ---------------------------
@ Screen.drawCircle$IF_TRUE0                 // ROM[28038]
D; JNE                                       // ROM[28039]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Screen.drawCircle$IF_FALSE0                // ROM[28040]
0; JMP                                       // ROM[28041]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Screen.drawCircle$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 12>
// -------------------------------------
@ 12                                         // ROM[28042]
D = A                                        // ROM[28043]
// ---------------------------
// push D
@ SP                                         // ROM[28044]
AM = M+1                                     // ROM[28045]
A = A-1                                      // ROM[28046]
M = D                                        // ROM[28047]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[28048]
D = A                                        // ROM[28049]
@ R13                                        // ROM[28050]
M = D                                        // ROM[28051]
// ---------------------------
// Push RA
@ Screen.drawCircle:490                      // ROM[28052]
D = A                                        // ROM[28053]
// ---------------------------
// push D
@ SP                                         // ROM[28054]
AM = M+1                                     // ROM[28055]
A = A-1                                      // ROM[28056]
M = D                                        // ROM[28057]
// ---------------------------
// call
@ Screen.drawCircle:491                      // ROM[28058]
D = A                                        // ROM[28059]
@ R15                                        // ROM[28060]
M = D                                        // ROM[28061]
@ :call                                      // ROM[28062]
0; JMP                                       // ROM[28063]
( Screen.drawCircle:491)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[28064]
0; JMP                                       // ROM[28065]
// ---------------------------
// ( RA )
( Screen.drawCircle:490) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28066]
AM = M-1                                     // ROM[28067]
D = M                                        // ROM[28068]
// ---------------------------
@ 5                                          // ROM[28069]
M = D                                        // ROM[28070]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Screen.drawCircle$IF_FALSE0 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28071]
D = A                                        // ROM[28072]
@ R13                                        // ROM[28073]
M = D                                        // ROM[28074]
// ---------------------------
// call
@ Screen.drawCircle:492                      // ROM[28075]
D = A                                        // ROM[28076]
@ R15                                        // ROM[28077]
M = D                                        // ROM[28078]
@ :push_argument                             // ROM[28079]
0; JMP                                       // ROM[28080]
( Screen.drawCircle:492)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28081]
D = A                                        // ROM[28082]
@ R13                                        // ROM[28083]
M = D                                        // ROM[28084]
// ---------------------------
// call
@ Screen.drawCircle:493                      // ROM[28085]
D = A                                        // ROM[28086]
@ R15                                        // ROM[28087]
M = D                                        // ROM[28088]
@ :push_argument                             // ROM[28089]
0; JMP                                       // ROM[28090]
( Screen.drawCircle:493)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:494                      // ROM[28091]
D = A                                        // ROM[28092]
@ R15                                        // ROM[28093]
M = D                                        // ROM[28094]
@ :sub                                       // ROM[28095]
0; JMP                                       // ROM[28096]
( Screen.drawCircle:494)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[28097]
D = A                                        // ROM[28098]
// ---------------------------
// push D
@ SP                                         // ROM[28099]
AM = M+1                                     // ROM[28100]
A = A-1                                      // ROM[28101]
M = D                                        // ROM[28102]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:495                      // ROM[28103]
D = A                                        // ROM[28104]
@ R15                                        // ROM[28105]
M = D                                        // ROM[28106]
@ :lt                                        // ROM[28107]
0; JMP                                       // ROM[28108]
( Screen.drawCircle:495)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28109]
D = A                                        // ROM[28110]
@ R13                                        // ROM[28111]
M = D                                        // ROM[28112]
// ---------------------------
// call
@ Screen.drawCircle:496                      // ROM[28113]
D = A                                        // ROM[28114]
@ R15                                        // ROM[28115]
M = D                                        // ROM[28116]
@ :push_argument                             // ROM[28117]
0; JMP                                       // ROM[28118]
( Screen.drawCircle:496)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28119]
D = A                                        // ROM[28120]
@ R13                                        // ROM[28121]
M = D                                        // ROM[28122]
// ---------------------------
// call
@ Screen.drawCircle:497                      // ROM[28123]
D = A                                        // ROM[28124]
@ R15                                        // ROM[28125]
M = D                                        // ROM[28126]
@ :push_argument                             // ROM[28127]
0; JMP                                       // ROM[28128]
( Screen.drawCircle:497)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:498                      // ROM[28129]
D = A                                        // ROM[28130]
@ R15                                        // ROM[28131]
M = D                                        // ROM[28132]
@ :add                                       // ROM[28133]
0; JMP                                       // ROM[28134]
( Screen.drawCircle:498)

// -------------------------------------
// PUSH: <constant, 511>
// -------------------------------------
@ 511                                        // ROM[28135]
D = A                                        // ROM[28136]
// ---------------------------
// push D
@ SP                                         // ROM[28137]
AM = M+1                                     // ROM[28138]
A = A-1                                      // ROM[28139]
M = D                                        // ROM[28140]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:499                      // ROM[28141]
D = A                                        // ROM[28142]
@ R15                                        // ROM[28143]
M = D                                        // ROM[28144]
@ :gt                                        // ROM[28145]
0; JMP                                       // ROM[28146]
( Screen.drawCircle:499)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:500                      // ROM[28147]
D = A                                        // ROM[28148]
@ R15                                        // ROM[28149]
M = D                                        // ROM[28150]
@ :or                                        // ROM[28151]
0; JMP                                       // ROM[28152]
( Screen.drawCircle:500)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28153]
D = A                                        // ROM[28154]
@ R13                                        // ROM[28155]
M = D                                        // ROM[28156]
// ---------------------------
// call
@ Screen.drawCircle:501                      // ROM[28157]
D = A                                        // ROM[28158]
@ R15                                        // ROM[28159]
M = D                                        // ROM[28160]
@ :push_argument                             // ROM[28161]
0; JMP                                       // ROM[28162]
( Screen.drawCircle:501)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28163]
D = A                                        // ROM[28164]
@ R13                                        // ROM[28165]
M = D                                        // ROM[28166]
// ---------------------------
// call
@ Screen.drawCircle:502                      // ROM[28167]
D = A                                        // ROM[28168]
@ R15                                        // ROM[28169]
M = D                                        // ROM[28170]
@ :push_argument                             // ROM[28171]
0; JMP                                       // ROM[28172]
( Screen.drawCircle:502)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:503                      // ROM[28173]
D = A                                        // ROM[28174]
@ R15                                        // ROM[28175]
M = D                                        // ROM[28176]
@ :sub                                       // ROM[28177]
0; JMP                                       // ROM[28178]
( Screen.drawCircle:503)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[28179]
D = A                                        // ROM[28180]
// ---------------------------
// push D
@ SP                                         // ROM[28181]
AM = M+1                                     // ROM[28182]
A = A-1                                      // ROM[28183]
M = D                                        // ROM[28184]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:504                      // ROM[28185]
D = A                                        // ROM[28186]
@ R15                                        // ROM[28187]
M = D                                        // ROM[28188]
@ :lt                                        // ROM[28189]
0; JMP                                       // ROM[28190]
( Screen.drawCircle:504)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:505                      // ROM[28191]
D = A                                        // ROM[28192]
@ R15                                        // ROM[28193]
M = D                                        // ROM[28194]
@ :or                                        // ROM[28195]
0; JMP                                       // ROM[28196]
( Screen.drawCircle:505)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28197]
D = A                                        // ROM[28198]
@ R13                                        // ROM[28199]
M = D                                        // ROM[28200]
// ---------------------------
// call
@ Screen.drawCircle:506                      // ROM[28201]
D = A                                        // ROM[28202]
@ R15                                        // ROM[28203]
M = D                                        // ROM[28204]
@ :push_argument                             // ROM[28205]
0; JMP                                       // ROM[28206]
( Screen.drawCircle:506)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28207]
D = A                                        // ROM[28208]
@ R13                                        // ROM[28209]
M = D                                        // ROM[28210]
// ---------------------------
// call
@ Screen.drawCircle:507                      // ROM[28211]
D = A                                        // ROM[28212]
@ R15                                        // ROM[28213]
M = D                                        // ROM[28214]
@ :push_argument                             // ROM[28215]
0; JMP                                       // ROM[28216]
( Screen.drawCircle:507)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:508                      // ROM[28217]
D = A                                        // ROM[28218]
@ R15                                        // ROM[28219]
M = D                                        // ROM[28220]
@ :add                                       // ROM[28221]
0; JMP                                       // ROM[28222]
( Screen.drawCircle:508)

// -------------------------------------
// PUSH: <constant, 255>
// -------------------------------------
@ 255                                        // ROM[28223]
D = A                                        // ROM[28224]
// ---------------------------
// push D
@ SP                                         // ROM[28225]
AM = M+1                                     // ROM[28226]
A = A-1                                      // ROM[28227]
M = D                                        // ROM[28228]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:509                      // ROM[28229]
D = A                                        // ROM[28230]
@ R15                                        // ROM[28231]
M = D                                        // ROM[28232]
@ :gt                                        // ROM[28233]
0; JMP                                       // ROM[28234]
( Screen.drawCircle:509)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:510                      // ROM[28235]
D = A                                        // ROM[28236]
@ R15                                        // ROM[28237]
M = D                                        // ROM[28238]
@ :or                                        // ROM[28239]
0; JMP                                       // ROM[28240]
( Screen.drawCircle:510)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28241]
AM = M-1                                     // ROM[28242]
D = M                                        // ROM[28243]
// ---------------------------
@ Screen.drawCircle$IF_TRUE1                 // ROM[28244]
D; JNE                                       // ROM[28245]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Screen.drawCircle$IF_FALSE1                // ROM[28246]
0; JMP                                       // ROM[28247]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Screen.drawCircle$IF_TRUE1 )

// -------------------------------------
// PUSH: <constant, 13>
// -------------------------------------
@ 13                                         // ROM[28248]
D = A                                        // ROM[28249]
// ---------------------------
// push D
@ SP                                         // ROM[28250]
AM = M+1                                     // ROM[28251]
A = A-1                                      // ROM[28252]
M = D                                        // ROM[28253]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[28254]
D = A                                        // ROM[28255]
@ R13                                        // ROM[28256]
M = D                                        // ROM[28257]
// ---------------------------
// Push RA
@ Screen.drawCircle:511                      // ROM[28258]
D = A                                        // ROM[28259]
// ---------------------------
// push D
@ SP                                         // ROM[28260]
AM = M+1                                     // ROM[28261]
A = A-1                                      // ROM[28262]
M = D                                        // ROM[28263]
// ---------------------------
// call
@ Screen.drawCircle:512                      // ROM[28264]
D = A                                        // ROM[28265]
@ R15                                        // ROM[28266]
M = D                                        // ROM[28267]
@ :call                                      // ROM[28268]
0; JMP                                       // ROM[28269]
( Screen.drawCircle:512)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[28270]
0; JMP                                       // ROM[28271]
// ---------------------------
// ( RA )
( Screen.drawCircle:511) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28272]
AM = M-1                                     // ROM[28273]
D = M                                        // ROM[28274]
// ---------------------------
@ 5                                          // ROM[28275]
M = D                                        // ROM[28276]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Screen.drawCircle$IF_FALSE1 )

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28277]
D = A                                        // ROM[28278]
@ R13                                        // ROM[28279]
M = D                                        // ROM[28280]
// ---------------------------
// call
@ Screen.drawCircle:513                      // ROM[28281]
D = A                                        // ROM[28282]
@ R15                                        // ROM[28283]
M = D                                        // ROM[28284]
@ :push_argument                             // ROM[28285]
0; JMP                                       // ROM[28286]
( Screen.drawCircle:513)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28287]
D = A                                        // ROM[28288]
@ R13                                        // ROM[28289]
M = D                                        // ROM[28290]
// ---------------------------
// call
@ Screen.drawCircle:514                      // ROM[28291]
D = A                                        // ROM[28292]
@ R15                                        // ROM[28293]
M = D                                        // ROM[28294]
@ :pop_local                                 // ROM[28295]
0; JMP                                       // ROM[28296]
( Screen.drawCircle:514)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[28297]
D = A                                        // ROM[28298]
// ---------------------------
// push D
@ SP                                         // ROM[28299]
AM = M+1                                     // ROM[28300]
A = A-1                                      // ROM[28301]
M = D                                        // ROM[28302]

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28303]
D = A                                        // ROM[28304]
@ R13                                        // ROM[28305]
M = D                                        // ROM[28306]
// ---------------------------
// call
@ Screen.drawCircle:515                      // ROM[28307]
D = A                                        // ROM[28308]
@ R15                                        // ROM[28309]
M = D                                        // ROM[28310]
@ :push_argument                             // ROM[28311]
0; JMP                                       // ROM[28312]
( Screen.drawCircle:515)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:516                      // ROM[28313]
D = A                                        // ROM[28314]
@ R15                                        // ROM[28315]
M = D                                        // ROM[28316]
@ :sub                                       // ROM[28317]
0; JMP                                       // ROM[28318]
( Screen.drawCircle:516)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28319]
D = A                                        // ROM[28320]
@ R13                                        // ROM[28321]
M = D                                        // ROM[28322]
// ---------------------------
// call
@ Screen.drawCircle:517                      // ROM[28323]
D = A                                        // ROM[28324]
@ R15                                        // ROM[28325]
M = D                                        // ROM[28326]
@ :pop_local                                 // ROM[28327]
0; JMP                                       // ROM[28328]
( Screen.drawCircle:517)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28329]
D = A                                        // ROM[28330]
@ R13                                        // ROM[28331]
M = D                                        // ROM[28332]
// ---------------------------
// call
@ Screen.drawCircle:518                      // ROM[28333]
D = A                                        // ROM[28334]
@ R15                                        // ROM[28335]
M = D                                        // ROM[28336]
@ :push_argument                             // ROM[28337]
0; JMP                                       // ROM[28338]
( Screen.drawCircle:518)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28339]
D = A                                        // ROM[28340]
@ R13                                        // ROM[28341]
M = D                                        // ROM[28342]
// ---------------------------
// call
@ Screen.drawCircle:519                      // ROM[28343]
D = A                                        // ROM[28344]
@ R15                                        // ROM[28345]
M = D                                        // ROM[28346]
@ :push_argument                             // ROM[28347]
0; JMP                                       // ROM[28348]
( Screen.drawCircle:519)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28349]
D = A                                        // ROM[28350]
@ R13                                        // ROM[28351]
M = D                                        // ROM[28352]
// ---------------------------
// call
@ Screen.drawCircle:520                      // ROM[28353]
D = A                                        // ROM[28354]
@ R15                                        // ROM[28355]
M = D                                        // ROM[28356]
@ :push_local                                // ROM[28357]
0; JMP                                       // ROM[28358]
( Screen.drawCircle:520)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28359]
D = A                                        // ROM[28360]
@ R13                                        // ROM[28361]
M = D                                        // ROM[28362]
// ---------------------------
// call
@ Screen.drawCircle:521                      // ROM[28363]
D = A                                        // ROM[28364]
@ R15                                        // ROM[28365]
M = D                                        // ROM[28366]
@ :push_local                                // ROM[28367]
0; JMP                                       // ROM[28368]
( Screen.drawCircle:521)

// -------------------------------------
// CALL: Screen.drawSymetric(4 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 4                                          // ROM[28369]
D = A                                        // ROM[28370]
@ R13                                        // ROM[28371]
M = D                                        // ROM[28372]
// ---------------------------
// Push RA
@ Screen.drawCircle:522                      // ROM[28373]
D = A                                        // ROM[28374]
// ---------------------------
// push D
@ SP                                         // ROM[28375]
AM = M+1                                     // ROM[28376]
A = A-1                                      // ROM[28377]
M = D                                        // ROM[28378]
// ---------------------------
// call
@ Screen.drawCircle:523                      // ROM[28379]
D = A                                        // ROM[28380]
@ R15                                        // ROM[28381]
M = D                                        // ROM[28382]
@ :call                                      // ROM[28383]
0; JMP                                       // ROM[28384]
( Screen.drawCircle:523)
// ---------------------------
// goto functionName
@ Screen.drawSymetric                        // ROM[28385]
0; JMP                                       // ROM[28386]
// ---------------------------
// ( RA )
( Screen.drawCircle:522) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28387]
AM = M-1                                     // ROM[28388]
D = M                                        // ROM[28389]
// ---------------------------
@ 5                                          // ROM[28390]
M = D                                        // ROM[28391]

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Screen.drawCircle$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28392]
D = A                                        // ROM[28393]
@ R13                                        // ROM[28394]
M = D                                        // ROM[28395]
// ---------------------------
// call
@ Screen.drawCircle:524                      // ROM[28396]
D = A                                        // ROM[28397]
@ R15                                        // ROM[28398]
M = D                                        // ROM[28399]
@ :push_local                                // ROM[28400]
0; JMP                                       // ROM[28401]
( Screen.drawCircle:524)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28402]
D = A                                        // ROM[28403]
@ R13                                        // ROM[28404]
M = D                                        // ROM[28405]
// ---------------------------
// call
@ Screen.drawCircle:525                      // ROM[28406]
D = A                                        // ROM[28407]
@ R15                                        // ROM[28408]
M = D                                        // ROM[28409]
@ :push_local                                // ROM[28410]
0; JMP                                       // ROM[28411]
( Screen.drawCircle:525)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:526                      // ROM[28412]
D = A                                        // ROM[28413]
@ R15                                        // ROM[28414]
M = D                                        // ROM[28415]
@ :gt                                        // ROM[28416]
0; JMP                                       // ROM[28417]
( Screen.drawCircle:526)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[28418]
A = M-1                                      // ROM[28419]
M = !M                                       // ROM[28420]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28421]
AM = M-1                                     // ROM[28422]
D = M                                        // ROM[28423]
// ---------------------------
@ Screen.drawCircle$WHILE_END0               // ROM[28424]
D; JNE                                       // ROM[28425]

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28426]
D = A                                        // ROM[28427]
@ R13                                        // ROM[28428]
M = D                                        // ROM[28429]
// ---------------------------
// call
@ Screen.drawCircle:527                      // ROM[28430]
D = A                                        // ROM[28431]
@ R15                                        // ROM[28432]
M = D                                        // ROM[28433]
@ :push_local                                // ROM[28434]
0; JMP                                       // ROM[28435]
( Screen.drawCircle:527)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[28436]
D = A                                        // ROM[28437]
// ---------------------------
// push D
@ SP                                         // ROM[28438]
AM = M+1                                     // ROM[28439]
A = A-1                                      // ROM[28440]
M = D                                        // ROM[28441]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:528                      // ROM[28442]
D = A                                        // ROM[28443]
@ R15                                        // ROM[28444]
M = D                                        // ROM[28445]
@ :lt                                        // ROM[28446]
0; JMP                                       // ROM[28447]
( Screen.drawCircle:528)

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28448]
AM = M-1                                     // ROM[28449]
D = M                                        // ROM[28450]
// ---------------------------
@ Screen.drawCircle$IF_TRUE2                 // ROM[28451]
D; JNE                                       // ROM[28452]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ Screen.drawCircle$IF_FALSE2                // ROM[28453]
0; JMP                                       // ROM[28454]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( Screen.drawCircle$IF_TRUE2 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28455]
D = A                                        // ROM[28456]
@ R13                                        // ROM[28457]
M = D                                        // ROM[28458]
// ---------------------------
// call
@ Screen.drawCircle:529                      // ROM[28459]
D = A                                        // ROM[28460]
@ R15                                        // ROM[28461]
M = D                                        // ROM[28462]
@ :push_local                                // ROM[28463]
0; JMP                                       // ROM[28464]
( Screen.drawCircle:529)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[28465]
D = A                                        // ROM[28466]
// ---------------------------
// push D
@ SP                                         // ROM[28467]
AM = M+1                                     // ROM[28468]
A = A-1                                      // ROM[28469]
M = D                                        // ROM[28470]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28471]
D = A                                        // ROM[28472]
@ R13                                        // ROM[28473]
M = D                                        // ROM[28474]
// ---------------------------
// call
@ Screen.drawCircle:530                      // ROM[28475]
D = A                                        // ROM[28476]
@ R15                                        // ROM[28477]
M = D                                        // ROM[28478]
@ :push_local                                // ROM[28479]
0; JMP                                       // ROM[28480]
( Screen.drawCircle:530)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[28481]
D = A                                        // ROM[28482]
@ R13                                        // ROM[28483]
M = D                                        // ROM[28484]
// ---------------------------
// Push RA
@ Screen.drawCircle:531                      // ROM[28485]
D = A                                        // ROM[28486]
// ---------------------------
// push D
@ SP                                         // ROM[28487]
AM = M+1                                     // ROM[28488]
A = A-1                                      // ROM[28489]
M = D                                        // ROM[28490]
// ---------------------------
// call
@ Screen.drawCircle:532                      // ROM[28491]
D = A                                        // ROM[28492]
@ R15                                        // ROM[28493]
M = D                                        // ROM[28494]
@ :call                                      // ROM[28495]
0; JMP                                       // ROM[28496]
( Screen.drawCircle:532)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[28497]
0; JMP                                       // ROM[28498]
// ---------------------------
// ( RA )
( Screen.drawCircle:531) 

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:533                      // ROM[28499]
D = A                                        // ROM[28500]
@ R15                                        // ROM[28501]
M = D                                        // ROM[28502]
@ :add                                       // ROM[28503]
0; JMP                                       // ROM[28504]
( Screen.drawCircle:533)

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[28505]
D = A                                        // ROM[28506]
// ---------------------------
// push D
@ SP                                         // ROM[28507]
AM = M+1                                     // ROM[28508]
A = A-1                                      // ROM[28509]
M = D                                        // ROM[28510]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:534                      // ROM[28511]
D = A                                        // ROM[28512]
@ R15                                        // ROM[28513]
M = D                                        // ROM[28514]
@ :add                                       // ROM[28515]
0; JMP                                       // ROM[28516]
( Screen.drawCircle:534)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28517]
D = A                                        // ROM[28518]
@ R13                                        // ROM[28519]
M = D                                        // ROM[28520]
// ---------------------------
// call
@ Screen.drawCircle:535                      // ROM[28521]
D = A                                        // ROM[28522]
@ R15                                        // ROM[28523]
M = D                                        // ROM[28524]
@ :pop_local                                 // ROM[28525]
0; JMP                                       // ROM[28526]
( Screen.drawCircle:535)

// -------------------------------------
// GOTO: IF_END2
// -------------------------------------
@ Screen.drawCircle$IF_END2                  // ROM[28527]
0; JMP                                       // ROM[28528]

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( Screen.drawCircle$IF_FALSE2 )

// -------------------------------------
// PUSH: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28529]
D = A                                        // ROM[28530]
@ R13                                        // ROM[28531]
M = D                                        // ROM[28532]
// ---------------------------
// call
@ Screen.drawCircle:536                      // ROM[28533]
D = A                                        // ROM[28534]
@ R15                                        // ROM[28535]
M = D                                        // ROM[28536]
@ :push_local                                // ROM[28537]
0; JMP                                       // ROM[28538]
( Screen.drawCircle:536)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[28539]
D = A                                        // ROM[28540]
// ---------------------------
// push D
@ SP                                         // ROM[28541]
AM = M+1                                     // ROM[28542]
A = A-1                                      // ROM[28543]
M = D                                        // ROM[28544]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28545]
D = A                                        // ROM[28546]
@ R13                                        // ROM[28547]
M = D                                        // ROM[28548]
// ---------------------------
// call
@ Screen.drawCircle:537                      // ROM[28549]
D = A                                        // ROM[28550]
@ R15                                        // ROM[28551]
M = D                                        // ROM[28552]
@ :push_local                                // ROM[28553]
0; JMP                                       // ROM[28554]
( Screen.drawCircle:537)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28555]
D = A                                        // ROM[28556]
@ R13                                        // ROM[28557]
M = D                                        // ROM[28558]
// ---------------------------
// call
@ Screen.drawCircle:538                      // ROM[28559]
D = A                                        // ROM[28560]
@ R15                                        // ROM[28561]
M = D                                        // ROM[28562]
@ :push_local                                // ROM[28563]
0; JMP                                       // ROM[28564]
( Screen.drawCircle:538)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:539                      // ROM[28565]
D = A                                        // ROM[28566]
@ R15                                        // ROM[28567]
M = D                                        // ROM[28568]
@ :sub                                       // ROM[28569]
0; JMP                                       // ROM[28570]
( Screen.drawCircle:539)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[28571]
D = A                                        // ROM[28572]
@ R13                                        // ROM[28573]
M = D                                        // ROM[28574]
// ---------------------------
// Push RA
@ Screen.drawCircle:540                      // ROM[28575]
D = A                                        // ROM[28576]
// ---------------------------
// push D
@ SP                                         // ROM[28577]
AM = M+1                                     // ROM[28578]
A = A-1                                      // ROM[28579]
M = D                                        // ROM[28580]
// ---------------------------
// call
@ Screen.drawCircle:541                      // ROM[28581]
D = A                                        // ROM[28582]
@ R15                                        // ROM[28583]
M = D                                        // ROM[28584]
@ :call                                      // ROM[28585]
0; JMP                                       // ROM[28586]
( Screen.drawCircle:541)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[28587]
0; JMP                                       // ROM[28588]
// ---------------------------
// ( RA )
( Screen.drawCircle:540) 

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:542                      // ROM[28589]
D = A                                        // ROM[28590]
@ R15                                        // ROM[28591]
M = D                                        // ROM[28592]
@ :add                                       // ROM[28593]
0; JMP                                       // ROM[28594]
( Screen.drawCircle:542)

// -------------------------------------
// PUSH: <constant, 5>
// -------------------------------------
@ 5                                          // ROM[28595]
D = A                                        // ROM[28596]
// ---------------------------
// push D
@ SP                                         // ROM[28597]
AM = M+1                                     // ROM[28598]
A = A-1                                      // ROM[28599]
M = D                                        // ROM[28600]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:543                      // ROM[28601]
D = A                                        // ROM[28602]
@ R15                                        // ROM[28603]
M = D                                        // ROM[28604]
@ :add                                       // ROM[28605]
0; JMP                                       // ROM[28606]
( Screen.drawCircle:543)

// -------------------------------------
// POP: <local, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[28607]
D = A                                        // ROM[28608]
@ R13                                        // ROM[28609]
M = D                                        // ROM[28610]
// ---------------------------
// call
@ Screen.drawCircle:544                      // ROM[28611]
D = A                                        // ROM[28612]
@ R15                                        // ROM[28613]
M = D                                        // ROM[28614]
@ :pop_local                                 // ROM[28615]
0; JMP                                       // ROM[28616]
( Screen.drawCircle:544)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28617]
D = A                                        // ROM[28618]
@ R13                                        // ROM[28619]
M = D                                        // ROM[28620]
// ---------------------------
// call
@ Screen.drawCircle:545                      // ROM[28621]
D = A                                        // ROM[28622]
@ R15                                        // ROM[28623]
M = D                                        // ROM[28624]
@ :push_local                                // ROM[28625]
0; JMP                                       // ROM[28626]
( Screen.drawCircle:545)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[28627]
D = A                                        // ROM[28628]
// ---------------------------
// push D
@ SP                                         // ROM[28629]
AM = M+1                                     // ROM[28630]
A = A-1                                      // ROM[28631]
M = D                                        // ROM[28632]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:546                      // ROM[28633]
D = A                                        // ROM[28634]
@ R15                                        // ROM[28635]
M = D                                        // ROM[28636]
@ :sub                                       // ROM[28637]
0; JMP                                       // ROM[28638]
( Screen.drawCircle:546)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28639]
D = A                                        // ROM[28640]
@ R13                                        // ROM[28641]
M = D                                        // ROM[28642]
// ---------------------------
// call
@ Screen.drawCircle:547                      // ROM[28643]
D = A                                        // ROM[28644]
@ R15                                        // ROM[28645]
M = D                                        // ROM[28646]
@ :pop_local                                 // ROM[28647]
0; JMP                                       // ROM[28648]
( Screen.drawCircle:547)

// -------------------------------------
// LABEL: IF_END2
// -------------------------------------
( Screen.drawCircle$IF_END2 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28649]
D = A                                        // ROM[28650]
@ R13                                        // ROM[28651]
M = D                                        // ROM[28652]
// ---------------------------
// call
@ Screen.drawCircle:548                      // ROM[28653]
D = A                                        // ROM[28654]
@ R15                                        // ROM[28655]
M = D                                        // ROM[28656]
@ :push_local                                // ROM[28657]
0; JMP                                       // ROM[28658]
( Screen.drawCircle:548)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[28659]
D = A                                        // ROM[28660]
// ---------------------------
// push D
@ SP                                         // ROM[28661]
AM = M+1                                     // ROM[28662]
A = A-1                                      // ROM[28663]
M = D                                        // ROM[28664]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:549                      // ROM[28665]
D = A                                        // ROM[28666]
@ R15                                        // ROM[28667]
M = D                                        // ROM[28668]
@ :add                                       // ROM[28669]
0; JMP                                       // ROM[28670]
( Screen.drawCircle:549)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28671]
D = A                                        // ROM[28672]
@ R13                                        // ROM[28673]
M = D                                        // ROM[28674]
// ---------------------------
// call
@ Screen.drawCircle:550                      // ROM[28675]
D = A                                        // ROM[28676]
@ R15                                        // ROM[28677]
M = D                                        // ROM[28678]
@ :pop_local                                 // ROM[28679]
0; JMP                                       // ROM[28680]
( Screen.drawCircle:550)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28681]
D = A                                        // ROM[28682]
@ R13                                        // ROM[28683]
M = D                                        // ROM[28684]
// ---------------------------
// call
@ Screen.drawCircle:551                      // ROM[28685]
D = A                                        // ROM[28686]
@ R15                                        // ROM[28687]
M = D                                        // ROM[28688]
@ :push_argument                             // ROM[28689]
0; JMP                                       // ROM[28690]
( Screen.drawCircle:551)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28691]
D = A                                        // ROM[28692]
@ R13                                        // ROM[28693]
M = D                                        // ROM[28694]
// ---------------------------
// call
@ Screen.drawCircle:552                      // ROM[28695]
D = A                                        // ROM[28696]
@ R15                                        // ROM[28697]
M = D                                        // ROM[28698]
@ :push_argument                             // ROM[28699]
0; JMP                                       // ROM[28700]
( Screen.drawCircle:552)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28701]
D = A                                        // ROM[28702]
@ R13                                        // ROM[28703]
M = D                                        // ROM[28704]
// ---------------------------
// call
@ Screen.drawCircle:553                      // ROM[28705]
D = A                                        // ROM[28706]
@ R15                                        // ROM[28707]
M = D                                        // ROM[28708]
@ :push_local                                // ROM[28709]
0; JMP                                       // ROM[28710]
( Screen.drawCircle:553)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28711]
D = A                                        // ROM[28712]
@ R13                                        // ROM[28713]
M = D                                        // ROM[28714]
// ---------------------------
// call
@ Screen.drawCircle:554                      // ROM[28715]
D = A                                        // ROM[28716]
@ R15                                        // ROM[28717]
M = D                                        // ROM[28718]
@ :push_local                                // ROM[28719]
0; JMP                                       // ROM[28720]
( Screen.drawCircle:554)

// -------------------------------------
// CALL: Screen.drawSymetric(4 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 4                                          // ROM[28721]
D = A                                        // ROM[28722]
@ R13                                        // ROM[28723]
M = D                                        // ROM[28724]
// ---------------------------
// Push RA
@ Screen.drawCircle:555                      // ROM[28725]
D = A                                        // ROM[28726]
// ---------------------------
// push D
@ SP                                         // ROM[28727]
AM = M+1                                     // ROM[28728]
A = A-1                                      // ROM[28729]
M = D                                        // ROM[28730]
// ---------------------------
// call
@ Screen.drawCircle:556                      // ROM[28731]
D = A                                        // ROM[28732]
@ R15                                        // ROM[28733]
M = D                                        // ROM[28734]
@ :call                                      // ROM[28735]
0; JMP                                       // ROM[28736]
( Screen.drawCircle:556)
// ---------------------------
// goto functionName
@ Screen.drawSymetric                        // ROM[28737]
0; JMP                                       // ROM[28738]
// ---------------------------
// ( RA )
( Screen.drawCircle:555) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28739]
AM = M-1                                     // ROM[28740]
D = M                                        // ROM[28741]
// ---------------------------
@ 5                                          // ROM[28742]
M = D                                        // ROM[28743]

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Screen.drawCircle$WHILE_EXP0               // ROM[28744]
0; JMP                                       // ROM[28745]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Screen.drawCircle$WHILE_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[28746]
D = A                                        // ROM[28747]
// ---------------------------
// push D
@ SP                                         // ROM[28748]
AM = M+1                                     // ROM[28749]
A = A-1                                      // ROM[28750]
M = D                                        // ROM[28751]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Screen.drawCircle:557                      // ROM[28752]
D = A                                        // ROM[28753]
@ R15                                        // ROM[28754]
M = D                                        // ROM[28755]
@ :return                                    // ROM[28756]
0; JMP                                       // ROM[28757]
( Screen.drawCircle:557)

// *********************************************************
// Translation of: ./Memory.vm
// *********************************************************


// =========================================================
// FUNCTION: Memory.init(0 locals)
// =========================================================

( Memory.init )
// ---------------------------
// clear local segment
D = 0                                        // ROM[28758]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[28759]
D = A                                        // ROM[28760]
// ---------------------------
// push D
@ SP                                         // ROM[28761]
AM = M+1                                     // ROM[28762]
A = A-1                                      // ROM[28763]
M = D                                        // ROM[28764]

// -------------------------------------
// POP: <static, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28765]
AM = M-1                                     // ROM[28766]
D = M                                        // ROM[28767]
// ---------------------------
// static[index] = D
@ Memory.0                                   // ROM[28768]
M = D                                        // ROM[28769]

// -------------------------------------
// PUSH: <constant, 2048>
// -------------------------------------
@ 2048                                       // ROM[28770]
D = A                                        // ROM[28771]
// ---------------------------
// push D
@ SP                                         // ROM[28772]
AM = M+1                                     // ROM[28773]
A = A-1                                      // ROM[28774]
M = D                                        // ROM[28775]

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Memory.0                                   // ROM[28776]
D = M                                        // ROM[28777]
// ---------------------------
// push D
@ SP                                         // ROM[28778]
AM = M+1                                     // ROM[28779]
A = A-1                                      // ROM[28780]
M = D                                        // ROM[28781]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.init:0                              // ROM[28782]
D = A                                        // ROM[28783]
@ R15                                        // ROM[28784]
M = D                                        // ROM[28785]
@ :add                                       // ROM[28786]
0; JMP                                       // ROM[28787]
( Memory.init:0)

// -------------------------------------
// PUSH: <constant, 14334>
// -------------------------------------
@ 14334                                      // ROM[28788]
D = A                                        // ROM[28789]
// ---------------------------
// push D
@ SP                                         // ROM[28790]
AM = M+1                                     // ROM[28791]
A = A-1                                      // ROM[28792]
M = D                                        // ROM[28793]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28794]
AM = M-1                                     // ROM[28795]
D = M                                        // ROM[28796]
// ---------------------------
@ 5                                          // ROM[28797]
M = D                                        // ROM[28798]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28799]
AM = M-1                                     // ROM[28800]
D = M                                        // ROM[28801]
// ---------------------------
@ 4                                          // ROM[28802]
M = D                                        // ROM[28803]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[28804]
D = M                                        // ROM[28805]
// ---------------------------
// push D
@ SP                                         // ROM[28806]
AM = M+1                                     // ROM[28807]
A = A-1                                      // ROM[28808]
M = D                                        // ROM[28809]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28810]
D = A                                        // ROM[28811]
@ R13                                        // ROM[28812]
M = D                                        // ROM[28813]
// ---------------------------
// call
@ Memory.init:1                              // ROM[28814]
D = A                                        // ROM[28815]
@ R15                                        // ROM[28816]
M = D                                        // ROM[28817]
@ :pop_that                                  // ROM[28818]
0; JMP                                       // ROM[28819]
( Memory.init:1)

// -------------------------------------
// PUSH: <constant, 2049>
// -------------------------------------
@ 2049                                       // ROM[28820]
D = A                                        // ROM[28821]
// ---------------------------
// push D
@ SP                                         // ROM[28822]
AM = M+1                                     // ROM[28823]
A = A-1                                      // ROM[28824]
M = D                                        // ROM[28825]

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Memory.0                                   // ROM[28826]
D = M                                        // ROM[28827]
// ---------------------------
// push D
@ SP                                         // ROM[28828]
AM = M+1                                     // ROM[28829]
A = A-1                                      // ROM[28830]
M = D                                        // ROM[28831]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.init:2                              // ROM[28832]
D = A                                        // ROM[28833]
@ R15                                        // ROM[28834]
M = D                                        // ROM[28835]
@ :add                                       // ROM[28836]
0; JMP                                       // ROM[28837]
( Memory.init:2)

// -------------------------------------
// PUSH: <constant, 2050>
// -------------------------------------
@ 2050                                       // ROM[28838]
D = A                                        // ROM[28839]
// ---------------------------
// push D
@ SP                                         // ROM[28840]
AM = M+1                                     // ROM[28841]
A = A-1                                      // ROM[28842]
M = D                                        // ROM[28843]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28844]
AM = M-1                                     // ROM[28845]
D = M                                        // ROM[28846]
// ---------------------------
@ 5                                          // ROM[28847]
M = D                                        // ROM[28848]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28849]
AM = M-1                                     // ROM[28850]
D = M                                        // ROM[28851]
// ---------------------------
@ 4                                          // ROM[28852]
M = D                                        // ROM[28853]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[28854]
D = M                                        // ROM[28855]
// ---------------------------
// push D
@ SP                                         // ROM[28856]
AM = M+1                                     // ROM[28857]
A = A-1                                      // ROM[28858]
M = D                                        // ROM[28859]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28860]
D = A                                        // ROM[28861]
@ R13                                        // ROM[28862]
M = D                                        // ROM[28863]
// ---------------------------
// call
@ Memory.init:3                              // ROM[28864]
D = A                                        // ROM[28865]
@ R15                                        // ROM[28866]
M = D                                        // ROM[28867]
@ :pop_that                                  // ROM[28868]
0; JMP                                       // ROM[28869]
( Memory.init:3)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[28870]
D = A                                        // ROM[28871]
// ---------------------------
// push D
@ SP                                         // ROM[28872]
AM = M+1                                     // ROM[28873]
A = A-1                                      // ROM[28874]
M = D                                        // ROM[28875]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Memory.init:4                              // ROM[28876]
D = A                                        // ROM[28877]
@ R15                                        // ROM[28878]
M = D                                        // ROM[28879]
@ :return                                    // ROM[28880]
0; JMP                                       // ROM[28881]
( Memory.init:4)

// =========================================================
// FUNCTION: Memory.peek(0 locals)
// =========================================================

( Memory.peek )
// ---------------------------
// clear local segment
D = 0                                        // ROM[28882]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28883]
D = A                                        // ROM[28884]
@ R13                                        // ROM[28885]
M = D                                        // ROM[28886]
// ---------------------------
// call
@ Memory.peek:5                              // ROM[28887]
D = A                                        // ROM[28888]
@ R15                                        // ROM[28889]
M = D                                        // ROM[28890]
@ :push_argument                             // ROM[28891]
0; JMP                                       // ROM[28892]
( Memory.peek:5)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Memory.0                                   // ROM[28893]
D = M                                        // ROM[28894]
// ---------------------------
// push D
@ SP                                         // ROM[28895]
AM = M+1                                     // ROM[28896]
A = A-1                                      // ROM[28897]
M = D                                        // ROM[28898]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.peek:6                              // ROM[28899]
D = A                                        // ROM[28900]
@ R15                                        // ROM[28901]
M = D                                        // ROM[28902]
@ :add                                       // ROM[28903]
0; JMP                                       // ROM[28904]
( Memory.peek:6)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28905]
AM = M-1                                     // ROM[28906]
D = M                                        // ROM[28907]
// ---------------------------
@ 4                                          // ROM[28908]
M = D                                        // ROM[28909]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28910]
D = A                                        // ROM[28911]
@ R13                                        // ROM[28912]
M = D                                        // ROM[28913]
// ---------------------------
// call
@ Memory.peek:7                              // ROM[28914]
D = A                                        // ROM[28915]
@ R15                                        // ROM[28916]
M = D                                        // ROM[28917]
@ :push_that                                 // ROM[28918]
0; JMP                                       // ROM[28919]
( Memory.peek:7)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Memory.peek:8                              // ROM[28920]
D = A                                        // ROM[28921]
@ R15                                        // ROM[28922]
M = D                                        // ROM[28923]
@ :return                                    // ROM[28924]
0; JMP                                       // ROM[28925]
( Memory.peek:8)

// =========================================================
// FUNCTION: Memory.poke(0 locals)
// =========================================================

( Memory.poke )
// ---------------------------
// clear local segment
D = 0                                        // ROM[28926]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28927]
D = A                                        // ROM[28928]
@ R13                                        // ROM[28929]
M = D                                        // ROM[28930]
// ---------------------------
// call
@ Memory.poke:9                              // ROM[28931]
D = A                                        // ROM[28932]
@ R15                                        // ROM[28933]
M = D                                        // ROM[28934]
@ :push_argument                             // ROM[28935]
0; JMP                                       // ROM[28936]
( Memory.poke:9)

// -------------------------------------
// PUSH: <static, 0>
// -------------------------------------
// ---------------------------
// D = static[index]
@ Memory.0                                   // ROM[28937]
D = M                                        // ROM[28938]
// ---------------------------
// push D
@ SP                                         // ROM[28939]
AM = M+1                                     // ROM[28940]
A = A-1                                      // ROM[28941]
M = D                                        // ROM[28942]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.poke:10                             // ROM[28943]
D = A                                        // ROM[28944]
@ R15                                        // ROM[28945]
M = D                                        // ROM[28946]
@ :add                                       // ROM[28947]
0; JMP                                       // ROM[28948]
( Memory.poke:10)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[28949]
D = A                                        // ROM[28950]
@ R13                                        // ROM[28951]
M = D                                        // ROM[28952]
// ---------------------------
// call
@ Memory.poke:11                             // ROM[28953]
D = A                                        // ROM[28954]
@ R15                                        // ROM[28955]
M = D                                        // ROM[28956]
@ :push_argument                             // ROM[28957]
0; JMP                                       // ROM[28958]
( Memory.poke:11)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28959]
AM = M-1                                     // ROM[28960]
D = M                                        // ROM[28961]
// ---------------------------
@ 5                                          // ROM[28962]
M = D                                        // ROM[28963]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[28964]
AM = M-1                                     // ROM[28965]
D = M                                        // ROM[28966]
// ---------------------------
@ 4                                          // ROM[28967]
M = D                                        // ROM[28968]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[28969]
D = M                                        // ROM[28970]
// ---------------------------
// push D
@ SP                                         // ROM[28971]
AM = M+1                                     // ROM[28972]
A = A-1                                      // ROM[28973]
M = D                                        // ROM[28974]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[28975]
D = A                                        // ROM[28976]
@ R13                                        // ROM[28977]
M = D                                        // ROM[28978]
// ---------------------------
// call
@ Memory.poke:12                             // ROM[28979]
D = A                                        // ROM[28980]
@ R15                                        // ROM[28981]
M = D                                        // ROM[28982]
@ :pop_that                                  // ROM[28983]
0; JMP                                       // ROM[28984]
( Memory.poke:12)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[28985]
D = A                                        // ROM[28986]
// ---------------------------
// push D
@ SP                                         // ROM[28987]
AM = M+1                                     // ROM[28988]
A = A-1                                      // ROM[28989]
M = D                                        // ROM[28990]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Memory.poke:13                             // ROM[28991]
D = A                                        // ROM[28992]
@ R15                                        // ROM[28993]
M = D                                        // ROM[28994]
@ :return                                    // ROM[28995]
0; JMP                                       // ROM[28996]
( Memory.poke:13)

// =========================================================
// FUNCTION: Memory.alloc(1 locals)
// =========================================================

( Memory.alloc )
// ---------------------------
// clear local segment
D = 0                                        // ROM[28997]
// ---------------------------
// push D
@ SP                                         // ROM[28998]
AM = M+1                                     // ROM[28999]
A = A-1                                      // ROM[29000]
M = D                                        // ROM[29001]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29002]
D = A                                        // ROM[29003]
@ R13                                        // ROM[29004]
M = D                                        // ROM[29005]
// ---------------------------
// call
@ Memory.alloc:14                            // ROM[29006]
D = A                                        // ROM[29007]
@ R15                                        // ROM[29008]
M = D                                        // ROM[29009]
@ :push_argument                             // ROM[29010]
0; JMP                                       // ROM[29011]
( Memory.alloc:14)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[29012]
D = A                                        // ROM[29013]
// ---------------------------
// push D
@ SP                                         // ROM[29014]
AM = M+1                                     // ROM[29015]
A = A-1                                      // ROM[29016]
M = D                                        // ROM[29017]

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:15                            // ROM[29018]
D = A                                        // ROM[29019]
@ R15                                        // ROM[29020]
M = D                                        // ROM[29021]
@ :lt                                        // ROM[29022]
0; JMP                                       // ROM[29023]
( Memory.alloc:15)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29024]
AM = M-1                                     // ROM[29025]
D = M                                        // ROM[29026]
// ---------------------------
@ Memory.alloc$IF_TRUE0                      // ROM[29027]
D; JNE                                       // ROM[29028]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Memory.alloc$IF_FALSE0                     // ROM[29029]
0; JMP                                       // ROM[29030]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Memory.alloc$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 5>
// -------------------------------------
@ 5                                          // ROM[29031]
D = A                                        // ROM[29032]
// ---------------------------
// push D
@ SP                                         // ROM[29033]
AM = M+1                                     // ROM[29034]
A = A-1                                      // ROM[29035]
M = D                                        // ROM[29036]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[29037]
D = A                                        // ROM[29038]
@ R13                                        // ROM[29039]
M = D                                        // ROM[29040]
// ---------------------------
// Push RA
@ Memory.alloc:16                            // ROM[29041]
D = A                                        // ROM[29042]
// ---------------------------
// push D
@ SP                                         // ROM[29043]
AM = M+1                                     // ROM[29044]
A = A-1                                      // ROM[29045]
M = D                                        // ROM[29046]
// ---------------------------
// call
@ Memory.alloc:17                            // ROM[29047]
D = A                                        // ROM[29048]
@ R15                                        // ROM[29049]
M = D                                        // ROM[29050]
@ :call                                      // ROM[29051]
0; JMP                                       // ROM[29052]
( Memory.alloc:17)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[29053]
0; JMP                                       // ROM[29054]
// ---------------------------
// ( RA )
( Memory.alloc:16) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29055]
AM = M-1                                     // ROM[29056]
D = M                                        // ROM[29057]
// ---------------------------
@ 5                                          // ROM[29058]
M = D                                        // ROM[29059]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Memory.alloc$IF_FALSE0 )

// -------------------------------------
// PUSH: <constant, 2048>
// -------------------------------------
@ 2048                                       // ROM[29060]
D = A                                        // ROM[29061]
// ---------------------------
// push D
@ SP                                         // ROM[29062]
AM = M+1                                     // ROM[29063]
A = A-1                                      // ROM[29064]
M = D                                        // ROM[29065]

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29066]
D = A                                        // ROM[29067]
@ R13                                        // ROM[29068]
M = D                                        // ROM[29069]
// ---------------------------
// call
@ Memory.alloc:18                            // ROM[29070]
D = A                                        // ROM[29071]
@ R15                                        // ROM[29072]
M = D                                        // ROM[29073]
@ :pop_local                                 // ROM[29074]
0; JMP                                       // ROM[29075]
( Memory.alloc:18)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Memory.alloc$WHILE_EXP0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[29076]
D = A                                        // ROM[29077]
// ---------------------------
// push D
@ SP                                         // ROM[29078]
AM = M+1                                     // ROM[29079]
A = A-1                                      // ROM[29080]
M = D                                        // ROM[29081]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29082]
D = A                                        // ROM[29083]
@ R13                                        // ROM[29084]
M = D                                        // ROM[29085]
// ---------------------------
// call
@ Memory.alloc:19                            // ROM[29086]
D = A                                        // ROM[29087]
@ R15                                        // ROM[29088]
M = D                                        // ROM[29089]
@ :push_local                                // ROM[29090]
0; JMP                                       // ROM[29091]
( Memory.alloc:19)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:20                            // ROM[29092]
D = A                                        // ROM[29093]
@ R15                                        // ROM[29094]
M = D                                        // ROM[29095]
@ :add                                       // ROM[29096]
0; JMP                                       // ROM[29097]
( Memory.alloc:20)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29098]
AM = M-1                                     // ROM[29099]
D = M                                        // ROM[29100]
// ---------------------------
@ 4                                          // ROM[29101]
M = D                                        // ROM[29102]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29103]
D = A                                        // ROM[29104]
@ R13                                        // ROM[29105]
M = D                                        // ROM[29106]
// ---------------------------
// call
@ Memory.alloc:21                            // ROM[29107]
D = A                                        // ROM[29108]
@ R15                                        // ROM[29109]
M = D                                        // ROM[29110]
@ :push_that                                 // ROM[29111]
0; JMP                                       // ROM[29112]
( Memory.alloc:21)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29113]
D = A                                        // ROM[29114]
@ R13                                        // ROM[29115]
M = D                                        // ROM[29116]
// ---------------------------
// call
@ Memory.alloc:22                            // ROM[29117]
D = A                                        // ROM[29118]
@ R15                                        // ROM[29119]
M = D                                        // ROM[29120]
@ :push_argument                             // ROM[29121]
0; JMP                                       // ROM[29122]
( Memory.alloc:22)

// -------------------------------------
// ARITHMETIC: lt
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:23                            // ROM[29123]
D = A                                        // ROM[29124]
@ R15                                        // ROM[29125]
M = D                                        // ROM[29126]
@ :lt                                        // ROM[29127]
0; JMP                                       // ROM[29128]
( Memory.alloc:23)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[29129]
A = M-1                                      // ROM[29130]
M = !M                                       // ROM[29131]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29132]
AM = M-1                                     // ROM[29133]
D = M                                        // ROM[29134]
// ---------------------------
@ Memory.alloc$WHILE_END0                    // ROM[29135]
D; JNE                                       // ROM[29136]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[29137]
D = A                                        // ROM[29138]
// ---------------------------
// push D
@ SP                                         // ROM[29139]
AM = M+1                                     // ROM[29140]
A = A-1                                      // ROM[29141]
M = D                                        // ROM[29142]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29143]
D = A                                        // ROM[29144]
@ R13                                        // ROM[29145]
M = D                                        // ROM[29146]
// ---------------------------
// call
@ Memory.alloc:24                            // ROM[29147]
D = A                                        // ROM[29148]
@ R15                                        // ROM[29149]
M = D                                        // ROM[29150]
@ :push_local                                // ROM[29151]
0; JMP                                       // ROM[29152]
( Memory.alloc:24)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:25                            // ROM[29153]
D = A                                        // ROM[29154]
@ R15                                        // ROM[29155]
M = D                                        // ROM[29156]
@ :add                                       // ROM[29157]
0; JMP                                       // ROM[29158]
( Memory.alloc:25)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29159]
AM = M-1                                     // ROM[29160]
D = M                                        // ROM[29161]
// ---------------------------
@ 4                                          // ROM[29162]
M = D                                        // ROM[29163]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29164]
D = A                                        // ROM[29165]
@ R13                                        // ROM[29166]
M = D                                        // ROM[29167]
// ---------------------------
// call
@ Memory.alloc:26                            // ROM[29168]
D = A                                        // ROM[29169]
@ R15                                        // ROM[29170]
M = D                                        // ROM[29171]
@ :push_that                                 // ROM[29172]
0; JMP                                       // ROM[29173]
( Memory.alloc:26)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29174]
D = A                                        // ROM[29175]
@ R13                                        // ROM[29176]
M = D                                        // ROM[29177]
// ---------------------------
// call
@ Memory.alloc:27                            // ROM[29178]
D = A                                        // ROM[29179]
@ R15                                        // ROM[29180]
M = D                                        // ROM[29181]
@ :pop_local                                 // ROM[29182]
0; JMP                                       // ROM[29183]
( Memory.alloc:27)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Memory.alloc$WHILE_EXP0                    // ROM[29184]
0; JMP                                       // ROM[29185]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Memory.alloc$WHILE_END0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29186]
D = A                                        // ROM[29187]
@ R13                                        // ROM[29188]
M = D                                        // ROM[29189]
// ---------------------------
// call
@ Memory.alloc:28                            // ROM[29190]
D = A                                        // ROM[29191]
@ R15                                        // ROM[29192]
M = D                                        // ROM[29193]
@ :push_local                                // ROM[29194]
0; JMP                                       // ROM[29195]
( Memory.alloc:28)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29196]
D = A                                        // ROM[29197]
@ R13                                        // ROM[29198]
M = D                                        // ROM[29199]
// ---------------------------
// call
@ Memory.alloc:29                            // ROM[29200]
D = A                                        // ROM[29201]
@ R15                                        // ROM[29202]
M = D                                        // ROM[29203]
@ :push_argument                             // ROM[29204]
0; JMP                                       // ROM[29205]
( Memory.alloc:29)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:30                            // ROM[29206]
D = A                                        // ROM[29207]
@ R15                                        // ROM[29208]
M = D                                        // ROM[29209]
@ :add                                       // ROM[29210]
0; JMP                                       // ROM[29211]
( Memory.alloc:30)

// -------------------------------------
// PUSH: <constant, 16379>
// -------------------------------------
@ 16379                                      // ROM[29212]
D = A                                        // ROM[29213]
// ---------------------------
// push D
@ SP                                         // ROM[29214]
AM = M+1                                     // ROM[29215]
A = A-1                                      // ROM[29216]
M = D                                        // ROM[29217]

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:31                            // ROM[29218]
D = A                                        // ROM[29219]
@ R15                                        // ROM[29220]
M = D                                        // ROM[29221]
@ :gt                                        // ROM[29222]
0; JMP                                       // ROM[29223]
( Memory.alloc:31)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29224]
AM = M-1                                     // ROM[29225]
D = M                                        // ROM[29226]
// ---------------------------
@ Memory.alloc$IF_TRUE1                      // ROM[29227]
D; JNE                                       // ROM[29228]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Memory.alloc$IF_FALSE1                     // ROM[29229]
0; JMP                                       // ROM[29230]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Memory.alloc$IF_TRUE1 )

// -------------------------------------
// PUSH: <constant, 6>
// -------------------------------------
@ 6                                          // ROM[29231]
D = A                                        // ROM[29232]
// ---------------------------
// push D
@ SP                                         // ROM[29233]
AM = M+1                                     // ROM[29234]
A = A-1                                      // ROM[29235]
M = D                                        // ROM[29236]

// -------------------------------------
// CALL: Sys.error(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[29237]
D = A                                        // ROM[29238]
@ R13                                        // ROM[29239]
M = D                                        // ROM[29240]
// ---------------------------
// Push RA
@ Memory.alloc:32                            // ROM[29241]
D = A                                        // ROM[29242]
// ---------------------------
// push D
@ SP                                         // ROM[29243]
AM = M+1                                     // ROM[29244]
A = A-1                                      // ROM[29245]
M = D                                        // ROM[29246]
// ---------------------------
// call
@ Memory.alloc:33                            // ROM[29247]
D = A                                        // ROM[29248]
@ R15                                        // ROM[29249]
M = D                                        // ROM[29250]
@ :call                                      // ROM[29251]
0; JMP                                       // ROM[29252]
( Memory.alloc:33)
// ---------------------------
// goto functionName
@ Sys.error                                  // ROM[29253]
0; JMP                                       // ROM[29254]
// ---------------------------
// ( RA )
( Memory.alloc:32) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29255]
AM = M-1                                     // ROM[29256]
D = M                                        // ROM[29257]
// ---------------------------
@ 5                                          // ROM[29258]
M = D                                        // ROM[29259]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Memory.alloc$IF_FALSE1 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[29260]
D = A                                        // ROM[29261]
// ---------------------------
// push D
@ SP                                         // ROM[29262]
AM = M+1                                     // ROM[29263]
A = A-1                                      // ROM[29264]
M = D                                        // ROM[29265]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29266]
D = A                                        // ROM[29267]
@ R13                                        // ROM[29268]
M = D                                        // ROM[29269]
// ---------------------------
// call
@ Memory.alloc:34                            // ROM[29270]
D = A                                        // ROM[29271]
@ R15                                        // ROM[29272]
M = D                                        // ROM[29273]
@ :push_local                                // ROM[29274]
0; JMP                                       // ROM[29275]
( Memory.alloc:34)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:35                            // ROM[29276]
D = A                                        // ROM[29277]
@ R15                                        // ROM[29278]
M = D                                        // ROM[29279]
@ :add                                       // ROM[29280]
0; JMP                                       // ROM[29281]
( Memory.alloc:35)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29282]
AM = M-1                                     // ROM[29283]
D = M                                        // ROM[29284]
// ---------------------------
@ 4                                          // ROM[29285]
M = D                                        // ROM[29286]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29287]
D = A                                        // ROM[29288]
@ R13                                        // ROM[29289]
M = D                                        // ROM[29290]
// ---------------------------
// call
@ Memory.alloc:36                            // ROM[29291]
D = A                                        // ROM[29292]
@ R15                                        // ROM[29293]
M = D                                        // ROM[29294]
@ :push_that                                 // ROM[29295]
0; JMP                                       // ROM[29296]
( Memory.alloc:36)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29297]
D = A                                        // ROM[29298]
@ R13                                        // ROM[29299]
M = D                                        // ROM[29300]
// ---------------------------
// call
@ Memory.alloc:37                            // ROM[29301]
D = A                                        // ROM[29302]
@ R15                                        // ROM[29303]
M = D                                        // ROM[29304]
@ :push_argument                             // ROM[29305]
0; JMP                                       // ROM[29306]
( Memory.alloc:37)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[29307]
D = A                                        // ROM[29308]
// ---------------------------
// push D
@ SP                                         // ROM[29309]
AM = M+1                                     // ROM[29310]
A = A-1                                      // ROM[29311]
M = D                                        // ROM[29312]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:38                            // ROM[29313]
D = A                                        // ROM[29314]
@ R15                                        // ROM[29315]
M = D                                        // ROM[29316]
@ :add                                       // ROM[29317]
0; JMP                                       // ROM[29318]
( Memory.alloc:38)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:39                            // ROM[29319]
D = A                                        // ROM[29320]
@ R15                                        // ROM[29321]
M = D                                        // ROM[29322]
@ :gt                                        // ROM[29323]
0; JMP                                       // ROM[29324]
( Memory.alloc:39)

// -------------------------------------
// IF-GOTO: IF_TRUE2
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29325]
AM = M-1                                     // ROM[29326]
D = M                                        // ROM[29327]
// ---------------------------
@ Memory.alloc$IF_TRUE2                      // ROM[29328]
D; JNE                                       // ROM[29329]

// -------------------------------------
// GOTO: IF_FALSE2
// -------------------------------------
@ Memory.alloc$IF_FALSE2                     // ROM[29330]
0; JMP                                       // ROM[29331]

// -------------------------------------
// LABEL: IF_TRUE2
// -------------------------------------
( Memory.alloc$IF_TRUE2 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29332]
D = A                                        // ROM[29333]
@ R13                                        // ROM[29334]
M = D                                        // ROM[29335]
// ---------------------------
// call
@ Memory.alloc:40                            // ROM[29336]
D = A                                        // ROM[29337]
@ R15                                        // ROM[29338]
M = D                                        // ROM[29339]
@ :push_argument                             // ROM[29340]
0; JMP                                       // ROM[29341]
( Memory.alloc:40)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[29342]
D = A                                        // ROM[29343]
// ---------------------------
// push D
@ SP                                         // ROM[29344]
AM = M+1                                     // ROM[29345]
A = A-1                                      // ROM[29346]
M = D                                        // ROM[29347]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:41                            // ROM[29348]
D = A                                        // ROM[29349]
@ R15                                        // ROM[29350]
M = D                                        // ROM[29351]
@ :add                                       // ROM[29352]
0; JMP                                       // ROM[29353]
( Memory.alloc:41)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29354]
D = A                                        // ROM[29355]
@ R13                                        // ROM[29356]
M = D                                        // ROM[29357]
// ---------------------------
// call
@ Memory.alloc:42                            // ROM[29358]
D = A                                        // ROM[29359]
@ R15                                        // ROM[29360]
M = D                                        // ROM[29361]
@ :push_local                                // ROM[29362]
0; JMP                                       // ROM[29363]
( Memory.alloc:42)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:43                            // ROM[29364]
D = A                                        // ROM[29365]
@ R15                                        // ROM[29366]
M = D                                        // ROM[29367]
@ :add                                       // ROM[29368]
0; JMP                                       // ROM[29369]
( Memory.alloc:43)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[29370]
D = A                                        // ROM[29371]
// ---------------------------
// push D
@ SP                                         // ROM[29372]
AM = M+1                                     // ROM[29373]
A = A-1                                      // ROM[29374]
M = D                                        // ROM[29375]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29376]
D = A                                        // ROM[29377]
@ R13                                        // ROM[29378]
M = D                                        // ROM[29379]
// ---------------------------
// call
@ Memory.alloc:44                            // ROM[29380]
D = A                                        // ROM[29381]
@ R15                                        // ROM[29382]
M = D                                        // ROM[29383]
@ :push_local                                // ROM[29384]
0; JMP                                       // ROM[29385]
( Memory.alloc:44)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:45                            // ROM[29386]
D = A                                        // ROM[29387]
@ R15                                        // ROM[29388]
M = D                                        // ROM[29389]
@ :add                                       // ROM[29390]
0; JMP                                       // ROM[29391]
( Memory.alloc:45)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29392]
AM = M-1                                     // ROM[29393]
D = M                                        // ROM[29394]
// ---------------------------
@ 4                                          // ROM[29395]
M = D                                        // ROM[29396]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29397]
D = A                                        // ROM[29398]
@ R13                                        // ROM[29399]
M = D                                        // ROM[29400]
// ---------------------------
// call
@ Memory.alloc:46                            // ROM[29401]
D = A                                        // ROM[29402]
@ R15                                        // ROM[29403]
M = D                                        // ROM[29404]
@ :push_that                                 // ROM[29405]
0; JMP                                       // ROM[29406]
( Memory.alloc:46)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29407]
D = A                                        // ROM[29408]
@ R13                                        // ROM[29409]
M = D                                        // ROM[29410]
// ---------------------------
// call
@ Memory.alloc:47                            // ROM[29411]
D = A                                        // ROM[29412]
@ R15                                        // ROM[29413]
M = D                                        // ROM[29414]
@ :push_argument                             // ROM[29415]
0; JMP                                       // ROM[29416]
( Memory.alloc:47)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:48                            // ROM[29417]
D = A                                        // ROM[29418]
@ R15                                        // ROM[29419]
M = D                                        // ROM[29420]
@ :sub                                       // ROM[29421]
0; JMP                                       // ROM[29422]
( Memory.alloc:48)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[29423]
D = A                                        // ROM[29424]
// ---------------------------
// push D
@ SP                                         // ROM[29425]
AM = M+1                                     // ROM[29426]
A = A-1                                      // ROM[29427]
M = D                                        // ROM[29428]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:49                            // ROM[29429]
D = A                                        // ROM[29430]
@ R15                                        // ROM[29431]
M = D                                        // ROM[29432]
@ :sub                                       // ROM[29433]
0; JMP                                       // ROM[29434]
( Memory.alloc:49)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29435]
AM = M-1                                     // ROM[29436]
D = M                                        // ROM[29437]
// ---------------------------
@ 5                                          // ROM[29438]
M = D                                        // ROM[29439]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29440]
AM = M-1                                     // ROM[29441]
D = M                                        // ROM[29442]
// ---------------------------
@ 4                                          // ROM[29443]
M = D                                        // ROM[29444]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[29445]
D = M                                        // ROM[29446]
// ---------------------------
// push D
@ SP                                         // ROM[29447]
AM = M+1                                     // ROM[29448]
A = A-1                                      // ROM[29449]
M = D                                        // ROM[29450]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29451]
D = A                                        // ROM[29452]
@ R13                                        // ROM[29453]
M = D                                        // ROM[29454]
// ---------------------------
// call
@ Memory.alloc:50                            // ROM[29455]
D = A                                        // ROM[29456]
@ R15                                        // ROM[29457]
M = D                                        // ROM[29458]
@ :pop_that                                  // ROM[29459]
0; JMP                                       // ROM[29460]
( Memory.alloc:50)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[29461]
D = A                                        // ROM[29462]
// ---------------------------
// push D
@ SP                                         // ROM[29463]
AM = M+1                                     // ROM[29464]
A = A-1                                      // ROM[29465]
M = D                                        // ROM[29466]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29467]
D = A                                        // ROM[29468]
@ R13                                        // ROM[29469]
M = D                                        // ROM[29470]
// ---------------------------
// call
@ Memory.alloc:51                            // ROM[29471]
D = A                                        // ROM[29472]
@ R15                                        // ROM[29473]
M = D                                        // ROM[29474]
@ :push_local                                // ROM[29475]
0; JMP                                       // ROM[29476]
( Memory.alloc:51)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:52                            // ROM[29477]
D = A                                        // ROM[29478]
@ R15                                        // ROM[29479]
M = D                                        // ROM[29480]
@ :add                                       // ROM[29481]
0; JMP                                       // ROM[29482]
( Memory.alloc:52)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29483]
AM = M-1                                     // ROM[29484]
D = M                                        // ROM[29485]
// ---------------------------
@ 4                                          // ROM[29486]
M = D                                        // ROM[29487]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29488]
D = A                                        // ROM[29489]
@ R13                                        // ROM[29490]
M = D                                        // ROM[29491]
// ---------------------------
// call
@ Memory.alloc:53                            // ROM[29492]
D = A                                        // ROM[29493]
@ R15                                        // ROM[29494]
M = D                                        // ROM[29495]
@ :push_that                                 // ROM[29496]
0; JMP                                       // ROM[29497]
( Memory.alloc:53)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29498]
D = A                                        // ROM[29499]
@ R13                                        // ROM[29500]
M = D                                        // ROM[29501]
// ---------------------------
// call
@ Memory.alloc:54                            // ROM[29502]
D = A                                        // ROM[29503]
@ R15                                        // ROM[29504]
M = D                                        // ROM[29505]
@ :push_local                                // ROM[29506]
0; JMP                                       // ROM[29507]
( Memory.alloc:54)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[29508]
D = A                                        // ROM[29509]
// ---------------------------
// push D
@ SP                                         // ROM[29510]
AM = M+1                                     // ROM[29511]
A = A-1                                      // ROM[29512]
M = D                                        // ROM[29513]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:55                            // ROM[29514]
D = A                                        // ROM[29515]
@ R15                                        // ROM[29516]
M = D                                        // ROM[29517]
@ :add                                       // ROM[29518]
0; JMP                                       // ROM[29519]
( Memory.alloc:55)

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:56                            // ROM[29520]
D = A                                        // ROM[29521]
@ R15                                        // ROM[29522]
M = D                                        // ROM[29523]
@ :eq                                        // ROM[29524]
0; JMP                                       // ROM[29525]
( Memory.alloc:56)

// -------------------------------------
// IF-GOTO: IF_TRUE3
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29526]
AM = M-1                                     // ROM[29527]
D = M                                        // ROM[29528]
// ---------------------------
@ Memory.alloc$IF_TRUE3                      // ROM[29529]
D; JNE                                       // ROM[29530]

// -------------------------------------
// GOTO: IF_FALSE3
// -------------------------------------
@ Memory.alloc$IF_FALSE3                     // ROM[29531]
0; JMP                                       // ROM[29532]

// -------------------------------------
// LABEL: IF_TRUE3
// -------------------------------------
( Memory.alloc$IF_TRUE3 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29533]
D = A                                        // ROM[29534]
@ R13                                        // ROM[29535]
M = D                                        // ROM[29536]
// ---------------------------
// call
@ Memory.alloc:57                            // ROM[29537]
D = A                                        // ROM[29538]
@ R15                                        // ROM[29539]
M = D                                        // ROM[29540]
@ :push_argument                             // ROM[29541]
0; JMP                                       // ROM[29542]
( Memory.alloc:57)

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[29543]
D = A                                        // ROM[29544]
// ---------------------------
// push D
@ SP                                         // ROM[29545]
AM = M+1                                     // ROM[29546]
A = A-1                                      // ROM[29547]
M = D                                        // ROM[29548]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:58                            // ROM[29549]
D = A                                        // ROM[29550]
@ R15                                        // ROM[29551]
M = D                                        // ROM[29552]
@ :add                                       // ROM[29553]
0; JMP                                       // ROM[29554]
( Memory.alloc:58)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29555]
D = A                                        // ROM[29556]
@ R13                                        // ROM[29557]
M = D                                        // ROM[29558]
// ---------------------------
// call
@ Memory.alloc:59                            // ROM[29559]
D = A                                        // ROM[29560]
@ R15                                        // ROM[29561]
M = D                                        // ROM[29562]
@ :push_local                                // ROM[29563]
0; JMP                                       // ROM[29564]
( Memory.alloc:59)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:60                            // ROM[29565]
D = A                                        // ROM[29566]
@ R15                                        // ROM[29567]
M = D                                        // ROM[29568]
@ :add                                       // ROM[29569]
0; JMP                                       // ROM[29570]
( Memory.alloc:60)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29571]
D = A                                        // ROM[29572]
@ R13                                        // ROM[29573]
M = D                                        // ROM[29574]
// ---------------------------
// call
@ Memory.alloc:61                            // ROM[29575]
D = A                                        // ROM[29576]
@ R15                                        // ROM[29577]
M = D                                        // ROM[29578]
@ :push_local                                // ROM[29579]
0; JMP                                       // ROM[29580]
( Memory.alloc:61)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29581]
D = A                                        // ROM[29582]
@ R13                                        // ROM[29583]
M = D                                        // ROM[29584]
// ---------------------------
// call
@ Memory.alloc:62                            // ROM[29585]
D = A                                        // ROM[29586]
@ R15                                        // ROM[29587]
M = D                                        // ROM[29588]
@ :push_argument                             // ROM[29589]
0; JMP                                       // ROM[29590]
( Memory.alloc:62)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:63                            // ROM[29591]
D = A                                        // ROM[29592]
@ R15                                        // ROM[29593]
M = D                                        // ROM[29594]
@ :add                                       // ROM[29595]
0; JMP                                       // ROM[29596]
( Memory.alloc:63)

// -------------------------------------
// PUSH: <constant, 4>
// -------------------------------------
@ 4                                          // ROM[29597]
D = A                                        // ROM[29598]
// ---------------------------
// push D
@ SP                                         // ROM[29599]
AM = M+1                                     // ROM[29600]
A = A-1                                      // ROM[29601]
M = D                                        // ROM[29602]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:64                            // ROM[29603]
D = A                                        // ROM[29604]
@ R15                                        // ROM[29605]
M = D                                        // ROM[29606]
@ :add                                       // ROM[29607]
0; JMP                                       // ROM[29608]
( Memory.alloc:64)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29609]
AM = M-1                                     // ROM[29610]
D = M                                        // ROM[29611]
// ---------------------------
@ 5                                          // ROM[29612]
M = D                                        // ROM[29613]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29614]
AM = M-1                                     // ROM[29615]
D = M                                        // ROM[29616]
// ---------------------------
@ 4                                          // ROM[29617]
M = D                                        // ROM[29618]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[29619]
D = M                                        // ROM[29620]
// ---------------------------
// push D
@ SP                                         // ROM[29621]
AM = M+1                                     // ROM[29622]
A = A-1                                      // ROM[29623]
M = D                                        // ROM[29624]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29625]
D = A                                        // ROM[29626]
@ R13                                        // ROM[29627]
M = D                                        // ROM[29628]
// ---------------------------
// call
@ Memory.alloc:65                            // ROM[29629]
D = A                                        // ROM[29630]
@ R15                                        // ROM[29631]
M = D                                        // ROM[29632]
@ :pop_that                                  // ROM[29633]
0; JMP                                       // ROM[29634]
( Memory.alloc:65)

// -------------------------------------
// GOTO: IF_END3
// -------------------------------------
@ Memory.alloc$IF_END3                       // ROM[29635]
0; JMP                                       // ROM[29636]

// -------------------------------------
// LABEL: IF_FALSE3
// -------------------------------------
( Memory.alloc$IF_FALSE3 )

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29637]
D = A                                        // ROM[29638]
@ R13                                        // ROM[29639]
M = D                                        // ROM[29640]
// ---------------------------
// call
@ Memory.alloc:66                            // ROM[29641]
D = A                                        // ROM[29642]
@ R15                                        // ROM[29643]
M = D                                        // ROM[29644]
@ :push_argument                             // ROM[29645]
0; JMP                                       // ROM[29646]
( Memory.alloc:66)

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[29647]
D = A                                        // ROM[29648]
// ---------------------------
// push D
@ SP                                         // ROM[29649]
AM = M+1                                     // ROM[29650]
A = A-1                                      // ROM[29651]
M = D                                        // ROM[29652]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:67                            // ROM[29653]
D = A                                        // ROM[29654]
@ R15                                        // ROM[29655]
M = D                                        // ROM[29656]
@ :add                                       // ROM[29657]
0; JMP                                       // ROM[29658]
( Memory.alloc:67)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29659]
D = A                                        // ROM[29660]
@ R13                                        // ROM[29661]
M = D                                        // ROM[29662]
// ---------------------------
// call
@ Memory.alloc:68                            // ROM[29663]
D = A                                        // ROM[29664]
@ R15                                        // ROM[29665]
M = D                                        // ROM[29666]
@ :push_local                                // ROM[29667]
0; JMP                                       // ROM[29668]
( Memory.alloc:68)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:69                            // ROM[29669]
D = A                                        // ROM[29670]
@ R15                                        // ROM[29671]
M = D                                        // ROM[29672]
@ :add                                       // ROM[29673]
0; JMP                                       // ROM[29674]
( Memory.alloc:69)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[29675]
D = A                                        // ROM[29676]
// ---------------------------
// push D
@ SP                                         // ROM[29677]
AM = M+1                                     // ROM[29678]
A = A-1                                      // ROM[29679]
M = D                                        // ROM[29680]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29681]
D = A                                        // ROM[29682]
@ R13                                        // ROM[29683]
M = D                                        // ROM[29684]
// ---------------------------
// call
@ Memory.alloc:70                            // ROM[29685]
D = A                                        // ROM[29686]
@ R15                                        // ROM[29687]
M = D                                        // ROM[29688]
@ :push_local                                // ROM[29689]
0; JMP                                       // ROM[29690]
( Memory.alloc:70)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:71                            // ROM[29691]
D = A                                        // ROM[29692]
@ R15                                        // ROM[29693]
M = D                                        // ROM[29694]
@ :add                                       // ROM[29695]
0; JMP                                       // ROM[29696]
( Memory.alloc:71)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29697]
AM = M-1                                     // ROM[29698]
D = M                                        // ROM[29699]
// ---------------------------
@ 4                                          // ROM[29700]
M = D                                        // ROM[29701]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29702]
D = A                                        // ROM[29703]
@ R13                                        // ROM[29704]
M = D                                        // ROM[29705]
// ---------------------------
// call
@ Memory.alloc:72                            // ROM[29706]
D = A                                        // ROM[29707]
@ R15                                        // ROM[29708]
M = D                                        // ROM[29709]
@ :push_that                                 // ROM[29710]
0; JMP                                       // ROM[29711]
( Memory.alloc:72)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29712]
AM = M-1                                     // ROM[29713]
D = M                                        // ROM[29714]
// ---------------------------
@ 5                                          // ROM[29715]
M = D                                        // ROM[29716]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29717]
AM = M-1                                     // ROM[29718]
D = M                                        // ROM[29719]
// ---------------------------
@ 4                                          // ROM[29720]
M = D                                        // ROM[29721]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[29722]
D = M                                        // ROM[29723]
// ---------------------------
// push D
@ SP                                         // ROM[29724]
AM = M+1                                     // ROM[29725]
A = A-1                                      // ROM[29726]
M = D                                        // ROM[29727]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29728]
D = A                                        // ROM[29729]
@ R13                                        // ROM[29730]
M = D                                        // ROM[29731]
// ---------------------------
// call
@ Memory.alloc:73                            // ROM[29732]
D = A                                        // ROM[29733]
@ R15                                        // ROM[29734]
M = D                                        // ROM[29735]
@ :pop_that                                  // ROM[29736]
0; JMP                                       // ROM[29737]
( Memory.alloc:73)

// -------------------------------------
// LABEL: IF_END3
// -------------------------------------
( Memory.alloc$IF_END3 )

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[29738]
D = A                                        // ROM[29739]
// ---------------------------
// push D
@ SP                                         // ROM[29740]
AM = M+1                                     // ROM[29741]
A = A-1                                      // ROM[29742]
M = D                                        // ROM[29743]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29744]
D = A                                        // ROM[29745]
@ R13                                        // ROM[29746]
M = D                                        // ROM[29747]
// ---------------------------
// call
@ Memory.alloc:74                            // ROM[29748]
D = A                                        // ROM[29749]
@ R15                                        // ROM[29750]
M = D                                        // ROM[29751]
@ :push_local                                // ROM[29752]
0; JMP                                       // ROM[29753]
( Memory.alloc:74)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:75                            // ROM[29754]
D = A                                        // ROM[29755]
@ R15                                        // ROM[29756]
M = D                                        // ROM[29757]
@ :add                                       // ROM[29758]
0; JMP                                       // ROM[29759]
( Memory.alloc:75)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29760]
D = A                                        // ROM[29761]
@ R13                                        // ROM[29762]
M = D                                        // ROM[29763]
// ---------------------------
// call
@ Memory.alloc:76                            // ROM[29764]
D = A                                        // ROM[29765]
@ R15                                        // ROM[29766]
M = D                                        // ROM[29767]
@ :push_local                                // ROM[29768]
0; JMP                                       // ROM[29769]
( Memory.alloc:76)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29770]
D = A                                        // ROM[29771]
@ R13                                        // ROM[29772]
M = D                                        // ROM[29773]
// ---------------------------
// call
@ Memory.alloc:77                            // ROM[29774]
D = A                                        // ROM[29775]
@ R15                                        // ROM[29776]
M = D                                        // ROM[29777]
@ :push_argument                             // ROM[29778]
0; JMP                                       // ROM[29779]
( Memory.alloc:77)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:78                            // ROM[29780]
D = A                                        // ROM[29781]
@ R15                                        // ROM[29782]
M = D                                        // ROM[29783]
@ :add                                       // ROM[29784]
0; JMP                                       // ROM[29785]
( Memory.alloc:78)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[29786]
D = A                                        // ROM[29787]
// ---------------------------
// push D
@ SP                                         // ROM[29788]
AM = M+1                                     // ROM[29789]
A = A-1                                      // ROM[29790]
M = D                                        // ROM[29791]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:79                            // ROM[29792]
D = A                                        // ROM[29793]
@ R15                                        // ROM[29794]
M = D                                        // ROM[29795]
@ :add                                       // ROM[29796]
0; JMP                                       // ROM[29797]
( Memory.alloc:79)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29798]
AM = M-1                                     // ROM[29799]
D = M                                        // ROM[29800]
// ---------------------------
@ 5                                          // ROM[29801]
M = D                                        // ROM[29802]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29803]
AM = M-1                                     // ROM[29804]
D = M                                        // ROM[29805]
// ---------------------------
@ 4                                          // ROM[29806]
M = D                                        // ROM[29807]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[29808]
D = M                                        // ROM[29809]
// ---------------------------
// push D
@ SP                                         // ROM[29810]
AM = M+1                                     // ROM[29811]
A = A-1                                      // ROM[29812]
M = D                                        // ROM[29813]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29814]
D = A                                        // ROM[29815]
@ R13                                        // ROM[29816]
M = D                                        // ROM[29817]
// ---------------------------
// call
@ Memory.alloc:80                            // ROM[29818]
D = A                                        // ROM[29819]
@ R15                                        // ROM[29820]
M = D                                        // ROM[29821]
@ :pop_that                                  // ROM[29822]
0; JMP                                       // ROM[29823]
( Memory.alloc:80)

// -------------------------------------
// LABEL: IF_FALSE2
// -------------------------------------
( Memory.alloc$IF_FALSE2 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[29824]
D = A                                        // ROM[29825]
// ---------------------------
// push D
@ SP                                         // ROM[29826]
AM = M+1                                     // ROM[29827]
A = A-1                                      // ROM[29828]
M = D                                        // ROM[29829]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29830]
D = A                                        // ROM[29831]
@ R13                                        // ROM[29832]
M = D                                        // ROM[29833]
// ---------------------------
// call
@ Memory.alloc:81                            // ROM[29834]
D = A                                        // ROM[29835]
@ R15                                        // ROM[29836]
M = D                                        // ROM[29837]
@ :push_local                                // ROM[29838]
0; JMP                                       // ROM[29839]
( Memory.alloc:81)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:82                            // ROM[29840]
D = A                                        // ROM[29841]
@ R15                                        // ROM[29842]
M = D                                        // ROM[29843]
@ :add                                       // ROM[29844]
0; JMP                                       // ROM[29845]
( Memory.alloc:82)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[29846]
D = A                                        // ROM[29847]
// ---------------------------
// push D
@ SP                                         // ROM[29848]
AM = M+1                                     // ROM[29849]
A = A-1                                      // ROM[29850]
M = D                                        // ROM[29851]

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29852]
AM = M-1                                     // ROM[29853]
D = M                                        // ROM[29854]
// ---------------------------
@ 5                                          // ROM[29855]
M = D                                        // ROM[29856]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29857]
AM = M-1                                     // ROM[29858]
D = M                                        // ROM[29859]
// ---------------------------
@ 4                                          // ROM[29860]
M = D                                        // ROM[29861]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[29862]
D = M                                        // ROM[29863]
// ---------------------------
// push D
@ SP                                         // ROM[29864]
AM = M+1                                     // ROM[29865]
A = A-1                                      // ROM[29866]
M = D                                        // ROM[29867]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29868]
D = A                                        // ROM[29869]
@ R13                                        // ROM[29870]
M = D                                        // ROM[29871]
// ---------------------------
// call
@ Memory.alloc:83                            // ROM[29872]
D = A                                        // ROM[29873]
@ R15                                        // ROM[29874]
M = D                                        // ROM[29875]
@ :pop_that                                  // ROM[29876]
0; JMP                                       // ROM[29877]
( Memory.alloc:83)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29878]
D = A                                        // ROM[29879]
@ R13                                        // ROM[29880]
M = D                                        // ROM[29881]
// ---------------------------
// call
@ Memory.alloc:84                            // ROM[29882]
D = A                                        // ROM[29883]
@ R15                                        // ROM[29884]
M = D                                        // ROM[29885]
@ :push_local                                // ROM[29886]
0; JMP                                       // ROM[29887]
( Memory.alloc:84)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[29888]
D = A                                        // ROM[29889]
// ---------------------------
// push D
@ SP                                         // ROM[29890]
AM = M+1                                     // ROM[29891]
A = A-1                                      // ROM[29892]
M = D                                        // ROM[29893]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:85                            // ROM[29894]
D = A                                        // ROM[29895]
@ R15                                        // ROM[29896]
M = D                                        // ROM[29897]
@ :add                                       // ROM[29898]
0; JMP                                       // ROM[29899]
( Memory.alloc:85)

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Memory.alloc:86                            // ROM[29900]
D = A                                        // ROM[29901]
@ R15                                        // ROM[29902]
M = D                                        // ROM[29903]
@ :return                                    // ROM[29904]
0; JMP                                       // ROM[29905]
( Memory.alloc:86)

// =========================================================
// FUNCTION: Memory.deAlloc(2 locals)
// =========================================================

( Memory.deAlloc )
// ---------------------------
// clear local segment
D = 0                                        // ROM[29906]
// ---------------------------
// push D
@ SP                                         // ROM[29907]
AM = M+1                                     // ROM[29908]
A = A-1                                      // ROM[29909]
M = D                                        // ROM[29910]
// ---------------------------
// push D
@ SP                                         // ROM[29911]
AM = M+1                                     // ROM[29912]
A = A-1                                      // ROM[29913]
M = D                                        // ROM[29914]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29915]
D = A                                        // ROM[29916]
@ R13                                        // ROM[29917]
M = D                                        // ROM[29918]
// ---------------------------
// call
@ Memory.deAlloc:87                          // ROM[29919]
D = A                                        // ROM[29920]
@ R15                                        // ROM[29921]
M = D                                        // ROM[29922]
@ :push_argument                             // ROM[29923]
0; JMP                                       // ROM[29924]
( Memory.deAlloc:87)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[29925]
D = A                                        // ROM[29926]
// ---------------------------
// push D
@ SP                                         // ROM[29927]
AM = M+1                                     // ROM[29928]
A = A-1                                      // ROM[29929]
M = D                                        // ROM[29930]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:88                          // ROM[29931]
D = A                                        // ROM[29932]
@ R15                                        // ROM[29933]
M = D                                        // ROM[29934]
@ :sub                                       // ROM[29935]
0; JMP                                       // ROM[29936]
( Memory.deAlloc:88)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29937]
D = A                                        // ROM[29938]
@ R13                                        // ROM[29939]
M = D                                        // ROM[29940]
// ---------------------------
// call
@ Memory.deAlloc:89                          // ROM[29941]
D = A                                        // ROM[29942]
@ R15                                        // ROM[29943]
M = D                                        // ROM[29944]
@ :pop_local                                 // ROM[29945]
0; JMP                                       // ROM[29946]
( Memory.deAlloc:89)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[29947]
D = A                                        // ROM[29948]
// ---------------------------
// push D
@ SP                                         // ROM[29949]
AM = M+1                                     // ROM[29950]
A = A-1                                      // ROM[29951]
M = D                                        // ROM[29952]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29953]
D = A                                        // ROM[29954]
@ R13                                        // ROM[29955]
M = D                                        // ROM[29956]
// ---------------------------
// call
@ Memory.deAlloc:90                          // ROM[29957]
D = A                                        // ROM[29958]
@ R15                                        // ROM[29959]
M = D                                        // ROM[29960]
@ :push_local                                // ROM[29961]
0; JMP                                       // ROM[29962]
( Memory.deAlloc:90)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:91                          // ROM[29963]
D = A                                        // ROM[29964]
@ R15                                        // ROM[29965]
M = D                                        // ROM[29966]
@ :add                                       // ROM[29967]
0; JMP                                       // ROM[29968]
( Memory.deAlloc:91)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[29969]
AM = M-1                                     // ROM[29970]
D = M                                        // ROM[29971]
// ---------------------------
@ 4                                          // ROM[29972]
M = D                                        // ROM[29973]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[29974]
D = A                                        // ROM[29975]
@ R13                                        // ROM[29976]
M = D                                        // ROM[29977]
// ---------------------------
// call
@ Memory.deAlloc:92                          // ROM[29978]
D = A                                        // ROM[29979]
@ R15                                        // ROM[29980]
M = D                                        // ROM[29981]
@ :push_that                                 // ROM[29982]
0; JMP                                       // ROM[29983]
( Memory.deAlloc:92)

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[29984]
D = A                                        // ROM[29985]
@ R13                                        // ROM[29986]
M = D                                        // ROM[29987]
// ---------------------------
// call
@ Memory.deAlloc:93                          // ROM[29988]
D = A                                        // ROM[29989]
@ R15                                        // ROM[29990]
M = D                                        // ROM[29991]
@ :pop_local                                 // ROM[29992]
0; JMP                                       // ROM[29993]
( Memory.deAlloc:93)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[29994]
D = A                                        // ROM[29995]
// ---------------------------
// push D
@ SP                                         // ROM[29996]
AM = M+1                                     // ROM[29997]
A = A-1                                      // ROM[29998]
M = D                                        // ROM[29999]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30000]
D = A                                        // ROM[30001]
@ R13                                        // ROM[30002]
M = D                                        // ROM[30003]
// ---------------------------
// call
@ Memory.deAlloc:94                          // ROM[30004]
D = A                                        // ROM[30005]
@ R15                                        // ROM[30006]
M = D                                        // ROM[30007]
@ :push_local                                // ROM[30008]
0; JMP                                       // ROM[30009]
( Memory.deAlloc:94)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:95                          // ROM[30010]
D = A                                        // ROM[30011]
@ R15                                        // ROM[30012]
M = D                                        // ROM[30013]
@ :add                                       // ROM[30014]
0; JMP                                       // ROM[30015]
( Memory.deAlloc:95)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30016]
AM = M-1                                     // ROM[30017]
D = M                                        // ROM[30018]
// ---------------------------
@ 4                                          // ROM[30019]
M = D                                        // ROM[30020]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30021]
D = A                                        // ROM[30022]
@ R13                                        // ROM[30023]
M = D                                        // ROM[30024]
// ---------------------------
// call
@ Memory.deAlloc:96                          // ROM[30025]
D = A                                        // ROM[30026]
@ R15                                        // ROM[30027]
M = D                                        // ROM[30028]
@ :push_that                                 // ROM[30029]
0; JMP                                       // ROM[30030]
( Memory.deAlloc:96)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[30031]
D = A                                        // ROM[30032]
// ---------------------------
// push D
@ SP                                         // ROM[30033]
AM = M+1                                     // ROM[30034]
A = A-1                                      // ROM[30035]
M = D                                        // ROM[30036]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:97                          // ROM[30037]
D = A                                        // ROM[30038]
@ R15                                        // ROM[30039]
M = D                                        // ROM[30040]
@ :eq                                        // ROM[30041]
0; JMP                                       // ROM[30042]
( Memory.deAlloc:97)

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30043]
AM = M-1                                     // ROM[30044]
D = M                                        // ROM[30045]
// ---------------------------
@ Memory.deAlloc$IF_TRUE0                    // ROM[30046]
D; JNE                                       // ROM[30047]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Memory.deAlloc$IF_FALSE0                   // ROM[30048]
0; JMP                                       // ROM[30049]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Memory.deAlloc$IF_TRUE0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[30050]
D = A                                        // ROM[30051]
// ---------------------------
// push D
@ SP                                         // ROM[30052]
AM = M+1                                     // ROM[30053]
A = A-1                                      // ROM[30054]
M = D                                        // ROM[30055]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30056]
D = A                                        // ROM[30057]
@ R13                                        // ROM[30058]
M = D                                        // ROM[30059]
// ---------------------------
// call
@ Memory.deAlloc:98                          // ROM[30060]
D = A                                        // ROM[30061]
@ R15                                        // ROM[30062]
M = D                                        // ROM[30063]
@ :push_local                                // ROM[30064]
0; JMP                                       // ROM[30065]
( Memory.deAlloc:98)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:99                          // ROM[30066]
D = A                                        // ROM[30067]
@ R15                                        // ROM[30068]
M = D                                        // ROM[30069]
@ :add                                       // ROM[30070]
0; JMP                                       // ROM[30071]
( Memory.deAlloc:99)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[30072]
D = A                                        // ROM[30073]
// ---------------------------
// push D
@ SP                                         // ROM[30074]
AM = M+1                                     // ROM[30075]
A = A-1                                      // ROM[30076]
M = D                                        // ROM[30077]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30078]
D = A                                        // ROM[30079]
@ R13                                        // ROM[30080]
M = D                                        // ROM[30081]
// ---------------------------
// call
@ Memory.deAlloc:100                         // ROM[30082]
D = A                                        // ROM[30083]
@ R15                                        // ROM[30084]
M = D                                        // ROM[30085]
@ :push_local                                // ROM[30086]
0; JMP                                       // ROM[30087]
( Memory.deAlloc:100)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:101                         // ROM[30088]
D = A                                        // ROM[30089]
@ R15                                        // ROM[30090]
M = D                                        // ROM[30091]
@ :add                                       // ROM[30092]
0; JMP                                       // ROM[30093]
( Memory.deAlloc:101)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30094]
AM = M-1                                     // ROM[30095]
D = M                                        // ROM[30096]
// ---------------------------
@ 4                                          // ROM[30097]
M = D                                        // ROM[30098]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30099]
D = A                                        // ROM[30100]
@ R13                                        // ROM[30101]
M = D                                        // ROM[30102]
// ---------------------------
// call
@ Memory.deAlloc:102                         // ROM[30103]
D = A                                        // ROM[30104]
@ R15                                        // ROM[30105]
M = D                                        // ROM[30106]
@ :push_that                                 // ROM[30107]
0; JMP                                       // ROM[30108]
( Memory.deAlloc:102)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30109]
D = A                                        // ROM[30110]
@ R13                                        // ROM[30111]
M = D                                        // ROM[30112]
// ---------------------------
// call
@ Memory.deAlloc:103                         // ROM[30113]
D = A                                        // ROM[30114]
@ R15                                        // ROM[30115]
M = D                                        // ROM[30116]
@ :push_local                                // ROM[30117]
0; JMP                                       // ROM[30118]
( Memory.deAlloc:103)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:104                         // ROM[30119]
D = A                                        // ROM[30120]
@ R15                                        // ROM[30121]
M = D                                        // ROM[30122]
@ :sub                                       // ROM[30123]
0; JMP                                       // ROM[30124]
( Memory.deAlloc:104)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[30125]
D = A                                        // ROM[30126]
// ---------------------------
// push D
@ SP                                         // ROM[30127]
AM = M+1                                     // ROM[30128]
A = A-1                                      // ROM[30129]
M = D                                        // ROM[30130]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:105                         // ROM[30131]
D = A                                        // ROM[30132]
@ R15                                        // ROM[30133]
M = D                                        // ROM[30134]
@ :sub                                       // ROM[30135]
0; JMP                                       // ROM[30136]
( Memory.deAlloc:105)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30137]
AM = M-1                                     // ROM[30138]
D = M                                        // ROM[30139]
// ---------------------------
@ 5                                          // ROM[30140]
M = D                                        // ROM[30141]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30142]
AM = M-1                                     // ROM[30143]
D = M                                        // ROM[30144]
// ---------------------------
@ 4                                          // ROM[30145]
M = D                                        // ROM[30146]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[30147]
D = M                                        // ROM[30148]
// ---------------------------
// push D
@ SP                                         // ROM[30149]
AM = M+1                                     // ROM[30150]
A = A-1                                      // ROM[30151]
M = D                                        // ROM[30152]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30153]
D = A                                        // ROM[30154]
@ R13                                        // ROM[30155]
M = D                                        // ROM[30156]
// ---------------------------
// call
@ Memory.deAlloc:106                         // ROM[30157]
D = A                                        // ROM[30158]
@ R15                                        // ROM[30159]
M = D                                        // ROM[30160]
@ :pop_that                                  // ROM[30161]
0; JMP                                       // ROM[30162]
( Memory.deAlloc:106)

// -------------------------------------
// GOTO: IF_END0
// -------------------------------------
@ Memory.deAlloc$IF_END0                     // ROM[30163]
0; JMP                                       // ROM[30164]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Memory.deAlloc$IF_FALSE0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[30165]
D = A                                        // ROM[30166]
// ---------------------------
// push D
@ SP                                         // ROM[30167]
AM = M+1                                     // ROM[30168]
A = A-1                                      // ROM[30169]
M = D                                        // ROM[30170]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30171]
D = A                                        // ROM[30172]
@ R13                                        // ROM[30173]
M = D                                        // ROM[30174]
// ---------------------------
// call
@ Memory.deAlloc:107                         // ROM[30175]
D = A                                        // ROM[30176]
@ R15                                        // ROM[30177]
M = D                                        // ROM[30178]
@ :push_local                                // ROM[30179]
0; JMP                                       // ROM[30180]
( Memory.deAlloc:107)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:108                         // ROM[30181]
D = A                                        // ROM[30182]
@ R15                                        // ROM[30183]
M = D                                        // ROM[30184]
@ :add                                       // ROM[30185]
0; JMP                                       // ROM[30186]
( Memory.deAlloc:108)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[30187]
D = A                                        // ROM[30188]
// ---------------------------
// push D
@ SP                                         // ROM[30189]
AM = M+1                                     // ROM[30190]
A = A-1                                      // ROM[30191]
M = D                                        // ROM[30192]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30193]
D = A                                        // ROM[30194]
@ R13                                        // ROM[30195]
M = D                                        // ROM[30196]
// ---------------------------
// call
@ Memory.deAlloc:109                         // ROM[30197]
D = A                                        // ROM[30198]
@ R15                                        // ROM[30199]
M = D                                        // ROM[30200]
@ :push_local                                // ROM[30201]
0; JMP                                       // ROM[30202]
( Memory.deAlloc:109)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:110                         // ROM[30203]
D = A                                        // ROM[30204]
@ R15                                        // ROM[30205]
M = D                                        // ROM[30206]
@ :add                                       // ROM[30207]
0; JMP                                       // ROM[30208]
( Memory.deAlloc:110)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30209]
AM = M-1                                     // ROM[30210]
D = M                                        // ROM[30211]
// ---------------------------
@ 4                                          // ROM[30212]
M = D                                        // ROM[30213]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30214]
D = A                                        // ROM[30215]
@ R13                                        // ROM[30216]
M = D                                        // ROM[30217]
// ---------------------------
// call
@ Memory.deAlloc:111                         // ROM[30218]
D = A                                        // ROM[30219]
@ R15                                        // ROM[30220]
M = D                                        // ROM[30221]
@ :push_that                                 // ROM[30222]
0; JMP                                       // ROM[30223]
( Memory.deAlloc:111)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30224]
D = A                                        // ROM[30225]
@ R13                                        // ROM[30226]
M = D                                        // ROM[30227]
// ---------------------------
// call
@ Memory.deAlloc:112                         // ROM[30228]
D = A                                        // ROM[30229]
@ R15                                        // ROM[30230]
M = D                                        // ROM[30231]
@ :push_local                                // ROM[30232]
0; JMP                                       // ROM[30233]
( Memory.deAlloc:112)

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:113                         // ROM[30234]
D = A                                        // ROM[30235]
@ R15                                        // ROM[30236]
M = D                                        // ROM[30237]
@ :sub                                       // ROM[30238]
0; JMP                                       // ROM[30239]
( Memory.deAlloc:113)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[30240]
D = A                                        // ROM[30241]
// ---------------------------
// push D
@ SP                                         // ROM[30242]
AM = M+1                                     // ROM[30243]
A = A-1                                      // ROM[30244]
M = D                                        // ROM[30245]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30246]
D = A                                        // ROM[30247]
@ R13                                        // ROM[30248]
M = D                                        // ROM[30249]
// ---------------------------
// call
@ Memory.deAlloc:114                         // ROM[30250]
D = A                                        // ROM[30251]
@ R15                                        // ROM[30252]
M = D                                        // ROM[30253]
@ :push_local                                // ROM[30254]
0; JMP                                       // ROM[30255]
( Memory.deAlloc:114)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:115                         // ROM[30256]
D = A                                        // ROM[30257]
@ R15                                        // ROM[30258]
M = D                                        // ROM[30259]
@ :add                                       // ROM[30260]
0; JMP                                       // ROM[30261]
( Memory.deAlloc:115)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30262]
AM = M-1                                     // ROM[30263]
D = M                                        // ROM[30264]
// ---------------------------
@ 4                                          // ROM[30265]
M = D                                        // ROM[30266]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30267]
D = A                                        // ROM[30268]
@ R13                                        // ROM[30269]
M = D                                        // ROM[30270]
// ---------------------------
// call
@ Memory.deAlloc:116                         // ROM[30271]
D = A                                        // ROM[30272]
@ R15                                        // ROM[30273]
M = D                                        // ROM[30274]
@ :push_that                                 // ROM[30275]
0; JMP                                       // ROM[30276]
( Memory.deAlloc:116)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:117                         // ROM[30277]
D = A                                        // ROM[30278]
@ R15                                        // ROM[30279]
M = D                                        // ROM[30280]
@ :add                                       // ROM[30281]
0; JMP                                       // ROM[30282]
( Memory.deAlloc:117)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30283]
AM = M-1                                     // ROM[30284]
D = M                                        // ROM[30285]
// ---------------------------
@ 5                                          // ROM[30286]
M = D                                        // ROM[30287]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30288]
AM = M-1                                     // ROM[30289]
D = M                                        // ROM[30290]
// ---------------------------
@ 4                                          // ROM[30291]
M = D                                        // ROM[30292]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[30293]
D = M                                        // ROM[30294]
// ---------------------------
// push D
@ SP                                         // ROM[30295]
AM = M+1                                     // ROM[30296]
A = A-1                                      // ROM[30297]
M = D                                        // ROM[30298]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30299]
D = A                                        // ROM[30300]
@ R13                                        // ROM[30301]
M = D                                        // ROM[30302]
// ---------------------------
// call
@ Memory.deAlloc:118                         // ROM[30303]
D = A                                        // ROM[30304]
@ R15                                        // ROM[30305]
M = D                                        // ROM[30306]
@ :pop_that                                  // ROM[30307]
0; JMP                                       // ROM[30308]
( Memory.deAlloc:118)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[30309]
D = A                                        // ROM[30310]
// ---------------------------
// push D
@ SP                                         // ROM[30311]
AM = M+1                                     // ROM[30312]
A = A-1                                      // ROM[30313]
M = D                                        // ROM[30314]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30315]
D = A                                        // ROM[30316]
@ R13                                        // ROM[30317]
M = D                                        // ROM[30318]
// ---------------------------
// call
@ Memory.deAlloc:119                         // ROM[30319]
D = A                                        // ROM[30320]
@ R15                                        // ROM[30321]
M = D                                        // ROM[30322]
@ :push_local                                // ROM[30323]
0; JMP                                       // ROM[30324]
( Memory.deAlloc:119)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:120                         // ROM[30325]
D = A                                        // ROM[30326]
@ R15                                        // ROM[30327]
M = D                                        // ROM[30328]
@ :add                                       // ROM[30329]
0; JMP                                       // ROM[30330]
( Memory.deAlloc:120)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30331]
AM = M-1                                     // ROM[30332]
D = M                                        // ROM[30333]
// ---------------------------
@ 4                                          // ROM[30334]
M = D                                        // ROM[30335]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30336]
D = A                                        // ROM[30337]
@ R13                                        // ROM[30338]
M = D                                        // ROM[30339]
// ---------------------------
// call
@ Memory.deAlloc:121                         // ROM[30340]
D = A                                        // ROM[30341]
@ R15                                        // ROM[30342]
M = D                                        // ROM[30343]
@ :push_that                                 // ROM[30344]
0; JMP                                       // ROM[30345]
( Memory.deAlloc:121)

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30346]
D = A                                        // ROM[30347]
@ R13                                        // ROM[30348]
M = D                                        // ROM[30349]
// ---------------------------
// call
@ Memory.deAlloc:122                         // ROM[30350]
D = A                                        // ROM[30351]
@ R15                                        // ROM[30352]
M = D                                        // ROM[30353]
@ :push_local                                // ROM[30354]
0; JMP                                       // ROM[30355]
( Memory.deAlloc:122)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[30356]
D = A                                        // ROM[30357]
// ---------------------------
// push D
@ SP                                         // ROM[30358]
AM = M+1                                     // ROM[30359]
A = A-1                                      // ROM[30360]
M = D                                        // ROM[30361]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:123                         // ROM[30362]
D = A                                        // ROM[30363]
@ R15                                        // ROM[30364]
M = D                                        // ROM[30365]
@ :add                                       // ROM[30366]
0; JMP                                       // ROM[30367]
( Memory.deAlloc:123)

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:124                         // ROM[30368]
D = A                                        // ROM[30369]
@ R15                                        // ROM[30370]
M = D                                        // ROM[30371]
@ :eq                                        // ROM[30372]
0; JMP                                       // ROM[30373]
( Memory.deAlloc:124)

// -------------------------------------
// IF-GOTO: IF_TRUE1
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30374]
AM = M-1                                     // ROM[30375]
D = M                                        // ROM[30376]
// ---------------------------
@ Memory.deAlloc$IF_TRUE1                    // ROM[30377]
D; JNE                                       // ROM[30378]

// -------------------------------------
// GOTO: IF_FALSE1
// -------------------------------------
@ Memory.deAlloc$IF_FALSE1                   // ROM[30379]
0; JMP                                       // ROM[30380]

// -------------------------------------
// LABEL: IF_TRUE1
// -------------------------------------
( Memory.deAlloc$IF_TRUE1 )

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[30381]
D = A                                        // ROM[30382]
// ---------------------------
// push D
@ SP                                         // ROM[30383]
AM = M+1                                     // ROM[30384]
A = A-1                                      // ROM[30385]
M = D                                        // ROM[30386]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30387]
D = A                                        // ROM[30388]
@ R13                                        // ROM[30389]
M = D                                        // ROM[30390]
// ---------------------------
// call
@ Memory.deAlloc:125                         // ROM[30391]
D = A                                        // ROM[30392]
@ R15                                        // ROM[30393]
M = D                                        // ROM[30394]
@ :push_local                                // ROM[30395]
0; JMP                                       // ROM[30396]
( Memory.deAlloc:125)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:126                         // ROM[30397]
D = A                                        // ROM[30398]
@ R15                                        // ROM[30399]
M = D                                        // ROM[30400]
@ :add                                       // ROM[30401]
0; JMP                                       // ROM[30402]
( Memory.deAlloc:126)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30403]
D = A                                        // ROM[30404]
@ R13                                        // ROM[30405]
M = D                                        // ROM[30406]
// ---------------------------
// call
@ Memory.deAlloc:127                         // ROM[30407]
D = A                                        // ROM[30408]
@ R15                                        // ROM[30409]
M = D                                        // ROM[30410]
@ :push_local                                // ROM[30411]
0; JMP                                       // ROM[30412]
( Memory.deAlloc:127)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[30413]
D = A                                        // ROM[30414]
// ---------------------------
// push D
@ SP                                         // ROM[30415]
AM = M+1                                     // ROM[30416]
A = A-1                                      // ROM[30417]
M = D                                        // ROM[30418]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:128                         // ROM[30419]
D = A                                        // ROM[30420]
@ R15                                        // ROM[30421]
M = D                                        // ROM[30422]
@ :add                                       // ROM[30423]
0; JMP                                       // ROM[30424]
( Memory.deAlloc:128)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30425]
AM = M-1                                     // ROM[30426]
D = M                                        // ROM[30427]
// ---------------------------
@ 5                                          // ROM[30428]
M = D                                        // ROM[30429]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30430]
AM = M-1                                     // ROM[30431]
D = M                                        // ROM[30432]
// ---------------------------
@ 4                                          // ROM[30433]
M = D                                        // ROM[30434]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[30435]
D = M                                        // ROM[30436]
// ---------------------------
// push D
@ SP                                         // ROM[30437]
AM = M+1                                     // ROM[30438]
A = A-1                                      // ROM[30439]
M = D                                        // ROM[30440]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30441]
D = A                                        // ROM[30442]
@ R13                                        // ROM[30443]
M = D                                        // ROM[30444]
// ---------------------------
// call
@ Memory.deAlloc:129                         // ROM[30445]
D = A                                        // ROM[30446]
@ R15                                        // ROM[30447]
M = D                                        // ROM[30448]
@ :pop_that                                  // ROM[30449]
0; JMP                                       // ROM[30450]
( Memory.deAlloc:129)

// -------------------------------------
// GOTO: IF_END1
// -------------------------------------
@ Memory.deAlloc$IF_END1                     // ROM[30451]
0; JMP                                       // ROM[30452]

// -------------------------------------
// LABEL: IF_FALSE1
// -------------------------------------
( Memory.deAlloc$IF_FALSE1 )

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[30453]
D = A                                        // ROM[30454]
// ---------------------------
// push D
@ SP                                         // ROM[30455]
AM = M+1                                     // ROM[30456]
A = A-1                                      // ROM[30457]
M = D                                        // ROM[30458]

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30459]
D = A                                        // ROM[30460]
@ R13                                        // ROM[30461]
M = D                                        // ROM[30462]
// ---------------------------
// call
@ Memory.deAlloc:130                         // ROM[30463]
D = A                                        // ROM[30464]
@ R15                                        // ROM[30465]
M = D                                        // ROM[30466]
@ :push_local                                // ROM[30467]
0; JMP                                       // ROM[30468]
( Memory.deAlloc:130)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:131                         // ROM[30469]
D = A                                        // ROM[30470]
@ R15                                        // ROM[30471]
M = D                                        // ROM[30472]
@ :add                                       // ROM[30473]
0; JMP                                       // ROM[30474]
( Memory.deAlloc:131)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[30475]
D = A                                        // ROM[30476]
// ---------------------------
// push D
@ SP                                         // ROM[30477]
AM = M+1                                     // ROM[30478]
A = A-1                                      // ROM[30479]
M = D                                        // ROM[30480]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30481]
D = A                                        // ROM[30482]
@ R13                                        // ROM[30483]
M = D                                        // ROM[30484]
// ---------------------------
// call
@ Memory.deAlloc:132                         // ROM[30485]
D = A                                        // ROM[30486]
@ R15                                        // ROM[30487]
M = D                                        // ROM[30488]
@ :push_local                                // ROM[30489]
0; JMP                                       // ROM[30490]
( Memory.deAlloc:132)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:133                         // ROM[30491]
D = A                                        // ROM[30492]
@ R15                                        // ROM[30493]
M = D                                        // ROM[30494]
@ :add                                       // ROM[30495]
0; JMP                                       // ROM[30496]
( Memory.deAlloc:133)

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30497]
AM = M-1                                     // ROM[30498]
D = M                                        // ROM[30499]
// ---------------------------
@ 4                                          // ROM[30500]
M = D                                        // ROM[30501]

// -------------------------------------
// PUSH: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30502]
D = A                                        // ROM[30503]
@ R13                                        // ROM[30504]
M = D                                        // ROM[30505]
// ---------------------------
// call
@ Memory.deAlloc:134                         // ROM[30506]
D = A                                        // ROM[30507]
@ R15                                        // ROM[30508]
M = D                                        // ROM[30509]
@ :push_that                                 // ROM[30510]
0; JMP                                       // ROM[30511]
( Memory.deAlloc:134)

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30512]
AM = M-1                                     // ROM[30513]
D = M                                        // ROM[30514]
// ---------------------------
@ 5                                          // ROM[30515]
M = D                                        // ROM[30516]

// -------------------------------------
// POP: <pointer, 1>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30517]
AM = M-1                                     // ROM[30518]
D = M                                        // ROM[30519]
// ---------------------------
@ 4                                          // ROM[30520]
M = D                                        // ROM[30521]

// -------------------------------------
// PUSH: <temp, 0>
// -------------------------------------
@ 5                                          // ROM[30522]
D = M                                        // ROM[30523]
// ---------------------------
// push D
@ SP                                         // ROM[30524]
AM = M+1                                     // ROM[30525]
A = A-1                                      // ROM[30526]
M = D                                        // ROM[30527]

// -------------------------------------
// POP: <that, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30528]
D = A                                        // ROM[30529]
@ R13                                        // ROM[30530]
M = D                                        // ROM[30531]
// ---------------------------
// call
@ Memory.deAlloc:135                         // ROM[30532]
D = A                                        // ROM[30533]
@ R15                                        // ROM[30534]
M = D                                        // ROM[30535]
@ :pop_that                                  // ROM[30536]
0; JMP                                       // ROM[30537]
( Memory.deAlloc:135)

// -------------------------------------
// LABEL: IF_END1
// -------------------------------------
( Memory.deAlloc$IF_END1 )

// -------------------------------------
// LABEL: IF_END0
// -------------------------------------
( Memory.deAlloc$IF_END0 )

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[30538]
D = A                                        // ROM[30539]
// ---------------------------
// push D
@ SP                                         // ROM[30540]
AM = M+1                                     // ROM[30541]
A = A-1                                      // ROM[30542]
M = D                                        // ROM[30543]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Memory.deAlloc:136                         // ROM[30544]
D = A                                        // ROM[30545]
@ R15                                        // ROM[30546]
M = D                                        // ROM[30547]
@ :return                                    // ROM[30548]
0; JMP                                       // ROM[30549]
( Memory.deAlloc:136)

// *********************************************************
// Translation of: ./Cell.vm
// *********************************************************


// =========================================================
// FUNCTION: Cell.new(0 locals)
// =========================================================

( Cell.new )
// ---------------------------
// clear local segment
D = 0                                        // ROM[30550]

// -------------------------------------
// PUSH: <constant, 4>
// -------------------------------------
@ 4                                          // ROM[30551]
D = A                                        // ROM[30552]
// ---------------------------
// push D
@ SP                                         // ROM[30553]
AM = M+1                                     // ROM[30554]
A = A-1                                      // ROM[30555]
M = D                                        // ROM[30556]

// -------------------------------------
// CALL: Memory.alloc(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[30557]
D = A                                        // ROM[30558]
@ R13                                        // ROM[30559]
M = D                                        // ROM[30560]
// ---------------------------
// Push RA
@ Cell.new:0                                 // ROM[30561]
D = A                                        // ROM[30562]
// ---------------------------
// push D
@ SP                                         // ROM[30563]
AM = M+1                                     // ROM[30564]
A = A-1                                      // ROM[30565]
M = D                                        // ROM[30566]
// ---------------------------
// call
@ Cell.new:1                                 // ROM[30567]
D = A                                        // ROM[30568]
@ R15                                        // ROM[30569]
M = D                                        // ROM[30570]
@ :call                                      // ROM[30571]
0; JMP                                       // ROM[30572]
( Cell.new:1)
// ---------------------------
// goto functionName
@ Memory.alloc                               // ROM[30573]
0; JMP                                       // ROM[30574]
// ---------------------------
// ( RA )
( Cell.new:0) 

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30575]
AM = M-1                                     // ROM[30576]
D = M                                        // ROM[30577]
// ---------------------------
@ 3                                          // ROM[30578]
M = D                                        // ROM[30579]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30580]
D = A                                        // ROM[30581]
@ R13                                        // ROM[30582]
M = D                                        // ROM[30583]
// ---------------------------
// call
@ Cell.new:2                                 // ROM[30584]
D = A                                        // ROM[30585]
@ R15                                        // ROM[30586]
M = D                                        // ROM[30587]
@ :push_argument                             // ROM[30588]
0; JMP                                       // ROM[30589]
( Cell.new:2)

// -------------------------------------
// POP: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30590]
D = A                                        // ROM[30591]
@ R13                                        // ROM[30592]
M = D                                        // ROM[30593]
// ---------------------------
// call
@ Cell.new:3                                 // ROM[30594]
D = A                                        // ROM[30595]
@ R15                                        // ROM[30596]
M = D                                        // ROM[30597]
@ :pop_this                                  // ROM[30598]
0; JMP                                       // ROM[30599]
( Cell.new:3)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30600]
D = A                                        // ROM[30601]
@ R13                                        // ROM[30602]
M = D                                        // ROM[30603]
// ---------------------------
// call
@ Cell.new:4                                 // ROM[30604]
D = A                                        // ROM[30605]
@ R15                                        // ROM[30606]
M = D                                        // ROM[30607]
@ :push_argument                             // ROM[30608]
0; JMP                                       // ROM[30609]
( Cell.new:4)

// -------------------------------------
// POP: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30610]
D = A                                        // ROM[30611]
@ R13                                        // ROM[30612]
M = D                                        // ROM[30613]
// ---------------------------
// call
@ Cell.new:5                                 // ROM[30614]
D = A                                        // ROM[30615]
@ R15                                        // ROM[30616]
M = D                                        // ROM[30617]
@ :pop_this                                  // ROM[30618]
0; JMP                                       // ROM[30619]
( Cell.new:5)

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30620]
D = A                                        // ROM[30621]
@ R13                                        // ROM[30622]
M = D                                        // ROM[30623]
// ---------------------------
// call
@ Cell.new:6                                 // ROM[30624]
D = A                                        // ROM[30625]
@ R15                                        // ROM[30626]
M = D                                        // ROM[30627]
@ :push_argument                             // ROM[30628]
0; JMP                                       // ROM[30629]
( Cell.new:6)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30630]
D = A                                        // ROM[30631]
@ R13                                        // ROM[30632]
M = D                                        // ROM[30633]
// ---------------------------
// call
@ Cell.new:7                                 // ROM[30634]
D = A                                        // ROM[30635]
@ R15                                        // ROM[30636]
M = D                                        // ROM[30637]
@ :push_argument                             // ROM[30638]
0; JMP                                       // ROM[30639]
( Cell.new:7)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.new:8                                 // ROM[30640]
D = A                                        // ROM[30641]
@ R15                                        // ROM[30642]
M = D                                        // ROM[30643]
@ :add                                       // ROM[30644]
0; JMP                                       // ROM[30645]
( Cell.new:8)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[30646]
D = A                                        // ROM[30647]
// ---------------------------
// push D
@ SP                                         // ROM[30648]
AM = M+1                                     // ROM[30649]
A = A-1                                      // ROM[30650]
M = D                                        // ROM[30651]

// -------------------------------------
// ARITHMETIC: and
// -------------------------------------
// ---------------------------
// call
@ Cell.new:9                                 // ROM[30652]
D = A                                        // ROM[30653]
@ R15                                        // ROM[30654]
M = D                                        // ROM[30655]
@ :and                                       // ROM[30656]
0; JMP                                       // ROM[30657]
( Cell.new:9)

// -------------------------------------
// ARITHMETIC: neg
// -------------------------------------
@ SP                                         // ROM[30658]
A = M-1                                      // ROM[30659]
M = -M                                       // ROM[30660]

// -------------------------------------
// POP: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[30661]
D = A                                        // ROM[30662]
@ R13                                        // ROM[30663]
M = D                                        // ROM[30664]
// ---------------------------
// call
@ Cell.new:10                                // ROM[30665]
D = A                                        // ROM[30666]
@ R15                                        // ROM[30667]
M = D                                        // ROM[30668]
@ :pop_this                                  // ROM[30669]
0; JMP                                       // ROM[30670]
( Cell.new:10)

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[30671]
D = A                                        // ROM[30672]
// ---------------------------
// push D
@ SP                                         // ROM[30673]
AM = M+1                                     // ROM[30674]
A = A-1                                      // ROM[30675]
M = D                                        // ROM[30676]

// -------------------------------------
// CALL: String.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[30677]
D = A                                        // ROM[30678]
@ R13                                        // ROM[30679]
M = D                                        // ROM[30680]
// ---------------------------
// Push RA
@ Cell.new:11                                // ROM[30681]
D = A                                        // ROM[30682]
// ---------------------------
// push D
@ SP                                         // ROM[30683]
AM = M+1                                     // ROM[30684]
A = A-1                                      // ROM[30685]
M = D                                        // ROM[30686]
// ---------------------------
// call
@ Cell.new:12                                // ROM[30687]
D = A                                        // ROM[30688]
@ R15                                        // ROM[30689]
M = D                                        // ROM[30690]
@ :call                                      // ROM[30691]
0; JMP                                       // ROM[30692]
( Cell.new:12)
// ---------------------------
// goto functionName
@ String.new                                 // ROM[30693]
0; JMP                                       // ROM[30694]
// ---------------------------
// ( RA )
( Cell.new:11) 

// -------------------------------------
// POP: <this, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[30695]
D = A                                        // ROM[30696]
@ R13                                        // ROM[30697]
M = D                                        // ROM[30698]
// ---------------------------
// call
@ Cell.new:13                                // ROM[30699]
D = A                                        // ROM[30700]
@ R15                                        // ROM[30701]
M = D                                        // ROM[30702]
@ :pop_this                                  // ROM[30703]
0; JMP                                       // ROM[30704]
( Cell.new:13)

// -------------------------------------
// PUSH: <this, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[30705]
D = A                                        // ROM[30706]
@ R13                                        // ROM[30707]
M = D                                        // ROM[30708]
// ---------------------------
// call
@ Cell.new:14                                // ROM[30709]
D = A                                        // ROM[30710]
@ R15                                        // ROM[30711]
M = D                                        // ROM[30712]
@ :push_this                                 // ROM[30713]
0; JMP                                       // ROM[30714]
( Cell.new:14)

// -------------------------------------
// PUSH: <constant, 65>
// -------------------------------------
@ 65                                         // ROM[30715]
D = A                                        // ROM[30716]
// ---------------------------
// push D
@ SP                                         // ROM[30717]
AM = M+1                                     // ROM[30718]
A = A-1                                      // ROM[30719]
M = D                                        // ROM[30720]

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30721]
D = A                                        // ROM[30722]
@ R13                                        // ROM[30723]
M = D                                        // ROM[30724]
// ---------------------------
// call
@ Cell.new:15                                // ROM[30725]
D = A                                        // ROM[30726]
@ R15                                        // ROM[30727]
M = D                                        // ROM[30728]
@ :push_this                                 // ROM[30729]
0; JMP                                       // ROM[30730]
( Cell.new:15)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.new:16                                // ROM[30731]
D = A                                        // ROM[30732]
@ R15                                        // ROM[30733]
M = D                                        // ROM[30734]
@ :add                                       // ROM[30735]
0; JMP                                       // ROM[30736]
( Cell.new:16)

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[30737]
D = A                                        // ROM[30738]
@ R13                                        // ROM[30739]
M = D                                        // ROM[30740]
// ---------------------------
// Push RA
@ Cell.new:17                                // ROM[30741]
D = A                                        // ROM[30742]
// ---------------------------
// push D
@ SP                                         // ROM[30743]
AM = M+1                                     // ROM[30744]
A = A-1                                      // ROM[30745]
M = D                                        // ROM[30746]
// ---------------------------
// call
@ Cell.new:18                                // ROM[30747]
D = A                                        // ROM[30748]
@ R15                                        // ROM[30749]
M = D                                        // ROM[30750]
@ :call                                      // ROM[30751]
0; JMP                                       // ROM[30752]
( Cell.new:18)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[30753]
0; JMP                                       // ROM[30754]
// ---------------------------
// ( RA )
( Cell.new:17) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30755]
AM = M-1                                     // ROM[30756]
D = M                                        // ROM[30757]
// ---------------------------
@ 5                                          // ROM[30758]
M = D                                        // ROM[30759]

// -------------------------------------
// PUSH: <this, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[30760]
D = A                                        // ROM[30761]
@ R13                                        // ROM[30762]
M = D                                        // ROM[30763]
// ---------------------------
// call
@ Cell.new:19                                // ROM[30764]
D = A                                        // ROM[30765]
@ R15                                        // ROM[30766]
M = D                                        // ROM[30767]
@ :push_this                                 // ROM[30768]
0; JMP                                       // ROM[30769]
( Cell.new:19)

// -------------------------------------
// PUSH: <constant, 48>
// -------------------------------------
@ 48                                         // ROM[30770]
D = A                                        // ROM[30771]
// ---------------------------
// push D
@ SP                                         // ROM[30772]
AM = M+1                                     // ROM[30773]
A = A-1                                      // ROM[30774]
M = D                                        // ROM[30775]

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[30776]
D = A                                        // ROM[30777]
@ R13                                        // ROM[30778]
M = D                                        // ROM[30779]
// ---------------------------
// call
@ Cell.new:20                                // ROM[30780]
D = A                                        // ROM[30781]
@ R15                                        // ROM[30782]
M = D                                        // ROM[30783]
@ :push_this                                 // ROM[30784]
0; JMP                                       // ROM[30785]
( Cell.new:20)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.new:21                                // ROM[30786]
D = A                                        // ROM[30787]
@ R15                                        // ROM[30788]
M = D                                        // ROM[30789]
@ :add                                       // ROM[30790]
0; JMP                                       // ROM[30791]
( Cell.new:21)

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[30792]
D = A                                        // ROM[30793]
@ R13                                        // ROM[30794]
M = D                                        // ROM[30795]
// ---------------------------
// Push RA
@ Cell.new:22                                // ROM[30796]
D = A                                        // ROM[30797]
// ---------------------------
// push D
@ SP                                         // ROM[30798]
AM = M+1                                     // ROM[30799]
A = A-1                                      // ROM[30800]
M = D                                        // ROM[30801]
// ---------------------------
// call
@ Cell.new:23                                // ROM[30802]
D = A                                        // ROM[30803]
@ R15                                        // ROM[30804]
M = D                                        // ROM[30805]
@ :call                                      // ROM[30806]
0; JMP                                       // ROM[30807]
( Cell.new:23)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[30808]
0; JMP                                       // ROM[30809]
// ---------------------------
// ( RA )
( Cell.new:22) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30810]
AM = M-1                                     // ROM[30811]
D = M                                        // ROM[30812]
// ---------------------------
@ 5                                          // ROM[30813]
M = D                                        // ROM[30814]

// -------------------------------------
// PUSH: <pointer, 0>
// -------------------------------------
@ 3                                          // ROM[30815]
D = M                                        // ROM[30816]
// ---------------------------
// push D
@ SP                                         // ROM[30817]
AM = M+1                                     // ROM[30818]
A = A-1                                      // ROM[30819]
M = D                                        // ROM[30820]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Cell.new:24                                // ROM[30821]
D = A                                        // ROM[30822]
@ R15                                        // ROM[30823]
M = D                                        // ROM[30824]
@ :return                                    // ROM[30825]
0; JMP                                       // ROM[30826]
( Cell.new:24)

// =========================================================
// FUNCTION: Cell.dispose(0 locals)
// =========================================================

( Cell.dispose )
// ---------------------------
// clear local segment
D = 0                                        // ROM[30827]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30828]
D = A                                        // ROM[30829]
@ R13                                        // ROM[30830]
M = D                                        // ROM[30831]
// ---------------------------
// call
@ Cell.dispose:25                            // ROM[30832]
D = A                                        // ROM[30833]
@ R15                                        // ROM[30834]
M = D                                        // ROM[30835]
@ :push_argument                             // ROM[30836]
0; JMP                                       // ROM[30837]
( Cell.dispose:25)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30838]
AM = M-1                                     // ROM[30839]
D = M                                        // ROM[30840]
// ---------------------------
@ 3                                          // ROM[30841]
M = D                                        // ROM[30842]

// -------------------------------------
// PUSH: <this, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[30843]
D = A                                        // ROM[30844]
@ R13                                        // ROM[30845]
M = D                                        // ROM[30846]
// ---------------------------
// call
@ Cell.dispose:26                            // ROM[30847]
D = A                                        // ROM[30848]
@ R15                                        // ROM[30849]
M = D                                        // ROM[30850]
@ :push_this                                 // ROM[30851]
0; JMP                                       // ROM[30852]
( Cell.dispose:26)

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[30853]
D = A                                        // ROM[30854]
// ---------------------------
// push D
@ SP                                         // ROM[30855]
AM = M+1                                     // ROM[30856]
A = A-1                                      // ROM[30857]
M = D                                        // ROM[30858]

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Cell.dispose:27                            // ROM[30859]
D = A                                        // ROM[30860]
@ R15                                        // ROM[30861]
M = D                                        // ROM[30862]
@ :eq                                        // ROM[30863]
0; JMP                                       // ROM[30864]
( Cell.dispose:27)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[30865]
A = M-1                                      // ROM[30866]
M = !M                                       // ROM[30867]

// -------------------------------------
// IF-GOTO: IF_TRUE0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30868]
AM = M-1                                     // ROM[30869]
D = M                                        // ROM[30870]
// ---------------------------
@ Cell.dispose$IF_TRUE0                      // ROM[30871]
D; JNE                                       // ROM[30872]

// -------------------------------------
// GOTO: IF_FALSE0
// -------------------------------------
@ Cell.dispose$IF_FALSE0                     // ROM[30873]
0; JMP                                       // ROM[30874]

// -------------------------------------
// LABEL: IF_TRUE0
// -------------------------------------
( Cell.dispose$IF_TRUE0 )

// -------------------------------------
// PUSH: <this, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[30875]
D = A                                        // ROM[30876]
@ R13                                        // ROM[30877]
M = D                                        // ROM[30878]
// ---------------------------
// call
@ Cell.dispose:28                            // ROM[30879]
D = A                                        // ROM[30880]
@ R15                                        // ROM[30881]
M = D                                        // ROM[30882]
@ :push_this                                 // ROM[30883]
0; JMP                                       // ROM[30884]
( Cell.dispose:28)

// -------------------------------------
// CALL: String.dispose(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[30885]
D = A                                        // ROM[30886]
@ R13                                        // ROM[30887]
M = D                                        // ROM[30888]
// ---------------------------
// Push RA
@ Cell.dispose:29                            // ROM[30889]
D = A                                        // ROM[30890]
// ---------------------------
// push D
@ SP                                         // ROM[30891]
AM = M+1                                     // ROM[30892]
A = A-1                                      // ROM[30893]
M = D                                        // ROM[30894]
// ---------------------------
// call
@ Cell.dispose:30                            // ROM[30895]
D = A                                        // ROM[30896]
@ R15                                        // ROM[30897]
M = D                                        // ROM[30898]
@ :call                                      // ROM[30899]
0; JMP                                       // ROM[30900]
( Cell.dispose:30)
// ---------------------------
// goto functionName
@ String.dispose                             // ROM[30901]
0; JMP                                       // ROM[30902]
// ---------------------------
// ( RA )
( Cell.dispose:29) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30903]
AM = M-1                                     // ROM[30904]
D = M                                        // ROM[30905]
// ---------------------------
@ 5                                          // ROM[30906]
M = D                                        // ROM[30907]

// -------------------------------------
// LABEL: IF_FALSE0
// -------------------------------------
( Cell.dispose$IF_FALSE0 )

// -------------------------------------
// PUSH: <pointer, 0>
// -------------------------------------
@ 3                                          // ROM[30908]
D = M                                        // ROM[30909]
// ---------------------------
// push D
@ SP                                         // ROM[30910]
AM = M+1                                     // ROM[30911]
A = A-1                                      // ROM[30912]
M = D                                        // ROM[30913]

// -------------------------------------
// CALL: Memory.deAlloc(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[30914]
D = A                                        // ROM[30915]
@ R13                                        // ROM[30916]
M = D                                        // ROM[30917]
// ---------------------------
// Push RA
@ Cell.dispose:31                            // ROM[30918]
D = A                                        // ROM[30919]
// ---------------------------
// push D
@ SP                                         // ROM[30920]
AM = M+1                                     // ROM[30921]
A = A-1                                      // ROM[30922]
M = D                                        // ROM[30923]
// ---------------------------
// call
@ Cell.dispose:32                            // ROM[30924]
D = A                                        // ROM[30925]
@ R15                                        // ROM[30926]
M = D                                        // ROM[30927]
@ :call                                      // ROM[30928]
0; JMP                                       // ROM[30929]
( Cell.dispose:32)
// ---------------------------
// goto functionName
@ Memory.deAlloc                             // ROM[30930]
0; JMP                                       // ROM[30931]
// ---------------------------
// ( RA )
( Cell.dispose:31) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30932]
AM = M-1                                     // ROM[30933]
D = M                                        // ROM[30934]
// ---------------------------
@ 5                                          // ROM[30935]
M = D                                        // ROM[30936]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[30937]
D = A                                        // ROM[30938]
// ---------------------------
// push D
@ SP                                         // ROM[30939]
AM = M+1                                     // ROM[30940]
A = A-1                                      // ROM[30941]
M = D                                        // ROM[30942]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Cell.dispose:33                            // ROM[30943]
D = A                                        // ROM[30944]
@ R15                                        // ROM[30945]
M = D                                        // ROM[30946]
@ :return                                    // ROM[30947]
0; JMP                                       // ROM[30948]
( Cell.dispose:33)

// =========================================================
// FUNCTION: Cell.draw(2 locals)
// =========================================================

( Cell.draw )
// ---------------------------
// clear local segment
D = 0                                        // ROM[30949]
// ---------------------------
// push D
@ SP                                         // ROM[30950]
AM = M+1                                     // ROM[30951]
A = A-1                                      // ROM[30952]
M = D                                        // ROM[30953]
// ---------------------------
// push D
@ SP                                         // ROM[30954]
AM = M+1                                     // ROM[30955]
A = A-1                                      // ROM[30956]
M = D                                        // ROM[30957]

// -------------------------------------
// PUSH: <argument, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[30958]
D = A                                        // ROM[30959]
@ R13                                        // ROM[30960]
M = D                                        // ROM[30961]
// ---------------------------
// call
@ Cell.draw:34                               // ROM[30962]
D = A                                        // ROM[30963]
@ R15                                        // ROM[30964]
M = D                                        // ROM[30965]
@ :push_argument                             // ROM[30966]
0; JMP                                       // ROM[30967]
( Cell.draw:34)

// -------------------------------------
// POP: <pointer, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[30968]
AM = M-1                                     // ROM[30969]
D = M                                        // ROM[30970]
// ---------------------------
@ 3                                          // ROM[30971]
M = D                                        // ROM[30972]

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[30973]
D = A                                        // ROM[30974]
@ R13                                        // ROM[30975]
M = D                                        // ROM[30976]
// ---------------------------
// call
@ Cell.draw:35                               // ROM[30977]
D = A                                        // ROM[30978]
@ R15                                        // ROM[30979]
M = D                                        // ROM[30980]
@ :push_this                                 // ROM[30981]
0; JMP                                       // ROM[30982]
( Cell.draw:35)

// -------------------------------------
// CALL: Screen.setColor(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[30983]
D = A                                        // ROM[30984]
@ R13                                        // ROM[30985]
M = D                                        // ROM[30986]
// ---------------------------
// Push RA
@ Cell.draw:36                               // ROM[30987]
D = A                                        // ROM[30988]
// ---------------------------
// push D
@ SP                                         // ROM[30989]
AM = M+1                                     // ROM[30990]
A = A-1                                      // ROM[30991]
M = D                                        // ROM[30992]
// ---------------------------
// call
@ Cell.draw:37                               // ROM[30993]
D = A                                        // ROM[30994]
@ R15                                        // ROM[30995]
M = D                                        // ROM[30996]
@ :call                                      // ROM[30997]
0; JMP                                       // ROM[30998]
( Cell.draw:37)
// ---------------------------
// goto functionName
@ Screen.setColor                            // ROM[30999]
0; JMP                                       // ROM[31000]
// ---------------------------
// ( RA )
( Cell.draw:36) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[31001]
AM = M-1                                     // ROM[31002]
D = M                                        // ROM[31003]
// ---------------------------
@ 5                                          // ROM[31004]
M = D                                        // ROM[31005]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31006]
D = A                                        // ROM[31007]
@ R13                                        // ROM[31008]
M = D                                        // ROM[31009]
// ---------------------------
// call
@ Cell.draw:38                               // ROM[31010]
D = A                                        // ROM[31011]
@ R15                                        // ROM[31012]
M = D                                        // ROM[31013]
@ :push_argument                             // ROM[31014]
0; JMP                                       // ROM[31015]
( Cell.draw:38)

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[31016]
D = A                                        // ROM[31017]
// ---------------------------
// push D
@ SP                                         // ROM[31018]
AM = M+1                                     // ROM[31019]
A = A-1                                      // ROM[31020]
M = D                                        // ROM[31021]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31022]
D = A                                        // ROM[31023]
@ R13                                        // ROM[31024]
M = D                                        // ROM[31025]
// ---------------------------
// Push RA
@ Cell.draw:39                               // ROM[31026]
D = A                                        // ROM[31027]
// ---------------------------
// push D
@ SP                                         // ROM[31028]
AM = M+1                                     // ROM[31029]
A = A-1                                      // ROM[31030]
M = D                                        // ROM[31031]
// ---------------------------
// call
@ Cell.draw:40                               // ROM[31032]
D = A                                        // ROM[31033]
@ R15                                        // ROM[31034]
M = D                                        // ROM[31035]
@ :call                                      // ROM[31036]
0; JMP                                       // ROM[31037]
( Cell.draw:40)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31038]
0; JMP                                       // ROM[31039]
// ---------------------------
// ( RA )
( Cell.draw:39) 

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31040]
D = A                                        // ROM[31041]
@ R13                                        // ROM[31042]
M = D                                        // ROM[31043]
// ---------------------------
// call
@ Cell.draw:41                               // ROM[31044]
D = A                                        // ROM[31045]
@ R15                                        // ROM[31046]
M = D                                        // ROM[31047]
@ :push_this                                 // ROM[31048]
0; JMP                                       // ROM[31049]
( Cell.draw:41)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31050]
D = A                                        // ROM[31051]
@ R13                                        // ROM[31052]
M = D                                        // ROM[31053]
// ---------------------------
// Push RA
@ Cell.draw:42                               // ROM[31054]
D = A                                        // ROM[31055]
// ---------------------------
// push D
@ SP                                         // ROM[31056]
AM = M+1                                     // ROM[31057]
A = A-1                                      // ROM[31058]
M = D                                        // ROM[31059]
// ---------------------------
// call
@ Cell.draw:43                               // ROM[31060]
D = A                                        // ROM[31061]
@ R15                                        // ROM[31062]
M = D                                        // ROM[31063]
@ :call                                      // ROM[31064]
0; JMP                                       // ROM[31065]
( Cell.draw:43)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31066]
0; JMP                                       // ROM[31067]
// ---------------------------
// ( RA )
( Cell.draw:42) 

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[31068]
D = A                                        // ROM[31069]
@ R13                                        // ROM[31070]
M = D                                        // ROM[31071]
// ---------------------------
// call
@ Cell.draw:44                               // ROM[31072]
D = A                                        // ROM[31073]
@ R15                                        // ROM[31074]
M = D                                        // ROM[31075]
@ :push_argument                             // ROM[31076]
0; JMP                                       // ROM[31077]
( Cell.draw:44)

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[31078]
D = A                                        // ROM[31079]
// ---------------------------
// push D
@ SP                                         // ROM[31080]
AM = M+1                                     // ROM[31081]
A = A-1                                      // ROM[31082]
M = D                                        // ROM[31083]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31084]
D = A                                        // ROM[31085]
@ R13                                        // ROM[31086]
M = D                                        // ROM[31087]
// ---------------------------
// Push RA
@ Cell.draw:45                               // ROM[31088]
D = A                                        // ROM[31089]
// ---------------------------
// push D
@ SP                                         // ROM[31090]
AM = M+1                                     // ROM[31091]
A = A-1                                      // ROM[31092]
M = D                                        // ROM[31093]
// ---------------------------
// call
@ Cell.draw:46                               // ROM[31094]
D = A                                        // ROM[31095]
@ R15                                        // ROM[31096]
M = D                                        // ROM[31097]
@ :call                                      // ROM[31098]
0; JMP                                       // ROM[31099]
( Cell.draw:46)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31100]
0; JMP                                       // ROM[31101]
// ---------------------------
// ( RA )
( Cell.draw:45) 

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31102]
D = A                                        // ROM[31103]
@ R13                                        // ROM[31104]
M = D                                        // ROM[31105]
// ---------------------------
// call
@ Cell.draw:47                               // ROM[31106]
D = A                                        // ROM[31107]
@ R15                                        // ROM[31108]
M = D                                        // ROM[31109]
@ :push_this                                 // ROM[31110]
0; JMP                                       // ROM[31111]
( Cell.draw:47)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31112]
D = A                                        // ROM[31113]
@ R13                                        // ROM[31114]
M = D                                        // ROM[31115]
// ---------------------------
// Push RA
@ Cell.draw:48                               // ROM[31116]
D = A                                        // ROM[31117]
// ---------------------------
// push D
@ SP                                         // ROM[31118]
AM = M+1                                     // ROM[31119]
A = A-1                                      // ROM[31120]
M = D                                        // ROM[31121]
// ---------------------------
// call
@ Cell.draw:49                               // ROM[31122]
D = A                                        // ROM[31123]
@ R15                                        // ROM[31124]
M = D                                        // ROM[31125]
@ :call                                      // ROM[31126]
0; JMP                                       // ROM[31127]
( Cell.draw:49)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31128]
0; JMP                                       // ROM[31129]
// ---------------------------
// ( RA )
( Cell.draw:48) 

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31130]
D = A                                        // ROM[31131]
@ R13                                        // ROM[31132]
M = D                                        // ROM[31133]
// ---------------------------
// call
@ Cell.draw:50                               // ROM[31134]
D = A                                        // ROM[31135]
@ R15                                        // ROM[31136]
M = D                                        // ROM[31137]
@ :push_argument                             // ROM[31138]
0; JMP                                       // ROM[31139]
( Cell.draw:50)

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[31140]
D = A                                        // ROM[31141]
// ---------------------------
// push D
@ SP                                         // ROM[31142]
AM = M+1                                     // ROM[31143]
A = A-1                                      // ROM[31144]
M = D                                        // ROM[31145]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31146]
D = A                                        // ROM[31147]
@ R13                                        // ROM[31148]
M = D                                        // ROM[31149]
// ---------------------------
// Push RA
@ Cell.draw:51                               // ROM[31150]
D = A                                        // ROM[31151]
// ---------------------------
// push D
@ SP                                         // ROM[31152]
AM = M+1                                     // ROM[31153]
A = A-1                                      // ROM[31154]
M = D                                        // ROM[31155]
// ---------------------------
// call
@ Cell.draw:52                               // ROM[31156]
D = A                                        // ROM[31157]
@ R15                                        // ROM[31158]
M = D                                        // ROM[31159]
@ :call                                      // ROM[31160]
0; JMP                                       // ROM[31161]
( Cell.draw:52)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31162]
0; JMP                                       // ROM[31163]
// ---------------------------
// ( RA )
( Cell.draw:51) 

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31164]
D = A                                        // ROM[31165]
@ R13                                        // ROM[31166]
M = D                                        // ROM[31167]
// ---------------------------
// call
@ Cell.draw:53                               // ROM[31168]
D = A                                        // ROM[31169]
@ R15                                        // ROM[31170]
M = D                                        // ROM[31171]
@ :push_this                                 // ROM[31172]
0; JMP                                       // ROM[31173]
( Cell.draw:53)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[31174]
D = A                                        // ROM[31175]
// ---------------------------
// push D
@ SP                                         // ROM[31176]
AM = M+1                                     // ROM[31177]
A = A-1                                      // ROM[31178]
M = D                                        // ROM[31179]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:54                               // ROM[31180]
D = A                                        // ROM[31181]
@ R15                                        // ROM[31182]
M = D                                        // ROM[31183]
@ :add                                       // ROM[31184]
0; JMP                                       // ROM[31185]
( Cell.draw:54)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31186]
D = A                                        // ROM[31187]
@ R13                                        // ROM[31188]
M = D                                        // ROM[31189]
// ---------------------------
// Push RA
@ Cell.draw:55                               // ROM[31190]
D = A                                        // ROM[31191]
// ---------------------------
// push D
@ SP                                         // ROM[31192]
AM = M+1                                     // ROM[31193]
A = A-1                                      // ROM[31194]
M = D                                        // ROM[31195]
// ---------------------------
// call
@ Cell.draw:56                               // ROM[31196]
D = A                                        // ROM[31197]
@ R15                                        // ROM[31198]
M = D                                        // ROM[31199]
@ :call                                      // ROM[31200]
0; JMP                                       // ROM[31201]
( Cell.draw:56)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31202]
0; JMP                                       // ROM[31203]
// ---------------------------
// ( RA )
( Cell.draw:55) 

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[31204]
D = A                                        // ROM[31205]
// ---------------------------
// push D
@ SP                                         // ROM[31206]
AM = M+1                                     // ROM[31207]
A = A-1                                      // ROM[31208]
M = D                                        // ROM[31209]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:57                               // ROM[31210]
D = A                                        // ROM[31211]
@ R15                                        // ROM[31212]
M = D                                        // ROM[31213]
@ :sub                                       // ROM[31214]
0; JMP                                       // ROM[31215]
( Cell.draw:57)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[31216]
D = A                                        // ROM[31217]
@ R13                                        // ROM[31218]
M = D                                        // ROM[31219]
// ---------------------------
// call
@ Cell.draw:58                               // ROM[31220]
D = A                                        // ROM[31221]
@ R15                                        // ROM[31222]
M = D                                        // ROM[31223]
@ :push_argument                             // ROM[31224]
0; JMP                                       // ROM[31225]
( Cell.draw:58)

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[31226]
D = A                                        // ROM[31227]
// ---------------------------
// push D
@ SP                                         // ROM[31228]
AM = M+1                                     // ROM[31229]
A = A-1                                      // ROM[31230]
M = D                                        // ROM[31231]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31232]
D = A                                        // ROM[31233]
@ R13                                        // ROM[31234]
M = D                                        // ROM[31235]
// ---------------------------
// Push RA
@ Cell.draw:59                               // ROM[31236]
D = A                                        // ROM[31237]
// ---------------------------
// push D
@ SP                                         // ROM[31238]
AM = M+1                                     // ROM[31239]
A = A-1                                      // ROM[31240]
M = D                                        // ROM[31241]
// ---------------------------
// call
@ Cell.draw:60                               // ROM[31242]
D = A                                        // ROM[31243]
@ R15                                        // ROM[31244]
M = D                                        // ROM[31245]
@ :call                                      // ROM[31246]
0; JMP                                       // ROM[31247]
( Cell.draw:60)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31248]
0; JMP                                       // ROM[31249]
// ---------------------------
// ( RA )
( Cell.draw:59) 

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31250]
D = A                                        // ROM[31251]
@ R13                                        // ROM[31252]
M = D                                        // ROM[31253]
// ---------------------------
// call
@ Cell.draw:61                               // ROM[31254]
D = A                                        // ROM[31255]
@ R15                                        // ROM[31256]
M = D                                        // ROM[31257]
@ :push_this                                 // ROM[31258]
0; JMP                                       // ROM[31259]
( Cell.draw:61)

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[31260]
D = A                                        // ROM[31261]
// ---------------------------
// push D
@ SP                                         // ROM[31262]
AM = M+1                                     // ROM[31263]
A = A-1                                      // ROM[31264]
M = D                                        // ROM[31265]

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:62                               // ROM[31266]
D = A                                        // ROM[31267]
@ R15                                        // ROM[31268]
M = D                                        // ROM[31269]
@ :add                                       // ROM[31270]
0; JMP                                       // ROM[31271]
( Cell.draw:62)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31272]
D = A                                        // ROM[31273]
@ R13                                        // ROM[31274]
M = D                                        // ROM[31275]
// ---------------------------
// Push RA
@ Cell.draw:63                               // ROM[31276]
D = A                                        // ROM[31277]
// ---------------------------
// push D
@ SP                                         // ROM[31278]
AM = M+1                                     // ROM[31279]
A = A-1                                      // ROM[31280]
M = D                                        // ROM[31281]
// ---------------------------
// call
@ Cell.draw:64                               // ROM[31282]
D = A                                        // ROM[31283]
@ R15                                        // ROM[31284]
M = D                                        // ROM[31285]
@ :call                                      // ROM[31286]
0; JMP                                       // ROM[31287]
( Cell.draw:64)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31288]
0; JMP                                       // ROM[31289]
// ---------------------------
// ( RA )
( Cell.draw:63) 

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[31290]
D = A                                        // ROM[31291]
// ---------------------------
// push D
@ SP                                         // ROM[31292]
AM = M+1                                     // ROM[31293]
A = A-1                                      // ROM[31294]
M = D                                        // ROM[31295]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:65                               // ROM[31296]
D = A                                        // ROM[31297]
@ R15                                        // ROM[31298]
M = D                                        // ROM[31299]
@ :sub                                       // ROM[31300]
0; JMP                                       // ROM[31301]
( Cell.draw:65)

// -------------------------------------
// CALL: Screen.drawRectangle(4 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 4                                          // ROM[31302]
D = A                                        // ROM[31303]
@ R13                                        // ROM[31304]
M = D                                        // ROM[31305]
// ---------------------------
// Push RA
@ Cell.draw:66                               // ROM[31306]
D = A                                        // ROM[31307]
// ---------------------------
// push D
@ SP                                         // ROM[31308]
AM = M+1                                     // ROM[31309]
A = A-1                                      // ROM[31310]
M = D                                        // ROM[31311]
// ---------------------------
// call
@ Cell.draw:67                               // ROM[31312]
D = A                                        // ROM[31313]
@ R15                                        // ROM[31314]
M = D                                        // ROM[31315]
@ :call                                      // ROM[31316]
0; JMP                                       // ROM[31317]
( Cell.draw:67)
// ---------------------------
// goto functionName
@ Screen.drawRectangle                       // ROM[31318]
0; JMP                                       // ROM[31319]
// ---------------------------
// ( RA )
( Cell.draw:66) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[31320]
AM = M-1                                     // ROM[31321]
D = M                                        // ROM[31322]
// ---------------------------
@ 5                                          // ROM[31323]
M = D                                        // ROM[31324]

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[31325]
D = A                                        // ROM[31326]
@ R13                                        // ROM[31327]
M = D                                        // ROM[31328]
// ---------------------------
// call
@ Cell.draw:68                               // ROM[31329]
D = A                                        // ROM[31330]
@ R15                                        // ROM[31331]
M = D                                        // ROM[31332]
@ :push_this                                 // ROM[31333]
0; JMP                                       // ROM[31334]
( Cell.draw:68)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[31335]
A = M-1                                      // ROM[31336]
M = !M                                       // ROM[31337]

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31338]
D = A                                        // ROM[31339]
@ R13                                        // ROM[31340]
M = D                                        // ROM[31341]
// ---------------------------
// call
@ Cell.draw:69                               // ROM[31342]
D = A                                        // ROM[31343]
@ R15                                        // ROM[31344]
M = D                                        // ROM[31345]
@ :pop_local                                 // ROM[31346]
0; JMP                                       // ROM[31347]
( Cell.draw:69)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31348]
D = A                                        // ROM[31349]
@ R13                                        // ROM[31350]
M = D                                        // ROM[31351]
// ---------------------------
// call
@ Cell.draw:70                               // ROM[31352]
D = A                                        // ROM[31353]
@ R15                                        // ROM[31354]
M = D                                        // ROM[31355]
@ :push_argument                             // ROM[31356]
0; JMP                                       // ROM[31357]
( Cell.draw:70)

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[31358]
D = A                                        // ROM[31359]
// ---------------------------
// push D
@ SP                                         // ROM[31360]
AM = M+1                                     // ROM[31361]
A = A-1                                      // ROM[31362]
M = D                                        // ROM[31363]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31364]
D = A                                        // ROM[31365]
@ R13                                        // ROM[31366]
M = D                                        // ROM[31367]
// ---------------------------
// Push RA
@ Cell.draw:71                               // ROM[31368]
D = A                                        // ROM[31369]
// ---------------------------
// push D
@ SP                                         // ROM[31370]
AM = M+1                                     // ROM[31371]
A = A-1                                      // ROM[31372]
M = D                                        // ROM[31373]
// ---------------------------
// call
@ Cell.draw:72                               // ROM[31374]
D = A                                        // ROM[31375]
@ R15                                        // ROM[31376]
M = D                                        // ROM[31377]
@ :call                                      // ROM[31378]
0; JMP                                       // ROM[31379]
( Cell.draw:72)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31380]
0; JMP                                       // ROM[31381]
// ---------------------------
// ( RA )
( Cell.draw:71) 

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[31382]
D = A                                        // ROM[31383]
@ R13                                        // ROM[31384]
M = D                                        // ROM[31385]
// ---------------------------
// call
@ Cell.draw:73                               // ROM[31386]
D = A                                        // ROM[31387]
@ R15                                        // ROM[31388]
M = D                                        // ROM[31389]
@ :push_argument                             // ROM[31390]
0; JMP                                       // ROM[31391]
( Cell.draw:73)

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[31392]
D = A                                        // ROM[31393]
// ---------------------------
// push D
@ SP                                         // ROM[31394]
AM = M+1                                     // ROM[31395]
A = A-1                                      // ROM[31396]
M = D                                        // ROM[31397]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31398]
D = A                                        // ROM[31399]
@ R13                                        // ROM[31400]
M = D                                        // ROM[31401]
// ---------------------------
// Push RA
@ Cell.draw:74                               // ROM[31402]
D = A                                        // ROM[31403]
// ---------------------------
// push D
@ SP                                         // ROM[31404]
AM = M+1                                     // ROM[31405]
A = A-1                                      // ROM[31406]
M = D                                        // ROM[31407]
// ---------------------------
// call
@ Cell.draw:75                               // ROM[31408]
D = A                                        // ROM[31409]
@ R15                                        // ROM[31410]
M = D                                        // ROM[31411]
@ :call                                      // ROM[31412]
0; JMP                                       // ROM[31413]
( Cell.draw:75)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31414]
0; JMP                                       // ROM[31415]
// ---------------------------
// ( RA )
( Cell.draw:74) 

// -------------------------------------
// CALL: Math.min(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31416]
D = A                                        // ROM[31417]
@ R13                                        // ROM[31418]
M = D                                        // ROM[31419]
// ---------------------------
// Push RA
@ Cell.draw:76                               // ROM[31420]
D = A                                        // ROM[31421]
// ---------------------------
// push D
@ SP                                         // ROM[31422]
AM = M+1                                     // ROM[31423]
A = A-1                                      // ROM[31424]
M = D                                        // ROM[31425]
// ---------------------------
// call
@ Cell.draw:77                               // ROM[31426]
D = A                                        // ROM[31427]
@ R15                                        // ROM[31428]
M = D                                        // ROM[31429]
@ :call                                      // ROM[31430]
0; JMP                                       // ROM[31431]
( Cell.draw:77)
// ---------------------------
// goto functionName
@ Math.min                                   // ROM[31432]
0; JMP                                       // ROM[31433]
// ---------------------------
// ( RA )
( Cell.draw:76) 

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[31434]
D = A                                        // ROM[31435]
// ---------------------------
// push D
@ SP                                         // ROM[31436]
AM = M+1                                     // ROM[31437]
A = A-1                                      // ROM[31438]
M = D                                        // ROM[31439]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31440]
D = A                                        // ROM[31441]
@ R13                                        // ROM[31442]
M = D                                        // ROM[31443]
// ---------------------------
// Push RA
@ Cell.draw:78                               // ROM[31444]
D = A                                        // ROM[31445]
// ---------------------------
// push D
@ SP                                         // ROM[31446]
AM = M+1                                     // ROM[31447]
A = A-1                                      // ROM[31448]
M = D                                        // ROM[31449]
// ---------------------------
// call
@ Cell.draw:79                               // ROM[31450]
D = A                                        // ROM[31451]
@ R15                                        // ROM[31452]
M = D                                        // ROM[31453]
@ :call                                      // ROM[31454]
0; JMP                                       // ROM[31455]
( Cell.draw:79)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[31456]
0; JMP                                       // ROM[31457]
// ---------------------------
// ( RA )
( Cell.draw:78) 

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31458]
D = A                                        // ROM[31459]
@ R13                                        // ROM[31460]
M = D                                        // ROM[31461]
// ---------------------------
// call
@ Cell.draw:80                               // ROM[31462]
D = A                                        // ROM[31463]
@ R15                                        // ROM[31464]
M = D                                        // ROM[31465]
@ :pop_local                                 // ROM[31466]
0; JMP                                       // ROM[31467]
( Cell.draw:80)

// -------------------------------------
// LABEL: WHILE_EXP0
// -------------------------------------
( Cell.draw$WHILE_EXP0 )

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31468]
D = A                                        // ROM[31469]
@ R13                                        // ROM[31470]
M = D                                        // ROM[31471]
// ---------------------------
// call
@ Cell.draw:81                               // ROM[31472]
D = A                                        // ROM[31473]
@ R15                                        // ROM[31474]
M = D                                        // ROM[31475]
@ :push_local                                // ROM[31476]
0; JMP                                       // ROM[31477]
( Cell.draw:81)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[31478]
D = A                                        // ROM[31479]
@ R13                                        // ROM[31480]
M = D                                        // ROM[31481]
// ---------------------------
// call
@ Cell.draw:82                               // ROM[31482]
D = A                                        // ROM[31483]
@ R15                                        // ROM[31484]
M = D                                        // ROM[31485]
@ :push_argument                             // ROM[31486]
0; JMP                                       // ROM[31487]
( Cell.draw:82)

// -------------------------------------
// ARITHMETIC: gt
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:83                               // ROM[31488]
D = A                                        // ROM[31489]
@ R15                                        // ROM[31490]
M = D                                        // ROM[31491]
@ :gt                                        // ROM[31492]
0; JMP                                       // ROM[31493]
( Cell.draw:83)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31494]
D = A                                        // ROM[31495]
@ R13                                        // ROM[31496]
M = D                                        // ROM[31497]
// ---------------------------
// call
@ Cell.draw:84                               // ROM[31498]
D = A                                        // ROM[31499]
@ R15                                        // ROM[31500]
M = D                                        // ROM[31501]
@ :push_local                                // ROM[31502]
0; JMP                                       // ROM[31503]
( Cell.draw:84)

// -------------------------------------
// PUSH: <argument, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[31504]
D = A                                        // ROM[31505]
@ R13                                        // ROM[31506]
M = D                                        // ROM[31507]
// ---------------------------
// call
@ Cell.draw:85                               // ROM[31508]
D = A                                        // ROM[31509]
@ R15                                        // ROM[31510]
M = D                                        // ROM[31511]
@ :push_argument                             // ROM[31512]
0; JMP                                       // ROM[31513]
( Cell.draw:85)

// -------------------------------------
// ARITHMETIC: eq
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:86                               // ROM[31514]
D = A                                        // ROM[31515]
@ R15                                        // ROM[31516]
M = D                                        // ROM[31517]
@ :eq                                        // ROM[31518]
0; JMP                                       // ROM[31519]
( Cell.draw:86)

// -------------------------------------
// ARITHMETIC: or
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:87                               // ROM[31520]
D = A                                        // ROM[31521]
@ R15                                        // ROM[31522]
M = D                                        // ROM[31523]
@ :or                                        // ROM[31524]
0; JMP                                       // ROM[31525]
( Cell.draw:87)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[31526]
A = M-1                                      // ROM[31527]
M = !M                                       // ROM[31528]

// -------------------------------------
// IF-GOTO: WHILE_END0
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[31529]
AM = M-1                                     // ROM[31530]
D = M                                        // ROM[31531]
// ---------------------------
@ Cell.draw$WHILE_END0                       // ROM[31532]
D; JNE                                       // ROM[31533]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31534]
D = A                                        // ROM[31535]
@ R13                                        // ROM[31536]
M = D                                        // ROM[31537]
// ---------------------------
// call
@ Cell.draw:88                               // ROM[31538]
D = A                                        // ROM[31539]
@ R15                                        // ROM[31540]
M = D                                        // ROM[31541]
@ :push_local                                // ROM[31542]
0; JMP                                       // ROM[31543]
( Cell.draw:88)

// -------------------------------------
// CALL: Screen.setColor(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[31544]
D = A                                        // ROM[31545]
@ R13                                        // ROM[31546]
M = D                                        // ROM[31547]
// ---------------------------
// Push RA
@ Cell.draw:89                               // ROM[31548]
D = A                                        // ROM[31549]
// ---------------------------
// push D
@ SP                                         // ROM[31550]
AM = M+1                                     // ROM[31551]
A = A-1                                      // ROM[31552]
M = D                                        // ROM[31553]
// ---------------------------
// call
@ Cell.draw:90                               // ROM[31554]
D = A                                        // ROM[31555]
@ R15                                        // ROM[31556]
M = D                                        // ROM[31557]
@ :call                                      // ROM[31558]
0; JMP                                       // ROM[31559]
( Cell.draw:90)
// ---------------------------
// goto functionName
@ Screen.setColor                            // ROM[31560]
0; JMP                                       // ROM[31561]
// ---------------------------
// ( RA )
( Cell.draw:89) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[31562]
AM = M-1                                     // ROM[31563]
D = M                                        // ROM[31564]
// ---------------------------
@ 5                                          // ROM[31565]
M = D                                        // ROM[31566]

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31567]
D = A                                        // ROM[31568]
@ R13                                        // ROM[31569]
M = D                                        // ROM[31570]
// ---------------------------
// call
@ Cell.draw:91                               // ROM[31571]
D = A                                        // ROM[31572]
@ R15                                        // ROM[31573]
M = D                                        // ROM[31574]
@ :push_argument                             // ROM[31575]
0; JMP                                       // ROM[31576]
( Cell.draw:91)

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[31577]
D = A                                        // ROM[31578]
// ---------------------------
// push D
@ SP                                         // ROM[31579]
AM = M+1                                     // ROM[31580]
A = A-1                                      // ROM[31581]
M = D                                        // ROM[31582]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31583]
D = A                                        // ROM[31584]
@ R13                                        // ROM[31585]
M = D                                        // ROM[31586]
// ---------------------------
// Push RA
@ Cell.draw:92                               // ROM[31587]
D = A                                        // ROM[31588]
// ---------------------------
// push D
@ SP                                         // ROM[31589]
AM = M+1                                     // ROM[31590]
A = A-1                                      // ROM[31591]
M = D                                        // ROM[31592]
// ---------------------------
// call
@ Cell.draw:93                               // ROM[31593]
D = A                                        // ROM[31594]
@ R15                                        // ROM[31595]
M = D                                        // ROM[31596]
@ :call                                      // ROM[31597]
0; JMP                                       // ROM[31598]
( Cell.draw:93)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31599]
0; JMP                                       // ROM[31600]
// ---------------------------
// ( RA )
( Cell.draw:92) 

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31601]
D = A                                        // ROM[31602]
@ R13                                        // ROM[31603]
M = D                                        // ROM[31604]
// ---------------------------
// call
@ Cell.draw:94                               // ROM[31605]
D = A                                        // ROM[31606]
@ R15                                        // ROM[31607]
M = D                                        // ROM[31608]
@ :push_this                                 // ROM[31609]
0; JMP                                       // ROM[31610]
( Cell.draw:94)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31611]
D = A                                        // ROM[31612]
@ R13                                        // ROM[31613]
M = D                                        // ROM[31614]
// ---------------------------
// Push RA
@ Cell.draw:95                               // ROM[31615]
D = A                                        // ROM[31616]
// ---------------------------
// push D
@ SP                                         // ROM[31617]
AM = M+1                                     // ROM[31618]
A = A-1                                      // ROM[31619]
M = D                                        // ROM[31620]
// ---------------------------
// call
@ Cell.draw:96                               // ROM[31621]
D = A                                        // ROM[31622]
@ R15                                        // ROM[31623]
M = D                                        // ROM[31624]
@ :call                                      // ROM[31625]
0; JMP                                       // ROM[31626]
( Cell.draw:96)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31627]
0; JMP                                       // ROM[31628]
// ---------------------------
// ( RA )
( Cell.draw:95) 

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31629]
D = A                                        // ROM[31630]
@ R13                                        // ROM[31631]
M = D                                        // ROM[31632]
// ---------------------------
// call
@ Cell.draw:97                               // ROM[31633]
D = A                                        // ROM[31634]
@ R15                                        // ROM[31635]
M = D                                        // ROM[31636]
@ :push_argument                             // ROM[31637]
0; JMP                                       // ROM[31638]
( Cell.draw:97)

// -------------------------------------
// PUSH: <constant, 8>
// -------------------------------------
@ 8                                          // ROM[31639]
D = A                                        // ROM[31640]
// ---------------------------
// push D
@ SP                                         // ROM[31641]
AM = M+1                                     // ROM[31642]
A = A-1                                      // ROM[31643]
M = D                                        // ROM[31644]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31645]
D = A                                        // ROM[31646]
@ R13                                        // ROM[31647]
M = D                                        // ROM[31648]
// ---------------------------
// Push RA
@ Cell.draw:98                               // ROM[31649]
D = A                                        // ROM[31650]
// ---------------------------
// push D
@ SP                                         // ROM[31651]
AM = M+1                                     // ROM[31652]
A = A-1                                      // ROM[31653]
M = D                                        // ROM[31654]
// ---------------------------
// call
@ Cell.draw:99                               // ROM[31655]
D = A                                        // ROM[31656]
@ R15                                        // ROM[31657]
M = D                                        // ROM[31658]
@ :call                                      // ROM[31659]
0; JMP                                       // ROM[31660]
( Cell.draw:99)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31661]
0; JMP                                       // ROM[31662]
// ---------------------------
// ( RA )
( Cell.draw:98) 

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[31663]
D = A                                        // ROM[31664]
// ---------------------------
// push D
@ SP                                         // ROM[31665]
AM = M+1                                     // ROM[31666]
A = A-1                                      // ROM[31667]
M = D                                        // ROM[31668]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31669]
D = A                                        // ROM[31670]
@ R13                                        // ROM[31671]
M = D                                        // ROM[31672]
// ---------------------------
// Push RA
@ Cell.draw:100                              // ROM[31673]
D = A                                        // ROM[31674]
// ---------------------------
// push D
@ SP                                         // ROM[31675]
AM = M+1                                     // ROM[31676]
A = A-1                                      // ROM[31677]
M = D                                        // ROM[31678]
// ---------------------------
// call
@ Cell.draw:101                              // ROM[31679]
D = A                                        // ROM[31680]
@ R15                                        // ROM[31681]
M = D                                        // ROM[31682]
@ :call                                      // ROM[31683]
0; JMP                                       // ROM[31684]
( Cell.draw:101)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[31685]
0; JMP                                       // ROM[31686]
// ---------------------------
// ( RA )
( Cell.draw:100) 

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:102                              // ROM[31687]
D = A                                        // ROM[31688]
@ R15                                        // ROM[31689]
M = D                                        // ROM[31690]
@ :add                                       // ROM[31691]
0; JMP                                       // ROM[31692]
( Cell.draw:102)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[31693]
D = A                                        // ROM[31694]
@ R13                                        // ROM[31695]
M = D                                        // ROM[31696]
// ---------------------------
// call
@ Cell.draw:103                              // ROM[31697]
D = A                                        // ROM[31698]
@ R15                                        // ROM[31699]
M = D                                        // ROM[31700]
@ :push_argument                             // ROM[31701]
0; JMP                                       // ROM[31702]
( Cell.draw:103)

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[31703]
D = A                                        // ROM[31704]
// ---------------------------
// push D
@ SP                                         // ROM[31705]
AM = M+1                                     // ROM[31706]
A = A-1                                      // ROM[31707]
M = D                                        // ROM[31708]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31709]
D = A                                        // ROM[31710]
@ R13                                        // ROM[31711]
M = D                                        // ROM[31712]
// ---------------------------
// Push RA
@ Cell.draw:104                              // ROM[31713]
D = A                                        // ROM[31714]
// ---------------------------
// push D
@ SP                                         // ROM[31715]
AM = M+1                                     // ROM[31716]
A = A-1                                      // ROM[31717]
M = D                                        // ROM[31718]
// ---------------------------
// call
@ Cell.draw:105                              // ROM[31719]
D = A                                        // ROM[31720]
@ R15                                        // ROM[31721]
M = D                                        // ROM[31722]
@ :call                                      // ROM[31723]
0; JMP                                       // ROM[31724]
( Cell.draw:105)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31725]
0; JMP                                       // ROM[31726]
// ---------------------------
// ( RA )
( Cell.draw:104) 

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31727]
D = A                                        // ROM[31728]
@ R13                                        // ROM[31729]
M = D                                        // ROM[31730]
// ---------------------------
// call
@ Cell.draw:106                              // ROM[31731]
D = A                                        // ROM[31732]
@ R15                                        // ROM[31733]
M = D                                        // ROM[31734]
@ :push_this                                 // ROM[31735]
0; JMP                                       // ROM[31736]
( Cell.draw:106)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31737]
D = A                                        // ROM[31738]
@ R13                                        // ROM[31739]
M = D                                        // ROM[31740]
// ---------------------------
// Push RA
@ Cell.draw:107                              // ROM[31741]
D = A                                        // ROM[31742]
// ---------------------------
// push D
@ SP                                         // ROM[31743]
AM = M+1                                     // ROM[31744]
A = A-1                                      // ROM[31745]
M = D                                        // ROM[31746]
// ---------------------------
// call
@ Cell.draw:108                              // ROM[31747]
D = A                                        // ROM[31748]
@ R15                                        // ROM[31749]
M = D                                        // ROM[31750]
@ :call                                      // ROM[31751]
0; JMP                                       // ROM[31752]
( Cell.draw:108)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31753]
0; JMP                                       // ROM[31754]
// ---------------------------
// ( RA )
( Cell.draw:107) 

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[31755]
D = A                                        // ROM[31756]
@ R13                                        // ROM[31757]
M = D                                        // ROM[31758]
// ---------------------------
// call
@ Cell.draw:109                              // ROM[31759]
D = A                                        // ROM[31760]
@ R15                                        // ROM[31761]
M = D                                        // ROM[31762]
@ :push_argument                             // ROM[31763]
0; JMP                                       // ROM[31764]
( Cell.draw:109)

// -------------------------------------
// PUSH: <constant, 11>
// -------------------------------------
@ 11                                         // ROM[31765]
D = A                                        // ROM[31766]
// ---------------------------
// push D
@ SP                                         // ROM[31767]
AM = M+1                                     // ROM[31768]
A = A-1                                      // ROM[31769]
M = D                                        // ROM[31770]

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31771]
D = A                                        // ROM[31772]
@ R13                                        // ROM[31773]
M = D                                        // ROM[31774]
// ---------------------------
// Push RA
@ Cell.draw:110                              // ROM[31775]
D = A                                        // ROM[31776]
// ---------------------------
// push D
@ SP                                         // ROM[31777]
AM = M+1                                     // ROM[31778]
A = A-1                                      // ROM[31779]
M = D                                        // ROM[31780]
// ---------------------------
// call
@ Cell.draw:111                              // ROM[31781]
D = A                                        // ROM[31782]
@ R15                                        // ROM[31783]
M = D                                        // ROM[31784]
@ :call                                      // ROM[31785]
0; JMP                                       // ROM[31786]
( Cell.draw:111)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31787]
0; JMP                                       // ROM[31788]
// ---------------------------
// ( RA )
( Cell.draw:110) 

// -------------------------------------
// PUSH: <constant, 2>
// -------------------------------------
@ 2                                          // ROM[31789]
D = A                                        // ROM[31790]
// ---------------------------
// push D
@ SP                                         // ROM[31791]
AM = M+1                                     // ROM[31792]
A = A-1                                      // ROM[31793]
M = D                                        // ROM[31794]

// -------------------------------------
// CALL: Math.divide(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31795]
D = A                                        // ROM[31796]
@ R13                                        // ROM[31797]
M = D                                        // ROM[31798]
// ---------------------------
// Push RA
@ Cell.draw:112                              // ROM[31799]
D = A                                        // ROM[31800]
// ---------------------------
// push D
@ SP                                         // ROM[31801]
AM = M+1                                     // ROM[31802]
A = A-1                                      // ROM[31803]
M = D                                        // ROM[31804]
// ---------------------------
// call
@ Cell.draw:113                              // ROM[31805]
D = A                                        // ROM[31806]
@ R15                                        // ROM[31807]
M = D                                        // ROM[31808]
@ :call                                      // ROM[31809]
0; JMP                                       // ROM[31810]
( Cell.draw:113)
// ---------------------------
// goto functionName
@ Math.divide                                // ROM[31811]
0; JMP                                       // ROM[31812]
// ---------------------------
// ( RA )
( Cell.draw:112) 

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:114                              // ROM[31813]
D = A                                        // ROM[31814]
@ R15                                        // ROM[31815]
M = D                                        // ROM[31816]
@ :add                                       // ROM[31817]
0; JMP                                       // ROM[31818]
( Cell.draw:114)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31819]
D = A                                        // ROM[31820]
@ R13                                        // ROM[31821]
M = D                                        // ROM[31822]
// ---------------------------
// call
@ Cell.draw:115                              // ROM[31823]
D = A                                        // ROM[31824]
@ R15                                        // ROM[31825]
M = D                                        // ROM[31826]
@ :push_local                                // ROM[31827]
0; JMP                                       // ROM[31828]
( Cell.draw:115)

// -------------------------------------
// CALL: Screen.drawCircle(3 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 3                                          // ROM[31829]
D = A                                        // ROM[31830]
@ R13                                        // ROM[31831]
M = D                                        // ROM[31832]
// ---------------------------
// Push RA
@ Cell.draw:116                              // ROM[31833]
D = A                                        // ROM[31834]
// ---------------------------
// push D
@ SP                                         // ROM[31835]
AM = M+1                                     // ROM[31836]
A = A-1                                      // ROM[31837]
M = D                                        // ROM[31838]
// ---------------------------
// call
@ Cell.draw:117                              // ROM[31839]
D = A                                        // ROM[31840]
@ R15                                        // ROM[31841]
M = D                                        // ROM[31842]
@ :call                                      // ROM[31843]
0; JMP                                       // ROM[31844]
( Cell.draw:117)
// ---------------------------
// goto functionName
@ Screen.drawCircle                          // ROM[31845]
0; JMP                                       // ROM[31846]
// ---------------------------
// ( RA )
( Cell.draw:116) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[31847]
AM = M-1                                     // ROM[31848]
D = M                                        // ROM[31849]
// ---------------------------
@ 5                                          // ROM[31850]
M = D                                        // ROM[31851]

// -------------------------------------
// PUSH: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31852]
D = A                                        // ROM[31853]
@ R13                                        // ROM[31854]
M = D                                        // ROM[31855]
// ---------------------------
// call
@ Cell.draw:118                              // ROM[31856]
D = A                                        // ROM[31857]
@ R15                                        // ROM[31858]
M = D                                        // ROM[31859]
@ :push_local                                // ROM[31860]
0; JMP                                       // ROM[31861]
( Cell.draw:118)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[31862]
A = M-1                                      // ROM[31863]
M = !M                                       // ROM[31864]

// -------------------------------------
// POP: <local, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31865]
D = A                                        // ROM[31866]
@ R13                                        // ROM[31867]
M = D                                        // ROM[31868]
// ---------------------------
// call
@ Cell.draw:119                              // ROM[31869]
D = A                                        // ROM[31870]
@ R15                                        // ROM[31871]
M = D                                        // ROM[31872]
@ :pop_local                                 // ROM[31873]
0; JMP                                       // ROM[31874]
( Cell.draw:119)

// -------------------------------------
// PUSH: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31875]
D = A                                        // ROM[31876]
@ R13                                        // ROM[31877]
M = D                                        // ROM[31878]
// ---------------------------
// call
@ Cell.draw:120                              // ROM[31879]
D = A                                        // ROM[31880]
@ R15                                        // ROM[31881]
M = D                                        // ROM[31882]
@ :push_local                                // ROM[31883]
0; JMP                                       // ROM[31884]
( Cell.draw:120)

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[31885]
D = A                                        // ROM[31886]
// ---------------------------
// push D
@ SP                                         // ROM[31887]
AM = M+1                                     // ROM[31888]
A = A-1                                      // ROM[31889]
M = D                                        // ROM[31890]

// -------------------------------------
// ARITHMETIC: sub
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:121                              // ROM[31891]
D = A                                        // ROM[31892]
@ R15                                        // ROM[31893]
M = D                                        // ROM[31894]
@ :sub                                       // ROM[31895]
0; JMP                                       // ROM[31896]
( Cell.draw:121)

// -------------------------------------
// POP: <local, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31897]
D = A                                        // ROM[31898]
@ R13                                        // ROM[31899]
M = D                                        // ROM[31900]
// ---------------------------
// call
@ Cell.draw:122                              // ROM[31901]
D = A                                        // ROM[31902]
@ R15                                        // ROM[31903]
M = D                                        // ROM[31904]
@ :pop_local                                 // ROM[31905]
0; JMP                                       // ROM[31906]
( Cell.draw:122)

// -------------------------------------
// GOTO: WHILE_EXP0
// -------------------------------------
@ Cell.draw$WHILE_EXP0                       // ROM[31907]
0; JMP                                       // ROM[31908]

// -------------------------------------
// LABEL: WHILE_END0
// -------------------------------------
( Cell.draw$WHILE_END0 )

// -------------------------------------
// PUSH: <this, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[31909]
D = A                                        // ROM[31910]
@ R13                                        // ROM[31911]
M = D                                        // ROM[31912]
// ---------------------------
// call
@ Cell.draw:123                              // ROM[31913]
D = A                                        // ROM[31914]
@ R15                                        // ROM[31915]
M = D                                        // ROM[31916]
@ :push_this                                 // ROM[31917]
0; JMP                                       // ROM[31918]
( Cell.draw:123)

// -------------------------------------
// ARITHMETIC: not
// -------------------------------------
@ SP                                         // ROM[31919]
A = M-1                                      // ROM[31920]
M = !M                                       // ROM[31921]

// -------------------------------------
// CALL: Screen.setColor(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[31922]
D = A                                        // ROM[31923]
@ R13                                        // ROM[31924]
M = D                                        // ROM[31925]
// ---------------------------
// Push RA
@ Cell.draw:124                              // ROM[31926]
D = A                                        // ROM[31927]
// ---------------------------
// push D
@ SP                                         // ROM[31928]
AM = M+1                                     // ROM[31929]
A = A-1                                      // ROM[31930]
M = D                                        // ROM[31931]
// ---------------------------
// call
@ Cell.draw:125                              // ROM[31932]
D = A                                        // ROM[31933]
@ R15                                        // ROM[31934]
M = D                                        // ROM[31935]
@ :call                                      // ROM[31936]
0; JMP                                       // ROM[31937]
( Cell.draw:125)
// ---------------------------
// goto functionName
@ Screen.setColor                            // ROM[31938]
0; JMP                                       // ROM[31939]
// ---------------------------
// ( RA )
( Cell.draw:124) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[31940]
AM = M-1                                     // ROM[31941]
D = M                                        // ROM[31942]
// ---------------------------
@ 5                                          // ROM[31943]
M = D                                        // ROM[31944]

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[31945]
D = A                                        // ROM[31946]
@ R13                                        // ROM[31947]
M = D                                        // ROM[31948]
// ---------------------------
// call
@ Cell.draw:126                              // ROM[31949]
D = A                                        // ROM[31950]
@ R15                                        // ROM[31951]
M = D                                        // ROM[31952]
@ :push_this                                 // ROM[31953]
0; JMP                                       // ROM[31954]
( Cell.draw:126)

// -------------------------------------
// PUSH: <argument, 2>
// -------------------------------------
// ---------------------------
// R13 = index
@ 2                                          // ROM[31955]
D = A                                        // ROM[31956]
@ R13                                        // ROM[31957]
M = D                                        // ROM[31958]
// ---------------------------
// call
@ Cell.draw:127                              // ROM[31959]
D = A                                        // ROM[31960]
@ R15                                        // ROM[31961]
M = D                                        // ROM[31962]
@ :push_argument                             // ROM[31963]
0; JMP                                       // ROM[31964]
( Cell.draw:127)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[31965]
D = A                                        // ROM[31966]
@ R13                                        // ROM[31967]
M = D                                        // ROM[31968]
// ---------------------------
// Push RA
@ Cell.draw:128                              // ROM[31969]
D = A                                        // ROM[31970]
// ---------------------------
// push D
@ SP                                         // ROM[31971]
AM = M+1                                     // ROM[31972]
A = A-1                                      // ROM[31973]
M = D                                        // ROM[31974]
// ---------------------------
// call
@ Cell.draw:129                              // ROM[31975]
D = A                                        // ROM[31976]
@ R15                                        // ROM[31977]
M = D                                        // ROM[31978]
@ :call                                      // ROM[31979]
0; JMP                                       // ROM[31980]
( Cell.draw:129)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[31981]
0; JMP                                       // ROM[31982]
// ---------------------------
// ( RA )
( Cell.draw:128) 

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31983]
D = A                                        // ROM[31984]
@ R13                                        // ROM[31985]
M = D                                        // ROM[31986]
// ---------------------------
// call
@ Cell.draw:130                              // ROM[31987]
D = A                                        // ROM[31988]
@ R15                                        // ROM[31989]
M = D                                        // ROM[31990]
@ :push_this                                 // ROM[31991]
0; JMP                                       // ROM[31992]
( Cell.draw:130)

// -------------------------------------
// PUSH: <argument, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[31993]
D = A                                        // ROM[31994]
@ R13                                        // ROM[31995]
M = D                                        // ROM[31996]
// ---------------------------
// call
@ Cell.draw:131                              // ROM[31997]
D = A                                        // ROM[31998]
@ R15                                        // ROM[31999]
M = D                                        // ROM[32000]
@ :push_argument                             // ROM[32001]
0; JMP                                       // ROM[32002]
( Cell.draw:131)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[32003]
D = A                                        // ROM[32004]
@ R13                                        // ROM[32005]
M = D                                        // ROM[32006]
// ---------------------------
// Push RA
@ Cell.draw:132                              // ROM[32007]
D = A                                        // ROM[32008]
// ---------------------------
// push D
@ SP                                         // ROM[32009]
AM = M+1                                     // ROM[32010]
A = A-1                                      // ROM[32011]
M = D                                        // ROM[32012]
// ---------------------------
// call
@ Cell.draw:133                              // ROM[32013]
D = A                                        // ROM[32014]
@ R15                                        // ROM[32015]
M = D                                        // ROM[32016]
@ :call                                      // ROM[32017]
0; JMP                                       // ROM[32018]
( Cell.draw:133)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[32019]
0; JMP                                       // ROM[32020]
// ---------------------------
// ( RA )
( Cell.draw:132) 

// -------------------------------------
// CALL: Output.moveCursor(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[32021]
D = A                                        // ROM[32022]
@ R13                                        // ROM[32023]
M = D                                        // ROM[32024]
// ---------------------------
// Push RA
@ Cell.draw:134                              // ROM[32025]
D = A                                        // ROM[32026]
// ---------------------------
// push D
@ SP                                         // ROM[32027]
AM = M+1                                     // ROM[32028]
A = A-1                                      // ROM[32029]
M = D                                        // ROM[32030]
// ---------------------------
// call
@ Cell.draw:135                              // ROM[32031]
D = A                                        // ROM[32032]
@ R15                                        // ROM[32033]
M = D                                        // ROM[32034]
@ :call                                      // ROM[32035]
0; JMP                                       // ROM[32036]
( Cell.draw:135)
// ---------------------------
// goto functionName
@ Output.moveCursor                          // ROM[32037]
0; JMP                                       // ROM[32038]
// ---------------------------
// ( RA )
( Cell.draw:134) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[32039]
AM = M-1                                     // ROM[32040]
D = M                                        // ROM[32041]
// ---------------------------
@ 5                                          // ROM[32042]
M = D                                        // ROM[32043]

// -------------------------------------
// PUSH: <this, 3>
// -------------------------------------
// ---------------------------
// R13 = index
@ 3                                          // ROM[32044]
D = A                                        // ROM[32045]
@ R13                                        // ROM[32046]
M = D                                        // ROM[32047]
// ---------------------------
// call
@ Cell.draw:136                              // ROM[32048]
D = A                                        // ROM[32049]
@ R15                                        // ROM[32050]
M = D                                        // ROM[32051]
@ :push_this                                 // ROM[32052]
0; JMP                                       // ROM[32053]
( Cell.draw:136)

// -------------------------------------
// CALL: Output.printString(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[32054]
D = A                                        // ROM[32055]
@ R13                                        // ROM[32056]
M = D                                        // ROM[32057]
// ---------------------------
// Push RA
@ Cell.draw:137                              // ROM[32058]
D = A                                        // ROM[32059]
// ---------------------------
// push D
@ SP                                         // ROM[32060]
AM = M+1                                     // ROM[32061]
A = A-1                                      // ROM[32062]
M = D                                        // ROM[32063]
// ---------------------------
// call
@ Cell.draw:138                              // ROM[32064]
D = A                                        // ROM[32065]
@ R15                                        // ROM[32066]
M = D                                        // ROM[32067]
@ :call                                      // ROM[32068]
0; JMP                                       // ROM[32069]
( Cell.draw:138)
// ---------------------------
// goto functionName
@ Output.printString                         // ROM[32070]
0; JMP                                       // ROM[32071]
// ---------------------------
// ( RA )
( Cell.draw:137) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[32072]
AM = M-1                                     // ROM[32073]
D = M                                        // ROM[32074]
// ---------------------------
@ 5                                          // ROM[32075]
M = D                                        // ROM[32076]

// -------------------------------------
// PUSH: <constant, 10>
// -------------------------------------
@ 10                                         // ROM[32077]
D = A                                        // ROM[32078]
// ---------------------------
// push D
@ SP                                         // ROM[32079]
AM = M+1                                     // ROM[32080]
A = A-1                                      // ROM[32081]
M = D                                        // ROM[32082]

// -------------------------------------
// PUSH: <constant, 3>
// -------------------------------------
@ 3                                          // ROM[32083]
D = A                                        // ROM[32084]
// ---------------------------
// push D
@ SP                                         // ROM[32085]
AM = M+1                                     // ROM[32086]
A = A-1                                      // ROM[32087]
M = D                                        // ROM[32088]

// -------------------------------------
// PUSH: <this, 0>
// -------------------------------------
// ---------------------------
// R13 = index
@ 0                                          // ROM[32089]
D = A                                        // ROM[32090]
@ R13                                        // ROM[32091]
M = D                                        // ROM[32092]
// ---------------------------
// call
@ Cell.draw:139                              // ROM[32093]
D = A                                        // ROM[32094]
@ R15                                        // ROM[32095]
M = D                                        // ROM[32096]
@ :push_this                                 // ROM[32097]
0; JMP                                       // ROM[32098]
( Cell.draw:139)

// -------------------------------------
// CALL: Math.multiply(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[32099]
D = A                                        // ROM[32100]
@ R13                                        // ROM[32101]
M = D                                        // ROM[32102]
// ---------------------------
// Push RA
@ Cell.draw:140                              // ROM[32103]
D = A                                        // ROM[32104]
// ---------------------------
// push D
@ SP                                         // ROM[32105]
AM = M+1                                     // ROM[32106]
A = A-1                                      // ROM[32107]
M = D                                        // ROM[32108]
// ---------------------------
// call
@ Cell.draw:141                              // ROM[32109]
D = A                                        // ROM[32110]
@ R15                                        // ROM[32111]
M = D                                        // ROM[32112]
@ :call                                      // ROM[32113]
0; JMP                                       // ROM[32114]
( Cell.draw:141)
// ---------------------------
// goto functionName
@ Math.multiply                              // ROM[32115]
0; JMP                                       // ROM[32116]
// ---------------------------
// ( RA )
( Cell.draw:140) 

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:142                              // ROM[32117]
D = A                                        // ROM[32118]
@ R15                                        // ROM[32119]
M = D                                        // ROM[32120]
@ :add                                       // ROM[32121]
0; JMP                                       // ROM[32122]
( Cell.draw:142)

// -------------------------------------
// PUSH: <constant, 57>
// -------------------------------------
@ 57                                         // ROM[32123]
D = A                                        // ROM[32124]
// ---------------------------
// push D
@ SP                                         // ROM[32125]
AM = M+1                                     // ROM[32126]
A = A-1                                      // ROM[32127]
M = D                                        // ROM[32128]

// -------------------------------------
// PUSH: <this, 1>
// -------------------------------------
// ---------------------------
// R13 = index
@ 1                                          // ROM[32129]
D = A                                        // ROM[32130]
@ R13                                        // ROM[32131]
M = D                                        // ROM[32132]
// ---------------------------
// call
@ Cell.draw:143                              // ROM[32133]
D = A                                        // ROM[32134]
@ R15                                        // ROM[32135]
M = D                                        // ROM[32136]
@ :push_this                                 // ROM[32137]
0; JMP                                       // ROM[32138]
( Cell.draw:143)

// -------------------------------------
// ARITHMETIC: add
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:144                              // ROM[32139]
D = A                                        // ROM[32140]
@ R15                                        // ROM[32141]
M = D                                        // ROM[32142]
@ :add                                       // ROM[32143]
0; JMP                                       // ROM[32144]
( Cell.draw:144)

// -------------------------------------
// CALL: Output.moveCursor(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[32145]
D = A                                        // ROM[32146]
@ R13                                        // ROM[32147]
M = D                                        // ROM[32148]
// ---------------------------
// Push RA
@ Cell.draw:145                              // ROM[32149]
D = A                                        // ROM[32150]
// ---------------------------
// push D
@ SP                                         // ROM[32151]
AM = M+1                                     // ROM[32152]
A = A-1                                      // ROM[32153]
M = D                                        // ROM[32154]
// ---------------------------
// call
@ Cell.draw:146                              // ROM[32155]
D = A                                        // ROM[32156]
@ R15                                        // ROM[32157]
M = D                                        // ROM[32158]
@ :call                                      // ROM[32159]
0; JMP                                       // ROM[32160]
( Cell.draw:146)
// ---------------------------
// goto functionName
@ Output.moveCursor                          // ROM[32161]
0; JMP                                       // ROM[32162]
// ---------------------------
// ( RA )
( Cell.draw:145) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[32163]
AM = M-1                                     // ROM[32164]
D = M                                        // ROM[32165]
// ---------------------------
@ 5                                          // ROM[32166]
M = D                                        // ROM[32167]

// -------------------------------------
// PUSH: <constant, 1>
// -------------------------------------
@ 1                                          // ROM[32168]
D = A                                        // ROM[32169]
// ---------------------------
// push D
@ SP                                         // ROM[32170]
AM = M+1                                     // ROM[32171]
A = A-1                                      // ROM[32172]
M = D                                        // ROM[32173]

// -------------------------------------
// CALL: String.new(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[32174]
D = A                                        // ROM[32175]
@ R13                                        // ROM[32176]
M = D                                        // ROM[32177]
// ---------------------------
// Push RA
@ Cell.draw:147                              // ROM[32178]
D = A                                        // ROM[32179]
// ---------------------------
// push D
@ SP                                         // ROM[32180]
AM = M+1                                     // ROM[32181]
A = A-1                                      // ROM[32182]
M = D                                        // ROM[32183]
// ---------------------------
// call
@ Cell.draw:148                              // ROM[32184]
D = A                                        // ROM[32185]
@ R15                                        // ROM[32186]
M = D                                        // ROM[32187]
@ :call                                      // ROM[32188]
0; JMP                                       // ROM[32189]
( Cell.draw:148)
// ---------------------------
// goto functionName
@ String.new                                 // ROM[32190]
0; JMP                                       // ROM[32191]
// ---------------------------
// ( RA )
( Cell.draw:147) 

// -------------------------------------
// PUSH: <constant, 35>
// -------------------------------------
@ 35                                         // ROM[32192]
D = A                                        // ROM[32193]
// ---------------------------
// push D
@ SP                                         // ROM[32194]
AM = M+1                                     // ROM[32195]
A = A-1                                      // ROM[32196]
M = D                                        // ROM[32197]

// -------------------------------------
// CALL: String.appendChar(2 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 2                                          // ROM[32198]
D = A                                        // ROM[32199]
@ R13                                        // ROM[32200]
M = D                                        // ROM[32201]
// ---------------------------
// Push RA
@ Cell.draw:149                              // ROM[32202]
D = A                                        // ROM[32203]
// ---------------------------
// push D
@ SP                                         // ROM[32204]
AM = M+1                                     // ROM[32205]
A = A-1                                      // ROM[32206]
M = D                                        // ROM[32207]
// ---------------------------
// call
@ Cell.draw:150                              // ROM[32208]
D = A                                        // ROM[32209]
@ R15                                        // ROM[32210]
M = D                                        // ROM[32211]
@ :call                                      // ROM[32212]
0; JMP                                       // ROM[32213]
( Cell.draw:150)
// ---------------------------
// goto functionName
@ String.appendChar                          // ROM[32214]
0; JMP                                       // ROM[32215]
// ---------------------------
// ( RA )
( Cell.draw:149) 

// -------------------------------------
// CALL: Output.printString(1 args)
// -------------------------------------
// ---------------------------
// R13 = nArgs
@ 1                                          // ROM[32216]
D = A                                        // ROM[32217]
@ R13                                        // ROM[32218]
M = D                                        // ROM[32219]
// ---------------------------
// Push RA
@ Cell.draw:151                              // ROM[32220]
D = A                                        // ROM[32221]
// ---------------------------
// push D
@ SP                                         // ROM[32222]
AM = M+1                                     // ROM[32223]
A = A-1                                      // ROM[32224]
M = D                                        // ROM[32225]
// ---------------------------
// call
@ Cell.draw:152                              // ROM[32226]
D = A                                        // ROM[32227]
@ R15                                        // ROM[32228]
M = D                                        // ROM[32229]
@ :call                                      // ROM[32230]
0; JMP                                       // ROM[32231]
( Cell.draw:152)
// ---------------------------
// goto functionName
@ Output.printString                         // ROM[32232]
0; JMP                                       // ROM[32233]
// ---------------------------
// ( RA )
( Cell.draw:151) 

// -------------------------------------
// POP: <temp, 0>
// -------------------------------------
// ---------------------------
// pop D
@ SP                                         // ROM[32234]
AM = M-1                                     // ROM[32235]
D = M                                        // ROM[32236]
// ---------------------------
@ 5                                          // ROM[32237]
M = D                                        // ROM[32238]

// -------------------------------------
// PUSH: <constant, 0>
// -------------------------------------
@ 0                                          // ROM[32239]
D = A                                        // ROM[32240]
// ---------------------------
// push D
@ SP                                         // ROM[32241]
AM = M+1                                     // ROM[32242]
A = A-1                                      // ROM[32243]
M = D                                        // ROM[32244]

// -------------------------------------
// RETURN: 
// -------------------------------------
// ---------------------------
// call
@ Cell.draw:153                              // ROM[32245]
D = A                                        // ROM[32246]
@ R15                                        // ROM[32247]
M = D                                        // ROM[32248]
@ :return                                    // ROM[32249]
0; JMP                                       // ROM[32250]
( Cell.draw:153)

// =========================================================
// SUBROUTINES: PUSH
// =========================================================


// =========================================================
// SUBROUTINE: push_local
// =========================================================

( :push_local )
// ---------------------------
// R13 = &segment[N] = segment+N
@ R13                                        // ROM[32251]
D = M                                        // ROM[32252]
@ LCL                                        // ROM[32253]
A = M                                        // ROM[32254]
D = D+A                                      // ROM[32255]
@ R13                                        // ROM[32256]
M = D                                        // ROM[32257]
// ---------------------------
// D = *R13
@ R13                                        // ROM[32258]
A = M                                        // ROM[32259]
D = M                                        // ROM[32260]
// ---------------------------
// push D
@ SP                                         // ROM[32261]
AM = M+1                                     // ROM[32262]
A = A-1                                      // ROM[32263]
M = D                                        // ROM[32264]
// ---------------------------
// return
@ R15                                        // ROM[32265]
A = M                                        // ROM[32266]
0; JMP                                       // ROM[32267]

// =========================================================
// SUBROUTINE: push_argument
// =========================================================

( :push_argument )
// ---------------------------
// R13 = &segment[N] = segment+N
@ R13                                        // ROM[32268]
D = M                                        // ROM[32269]
@ ARG                                        // ROM[32270]
A = M                                        // ROM[32271]
D = D+A                                      // ROM[32272]
@ R13                                        // ROM[32273]
M = D                                        // ROM[32274]
// ---------------------------
// D = *R13
@ R13                                        // ROM[32275]
A = M                                        // ROM[32276]
D = M                                        // ROM[32277]
// ---------------------------
// push D
@ SP                                         // ROM[32278]
AM = M+1                                     // ROM[32279]
A = A-1                                      // ROM[32280]
M = D                                        // ROM[32281]
// ---------------------------
// return
@ R15                                        // ROM[32282]
A = M                                        // ROM[32283]
0; JMP                                       // ROM[32284]

// =========================================================
// SUBROUTINE: push_this
// =========================================================

( :push_this )
// ---------------------------
// R13 = &segment[N] = segment+N
@ R13                                        // ROM[32285]
D = M                                        // ROM[32286]
@ THIS                                       // ROM[32287]
A = M                                        // ROM[32288]
D = D+A                                      // ROM[32289]
@ R13                                        // ROM[32290]
M = D                                        // ROM[32291]
// ---------------------------
// D = *R13
@ R13                                        // ROM[32292]
A = M                                        // ROM[32293]
D = M                                        // ROM[32294]
// ---------------------------
// push D
@ SP                                         // ROM[32295]
AM = M+1                                     // ROM[32296]
A = A-1                                      // ROM[32297]
M = D                                        // ROM[32298]
// ---------------------------
// return
@ R15                                        // ROM[32299]
A = M                                        // ROM[32300]
0; JMP                                       // ROM[32301]

// =========================================================
// SUBROUTINE: push_that
// =========================================================

( :push_that )
// ---------------------------
// R13 = &segment[N] = segment+N
@ R13                                        // ROM[32302]
D = M                                        // ROM[32303]
@ THAT                                       // ROM[32304]
A = M                                        // ROM[32305]
D = D+A                                      // ROM[32306]
@ R13                                        // ROM[32307]
M = D                                        // ROM[32308]
// ---------------------------
// D = *R13
@ R13                                        // ROM[32309]
A = M                                        // ROM[32310]
D = M                                        // ROM[32311]
// ---------------------------
// push D
@ SP                                         // ROM[32312]
AM = M+1                                     // ROM[32313]
A = A-1                                      // ROM[32314]
M = D                                        // ROM[32315]
// ---------------------------
// return
@ R15                                        // ROM[32316]
A = M                                        // ROM[32317]
0; JMP                                       // ROM[32318]

// =========================================================
// SUBROUTINES: POP
// =========================================================


// =========================================================
// SUBROUTINE: pop_local
// =========================================================

( :pop_local )
// ---------------------------
// pop D
@ SP                                         // ROM[32319]
AM = M-1                                     // ROM[32320]
D = M                                        // ROM[32321]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32322]
M = D                                        // ROM[32323]
// ---------------------------
// R13 = &segment[N] = segment+N
@ R13                                        // ROM[32324]
D = M                                        // ROM[32325]
@ LCL                                        // ROM[32326]
A = M                                        // ROM[32327]
D = D+A                                      // ROM[32328]
@ R13                                        // ROM[32329]
M = D                                        // ROM[32330]
// ---------------------------
// D = R14
@ R14                                        // ROM[32331]
D = M                                        // ROM[32332]
// ---------------------------
// *R13 = D
@ R13                                        // ROM[32333]
A = M                                        // ROM[32334]
M = D                                        // ROM[32335]
// ---------------------------
// return
@ R15                                        // ROM[32336]
A = M                                        // ROM[32337]
0; JMP                                       // ROM[32338]

// =========================================================
// SUBROUTINE: pop_argument
// =========================================================

( :pop_argument )
// ---------------------------
// pop D
@ SP                                         // ROM[32339]
AM = M-1                                     // ROM[32340]
D = M                                        // ROM[32341]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32342]
M = D                                        // ROM[32343]
// ---------------------------
// R13 = &segment[N] = segment+N
@ R13                                        // ROM[32344]
D = M                                        // ROM[32345]
@ ARG                                        // ROM[32346]
A = M                                        // ROM[32347]
D = D+A                                      // ROM[32348]
@ R13                                        // ROM[32349]
M = D                                        // ROM[32350]
// ---------------------------
// D = R14
@ R14                                        // ROM[32351]
D = M                                        // ROM[32352]
// ---------------------------
// *R13 = D
@ R13                                        // ROM[32353]
A = M                                        // ROM[32354]
M = D                                        // ROM[32355]
// ---------------------------
// return
@ R15                                        // ROM[32356]
A = M                                        // ROM[32357]
0; JMP                                       // ROM[32358]

// =========================================================
// SUBROUTINE: pop_this
// =========================================================

( :pop_this )
// ---------------------------
// pop D
@ SP                                         // ROM[32359]
AM = M-1                                     // ROM[32360]
D = M                                        // ROM[32361]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32362]
M = D                                        // ROM[32363]
// ---------------------------
// R13 = &segment[N] = segment+N
@ R13                                        // ROM[32364]
D = M                                        // ROM[32365]
@ THIS                                       // ROM[32366]
A = M                                        // ROM[32367]
D = D+A                                      // ROM[32368]
@ R13                                        // ROM[32369]
M = D                                        // ROM[32370]
// ---------------------------
// D = R14
@ R14                                        // ROM[32371]
D = M                                        // ROM[32372]
// ---------------------------
// *R13 = D
@ R13                                        // ROM[32373]
A = M                                        // ROM[32374]
M = D                                        // ROM[32375]
// ---------------------------
// return
@ R15                                        // ROM[32376]
A = M                                        // ROM[32377]
0; JMP                                       // ROM[32378]

// =========================================================
// SUBROUTINE: pop_that
// =========================================================

( :pop_that )
// ---------------------------
// pop D
@ SP                                         // ROM[32379]
AM = M-1                                     // ROM[32380]
D = M                                        // ROM[32381]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32382]
M = D                                        // ROM[32383]
// ---------------------------
// R13 = &segment[N] = segment+N
@ R13                                        // ROM[32384]
D = M                                        // ROM[32385]
@ THAT                                       // ROM[32386]
A = M                                        // ROM[32387]
D = D+A                                      // ROM[32388]
@ R13                                        // ROM[32389]
M = D                                        // ROM[32390]
// ---------------------------
// D = R14
@ R14                                        // ROM[32391]
D = M                                        // ROM[32392]
// ---------------------------
// *R13 = D
@ R13                                        // ROM[32393]
A = M                                        // ROM[32394]
M = D                                        // ROM[32395]
// ---------------------------
// return
@ R15                                        // ROM[32396]
A = M                                        // ROM[32397]
0; JMP                                       // ROM[32398]

// =========================================================
// SUBROUTINES: ARITHMETIC
// =========================================================


// =========================================================
// SUBROUTINE: add
// =========================================================

( :add )
// ---------------------------
// pop D
@ SP                                         // ROM[32399]
AM = M-1                                     // ROM[32400]
D = M                                        // ROM[32401]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32402]
M = D                                        // ROM[32403]
// ---------------------------
// pop D
@ SP                                         // ROM[32404]
AM = M-1                                     // ROM[32405]
D = M                                        // ROM[32406]
// ---------------------------
// D += R14
@ R14                                        // ROM[32407]
D = D+M                                      // ROM[32408]
// ---------------------------
// push D
@ SP                                         // ROM[32409]
AM = M+1                                     // ROM[32410]
A = A-1                                      // ROM[32411]
M = D                                        // ROM[32412]
// ---------------------------
// return
@ R15                                        // ROM[32413]
A = M                                        // ROM[32414]
0; JMP                                       // ROM[32415]

// =========================================================
// SUBROUTINE: sub
// =========================================================

( :sub )
// ---------------------------
// pop D
@ SP                                         // ROM[32416]
AM = M-1                                     // ROM[32417]
D = M                                        // ROM[32418]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32419]
M = D                                        // ROM[32420]
// ---------------------------
// pop D
@ SP                                         // ROM[32421]
AM = M-1                                     // ROM[32422]
D = M                                        // ROM[32423]
// ---------------------------
// D -= R14
@ R14                                        // ROM[32424]
D = D-M                                      // ROM[32425]
// ---------------------------
// push D
@ SP                                         // ROM[32426]
AM = M+1                                     // ROM[32427]
A = A-1                                      // ROM[32428]
M = D                                        // ROM[32429]
// ---------------------------
// return
@ R15                                        // ROM[32430]
A = M                                        // ROM[32431]
0; JMP                                       // ROM[32432]

// =========================================================
// SUBROUTINE: neg
// =========================================================

( :neg )
@ SP                                         // ROM[32433]
A = M-1                                      // ROM[32434]
M = -M                                       // ROM[32435]
// ---------------------------
// return
@ R15                                        // ROM[32436]
A = M                                        // ROM[32437]
0; JMP                                       // ROM[32438]

// =========================================================
// SUBROUTINE: eq
// =========================================================

( :eq )
// ---------------------------
// pop D
@ SP                                         // ROM[32439]
AM = M-1                                     // ROM[32440]
D = M                                        // ROM[32441]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32442]
M = D                                        // ROM[32443]
// ---------------------------
// pop D
@ SP                                         // ROM[32444]
AM = M-1                                     // ROM[32445]
D = M                                        // ROM[32446]
// ---------------------------
// D -= R14
@ R14                                        // ROM[32447]
D = D-M                                      // ROM[32448]
// ---------------------------
// D == 0
@ Cell.draw:154                              // ROM[32449]
D; JEQ                                       // ROM[32450]
D = 0                                        // ROM[32451]
@ Cell.draw:155                              // ROM[32452]
0; JMP                                       // ROM[32453]
(Cell.draw:154)
D = -1                                       // ROM[32454]
(Cell.draw:155)
// ---------------------------
// push D
@ SP                                         // ROM[32455]
AM = M+1                                     // ROM[32456]
A = A-1                                      // ROM[32457]
M = D                                        // ROM[32458]
// ---------------------------
// return
@ R15                                        // ROM[32459]
A = M                                        // ROM[32460]
0; JMP                                       // ROM[32461]

// =========================================================
// SUBROUTINE: lt
// =========================================================

( :lt )
// ---------------------------
// pop D
@ SP                                         // ROM[32462]
AM = M-1                                     // ROM[32463]
D = M                                        // ROM[32464]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32465]
M = D                                        // ROM[32466]
// ---------------------------
// pop D
@ SP                                         // ROM[32467]
AM = M-1                                     // ROM[32468]
D = M                                        // ROM[32469]
// ---------------------------
// D -= R14
@ R14                                        // ROM[32470]
D = D-M                                      // ROM[32471]
// ---------------------------
// D == 0
@ Cell.draw:156                              // ROM[32472]
D; JLT                                       // ROM[32473]
D = 0                                        // ROM[32474]
@ Cell.draw:157                              // ROM[32475]
0; JMP                                       // ROM[32476]
(Cell.draw:156)
D = -1                                       // ROM[32477]
(Cell.draw:157)
// ---------------------------
// push D
@ SP                                         // ROM[32478]
AM = M+1                                     // ROM[32479]
A = A-1                                      // ROM[32480]
M = D                                        // ROM[32481]
// ---------------------------
// return
@ R15                                        // ROM[32482]
A = M                                        // ROM[32483]
0; JMP                                       // ROM[32484]

// =========================================================
// SUBROUTINE: gt
// =========================================================

( :gt )
// ---------------------------
// pop D
@ SP                                         // ROM[32485]
AM = M-1                                     // ROM[32486]
D = M                                        // ROM[32487]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32488]
M = D                                        // ROM[32489]
// ---------------------------
// pop D
@ SP                                         // ROM[32490]
AM = M-1                                     // ROM[32491]
D = M                                        // ROM[32492]
// ---------------------------
// D -= R14
@ R14                                        // ROM[32493]
D = D-M                                      // ROM[32494]
// ---------------------------
// D == 0
@ Cell.draw:158                              // ROM[32495]
D; JGT                                       // ROM[32496]
D = 0                                        // ROM[32497]
@ Cell.draw:159                              // ROM[32498]
0; JMP                                       // ROM[32499]
(Cell.draw:158)
D = -1                                       // ROM[32500]
(Cell.draw:159)
// ---------------------------
// push D
@ SP                                         // ROM[32501]
AM = M+1                                     // ROM[32502]
A = A-1                                      // ROM[32503]
M = D                                        // ROM[32504]
// ---------------------------
// return
@ R15                                        // ROM[32505]
A = M                                        // ROM[32506]
0; JMP                                       // ROM[32507]

// =========================================================
// SUBROUTINE: and
// =========================================================

( :and )
// ---------------------------
// pop D
@ SP                                         // ROM[32508]
AM = M-1                                     // ROM[32509]
D = M                                        // ROM[32510]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32511]
M = D                                        // ROM[32512]
// ---------------------------
// pop D
@ SP                                         // ROM[32513]
AM = M-1                                     // ROM[32514]
D = M                                        // ROM[32515]
// ---------------------------
// D &= R14
@ R14                                        // ROM[32516]
D = D&M                                      // ROM[32517]
// ---------------------------
// push D
@ SP                                         // ROM[32518]
AM = M+1                                     // ROM[32519]
A = A-1                                      // ROM[32520]
M = D                                        // ROM[32521]
// ---------------------------
// return
@ R15                                        // ROM[32522]
A = M                                        // ROM[32523]
0; JMP                                       // ROM[32524]

// =========================================================
// SUBROUTINE: or
// =========================================================

( :or )
// ---------------------------
// pop D
@ SP                                         // ROM[32525]
AM = M-1                                     // ROM[32526]
D = M                                        // ROM[32527]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32528]
M = D                                        // ROM[32529]
// ---------------------------
// pop D
@ SP                                         // ROM[32530]
AM = M-1                                     // ROM[32531]
D = M                                        // ROM[32532]
// ---------------------------
// D |= R14
@ R14                                        // ROM[32533]
D = D|M                                      // ROM[32534]
// ---------------------------
// push D
@ SP                                         // ROM[32535]
AM = M+1                                     // ROM[32536]
A = A-1                                      // ROM[32537]
M = D                                        // ROM[32538]
// ---------------------------
// return
@ R15                                        // ROM[32539]
A = M                                        // ROM[32540]
0; JMP                                       // ROM[32541]

// =========================================================
// SUBROUTINE: not
// =========================================================

( :not )
@ SP                                         // ROM[32542]
A = M-1                                      // ROM[32543]
M = !M                                       // ROM[32544]
// ---------------------------
// return
@ R15                                        // ROM[32545]
A = M                                        // ROM[32546]
0; JMP                                       // ROM[32547]

// =========================================================
// SUBROUTINES: PROGRAM FLOW
// =========================================================


// =========================================================
// SUBROUTINES: FUNCTION CALLING
// =========================================================


// =========================================================
// SUBROUTINE: call
// =========================================================

( :call )
// ---------------------------
// push LCL
@ LCL                                        // ROM[32548]
D = M                                        // ROM[32549]
// ---------------------------
// push D
@ SP                                         // ROM[32550]
AM = M+1                                     // ROM[32551]
A = A-1                                      // ROM[32552]
M = D                                        // ROM[32553]
// ---------------------------
// push ARG
@ ARG                                        // ROM[32554]
D = M                                        // ROM[32555]
// ---------------------------
// push D
@ SP                                         // ROM[32556]
AM = M+1                                     // ROM[32557]
A = A-1                                      // ROM[32558]
M = D                                        // ROM[32559]
// ---------------------------
// push THIS
@ THIS                                       // ROM[32560]
D = M                                        // ROM[32561]
// ---------------------------
// push D
@ SP                                         // ROM[32562]
AM = M+1                                     // ROM[32563]
A = A-1                                      // ROM[32564]
M = D                                        // ROM[32565]
// ---------------------------
// push THAT
@ THAT                                       // ROM[32566]
D = M                                        // ROM[32567]
// ---------------------------
// push D
@ SP                                         // ROM[32568]
AM = M+1                                     // ROM[32569]
A = A-1                                      // ROM[32570]
M = D                                        // ROM[32571]
// ---------------------------
// push SP
@ SP                                         // ROM[32572]
D = M                                        // ROM[32573]
// ---------------------------
// push D
@ SP                                         // ROM[32574]
AM = M+1                                     // ROM[32575]
A = A-1                                      // ROM[32576]
M = D                                        // ROM[32577]
// ---------------------------
// push nArgs
@ R13                                        // ROM[32578]
A = M                                        // ROM[32579]
D = A                                        // ROM[32580]
// ---------------------------
// push D
@ SP                                         // ROM[32581]
AM = M+1                                     // ROM[32582]
A = A-1                                      // ROM[32583]
M = D                                        // ROM[32584]
// ---------------------------
// sub
// ---------------------------
// pop D
@ SP                                         // ROM[32585]
AM = M-1                                     // ROM[32586]
D = M                                        // ROM[32587]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32588]
M = D                                        // ROM[32589]
// ---------------------------
// pop D
@ SP                                         // ROM[32590]
AM = M-1                                     // ROM[32591]
D = M                                        // ROM[32592]
// ---------------------------
// D -= R14
@ R14                                        // ROM[32593]
D = D-M                                      // ROM[32594]
// ---------------------------
// push D
@ SP                                         // ROM[32595]
AM = M+1                                     // ROM[32596]
A = A-1                                      // ROM[32597]
M = D                                        // ROM[32598]
// ---------------------------
// push constant 5
@ 5                                          // ROM[32599]
D = A                                        // ROM[32600]
// ---------------------------
// push D
@ SP                                         // ROM[32601]
AM = M+1                                     // ROM[32602]
A = A-1                                      // ROM[32603]
M = D                                        // ROM[32604]
// ---------------------------
// sub
// ---------------------------
// pop D
@ SP                                         // ROM[32605]
AM = M-1                                     // ROM[32606]
D = M                                        // ROM[32607]
// ---------------------------
// R14 = D
@ R14                                        // ROM[32608]
M = D                                        // ROM[32609]
// ---------------------------
// pop D
@ SP                                         // ROM[32610]
AM = M-1                                     // ROM[32611]
D = M                                        // ROM[32612]
// ---------------------------
// D -= R14
@ R14                                        // ROM[32613]
D = D-M                                      // ROM[32614]
// ---------------------------
// push D
@ SP                                         // ROM[32615]
AM = M+1                                     // ROM[32616]
A = A-1                                      // ROM[32617]
M = D                                        // ROM[32618]
// ---------------------------
// pop ARG
// ---------------------------
// pop D
@ SP                                         // ROM[32619]
AM = M-1                                     // ROM[32620]
D = M                                        // ROM[32621]
@ ARG                                        // ROM[32622]
M = D                                        // ROM[32623]
// ---------------------------
// push SP
@ SP                                         // ROM[32624]
D = M                                        // ROM[32625]
// ---------------------------
// push D
@ SP                                         // ROM[32626]
AM = M+1                                     // ROM[32627]
A = A-1                                      // ROM[32628]
M = D                                        // ROM[32629]
// ---------------------------
// pop LCL
// ---------------------------
// pop D
@ SP                                         // ROM[32630]
AM = M-1                                     // ROM[32631]
D = M                                        // ROM[32632]
@ LCL                                        // ROM[32633]
M = D                                        // ROM[32634]
// ---------------------------
// return
@ R15                                        // ROM[32635]
A = M                                        // ROM[32636]
0; JMP                                       // ROM[32637]

// =========================================================
// SUBROUTINE: return
// =========================================================

( :return )
// ---------------------------
// FRAME = LCL
@ LCL                                        // ROM[32638]
D = M                                        // ROM[32639]
@ R14                                        // ROM[32640]
M = D                                        // ROM[32641]
// ---------------------------
// RA = *(FRAME-5)
@ 5                                          // ROM[32642]
D = A                                        // ROM[32643]
@ R14                                        // ROM[32644]
A = M                                        // ROM[32645]
A = A-D                                      // ROM[32646]
D = M                                        // ROM[32647]
@ R13                                        // ROM[32648]
M = D                                        // ROM[32649]
// ---------------------------
// *ARG = pop()
// ---------------------------
// pop D
@ SP                                         // ROM[32650]
AM = M-1                                     // ROM[32651]
D = M                                        // ROM[32652]
@ ARG                                        // ROM[32653]
A = M                                        // ROM[32654]
M = D                                        // ROM[32655]
// ---------------------------
// SP = ARG+1
@ ARG                                        // ROM[32656]
D = M                                        // ROM[32657]
D = D+1                                      // ROM[32658]
@ SP                                         // ROM[32659]
M = D                                        // ROM[32660]
// ---------------------------
// THAT = *(FRAME-1)
@ 1                                          // ROM[32661]
D = A                                        // ROM[32662]
@ R14                                        // ROM[32663]
A = M                                        // ROM[32664]
A = A-D                                      // ROM[32665]
D = M                                        // ROM[32666]
@ THAT                                       // ROM[32667]
M = D                                        // ROM[32668]
// ---------------------------
// THIS = *(FRAME-2)
@ 2                                          // ROM[32669]
D = A                                        // ROM[32670]
@ R14                                        // ROM[32671]
A = M                                        // ROM[32672]
A = A-D                                      // ROM[32673]
D = M                                        // ROM[32674]
@ THIS                                       // ROM[32675]
M = D                                        // ROM[32676]
// ---------------------------
// ARG = *(FRAME-3)
@ 3                                          // ROM[32677]
D = A                                        // ROM[32678]
@ R14                                        // ROM[32679]
A = M                                        // ROM[32680]
A = A-D                                      // ROM[32681]
D = M                                        // ROM[32682]
@ ARG                                        // ROM[32683]
M = D                                        // ROM[32684]
// ---------------------------
// LCL = *(FRAME-4)
@ 4                                          // ROM[32685]
D = A                                        // ROM[32686]
@ R14                                        // ROM[32687]
A = M                                        // ROM[32688]
A = A-D                                      // ROM[32689]
D = M                                        // ROM[32690]
@ LCL                                        // ROM[32691]
M = D                                        // ROM[32692]
// ---------------------------
// goto RET
@ R13                                        // ROM[32693]
A = M                                        // ROM[32694]
0; JMP                                       // ROM[32695]
// ---------------------------
// return
@ R15                                        // ROM[32696]
A = M                                        // ROM[32697]
0; JMP                                       // ROM[32698]
