import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
export declare type JobScope = 'created' | 'pending' | 'running' | 'failed' | 'success' | 'canceled' | 'skipped' | 'manual';
export declare class Jobs extends BaseService {
    all(projectId: string | number, options?: PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    cancel(projectId: string | number, jobId: number, options?: Sudo): Promise<object>;
    downloadSingleArtifactFile(projectId: string | number, jobId: number, artifactPath: string, { stream, ...options }: {
        stream?: boolean;
    } & BaseRequestOptions): any;
    downloadSingleArtifactFileFromRef(projectId: string | number, ref: string, artifactPath: string, name: string, { stream, ...options }: {
        stream?: boolean;
    } & BaseRequestOptions): any;
    downloadLatestArtifactFile(projectId: string | number, ref: string, name: string, { stream, ...options }: {
        stream?: boolean;
    } & BaseRequestOptions): any;
    downloadTraceFile(projectId: string | number, jobId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    erase(projectId: string | number, jobId: number, options?: Sudo): Promise<object>;
    eraseArtifacts(projectId: string | number, jobId: number, options?: Sudo): Promise<object>;
    keepArtifacts(projectId: string | number, jobId: number, options?: Sudo): Promise<object>;
    play(projectId: string | number, jobId: number, options?: Sudo): Promise<object>;
    retry(projectId: string | number, jobId: number, options?: Sudo): Promise<object>;
    show(projectId: string | number, jobId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    showPipelineJobs(projectId: string | number, pipelineId: number, options: {
        scope: JobScope;
    } & Sudo): Promise<import("../infrastructure").GetResponse>;
}
