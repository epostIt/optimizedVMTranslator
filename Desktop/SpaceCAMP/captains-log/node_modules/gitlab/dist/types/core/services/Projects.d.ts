import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { EventOptions } from './Events';
import { UploadMetadata } from './ProjectImportExport';
export declare class Projects extends BaseService {
    all(options?: PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    archive(projectId: string | number, options?: Sudo): Promise<object>;
    create({ userId, ...options }: {
        userId?: number;
    } & BaseRequestOptions): Promise<object>;
    edit(projectId: string | number, options?: BaseRequestOptions): Promise<object>;
    events(projectId: string | number, options?: BaseRequestOptions & EventOptions): Promise<import("../infrastructure").GetResponse>;
    fork(projectId: string | number, { forkedFromId, ...options }?: {
        forkedFromId?: number;
    } & BaseRequestOptions): Promise<object>;
    forks(projectId: string | number, options?: BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    languages(projectId: string | number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    mirrorPull(projectId: string | number, options?: Sudo): Promise<object>;
    remove(projectId: string | number, options?: Sudo): Promise<object>;
    removeFork(projectId: string | number, options?: Sudo): Promise<object>;
    search(projectName: string): Promise<import("../infrastructure").GetResponse>;
    share(projectId: string | number, groupId: string | number, groupAccess: number, options?: BaseRequestOptions): Promise<object>;
    show(projectId: string | number, options?: BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    star(projectId: string | number, options?: Sudo): Promise<object>;
    statuses(projectId: string | number, sha: string, state: string, options?: BaseRequestOptions): Promise<object>;
    transfer(projectId: string | number, namespaceId: string | number): Promise<object>;
    unarchive(projectId: string | number, options?: Sudo): Promise<object>;
    unshare(projectId: string | number, groupId: string | number, options?: Sudo): Promise<object>;
    unstar(projectId: string | number, options?: Sudo): Promise<object>;
    updatePushRule(projectId: string | number, options?: BaseRequestOptions): Promise<object>;
    upload(projectId: any, content: any, { metadata, sudo }?: {
        metadata?: UploadMetadata;
    } & Sudo): Promise<object>;
}
